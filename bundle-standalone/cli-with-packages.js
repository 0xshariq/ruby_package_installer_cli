#!/usr/bin/env node
import { fileURLToPath } from 'url';
globalThis.fileURLToPath = fileURLToPath;

import { createRequire as __WEBPACK_EXTERNAL_createRequire } from "node:module";
const __WEBPACK_EXTERNAL_createRequire_require = __WEBPACK_EXTERNAL_createRequire(import.meta.url);
/******/ var __webpack_modules__ = ({

/***/ 12:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const u = (__webpack_require__(8556).fromPromise)
const path = __webpack_require__(6928)
const fs = __webpack_require__(6903)
const mkdir = __webpack_require__(4544)
const { pathExists } = __webpack_require__(802)
const { areIdentical } = __webpack_require__(1560)

async function createLink (srcpath, dstpath) {
  let dstStat
  try {
    dstStat = await fs.lstat(dstpath)
  } catch {
    // ignore error
  }

  let srcStat
  try {
    srcStat = await fs.lstat(srcpath)
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink')
    throw err
  }

  if (dstStat && areIdentical(srcStat, dstStat)) return

  const dir = path.dirname(dstpath)

  const dirExists = await pathExists(dir)

  if (!dirExists) {
    await mkdir.mkdirs(dir)
  }

  await fs.link(srcpath, dstpath)
}

function createLinkSync (srcpath, dstpath) {
  let dstStat
  try {
    dstStat = fs.lstatSync(dstpath)
  } catch {}

  try {
    const srcStat = fs.lstatSync(srcpath)
    if (dstStat && areIdentical(srcStat, dstStat)) return
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink')
    throw err
  }

  const dir = path.dirname(dstpath)
  const dirExists = fs.existsSync(dir)
  if (dirExists) return fs.linkSync(srcpath, dstpath)
  mkdir.mkdirsSync(dir)

  return fs.linkSync(srcpath, dstpath)
}

module.exports = {
  createLink: u(createLink),
  createLinkSync
}


/***/ }),

/***/ 30:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scheduleReadableStreamLike = void 0;
var scheduleAsyncIterable_1 = __webpack_require__(7791);
var isReadableStreamLike_1 = __webpack_require__(9856);
function scheduleReadableStreamLike(input, scheduler) {
    return scheduleAsyncIterable_1.scheduleAsyncIterable(isReadableStreamLike_1.readableStreamLikeToAsyncGenerator(input), scheduler);
}
exports.scheduleReadableStreamLike = scheduleReadableStreamLike;
//# sourceMappingURL=scheduleReadableStreamLike.js.map

/***/ }),

/***/ 32:
/***/ ((module, exports, __webpack_require__) => {



const {
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_LENGTH,
} = __webpack_require__(4335)
const debug = __webpack_require__(7482)
exports = module.exports = {}

// The actual regexps go on exports.re
const re = exports.re = []
const safeRe = exports.safeRe = []
const src = exports.src = []
const safeSrc = exports.safeSrc = []
const t = exports.t = {}
let R = 0

const LETTERDASHNUMBER = '[a-zA-Z0-9-]'

// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
  ['\\s', 1],
  ['\\d', MAX_LENGTH],
  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
]

const makeSafeRegex = (value) => {
  for (const [token, max] of safeRegexReplacements) {
    value = value
      .split(`${token}*`).join(`${token}{0,${max}}`)
      .split(`${token}+`).join(`${token}{1,${max}}`)
  }
  return value
}

const createToken = (name, value, isGlobal) => {
  const safe = makeSafeRegex(value)
  const index = R++
  debug(name, index, value)
  t[name] = index
  src[index] = value
  safeSrc[index] = safe
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)
}

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
createToken('NUMERICIDENTIFIERLOOSE', '\\d+')

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)

// ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})`)

createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.
// Non-numberic identifiers include numberic identifiers but can be longer.
// Therefore non-numberic identifiers must go first.

createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NONNUMERICIDENTIFIER]
}|${src[t.NUMERICIDENTIFIER]})`)

createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NONNUMERICIDENTIFIER]
}|${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`)

createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`)

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`)

createToken('FULL', `^${src[t.FULLPLAIN]}$`)

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`)

createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)

createToken('GTLT', '((?:<|>)?=?)')

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`)
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)

createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                   `)?)?`)

createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                        `)?)?`)

createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCEPLAIN', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)
createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`)
createToken('COERCEFULL', src[t.COERCEPLAIN] +
              `(?:${src[t.PRERELEASE]})?` +
              `(?:${src[t.BUILD]})?` +
              `(?:$|[^\\d])`)
createToken('COERCERTL', src[t.COERCE], true)
createToken('COERCERTLFULL', src[t.COERCEFULL], true)

// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)')

createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
exports.tildeTrimReplace = '$1~'

createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)')

createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
exports.caretTrimReplace = '$1^'

createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`)
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)
exports.comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                   `\\s+-\\s+` +
                   `(${src[t.XRANGEPLAIN]})` +
                   `\\s*$`)

createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s+-\\s+` +
                        `(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s*$`)

// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*')
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$')
createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$')


/***/ }),

/***/ 57:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



// Determine if version is greater than all the versions possible in the range.
const outside = __webpack_require__(5569)
const gtr = (version, range, options) => outside(version, range, '>', options)
module.exports = gtr


/***/ }),

/***/ 70:
/***/ ((module) => {



module.exports = () => {
	if (process.platform !== 'win32') {
		return true;
	}

	return Boolean(process.env.CI) ||
		Boolean(process.env.WT_SESSION) || // Windows Terminal
		process.env.TERM_PROGRAM === 'vscode' ||
		process.env.TERM === 'xterm-256color' ||
		process.env.TERM === 'alacritty';
};


/***/ }),

/***/ 84:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.concatAll = void 0;
var mergeAll_1 = __webpack_require__(5689);
function concatAll() {
    return mergeAll_1.mergeAll(1);
}
exports.concatAll = concatAll;
//# sourceMappingURL=concatAll.js.map

/***/ }),

/***/ 101:
/***/ ((module) => {



const numeric = /^[0-9]+$/
const compareIdentifiers = (a, b) => {
  const anum = numeric.test(a)
  const bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)

module.exports = {
  compareIdentifiers,
  rcompareIdentifiers,
}


/***/ }),

/***/ 110:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).



var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = (__webpack_require__(3201)/* .codes */ .F),
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(2862);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;

/***/ }),

/***/ 131:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


const restoreCursor = __webpack_require__(1355);

let isHidden = false;

exports.show = (writableStream = process.stderr) => {
	if (!writableStream.isTTY) {
		return;
	}

	isHidden = false;
	writableStream.write('\u001B[?25h');
};

exports.hide = (writableStream = process.stderr) => {
	if (!writableStream.isTTY) {
		return;
	}

	restoreCursor();
	isHidden = true;
	writableStream.write('\u001B[?25l');
};

exports.toggle = (force, writableStream) => {
	if (force !== undefined) {
		isHidden = force;
	}

	if (isHidden) {
		exports.show(writableStream);
	} else {
		exports.hide(writableStream);
	}
};


/***/ }),

/***/ 136:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const fs = __webpack_require__(2358)
const u = (__webpack_require__(8556).fromCallback)

function remove (path, callback) {
  fs.rm(path, { recursive: true, force: true }, callback)
}

function removeSync (path) {
  fs.rmSync(path, { recursive: true, force: true })
}

module.exports = {
  remove: u(remove),
  removeSync
}


/***/ }),

/***/ 161:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compare = __webpack_require__(7910)
const lt = (a, b, loose) => compare(a, b, loose) < 0
module.exports = lt


/***/ }),

/***/ 181:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("buffer");

/***/ }),

/***/ 214:
/***/ ((module) => {



module.exports = clone

var getPrototypeOf = Object.getPrototypeOf || function (obj) {
  return obj.__proto__
}

function clone (obj) {
  if (obj === null || typeof obj !== 'object')
    return obj

  if (obj instanceof Object)
    var copy = { __proto__: getPrototypeOf(obj) }
  else
    var copy = Object.create(null)

  Object.getOwnPropertyNames(obj).forEach(function (key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
  })

  return copy
}


/***/ }),

/***/ 229:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HQ: () => (/* binding */ displayBanner),
/* harmony export */   kn: () => (/* binding */ displayCommandBanner)
/* harmony export */ });
/* unused harmony exports generateBanner, generateVersionBanner */
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3757);
/* harmony import */ var gradient_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4112);
/* harmony import */ var boxen__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7243);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9546);
/**
 * Banner utility for Package Installer CLI v3.2.0
 * Provides consistent banner display across all commands
 */




/**
 * Generate the main CLI banner with gradient colors
 */
function generateBanner() {
    const packageGradient = (0,gradient_string__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)(['#0072ff', '#00c6ff', '#4facfe']);
    const installerGradient = (0,gradient_string__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)(['#00c6ff', '#0072ff', '#667eea']);
    return (0,boxen__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A)(packageGradient('           ██████╗  █████╗  ██████╗██╗  ██╗ █████╗  ██████╗ ███████╗') + '\n' +
        packageGradient('           ██╔══██╗██╔══██╗██╔════╝██║ ██╔╝██╔══██╗██╔════╝ ██╔════╝') + '\n' +
        packageGradient('           ██████╔╝███████║██║     █████╔╝ ███████║██║  ███╗█████╗  ') + '\n' +
        packageGradient('           ██╔═══╝ ██╔══██║██║     ██╔═██╗ ██╔══██║██║   ██║██╔══╝  ') + '\n' +
        packageGradient('           ██║     ██║  ██║╚██████╗██║  ██╗██║  ██║╚██████╔╝███████╗') + '\n' +
        packageGradient('           ╚═╝     ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝') + '\n' +
        '                                                                                   \n' +
        installerGradient('    ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     ███████╗██████╗') + '\n' +
        installerGradient('    ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     ██╔════╝██╔══██╗') + '\n' +
        installerGradient('    ██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     █████╗  ██████╔╝') + '\n' +
        installerGradient('    ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     ██╔══╝  ██╔══██╗') + '\n' +
        installerGradient('    ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗███████╗██║  ██║') + '\n' +
        installerGradient('    ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝') + '\n' +
        '                                                                                   \n' +
        '                                                                                   \n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')('                🚀 The Ultimate Modern Project Scaffolding Tool                ') + '\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('               ✨ Fast • Smart • Feature-Rich • Production-Ready               ') + '\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#ffa502')('    💡 Create stunning web applications with integrated features in seconds    ') + '\n' +
        '                                                                                   ', {
        padding: 1,
        borderStyle: 'round',
        borderColor: 'cyan',
        backgroundColor: '#0a0a0a'
    });
}
/**
 * Generate version info banner
 */
function generateVersionBanner() {
    const version = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .getPackageVersion */ .RB)();
    return (0,boxen__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A)(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')('📦 Version: ') + chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#ffa502')(`v${version}`) +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('  •  ') + chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')('🎯 Frameworks: ') + chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#ffa502')('12+') +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('  •  ') + chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')('📋 Templates: ') + chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#ffa502')('50+') +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('  •  ') + chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')('⚡ Status: ') + chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#10ac84')('Ready to scaffold!'), {
        padding: { top: 0, bottom: 0, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'cyan',
        backgroundColor: '#0a0a0a'
    });
}
/**
 * Display the complete banner (main + version)
 */
function displayBanner() {
    console.log('\n' + generateBanner());
    console.log('\n' + generateVersionBanner());
}
/**
 * Display a simplified command banner
 */
function displayCommandBanner(commandName, description) {
    const commandGradient = (0,gradient_string__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)(['#4facfe', '#00f2fe']);
    console.log('\n' + (0,boxen__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A)(commandGradient(`🚀 ${commandName.toUpperCase()} COMMAND`) + '\n\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.white(description) + '\n\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')(`💡 Package Installer CLI v${(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .getPackageVersion */ .RB)()}`) + ' • ' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('Fast • Smart • Feature-Rich'), {
        padding: 1,
        borderStyle: 'round',
        borderColor: 'cyan',
        backgroundColor: '#0a0a0a'
    }));
}


/***/ }),

/***/ 231:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.switchMapTo = void 0;
var switchMap_1 = __webpack_require__(8114);
var isFunction_1 = __webpack_require__(8403);
function switchMapTo(innerObservable, resultSelector) {
    return isFunction_1.isFunction(resultSelector) ? switchMap_1.switchMap(function () { return innerObservable; }, resultSelector) : switchMap_1.switchMap(function () { return innerObservable; });
}
exports.switchMapTo = switchMapTo;
//# sourceMappingURL=switchMapTo.js.map

/***/ }),

/***/ 234:
/***/ ((module) => {



// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
module.exports = {
  "437": "cp437",
  "737": "cp737",
  "775": "cp775",
  "850": "cp850",
  "852": "cp852",
  "855": "cp855",
  "856": "cp856",
  "857": "cp857",
  "858": "cp858",
  "860": "cp860",
  "861": "cp861",
  "862": "cp862",
  "863": "cp863",
  "864": "cp864",
  "865": "cp865",
  "866": "cp866",
  "869": "cp869",
  "874": "windows874",
  "922": "cp922",
  "1046": "cp1046",
  "1124": "cp1124",
  "1125": "cp1125",
  "1129": "cp1129",
  "1133": "cp1133",
  "1161": "cp1161",
  "1162": "cp1162",
  "1163": "cp1163",
  "1250": "windows1250",
  "1251": "windows1251",
  "1252": "windows1252",
  "1253": "windows1253",
  "1254": "windows1254",
  "1255": "windows1255",
  "1256": "windows1256",
  "1257": "windows1257",
  "1258": "windows1258",
  "28591": "iso88591",
  "28592": "iso88592",
  "28593": "iso88593",
  "28594": "iso88594",
  "28595": "iso88595",
  "28596": "iso88596",
  "28597": "iso88597",
  "28598": "iso88598",
  "28599": "iso88599",
  "28600": "iso885910",
  "28601": "iso885911",
  "28603": "iso885913",
  "28604": "iso885914",
  "28605": "iso885915",
  "28606": "iso885916",
  "windows874": {
    "type": "_sbcs",
    "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "win874": "windows874",
  "cp874": "windows874",
  "windows1250": {
    "type": "_sbcs",
    "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
  },
  "win1250": "windows1250",
  "cp1250": "windows1250",
  "windows1251": {
    "type": "_sbcs",
    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "win1251": "windows1251",
  "cp1251": "windows1251",
  "windows1252": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "win1252": "windows1252",
  "cp1252": "windows1252",
  "windows1253": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  },
  "win1253": "windows1253",
  "cp1253": "windows1253",
  "windows1254": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
  },
  "win1254": "windows1254",
  "cp1254": "windows1254",
  "windows1255": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
  },
  "win1255": "windows1255",
  "cp1255": "windows1255",
  "windows1256": {
    "type": "_sbcs",
    "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
  },
  "win1256": "windows1256",
  "cp1256": "windows1256",
  "windows1257": {
    "type": "_sbcs",
    "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
  },
  "win1257": "windows1257",
  "cp1257": "windows1257",
  "windows1258": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "win1258": "windows1258",
  "cp1258": "windows1258",
  "iso88591": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "cp28591": "iso88591",
  "iso88592": {
    "type": "_sbcs",
    "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
  },
  "cp28592": "iso88592",
  "iso88593": {
    "type": "_sbcs",
    "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
  },
  "cp28593": "iso88593",
  "iso88594": {
    "type": "_sbcs",
    "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
  },
  "cp28594": "iso88594",
  "iso88595": {
    "type": "_sbcs",
    "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
  },
  "cp28595": "iso88595",
  "iso88596": {
    "type": "_sbcs",
    "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
  },
  "cp28596": "iso88596",
  "iso88597": {
    "type": "_sbcs",
    "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  },
  "cp28597": "iso88597",
  "iso88598": {
    "type": "_sbcs",
    "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
  },
  "cp28598": "iso88598",
  "iso88599": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
  },
  "cp28599": "iso88599",
  "iso885910": {
    "type": "_sbcs",
    "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
  },
  "cp28600": "iso885910",
  "iso885911": {
    "type": "_sbcs",
    "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "cp28601": "iso885911",
  "iso885913": {
    "type": "_sbcs",
    "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
  },
  "cp28603": "iso885913",
  "iso885914": {
    "type": "_sbcs",
    "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
  },
  "cp28604": "iso885914",
  "iso885915": {
    "type": "_sbcs",
    "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "cp28605": "iso885915",
  "iso885916": {
    "type": "_sbcs",
    "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
  },
  "cp28606": "iso885916",
  "cp437": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm437": "cp437",
  "csibm437": "cp437",
  "cp737": {
    "type": "_sbcs",
    "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
  },
  "ibm737": "cp737",
  "csibm737": "cp737",
  "cp775": {
    "type": "_sbcs",
    "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
  },
  "ibm775": "cp775",
  "csibm775": "cp775",
  "cp850": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm850": "cp850",
  "csibm850": "cp850",
  "cp852": {
    "type": "_sbcs",
    "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
  },
  "ibm852": "cp852",
  "csibm852": "cp852",
  "cp855": {
    "type": "_sbcs",
    "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
  },
  "ibm855": "cp855",
  "csibm855": "cp855",
  "cp856": {
    "type": "_sbcs",
    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm856": "cp856",
  "csibm856": "cp856",
  "cp857": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
  },
  "ibm857": "cp857",
  "csibm857": "cp857",
  "cp858": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm858": "cp858",
  "csibm858": "cp858",
  "cp860": {
    "type": "_sbcs",
    "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm860": "cp860",
  "csibm860": "cp860",
  "cp861": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm861": "cp861",
  "csibm861": "cp861",
  "cp862": {
    "type": "_sbcs",
    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm862": "cp862",
  "csibm862": "cp862",
  "cp863": {
    "type": "_sbcs",
    "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm863": "cp863",
  "csibm863": "cp863",
  "cp864": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
  },
  "ibm864": "cp864",
  "csibm864": "cp864",
  "cp865": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm865": "cp865",
  "csibm865": "cp865",
  "cp866": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
  },
  "ibm866": "cp866",
  "csibm866": "cp866",
  "cp869": {
    "type": "_sbcs",
    "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
  },
  "ibm869": "cp869",
  "csibm869": "cp869",
  "cp922": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
  },
  "ibm922": "cp922",
  "csibm922": "cp922",
  "cp1046": {
    "type": "_sbcs",
    "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
  },
  "ibm1046": "cp1046",
  "csibm1046": "cp1046",
  "cp1124": {
    "type": "_sbcs",
    "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
  },
  "ibm1124": "cp1124",
  "csibm1124": "cp1124",
  "cp1125": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
  },
  "ibm1125": "cp1125",
  "csibm1125": "cp1125",
  "cp1129": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "ibm1129": "cp1129",
  "csibm1129": "cp1129",
  "cp1133": {
    "type": "_sbcs",
    "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
  },
  "ibm1133": "cp1133",
  "csibm1133": "cp1133",
  "cp1161": {
    "type": "_sbcs",
    "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
  },
  "ibm1161": "cp1161",
  "csibm1161": "cp1161",
  "cp1162": {
    "type": "_sbcs",
    "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "ibm1162": "cp1162",
  "csibm1162": "cp1162",
  "cp1163": {
    "type": "_sbcs",
    "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "ibm1163": "cp1163",
  "csibm1163": "cp1163",
  "maccroatian": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
  },
  "maccyrillic": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  },
  "macgreek": {
    "type": "_sbcs",
    "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
  },
  "maciceland": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macroman": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macromania": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macthai": {
    "type": "_sbcs",
    "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
  },
  "macturkish": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macukraine": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  },
  "koi8r": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8u": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8ru": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8t": {
    "type": "_sbcs",
    "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "armscii8": {
    "type": "_sbcs",
    "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
  },
  "rk1048": {
    "type": "_sbcs",
    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "tcvn": {
    "type": "_sbcs",
    "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
  },
  "georgianacademy": {
    "type": "_sbcs",
    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "georgianps": {
    "type": "_sbcs",
    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "pt154": {
    "type": "_sbcs",
    "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "viscii": {
    "type": "_sbcs",
    "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
  },
  "iso646cn": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
  },
  "iso646jp": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
  },
  "hproman8": {
    "type": "_sbcs",
    "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
  },
  "macintosh": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "ascii": {
    "type": "_sbcs",
    "chars": "��������������������������������������������������������������������������������������������������������������������������������"
  },
  "tis620": {
    "type": "_sbcs",
    "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  }
}

/***/ }),

/***/ 243:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 248:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filter = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function filter(predicate, thisArg) {
    return lift_1.operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
    });
}
exports.filter = filter;
//# sourceMappingURL=filter.js.map

/***/ }),

/***/ 270:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const fs = __webpack_require__(6903)
const { checkPath } = __webpack_require__(2505)

const getMode = options => {
  const defaults = { mode: 0o777 }
  if (typeof options === 'number') return options
  return ({ ...defaults, ...options }).mode
}

module.exports.makeDir = async (dir, options) => {
  checkPath(dir)

  return fs.mkdir(dir, {
    mode: getMode(options),
    recursive: true
  })
}

module.exports.makeDirSync = (dir, options) => {
  checkPath(dir)

  return fs.mkdirSync(dir, {
    mode: getMode(options),
    recursive: true
  })
}


/***/ }),

/***/ 279:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @otplib/plugin-crypto
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 12.0.1
 * @license: MIT
 **/


Object.defineProperty(exports, "__esModule", ({ value: true }));

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var crypto = _interopDefault(__webpack_require__(6982));

const createDigest = (algorithm, hmacKey, counter) => {
  const hmac = crypto.createHmac(algorithm, Buffer.from(hmacKey, 'hex'));
  const digest = hmac.update(Buffer.from(counter, 'hex')).digest();
  return digest.toString('hex');
};
const createRandomBytes = (size, encoding) => {
  return crypto.randomBytes(size).toString(encoding);
};

exports.createDigest = createDigest;
exports.createRandomBytes = createRandomBytes;


/***/ }),

/***/ 287:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.count = void 0;
var reduce_1 = __webpack_require__(1848);
function count(predicate) {
    return reduce_1.reduce(function (total, value, i) { return (!predicate || predicate(value, i) ? total + 1 : total); }, 0);
}
exports.count = count;
//# sourceMappingURL=count.js.map

/***/ }),

/***/ 289:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.distinctUntilKeyChanged = void 0;
var distinctUntilChanged_1 = __webpack_require__(3802);
function distinctUntilKeyChanged(key, compare) {
    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return (compare ? compare(x[key], y[key]) : x[key] === y[key]); });
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ }),

/***/ 310:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isObservable = void 0;
var Observable_1 = __webpack_require__(541);
var isFunction_1 = __webpack_require__(8403);
function isObservable(obj) {
    return !!obj && (obj instanceof Observable_1.Observable || (isFunction_1.isFunction(obj.lift) && isFunction_1.isFunction(obj.subscribe)));
}
exports.isObservable = isObservable;
//# sourceMappingURL=isObservable.js.map

/***/ }),

/***/ 342:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D3: () => (/* binding */ getCacheStatus),
/* harmony export */   J3: () => (/* binding */ initializeCache),
/* harmony export */   QS: () => (/* binding */ getCacheStats),
/* harmony export */   T9: () => (/* binding */ updateTemplateUsage),
/* harmony export */   aF: () => (/* binding */ cacheProjectData),
/* harmony export */   e$: () => (/* binding */ getCachedTemplateFiles),
/* harmony export */   fC: () => (/* binding */ getDirectorySize),
/* harmony export */   mp: () => (/* binding */ cacheTemplateFiles)
/* harmony export */ });
/* unused harmony export cacheManager */
/* harmony import */ var _cacheUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3172);
/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7187);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6928);
/**
 * Cache Manager - Centralized caching operations for Package Installer CLI
 * Simplified version focusing on essential caching functionality only
 */



// Export the cache manager instance
const cacheManager = (/* unused pure expression or super */ null && (cacheManagerInstance));
/**
 * Initialize cache system on CLI startup
 */
async function initializeCache() {
    try {
        await _cacheUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .cacheManager */ .yk.init();
    }
    catch (error) {
        // Silent fail - cache will work in memory mode
    }
}
/**
 * Get cached template files (simplified - returns null for now)
 */
async function getCachedTemplateFiles(templateName) {
    // Simplified implementation - just return null for now
    return null;
}
/**
 * Cache template files (simplified - no-op for now)
 */
async function cacheTemplateFiles(templateName, templatePath, files) {
    // Simplified implementation - no-op for now
    // This reduces complexity and memory usage
}
/**
 * Update template usage statistics (simplified - no-op for now)
 */
async function updateTemplateUsage(templateName, framework, language) {
    // Simplified implementation - no-op for now
    // This reduces complexity and memory usage
}
/**
 * Cache project data (simplified - no-op for now)
 */
async function cacheProjectData(projectPath, name, type) {
    // Simplified implementation - no-op for now
    // This reduces complexity and memory usage
}
/**
 * Get directory size utility function
 */
async function getDirectorySize(dirPath) {
    try {
        let totalSize = 0;
        async function calculateSize(currentPath) {
            try {
                const stats = await fs_extra__WEBPACK_IMPORTED_MODULE_1__.stat(currentPath);
                if (stats.isFile()) {
                    totalSize += stats.size;
                }
                else if (stats.isDirectory()) {
                    const items = await fs_extra__WEBPACK_IMPORTED_MODULE_1__.readdir(currentPath);
                    for (const item of items) {
                        // Skip large directories to avoid performance issues
                        if (!['node_modules', '.git', 'dist', 'build', 'target', '.cache'].includes(item)) {
                            await calculateSize(path__WEBPACK_IMPORTED_MODULE_2__.join(currentPath, item));
                        }
                    }
                }
            }
            catch (error) {
                // Skip files/directories that can't be accessed
            }
        }
        await calculateSize(dirPath);
        return totalSize;
    }
    catch (error) {
        return 0;
    }
}
/**
 * Get cache statistics (simplified)
 */
function getCacheStats() {
    try {
        const cache = _cacheUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .cacheManager */ .yk.getCache();
        return {
            projects: cache.projects || [],
            templates: cache.templates || [],
            templateFiles: cache.templateFiles || [],
            features: cache.features || [],
            hits: 0,
            misses: 0
        };
    }
    catch (error) {
        return {
            projects: [],
            templates: [],
            templateFiles: [],
            features: [],
            hits: 0,
            misses: 0
        };
    }
}
/**
 * Get cache status (simplified)
 */
function getCacheStatus() {
    try {
        const cache = _cacheUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .cacheManager */ .yk.getCache();
        return {
            initialized: true,
            version: cache.version || '1.0.0',
            totalProjects: cache.projects?.length || 0,
            totalTemplates: cache.templates?.length || 0,
            totalFeatures: cache.features?.length || 0
        };
    }
    catch (error) {
        return {
            initialized: false,
            version: '1.0.0',
            totalProjects: 0,
            totalTemplates: 0,
            totalFeatures: 0
        };
    }
}


/***/ }),

/***/ 348:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var Buffer = (__webpack_require__(7475).Buffer);

// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

exports.utf7 = Utf7Codec;
exports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv;
};

Utf7Codec.prototype.encoder = Utf7Encoder;
Utf7Codec.prototype.decoder = Utf7Decoder;
Utf7Codec.prototype.bomAware = true;


// -- Encoding

var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv;
}

Utf7Encoder.prototype.write = function(str) {
    // Naive implementation.
    // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
    return Buffer.from(str.replace(nonDirectChars, function(chunk) {
        return "+" + (chunk === '+' ? '' : 
            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
            + "-";
    }.bind(this)));
}

Utf7Encoder.prototype.end = function() {
}


// -- Decoding

function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
}

var base64Regex = /[A-Za-z0-9\/+]/;
var base64Chars = [];
for (var i = 0; i < 256; i++)
    base64Chars[i] = base64Regex.test(String.fromCharCode(i));

var plusChar = '+'.charCodeAt(0), 
    minusChar = '-'.charCodeAt(0),
    andChar = '&'.charCodeAt(0);

Utf7Decoder.prototype.write = function(buf) {
    var res = "", lastI = 0,
        inBase64 = this.inBase64,
        base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.

    for (var i = 0; i < buf.length; i++) {
        if (!inBase64) { // We're in direct mode.
            // Write direct chars until '+'
            if (buf[i] == plusChar) {
                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                lastI = i+1;
                inBase64 = true;
            }
        } else { // We decode base64.
            if (!base64Chars[buf[i]]) { // Base64 ended.
                if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
                    res += "+";
                } else {
                    var b64str = base64Accum + buf.slice(lastI, i).toString();
                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
                }

                if (buf[i] != minusChar) // Minus is absorbed after base64.
                    i--;

                lastI = i+1;
                inBase64 = false;
                base64Accum = '';
            }
        }
    }

    if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
        var b64str = base64Accum + buf.slice(lastI).toString();

        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
        b64str = b64str.slice(0, canBeDecoded);

        res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
    }

    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;

    return res;
}

Utf7Decoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");

    this.inBase64 = false;
    this.base64Accum = '';
    return res;
}


// UTF-7-IMAP codec.
// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
// Differences:
//  * Base64 part is started by "&" instead of "+"
//  * Direct characters are 0x20-0x7E, except "&" (0x26)
//  * In Base64, "," is used instead of "/"
//  * Base64 must not be used to represent direct characters.
//  * No implicit shift back from Base64 (should always end with '-')
//  * String must end in non-shifted position.
//  * "-&" while in base64 is not allowed.


exports.utf7imap = Utf7IMAPCodec;
function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv;
};

Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
Utf7IMAPCodec.prototype.bomAware = true;


// -- Encoding

function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer.alloc(6);
    this.base64AccumIdx = 0;
}

Utf7IMAPEncoder.prototype.write = function(str) {
    var inBase64 = this.inBase64,
        base64Accum = this.base64Accum,
        base64AccumIdx = this.base64AccumIdx,
        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;

    for (var i = 0; i < str.length; i++) {
        var uChar = str.charCodeAt(i);
        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
            if (inBase64) {
                if (base64AccumIdx > 0) {
                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                    base64AccumIdx = 0;
                }

                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                inBase64 = false;
            }

            if (!inBase64) {
                buf[bufIdx++] = uChar; // Write direct character

                if (uChar === andChar)  // Ampersand -> '&-'
                    buf[bufIdx++] = minusChar;
            }

        } else { // Non-direct character
            if (!inBase64) {
                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                inBase64 = true;
            }
            if (inBase64) {
                base64Accum[base64AccumIdx++] = uChar >> 8;
                base64Accum[base64AccumIdx++] = uChar & 0xFF;

                if (base64AccumIdx == base64Accum.length) {
                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                    base64AccumIdx = 0;
                }
            }
        }
    }

    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;

    return buf.slice(0, bufIdx);
}

Utf7IMAPEncoder.prototype.end = function() {
    var buf = Buffer.alloc(10), bufIdx = 0;
    if (this.inBase64) {
        if (this.base64AccumIdx > 0) {
            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
            this.base64AccumIdx = 0;
        }

        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
        this.inBase64 = false;
    }

    return buf.slice(0, bufIdx);
}


// -- Decoding

function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
}

var base64IMAPChars = base64Chars.slice();
base64IMAPChars[','.charCodeAt(0)] = true;

Utf7IMAPDecoder.prototype.write = function(buf) {
    var res = "", lastI = 0,
        inBase64 = this.inBase64,
        base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.
    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

    for (var i = 0; i < buf.length; i++) {
        if (!inBase64) { // We're in direct mode.
            // Write direct chars until '&'
            if (buf[i] == andChar) {
                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                lastI = i+1;
                inBase64 = true;
            }
        } else { // We decode base64.
            if (!base64IMAPChars[buf[i]]) { // Base64 ended.
                if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
                    res += "&";
                } else {
                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');
                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
                }

                if (buf[i] != minusChar) // Minus may be absorbed after base64.
                    i--;

                lastI = i+1;
                inBase64 = false;
                base64Accum = '';
            }
        }
    }

    if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');

        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
        b64str = b64str.slice(0, canBeDecoded);

        res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
    }

    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;

    return res;
}

Utf7IMAPDecoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");

    this.inBase64 = false;
    this.base64Accum = '';
    return res;
}




/***/ }),

/***/ 447:
/***/ ((module) => {

var clone = (function() {
'use strict';

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
*/
function clone(parent, circular, depth, prototype) {
  var filter;
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    filter = circular.filter;
    circular = circular.circular
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth == 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      if (Buffer.allocUnsafe) {
        // Node.js >= 4.5.0
        child = Buffer.allocUnsafe(parent.length);
      } else {
        // Older Node.js versions
        child = new Buffer(parent.length);
      }
      parent.copy(child);
      return child;
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
};
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
};
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
};
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
};
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
};
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if ( true && module.exports) {
  module.exports = clone;
}


/***/ }),

/***/ 525:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*

The MIT License (MIT)

Original Library
  - Copyright (c) Marak Squires

Additional functionality
 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var colors = {};
module['exports'] = colors;

colors.themes = {};

var util = __webpack_require__(9023);
var ansiStyles = colors.styles = __webpack_require__(4731);
var defineProps = Object.defineProperties;
var newLineRegex = new RegExp(/[\r\n]+/g);

colors.supportsColor = (__webpack_require__(6980).supportsColor);

if (typeof colors.enabled === 'undefined') {
  colors.enabled = colors.supportsColor() !== false;
}

colors.enable = function() {
  colors.enabled = true;
};

colors.disable = function() {
  colors.enabled = false;
};

colors.stripColors = colors.strip = function(str) {
  return ('' + str).replace(/\x1B\[\d+m/g, '');
};

// eslint-disable-next-line no-unused-vars
var stylize = colors.stylize = function stylize(str, style) {
  if (!colors.enabled) {
    return str+'';
  }

  var styleMap = ansiStyles[style];

  // Stylize should work for non-ANSI styles, too
  if (!styleMap && style in colors) {
    // Style maps like trap operate as functions on strings;
    // they don't have properties like open or close.
    return colors[style](str);
  }

  return styleMap.open + str + styleMap.close;
};

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
var escapeStringRegexp = function(str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }
  return str.replace(matchOperatorsRe, '\\$&');
};

function build(_styles) {
  var builder = function builder() {
    return applyStyle.apply(builder, arguments);
  };
  builder._styles = _styles;
  // __proto__ is used because we must return a function, but there is
  // no way to create a function with a different prototype.
  builder.__proto__ = proto;
  return builder;
}

var styles = (function() {
  var ret = {};
  ansiStyles.grey = ansiStyles.gray;
  Object.keys(ansiStyles).forEach(function(key) {
    ansiStyles[key].closeRe =
      new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
    ret[key] = {
      get: function() {
        return build(this._styles.concat(key));
      },
    };
  });
  return ret;
})();

var proto = defineProps(function colors() {}, styles);

function applyStyle() {
  var args = Array.prototype.slice.call(arguments);

  var str = args.map(function(arg) {
    // Use weak equality check so we can colorize null/undefined in safe mode
    if (arg != null && arg.constructor === String) {
      return arg;
    } else {
      return util.inspect(arg);
    }
  }).join(' ');

  if (!colors.enabled || !str) {
    return str;
  }

  var newLinesPresent = str.indexOf('\n') != -1;

  var nestedStyles = this._styles;

  var i = nestedStyles.length;
  while (i--) {
    var code = ansiStyles[nestedStyles[i]];
    str = code.open + str.replace(code.closeRe, code.open) + code.close;
    if (newLinesPresent) {
      str = str.replace(newLineRegex, function(match) {
        return code.close + match + code.open;
      });
    }
  }

  return str;
}

colors.setTheme = function(theme) {
  if (typeof theme === 'string') {
    console.log('colors.setTheme now only accepts an object, not a string.  ' +
      'If you are trying to set a theme from a file, it is now your (the ' +
      'caller\'s) responsibility to require the file.  The old syntax ' +
      'looked like colors.setTheme(__dirname + ' +
      '\'/../themes/generic-logging.js\'); The new syntax looks like '+
      'colors.setTheme(require(__dirname + ' +
      '\'/../themes/generic-logging.js\'));');
    return;
  }
  for (var style in theme) {
    (function(style) {
      colors[style] = function(str) {
        if (typeof theme[style] === 'object') {
          var out = str;
          for (var i in theme[style]) {
            out = colors[theme[style][i]](out);
          }
          return out;
        }
        return colors[theme[style]](str);
      };
    })(style);
  }
};

function init() {
  var ret = {};
  Object.keys(styles).forEach(function(name) {
    ret[name] = {
      get: function() {
        return build([name]);
      },
    };
  });
  return ret;
}

var sequencer = function sequencer(map, str) {
  var exploded = str.split('');
  exploded = exploded.map(map);
  return exploded.join('');
};

// custom formatter methods
colors.trap = __webpack_require__(7930);
colors.zalgo = __webpack_require__(1680);

// maps
colors.maps = {};
colors.maps.america = __webpack_require__(9297)(colors);
colors.maps.zebra = __webpack_require__(7145)(colors);
colors.maps.rainbow = __webpack_require__(2975)(colors);
colors.maps.random = __webpack_require__(3858)(colors);

for (var map in colors.maps) {
  (function(map) {
    colors[map] = function(str) {
      return sequencer(colors.maps[map], str);
    };
  })(map);
}

defineProps(colors, init());


/***/ }),

/***/ 541:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Observable = void 0;
var Subscriber_1 = __webpack_require__(2554);
var Subscription_1 = __webpack_require__(1981);
var observable_1 = __webpack_require__(9498);
var pipe_1 = __webpack_require__(1943);
var config_1 = __webpack_require__(2454);
var isFunction_1 = __webpack_require__(8403);
var errorContext_1 = __webpack_require__(798);
var Observable = (function () {
    function Observable(subscribe) {
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new Subscriber_1.SafeSubscriber(observerOrNext, error, complete);
        errorContext_1.errorContext(function () {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator
                ?
                    operator.call(subscriber, source)
                : source
                    ?
                        _this._subscribe(subscriber)
                    :
                        _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscriber = new Subscriber_1.SafeSubscriber({
                next: function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve,
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[observable_1.observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config_1.config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && isFunction_1.isFunction(value.next) && isFunction_1.isFunction(value.error) && isFunction_1.isFunction(value.complete);
}
function isSubscriber(value) {
    return (value && value instanceof Subscriber_1.Subscriber) || (isObserver(value) && Subscription_1.isSubscription(value));
}
//# sourceMappingURL=Observable.js.map

/***/ }),

/***/ 543:
/***/ ((module) => {

module.exports = {
	L : 1,
	M : 0,
	Q : 3,
	H : 2
};



/***/ }),

/***/ 553:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.zip = void 0;
var Observable_1 = __webpack_require__(541);
var innerFrom_1 = __webpack_require__(2018);
var argsOrArgArray_1 = __webpack_require__(7882);
var empty_1 = __webpack_require__(8003);
var OperatorSubscriber_1 = __webpack_require__(1908);
var args_1 = __webpack_require__(3522);
function zip() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var resultSelector = args_1.popResultSelector(args);
    var sources = argsOrArgArray_1.argsOrArgArray(args);
    return sources.length
        ? new Observable_1.Observable(function (subscriber) {
            var buffers = sources.map(function () { return []; });
            var completed = sources.map(function () { return false; });
            subscriber.add(function () {
                buffers = completed = null;
            });
            var _loop_1 = function (sourceIndex) {
                innerFrom_1.innerFrom(sources[sourceIndex]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                    buffers[sourceIndex].push(value);
                    if (buffers.every(function (buffer) { return buffer.length; })) {
                        var result = buffers.map(function (buffer) { return buffer.shift(); });
                        subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);
                        if (buffers.some(function (buffer, i) { return !buffer.length && completed[i]; })) {
                            subscriber.complete();
                        }
                    }
                }, function () {
                    completed[sourceIndex] = true;
                    !buffers[sourceIndex].length && subscriber.complete();
                }));
            };
            for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
                _loop_1(sourceIndex);
            }
            return function () {
                buffers = completed = null;
            };
        })
        : empty_1.EMPTY;
}
exports.zip = zip;
//# sourceMappingURL=zip.js.map

/***/ }),

/***/ 564:
/***/ ((module) => {



const mimicFn = (to, from) => {
	for (const prop of Reflect.ownKeys(from)) {
		Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
	}

	return to;
};

module.exports = mimicFn;
// TODO: Remove this for the next major release
module.exports["default"] = mimicFn;


/***/ }),

/***/ 611:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sequenceEqual = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
function sequenceEqual(compareTo, comparator) {
    if (comparator === void 0) { comparator = function (a, b) { return a === b; }; }
    return lift_1.operate(function (source, subscriber) {
        var aState = createState();
        var bState = createState();
        var emit = function (isEqual) {
            subscriber.next(isEqual);
            subscriber.complete();
        };
        var createSubscriber = function (selfState, otherState) {
            var sequenceEqualSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (a) {
                var buffer = otherState.buffer, complete = otherState.complete;
                if (buffer.length === 0) {
                    complete ? emit(false) : selfState.buffer.push(a);
                }
                else {
                    !comparator(a, buffer.shift()) && emit(false);
                }
            }, function () {
                selfState.complete = true;
                var complete = otherState.complete, buffer = otherState.buffer;
                complete && emit(buffer.length === 0);
                sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
            });
            return sequenceEqualSubscriber;
        };
        source.subscribe(createSubscriber(aState, bState));
        innerFrom_1.innerFrom(compareTo).subscribe(createSubscriber(bState, aState));
    });
}
exports.sequenceEqual = sequenceEqual;
function createState() {
    return {
        buffer: [],
        complete: false,
    };
}
//# sourceMappingURL=sequenceEqual.js.map

/***/ }),

/***/ 625:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let _fs
try {
  _fs = __webpack_require__(2358)
} catch (_) {
  _fs = __webpack_require__(9896)
}
const universalify = __webpack_require__(8556)
const { stringify, stripBom } = __webpack_require__(6140)

async function _readFile (file, options = {}) {
  if (typeof options === 'string') {
    options = { encoding: options }
  }

  const fs = options.fs || _fs

  const shouldThrow = 'throws' in options ? options.throws : true

  let data = await universalify.fromCallback(fs.readFile)(file, options)

  data = stripBom(data)

  let obj
  try {
    obj = JSON.parse(data, options ? options.reviver : null)
  } catch (err) {
    if (shouldThrow) {
      err.message = `${file}: ${err.message}`
      throw err
    } else {
      return null
    }
  }

  return obj
}

const readFile = universalify.fromPromise(_readFile)

function readFileSync (file, options = {}) {
  if (typeof options === 'string') {
    options = { encoding: options }
  }

  const fs = options.fs || _fs

  const shouldThrow = 'throws' in options ? options.throws : true

  try {
    let content = fs.readFileSync(file, options)
    content = stripBom(content)
    return JSON.parse(content, options.reviver)
  } catch (err) {
    if (shouldThrow) {
      err.message = `${file}: ${err.message}`
      throw err
    } else {
      return null
    }
  }
}

async function _writeFile (file, obj, options = {}) {
  const fs = options.fs || _fs

  const str = stringify(obj, options)

  await universalify.fromCallback(fs.writeFile)(file, str, options)
}

const writeFile = universalify.fromPromise(_writeFile)

function writeFileSync (file, obj, options = {}) {
  const fs = options.fs || _fs

  const str = stringify(obj, options)
  // not sure if fs.writeFileSync returns anything, but just in case
  return fs.writeFileSync(file, str, options)
}

// NOTE: do not change this export format; required for ESM compat
// see https://github.com/jprichardson/node-jsonfile/pull/162 for details
module.exports = {
  readFile,
  readFileSync,
  writeFile,
  writeFileSync
}


/***/ }),

/***/ 632:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bufferWhen = void 0;
var lift_1 = __webpack_require__(4698);
var noop_1 = __webpack_require__(8563);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
function bufferWhen(closingSelector) {
    return lift_1.operate(function (source, subscriber) {
        var buffer = null;
        var closingSubscriber = null;
        var openBuffer = function () {
            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
            var b = buffer;
            buffer = [];
            b && subscriber.next(b);
            innerFrom_1.innerFrom(closingSelector()).subscribe((closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openBuffer, noop_1.noop)));
        };
        openBuffer();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) { return buffer === null || buffer === void 0 ? void 0 : buffer.push(value); }, function () {
            buffer && subscriber.next(buffer);
            subscriber.complete();
        }, undefined, function () { return (buffer = closingSubscriber = null); }));
    });
}
exports.bufferWhen = bufferWhen;
//# sourceMappingURL=bufferWhen.js.map

/***/ }),

/***/ 652:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {


var fs = __webpack_require__(9896);

var utf8  = __webpack_require__(7817),
  unicode = __webpack_require__(963),
  mbcs    = __webpack_require__(4455),
  sbcs    = __webpack_require__(3965),
  iso2022 = __webpack_require__(8811);

var self = this;

var recognisers = [
  new utf8,
  new unicode.UTF_16BE,
  new unicode.UTF_16LE,
  new unicode.UTF_32BE,
  new unicode.UTF_32LE,
  new mbcs.sjis,
  new mbcs.big5,
  new mbcs.euc_jp,
  new mbcs.euc_kr,
  new mbcs.gb_18030,
  new iso2022.ISO_2022_JP,
  new iso2022.ISO_2022_KR,
  new iso2022.ISO_2022_CN,
  new sbcs.ISO_8859_1,
  new sbcs.ISO_8859_2,
  new sbcs.ISO_8859_5,
  new sbcs.ISO_8859_6,
  new sbcs.ISO_8859_7,
  new sbcs.ISO_8859_8,
  new sbcs.ISO_8859_9,
  new sbcs.windows_1251,
  new sbcs.windows_1256,
  new sbcs.KOI8_R
];

module.exports.detect = function(buffer, opts) {

  // Tally up the byte occurence statistics.
  var fByteStats = [];
  for (var i = 0; i < 256; i++)
    fByteStats[i] = 0;

  for (var i = buffer.length - 1; i >= 0; i--)
    fByteStats[buffer[i] & 0x00ff]++;

  var fC1Bytes = false;
  for (var i = 0x80; i <= 0x9F; i += 1) {
    if (fByteStats[i] != 0) {
      fC1Bytes = true;
      break;
    }
  }

  var context = {
    fByteStats:  fByteStats,
    fC1Bytes:    fC1Bytes,
    fRawInput:   buffer,
    fRawLength:  buffer.length,
    fInputBytes: buffer,
    fInputLen:   buffer.length
  };

  var matches = recognisers.map(function(rec) {
    return rec.match(context);
  }).filter(function(match) {
    return !!match;
  }).sort(function(a, b) {
    return b.confidence - a.confidence;
  });

  if (opts && opts.returnAllMatches === true) {
    return matches;
  }
  else {
    return matches.length > 0 ? matches[0].name : null;
  }
};

module.exports.detectFile = function(filepath, opts, cb) {
  if (typeof opts === 'function') {
    cb = opts;
    opts = undefined;
  }

  var fd;

  var handler = function(err, buffer) {
    if (fd) {
      fs.closeSync(fd);
    }

    if (err) return cb(err, null);
    cb(null, self.detect(buffer, opts));
  };

  if (opts && opts.sampleSize) {
    fd = fs.openSync(filepath, 'r'),
      sample = Buffer.allocUnsafe(opts.sampleSize);

    fs.read(fd, sample, 0, opts.sampleSize, null, function(err) {
      handler(err, sample);
    });
    return;
  }

  fs.readFile(filepath, handler);
};

module.exports.detectFileSync = function(filepath, opts) {
  if (opts && opts.sampleSize) {
    var fd = fs.openSync(filepath, 'r'),
      sample = Buffer.allocUnsafe(opts.sampleSize);

    fs.readSync(fd, sample, 0, opts.sampleSize);
    fs.closeSync(fd);
    return self.detect(sample, opts);
  }

  return self.detect(fs.readFileSync(filepath), opts);
};

// Wrappers for the previous functions to return all encodings
module.exports.detectAll = function(buffer, opts) {
  if (typeof opts !== 'object') {
    opts = {};
  }
  opts.returnAllMatches = true;
  return self.detect(buffer, opts);
}

module.exports.detectFileAll = function(filepath, opts, cb) {
  if (typeof opts === 'function') {
    cb = opts;
    opts = undefined;
  }
  if (typeof opts !== 'object') {
    opts = {};
  }
  opts.returnAllMatches = true;
  self.detectFile(filepath, opts, cb);
}

module.exports.detectFileAllSync = function(filepath, opts) {
  if (typeof opts !== 'object') {
    opts = {};
  }
  opts.returnAllMatches = true;
  return self.detectFileSync(filepath, opts);
}


/***/ }),

/***/ 654:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exhaustMap = void 0;
var map_1 = __webpack_require__(3982);
var innerFrom_1 = __webpack_require__(2018);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function exhaustMap(project, resultSelector) {
    if (resultSelector) {
        return function (source) {
            return source.pipe(exhaustMap(function (a, i) { return innerFrom_1.innerFrom(project(a, i)).pipe(map_1.map(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
        };
    }
    return lift_1.operate(function (source, subscriber) {
        var index = 0;
        var innerSub = null;
        var isComplete = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (outerValue) {
            if (!innerSub) {
                innerSub = OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, function () {
                    innerSub = null;
                    isComplete && subscriber.complete();
                });
                innerFrom_1.innerFrom(project(outerValue, index++)).subscribe(innerSub);
            }
        }, function () {
            isComplete = true;
            !innerSub && subscriber.complete();
        }));
    });
}
exports.exhaustMap = exhaustMap;
//# sourceMappingURL=exhaustMap.js.map

/***/ }),

/***/ 664:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.skipWhile = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function skipWhile(predicate) {
    return lift_1.operate(function (source, subscriber) {
        var taking = false;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) { return (taking || (taking = !predicate(value, index++))) && subscriber.next(value); }));
    });
}
exports.skipWhile = skipWhile;
//# sourceMappingURL=skipWhile.js.map

/***/ }),

/***/ 677:
/***/ ((module) => {



// parse out just the options we care about
const looseOption = Object.freeze({ loose: true })
const emptyOpts = Object.freeze({ })
const parseOptions = options => {
  if (!options) {
    return emptyOpts
  }

  if (typeof options !== 'object') {
    return looseOption
  }

  return options
}
module.exports = parseOptions


/***/ }),

/***/ 681:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createNotification = exports.nextNotification = exports.errorNotification = exports.COMPLETE_NOTIFICATION = void 0;
exports.COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
function errorNotification(error) {
    return createNotification('E', undefined, error);
}
exports.errorNotification = errorNotification;
function nextNotification(value) {
    return createNotification('N', value, undefined);
}
exports.nextNotification = nextNotification;
function createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error,
    };
}
exports.createNotification = createNotification;
//# sourceMappingURL=NotificationFactories.js.map

/***/ }),

/***/ 705:
/***/ ((module) => {



module.exports = ({onlyFirst = false} = {}) => {
	const pattern = [
		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
	].join('|');

	return new RegExp(pattern, onlyFirst ? undefined : 'g');
};


/***/ }),

/***/ 766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const u = (__webpack_require__(8556).fromPromise)
const path = __webpack_require__(6928)
const fs = __webpack_require__(6903)
const mkdir = __webpack_require__(4544)

async function createFile (file) {
  let stats
  try {
    stats = await fs.stat(file)
  } catch { }
  if (stats && stats.isFile()) return

  const dir = path.dirname(file)

  let dirStats = null
  try {
    dirStats = await fs.stat(dir)
  } catch (err) {
    // if the directory doesn't exist, make it
    if (err.code === 'ENOENT') {
      await mkdir.mkdirs(dir)
      await fs.writeFile(file, '')
      return
    } else {
      throw err
    }
  }

  if (dirStats.isDirectory()) {
    await fs.writeFile(file, '')
  } else {
    // parent is not a directory
    // This is just to cause an internal ENOTDIR error to be thrown
    await fs.readdir(dir)
  }
}

function createFileSync (file) {
  let stats
  try {
    stats = fs.statSync(file)
  } catch { }
  if (stats && stats.isFile()) return

  const dir = path.dirname(file)
  try {
    if (!fs.statSync(dir).isDirectory()) {
      // parent is not a directory
      // This is just to cause an internal ENOTDIR error to be thrown
      fs.readdirSync(dir)
    }
  } catch (err) {
    // If the stat call above failed because the directory doesn't exist, create it
    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir)
    else throw err
  }

  fs.writeFileSync(file, '')
}

module.exports = {
  createFile: u(createFile),
  createFileSync
}


/***/ }),

/***/ 798:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.captureError = exports.errorContext = void 0;
var config_1 = __webpack_require__(2454);
var context = null;
function errorContext(cb) {
    if (config_1.config.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) {
            context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
            context = null;
            if (errorThrown) {
                throw error;
            }
        }
    }
    else {
        cb();
    }
}
exports.errorContext = errorContext;
function captureError(err) {
    if (config_1.config.useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
    }
}
exports.captureError = captureError;
//# sourceMappingURL=errorContext.js.map

/***/ }),

/***/ 802:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const u = (__webpack_require__(8556).fromPromise)
const fs = __webpack_require__(6903)

function pathExists (path) {
  return fs.access(path).then(() => true).catch(() => false)
}

module.exports = {
  pathExists: u(pathExists),
  pathExistsSync: fs.existsSync
}


/***/ }),

/***/ 808:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.merge = void 0;
var lift_1 = __webpack_require__(4698);
var mergeAll_1 = __webpack_require__(5689);
var args_1 = __webpack_require__(3522);
var from_1 = __webpack_require__(7568);
function merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_1.popScheduler(args);
    var concurrent = args_1.popNumber(args, Infinity);
    return lift_1.operate(function (source, subscriber) {
        mergeAll_1.mergeAll(concurrent)(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
    });
}
exports.merge = merge;
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ 825:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compareBuild = __webpack_require__(6231)
const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
module.exports = sort


/***/ }),

/***/ 857:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("os");

/***/ }),

/***/ 870:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.refCount = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function refCount() {
    return lift_1.operate(function (source, subscriber) {
        var connection = null;
        source._refCount++;
        var refCounter = OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
            if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                connection = null;
                return;
            }
            var sharedConnection = source._connection;
            var conn = connection;
            connection = null;
            if (sharedConnection && (!conn || sharedConnection === conn)) {
                sharedConnection.unsubscribe();
            }
            subscriber.unsubscribe();
        });
        source.subscribe(refCounter);
        if (!refCounter.closed) {
            connection = source.connect();
        }
    });
}
exports.refCount = refCount;
//# sourceMappingURL=refCount.js.map

/***/ }),

/***/ 930:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const { Buffer } = __webpack_require__(181)
const symbol = Symbol.for('BufferList')

function BufferList (buf) {
  if (!(this instanceof BufferList)) {
    return new BufferList(buf)
  }

  BufferList._init.call(this, buf)
}

BufferList._init = function _init (buf) {
  Object.defineProperty(this, symbol, { value: true })

  this._bufs = []
  this.length = 0

  if (buf) {
    this.append(buf)
  }
}

BufferList.prototype._new = function _new (buf) {
  return new BufferList(buf)
}

BufferList.prototype._offset = function _offset (offset) {
  if (offset === 0) {
    return [0, 0]
  }

  let tot = 0

  for (let i = 0; i < this._bufs.length; i++) {
    const _t = tot + this._bufs[i].length
    if (offset < _t || i === this._bufs.length - 1) {
      return [i, offset - tot]
    }
    tot = _t
  }
}

BufferList.prototype._reverseOffset = function (blOffset) {
  const bufferId = blOffset[0]
  let offset = blOffset[1]

  for (let i = 0; i < bufferId; i++) {
    offset += this._bufs[i].length
  }

  return offset
}

BufferList.prototype.get = function get (index) {
  if (index > this.length || index < 0) {
    return undefined
  }

  const offset = this._offset(index)

  return this._bufs[offset[0]][offset[1]]
}

BufferList.prototype.slice = function slice (start, end) {
  if (typeof start === 'number' && start < 0) {
    start += this.length
  }

  if (typeof end === 'number' && end < 0) {
    end += this.length
  }

  return this.copy(null, 0, start, end)
}

BufferList.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {
  if (typeof srcStart !== 'number' || srcStart < 0) {
    srcStart = 0
  }

  if (typeof srcEnd !== 'number' || srcEnd > this.length) {
    srcEnd = this.length
  }

  if (srcStart >= this.length) {
    return dst || Buffer.alloc(0)
  }

  if (srcEnd <= 0) {
    return dst || Buffer.alloc(0)
  }

  const copy = !!dst
  const off = this._offset(srcStart)
  const len = srcEnd - srcStart
  let bytes = len
  let bufoff = (copy && dstStart) || 0
  let start = off[1]

  // copy/slice everything
  if (srcStart === 0 && srcEnd === this.length) {
    if (!copy) {
      // slice, but full concat if multiple buffers
      return this._bufs.length === 1
        ? this._bufs[0]
        : Buffer.concat(this._bufs, this.length)
    }

    // copy, need to copy individual buffers
    for (let i = 0; i < this._bufs.length; i++) {
      this._bufs[i].copy(dst, bufoff)
      bufoff += this._bufs[i].length
    }

    return dst
  }

  // easy, cheap case where it's a subset of one of the buffers
  if (bytes <= this._bufs[off[0]].length - start) {
    return copy
      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
      : this._bufs[off[0]].slice(start, start + bytes)
  }

  if (!copy) {
    // a slice, we need something to copy in to
    dst = Buffer.allocUnsafe(len)
  }

  for (let i = off[0]; i < this._bufs.length; i++) {
    const l = this._bufs[i].length - start

    if (bytes > l) {
      this._bufs[i].copy(dst, bufoff, start)
      bufoff += l
    } else {
      this._bufs[i].copy(dst, bufoff, start, start + bytes)
      bufoff += l
      break
    }

    bytes -= l

    if (start) {
      start = 0
    }
  }

  // safeguard so that we don't return uninitialized memory
  if (dst.length > bufoff) return dst.slice(0, bufoff)

  return dst
}

BufferList.prototype.shallowSlice = function shallowSlice (start, end) {
  start = start || 0
  end = typeof end !== 'number' ? this.length : end

  if (start < 0) {
    start += this.length
  }

  if (end < 0) {
    end += this.length
  }

  if (start === end) {
    return this._new()
  }

  const startOffset = this._offset(start)
  const endOffset = this._offset(end)
  const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1)

  if (endOffset[1] === 0) {
    buffers.pop()
  } else {
    buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1])
  }

  if (startOffset[1] !== 0) {
    buffers[0] = buffers[0].slice(startOffset[1])
  }

  return this._new(buffers)
}

BufferList.prototype.toString = function toString (encoding, start, end) {
  return this.slice(start, end).toString(encoding)
}

BufferList.prototype.consume = function consume (bytes) {
  // first, normalize the argument, in accordance with how Buffer does it
  bytes = Math.trunc(bytes)
  // do nothing if not a positive number
  if (Number.isNaN(bytes) || bytes <= 0) return this

  while (this._bufs.length) {
    if (bytes >= this._bufs[0].length) {
      bytes -= this._bufs[0].length
      this.length -= this._bufs[0].length
      this._bufs.shift()
    } else {
      this._bufs[0] = this._bufs[0].slice(bytes)
      this.length -= bytes
      break
    }
  }

  return this
}

BufferList.prototype.duplicate = function duplicate () {
  const copy = this._new()

  for (let i = 0; i < this._bufs.length; i++) {
    copy.append(this._bufs[i])
  }

  return copy
}

BufferList.prototype.append = function append (buf) {
  if (buf == null) {
    return this
  }

  if (buf.buffer) {
    // append a view of the underlying ArrayBuffer
    this._appendBuffer(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength))
  } else if (Array.isArray(buf)) {
    for (let i = 0; i < buf.length; i++) {
      this.append(buf[i])
    }
  } else if (this._isBufferList(buf)) {
    // unwrap argument into individual BufferLists
    for (let i = 0; i < buf._bufs.length; i++) {
      this.append(buf._bufs[i])
    }
  } else {
    // coerce number arguments to strings, since Buffer(number) does
    // uninitialized memory allocation
    if (typeof buf === 'number') {
      buf = buf.toString()
    }

    this._appendBuffer(Buffer.from(buf))
  }

  return this
}

BufferList.prototype._appendBuffer = function appendBuffer (buf) {
  this._bufs.push(buf)
  this.length += buf.length
}

BufferList.prototype.indexOf = function (search, offset, encoding) {
  if (encoding === undefined && typeof offset === 'string') {
    encoding = offset
    offset = undefined
  }

  if (typeof search === 'function' || Array.isArray(search)) {
    throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.')
  } else if (typeof search === 'number') {
    search = Buffer.from([search])
  } else if (typeof search === 'string') {
    search = Buffer.from(search, encoding)
  } else if (this._isBufferList(search)) {
    search = search.slice()
  } else if (Array.isArray(search.buffer)) {
    search = Buffer.from(search.buffer, search.byteOffset, search.byteLength)
  } else if (!Buffer.isBuffer(search)) {
    search = Buffer.from(search)
  }

  offset = Number(offset || 0)

  if (isNaN(offset)) {
    offset = 0
  }

  if (offset < 0) {
    offset = this.length + offset
  }

  if (offset < 0) {
    offset = 0
  }

  if (search.length === 0) {
    return offset > this.length ? this.length : offset
  }

  const blOffset = this._offset(offset)
  let blIndex = blOffset[0] // index of which internal buffer we're working on
  let buffOffset = blOffset[1] // offset of the internal buffer we're working on

  // scan over each buffer
  for (; blIndex < this._bufs.length; blIndex++) {
    const buff = this._bufs[blIndex]

    while (buffOffset < buff.length) {
      const availableWindow = buff.length - buffOffset

      if (availableWindow >= search.length) {
        const nativeSearchResult = buff.indexOf(search, buffOffset)

        if (nativeSearchResult !== -1) {
          return this._reverseOffset([blIndex, nativeSearchResult])
        }

        buffOffset = buff.length - search.length + 1 // end of native search window
      } else {
        const revOffset = this._reverseOffset([blIndex, buffOffset])

        if (this._match(revOffset, search)) {
          return revOffset
        }

        buffOffset++
      }
    }

    buffOffset = 0
  }

  return -1
}

BufferList.prototype._match = function (offset, search) {
  if (this.length - offset < search.length) {
    return false
  }

  for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
    if (this.get(offset + searchOffset) !== search[searchOffset]) {
      return false
    }
  }
  return true
}

;(function () {
  const methods = {
    readDoubleBE: 8,
    readDoubleLE: 8,
    readFloatBE: 4,
    readFloatLE: 4,
    readInt32BE: 4,
    readInt32LE: 4,
    readUInt32BE: 4,
    readUInt32LE: 4,
    readInt16BE: 2,
    readInt16LE: 2,
    readUInt16BE: 2,
    readUInt16LE: 2,
    readInt8: 1,
    readUInt8: 1,
    readIntBE: null,
    readIntLE: null,
    readUIntBE: null,
    readUIntLE: null
  }

  for (const m in methods) {
    (function (m) {
      if (methods[m] === null) {
        BufferList.prototype[m] = function (offset, byteLength) {
          return this.slice(offset, offset + byteLength)[m](0, byteLength)
        }
      } else {
        BufferList.prototype[m] = function (offset = 0) {
          return this.slice(offset, offset + methods[m])[m](0)
        }
      }
    }(m))
  }
}())

// Used internally by the class and also as an indicator of this object being
// a `BufferList`. It's not possible to use `instanceof BufferList` in a browser
// environment because there could be multiple different copies of the
// BufferList class and some `BufferList`s might be `BufferList`s.
BufferList.prototype._isBufferList = function _isBufferList (b) {
  return b instanceof BufferList || BufferList.isBufferList(b)
}

BufferList.isBufferList = function isBufferList (b) {
  return b != null && b[symbol]
}

module.exports = BufferList


/***/ }),

/***/ 932:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("process");

/***/ }),

/***/ 939:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Note: since nyc uses this module to output coverage, any lines
// that are in the direct sync flow of nyc's outputCoverage are
// ignored, since we can never get coverage for them.
// grab a reference to node's real process object right away
var process = global.process

const processOk = function (process) {
  return process &&
    typeof process === 'object' &&
    typeof process.removeListener === 'function' &&
    typeof process.emit === 'function' &&
    typeof process.reallyExit === 'function' &&
    typeof process.listeners === 'function' &&
    typeof process.kill === 'function' &&
    typeof process.pid === 'number' &&
    typeof process.on === 'function'
}

// some kind of non-node environment, just no-op
/* istanbul ignore if */
if (!processOk(process)) {
  module.exports = function () {
    return function () {}
  }
} else {
  var assert = __webpack_require__(2613)
  var signals = __webpack_require__(2286)
  var isWin = /^win/i.test(process.platform)

  var EE = __webpack_require__(4434)
  /* istanbul ignore if */
  if (typeof EE !== 'function') {
    EE = EE.EventEmitter
  }

  var emitter
  if (process.__signal_exit_emitter__) {
    emitter = process.__signal_exit_emitter__
  } else {
    emitter = process.__signal_exit_emitter__ = new EE()
    emitter.count = 0
    emitter.emitted = {}
  }

  // Because this emitter is a global, we have to check to see if a
  // previous version of this library failed to enable infinite listeners.
  // I know what you're about to say.  But literally everything about
  // signal-exit is a compromise with evil.  Get used to it.
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity)
    emitter.infinite = true
  }

  module.exports = function (cb, opts) {
    /* istanbul ignore if */
    if (!processOk(global.process)) {
      return function () {}
    }
    assert.equal(typeof cb, 'function', 'a callback must be provided for exit handler')

    if (loaded === false) {
      load()
    }

    var ev = 'exit'
    if (opts && opts.alwaysLast) {
      ev = 'afterexit'
    }

    var remove = function () {
      emitter.removeListener(ev, cb)
      if (emitter.listeners('exit').length === 0 &&
          emitter.listeners('afterexit').length === 0) {
        unload()
      }
    }
    emitter.on(ev, cb)

    return remove
  }

  var unload = function unload () {
    if (!loaded || !processOk(global.process)) {
      return
    }
    loaded = false

    signals.forEach(function (sig) {
      try {
        process.removeListener(sig, sigListeners[sig])
      } catch (er) {}
    })
    process.emit = originalProcessEmit
    process.reallyExit = originalProcessReallyExit
    emitter.count -= 1
  }
  module.exports.unload = unload

  var emit = function emit (event, code, signal) {
    /* istanbul ignore if */
    if (emitter.emitted[event]) {
      return
    }
    emitter.emitted[event] = true
    emitter.emit(event, code, signal)
  }

  // { <signal>: <listener fn>, ... }
  var sigListeners = {}
  signals.forEach(function (sig) {
    sigListeners[sig] = function listener () {
      /* istanbul ignore if */
      if (!processOk(global.process)) {
        return
      }
      // If there are no other listeners, an exit is coming!
      // Simplest way: remove us and then re-send the signal.
      // We know that this will kill the process, so we can
      // safely emit now.
      var listeners = process.listeners(sig)
      if (listeners.length === emitter.count) {
        unload()
        emit('exit', null, sig)
        /* istanbul ignore next */
        emit('afterexit', null, sig)
        /* istanbul ignore next */
        if (isWin && sig === 'SIGHUP') {
          // "SIGHUP" throws an `ENOSYS` error on Windows,
          // so use a supported signal instead
          sig = 'SIGINT'
        }
        /* istanbul ignore next */
        process.kill(process.pid, sig)
      }
    }
  })

  module.exports.signals = function () {
    return signals
  }

  var loaded = false

  var load = function load () {
    if (loaded || !processOk(global.process)) {
      return
    }
    loaded = true

    // This is the number of onSignalExit's that are in play.
    // It's important so that we can count the correct number of
    // listeners on signals, and don't wait for the other one to
    // handle it instead of us.
    emitter.count += 1

    signals = signals.filter(function (sig) {
      try {
        process.on(sig, sigListeners[sig])
        return true
      } catch (er) {
        return false
      }
    })

    process.emit = processEmit
    process.reallyExit = processReallyExit
  }
  module.exports.load = load

  var originalProcessReallyExit = process.reallyExit
  var processReallyExit = function processReallyExit (code) {
    /* istanbul ignore if */
    if (!processOk(global.process)) {
      return
    }
    process.exitCode = code || /* istanbul ignore next */ 0
    emit('exit', process.exitCode, null)
    /* istanbul ignore next */
    emit('afterexit', process.exitCode, null)
    /* istanbul ignore next */
    originalProcessReallyExit.call(process, process.exitCode)
  }

  var originalProcessEmit = process.emit
  var processEmit = function processEmit (ev, arg) {
    if (ev === 'exit' && processOk(global.process)) {
      /* istanbul ignore else */
      if (arg !== undefined) {
        process.exitCode = arg
      }
      var ret = originalProcessEmit.apply(this, arguments)
      /* istanbul ignore next */
      emit('exit', process.exitCode, null)
      /* istanbul ignore next */
      emit('afterexit', process.exitCode, null)
      /* istanbul ignore next */
      return ret
    } else {
      return originalProcessEmit.apply(this, arguments)
    }
  }
}


/***/ }),

/***/ 942:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*                                                                              
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in      
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
THE SOFTWARE.
*/

var base32 = __webpack_require__(1103);

exports.encode = base32.encode;
exports.decode = base32.decode;


/***/ }),

/***/ 963:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var util = __webpack_require__(9023),
  Match = __webpack_require__ (5757);

/**
 * This class matches UTF-16 and UTF-32, both big- and little-endian. The
 * BOM will be used if it is present.
 */
module.exports.UTF_16BE = function() {
  this.name = function() {
    return 'UTF-16BE';
  };
  this.match = function(det) {
    var input = det.fRawInput;

    if (input.length >= 2 && ((input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff)) {
      return new Match(det, this, 100); // confidence = 100
    }

    // TODO: Do some statistics to check for unsigned UTF-16BE
    return null;
  };
};

module.exports.UTF_16LE = function() {
  this.name = function() {
    return 'UTF-16LE';
  };
  this.match = function(det) {
    var input = det.fRawInput;

    if (input.length >= 2 && ((input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe)) {
      // LE BOM is present.
      if (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {
        // It is probably UTF-32 LE, not UTF-16
        return null;
      }
      return new Match(det, this, 100); // confidence = 100
    }

    // TODO: Do some statistics to check for unsigned UTF-16LE
    return null;
  }
};

function UTF_32() {};
UTF_32.prototype.match = function(det) {
  var input      = det.fRawInput,
    limit      = (det.fRawLength / 4) * 4,
    numValid   = 0,
    numInvalid = 0,
    hasBOM     = false,
    confidence = 0;

  if (limit == 0) {
    return null;
  }

  if (this.getChar(input, 0) == 0x0000FEFF) {
    hasBOM = true;
  }

  for (var i = 0; i < limit; i += 4) {
    var ch = this.getChar(input, i);

    if (ch < 0 || ch >= 0x10FFFF || (ch >= 0xD800 && ch <= 0xDFFF)) {
      numInvalid += 1;
    } else {
      numValid += 1;
    }
  }

  // Cook up some sort of confidence score, based on presence of a BOM
  //    and the existence of valid and/or invalid multi-byte sequences.
  if (hasBOM && numInvalid == 0) {
    confidence = 100;
  } else if (hasBOM && numValid > numInvalid * 10) {
    confidence = 80;
  } else if (numValid > 3 && numInvalid == 0) {
    confidence = 100;
  } else if (numValid > 0 && numInvalid == 0) {
    confidence = 80;
  } else if (numValid > numInvalid * 10) {
    // Probably corrupt UTF-32BE data.  Valid sequences aren't likely by chance.
    confidence = 25;
  }

  // return confidence == 0 ? null : new CharsetMatch(det, this, confidence);
  return confidence == 0 ? null : new Match(det, this, confidence);
};

module.exports.UTF_32BE = function() {
  this.name = function() {
    return 'UTF-32BE';
  };
  this.getChar = function(input, index) {
    return (input[index + 0] & 0xff) << 24 | (input[index + 1] & 0xff) << 16 |
         (input[index + 2] & 0xff) <<  8 | (input[index + 3] & 0xff);
  };
};
util.inherits(module.exports.UTF_32BE, UTF_32);

module.exports.UTF_32LE = function() {
  this.name = function() {
    return 'UTF-32LE';
  };
  this.getChar = function(input, index) {
    return (input[index + 3] & 0xff) << 24 | (input[index + 2] & 0xff) << 16 |
         (input[index + 1] & 0xff) <<  8 | (input[index + 0] & 0xff);
  };
};
util.inherits(module.exports.UTF_32LE, UTF_32);


/***/ }),

/***/ 985:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(2165);

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ 992:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scheduleArray = void 0;
var Observable_1 = __webpack_require__(541);
function scheduleArray(input, scheduler) {
    return new Observable_1.Observable(function (subscriber) {
        var i = 0;
        return scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
            }
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    this.schedule();
                }
            }
        });
    });
}
exports.scheduleArray = scheduleArray;
//# sourceMappingURL=scheduleArray.js.map

/***/ }),

/***/ 1012:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const EventEmitter = (__webpack_require__(4434).EventEmitter);
const childProcess = __webpack_require__(5317);
const path = __webpack_require__(6928);
const fs = __webpack_require__(9896);
const process = __webpack_require__(932);

const { Argument, humanReadableArgName } = __webpack_require__(3786);
const { CommanderError } = __webpack_require__(5367);
const { Help } = __webpack_require__(5058);
const { Option, splitOptionFlags, DualOptions } = __webpack_require__(7696);
const { suggestSimilar } = __webpack_require__(6206);

class Command extends EventEmitter {
  /**
   * Initialize a new `Command`.
   *
   * @param {string} [name]
   */

  constructor(name) {
    super();
    /** @type {Command[]} */
    this.commands = [];
    /** @type {Option[]} */
    this.options = [];
    this.parent = null;
    this._allowUnknownOption = false;
    this._allowExcessArguments = true;
    /** @type {Argument[]} */
    this.registeredArguments = [];
    this._args = this.registeredArguments; // deprecated old name
    /** @type {string[]} */
    this.args = []; // cli args with options removed
    this.rawArgs = [];
    this.processedArgs = []; // like .args but after custom processing and collecting variadic
    this._scriptPath = null;
    this._name = name || '';
    this._optionValues = {};
    this._optionValueSources = {}; // default, env, cli etc
    this._storeOptionsAsProperties = false;
    this._actionHandler = null;
    this._executableHandler = false;
    this._executableFile = null; // custom name for executable
    this._executableDir = null; // custom search directory for subcommands
    this._defaultCommandName = null;
    this._exitCallback = null;
    this._aliases = [];
    this._combineFlagAndOptionalValue = true;
    this._description = '';
    this._summary = '';
    this._argsDescription = undefined; // legacy
    this._enablePositionalOptions = false;
    this._passThroughOptions = false;
    this._lifeCycleHooks = {}; // a hash of arrays
    /** @type {boolean | string} */
    this._showHelpAfterError = false;
    this._showSuggestionAfterError = true;

    // see .configureOutput() for docs
    this._outputConfiguration = {
      writeOut: (str) => process.stdout.write(str),
      writeErr: (str) => process.stderr.write(str),
      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,
      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,
      outputError: (str, write) => write(str)
    };

    this._hidden = false;
    this._hasHelpOption = true;
    this._helpFlags = '-h, --help';
    this._helpDescription = 'display help for command';
    this._helpShortFlag = '-h';
    this._helpLongFlag = '--help';
    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false
    this._helpCommandName = 'help';
    this._helpCommandnameAndArgs = 'help [command]';
    this._helpCommandDescription = 'display help for command';
    this._helpConfiguration = {};
  }

  /**
   * Copy settings that are useful to have in common across root command and subcommands.
   *
   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)
   *
   * @param {Command} sourceCommand
   * @return {Command} `this` command for chaining
   */
  copyInheritedSettings(sourceCommand) {
    this._outputConfiguration = sourceCommand._outputConfiguration;
    this._hasHelpOption = sourceCommand._hasHelpOption;
    this._helpFlags = sourceCommand._helpFlags;
    this._helpDescription = sourceCommand._helpDescription;
    this._helpShortFlag = sourceCommand._helpShortFlag;
    this._helpLongFlag = sourceCommand._helpLongFlag;
    this._helpCommandName = sourceCommand._helpCommandName;
    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;
    this._helpCommandDescription = sourceCommand._helpCommandDescription;
    this._helpConfiguration = sourceCommand._helpConfiguration;
    this._exitCallback = sourceCommand._exitCallback;
    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;
    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;
    this._allowExcessArguments = sourceCommand._allowExcessArguments;
    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;
    this._showHelpAfterError = sourceCommand._showHelpAfterError;
    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;

    return this;
  }

  /**
   * @returns {Command[]}
   * @api private
   */

  _getCommandAndAncestors() {
    const result = [];
    for (let command = this; command; command = command.parent) {
      result.push(command);
    }
    return result;
  }

  /**
   * Define a command.
   *
   * There are two styles of command: pay attention to where to put the description.
   *
   * @example
   * // Command implemented using action handler (description is supplied separately to `.command`)
   * program
   *   .command('clone <source> [destination]')
   *   .description('clone a repository into a newly created directory')
   *   .action((source, destination) => {
   *     console.log('clone command called');
   *   });
   *
   * // Command implemented using separate executable file (description is second parameter to `.command`)
   * program
   *   .command('start <service>', 'start named service')
   *   .command('stop [service]', 'stop named service, or all if no name supplied');
   *
   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`
   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)
   * @param {Object} [execOpts] - configuration options (for executable)
   * @return {Command} returns new command for action handler, or `this` for executable command
   */

  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {
    let desc = actionOptsOrExecDesc;
    let opts = execOpts;
    if (typeof desc === 'object' && desc !== null) {
      opts = desc;
      desc = null;
    }
    opts = opts || {};
    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);

    const cmd = this.createCommand(name);
    if (desc) {
      cmd.description(desc);
      cmd._executableHandler = true;
    }
    if (opts.isDefault) this._defaultCommandName = cmd._name;
    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden
    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor
    if (args) cmd.arguments(args);
    this.commands.push(cmd);
    cmd.parent = this;
    cmd.copyInheritedSettings(this);

    if (desc) return this;
    return cmd;
  }

  /**
   * Factory routine to create a new unattached command.
   *
   * See .command() for creating an attached subcommand, which uses this routine to
   * create the command. You can override createCommand to customise subcommands.
   *
   * @param {string} [name]
   * @return {Command} new command
   */

  createCommand(name) {
    return new Command(name);
  }

  /**
   * You can customise the help with a subclass of Help by overriding createHelp,
   * or by overriding Help properties using configureHelp().
   *
   * @return {Help}
   */

  createHelp() {
    return Object.assign(new Help(), this.configureHelp());
  }

  /**
   * You can customise the help by overriding Help properties using configureHelp(),
   * or with a subclass of Help by overriding createHelp().
   *
   * @param {Object} [configuration] - configuration options
   * @return {Command|Object} `this` command for chaining, or stored configuration
   */

  configureHelp(configuration) {
    if (configuration === undefined) return this._helpConfiguration;

    this._helpConfiguration = configuration;
    return this;
  }

  /**
   * The default output goes to stdout and stderr. You can customise this for special
   * applications. You can also customise the display of errors by overriding outputError.
   *
   * The configuration properties are all functions:
   *
   *     // functions to change where being written, stdout and stderr
   *     writeOut(str)
   *     writeErr(str)
   *     // matching functions to specify width for wrapping help
   *     getOutHelpWidth()
   *     getErrHelpWidth()
   *     // functions based on what is being written out
   *     outputError(str, write) // used for displaying errors, and not used for displaying help
   *
   * @param {Object} [configuration] - configuration options
   * @return {Command|Object} `this` command for chaining, or stored configuration
   */

  configureOutput(configuration) {
    if (configuration === undefined) return this._outputConfiguration;

    Object.assign(this._outputConfiguration, configuration);
    return this;
  }

  /**
   * Display the help or a custom message after an error occurs.
   *
   * @param {boolean|string} [displayHelp]
   * @return {Command} `this` command for chaining
   */
  showHelpAfterError(displayHelp = true) {
    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;
    this._showHelpAfterError = displayHelp;
    return this;
  }

  /**
   * Display suggestion of similar commands for unknown commands, or options for unknown options.
   *
   * @param {boolean} [displaySuggestion]
   * @return {Command} `this` command for chaining
   */
  showSuggestionAfterError(displaySuggestion = true) {
    this._showSuggestionAfterError = !!displaySuggestion;
    return this;
  }

  /**
   * Add a prepared subcommand.
   *
   * See .command() for creating an attached subcommand which inherits settings from its parent.
   *
   * @param {Command} cmd - new subcommand
   * @param {Object} [opts] - configuration options
   * @return {Command} `this` command for chaining
   */

  addCommand(cmd, opts) {
    if (!cmd._name) {
      throw new Error(`Command passed to .addCommand() must have a name
- specify the name in Command constructor or using .name()`);
    }

    opts = opts || {};
    if (opts.isDefault) this._defaultCommandName = cmd._name;
    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation

    this.commands.push(cmd);
    cmd.parent = this;
    return this;
  }

  /**
   * Factory routine to create a new unattached argument.
   *
   * See .argument() for creating an attached argument, which uses this routine to
   * create the argument. You can override createArgument to return a custom argument.
   *
   * @param {string} name
   * @param {string} [description]
   * @return {Argument} new argument
   */

  createArgument(name, description) {
    return new Argument(name, description);
  }

  /**
   * Define argument syntax for command.
   *
   * The default is that the argument is required, and you can explicitly
   * indicate this with <> around the name. Put [] around the name for an optional argument.
   *
   * @example
   * program.argument('<input-file>');
   * program.argument('[output-file]');
   *
   * @param {string} name
   * @param {string} [description]
   * @param {Function|*} [fn] - custom argument processing function
   * @param {*} [defaultValue]
   * @return {Command} `this` command for chaining
   */
  argument(name, description, fn, defaultValue) {
    const argument = this.createArgument(name, description);
    if (typeof fn === 'function') {
      argument.default(defaultValue).argParser(fn);
    } else {
      argument.default(fn);
    }
    this.addArgument(argument);
    return this;
  }

  /**
   * Define argument syntax for command, adding multiple at once (without descriptions).
   *
   * See also .argument().
   *
   * @example
   * program.arguments('<cmd> [env]');
   *
   * @param {string} names
   * @return {Command} `this` command for chaining
   */

  arguments(names) {
    names.trim().split(/ +/).forEach((detail) => {
      this.argument(detail);
    });
    return this;
  }

  /**
   * Define argument syntax for command, adding a prepared argument.
   *
   * @param {Argument} argument
   * @return {Command} `this` command for chaining
   */
  addArgument(argument) {
    const previousArgument = this.registeredArguments.slice(-1)[0];
    if (previousArgument && previousArgument.variadic) {
      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);
    }
    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {
      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);
    }
    this.registeredArguments.push(argument);
    return this;
  }

  /**
   * Override default decision whether to add implicit help command.
   *
   *    addHelpCommand() // force on
   *    addHelpCommand(false); // force off
   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details
   *
   * @return {Command} `this` command for chaining
   */

  addHelpCommand(enableOrNameAndArgs, description) {
    if (enableOrNameAndArgs === false) {
      this._addImplicitHelpCommand = false;
    } else {
      this._addImplicitHelpCommand = true;
      if (typeof enableOrNameAndArgs === 'string') {
        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];
        this._helpCommandnameAndArgs = enableOrNameAndArgs;
      }
      this._helpCommandDescription = description || this._helpCommandDescription;
    }
    return this;
  }

  /**
   * @return {boolean}
   * @api private
   */

  _hasImplicitHelpCommand() {
    if (this._addImplicitHelpCommand === undefined) {
      return this.commands.length && !this._actionHandler && !this._findCommand('help');
    }
    return this._addImplicitHelpCommand;
  }

  /**
   * Add hook for life cycle event.
   *
   * @param {string} event
   * @param {Function} listener
   * @return {Command} `this` command for chaining
   */

  hook(event, listener) {
    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];
    if (!allowedValues.includes(event)) {
      throw new Error(`Unexpected value for event passed to hook : '${event}'.
Expecting one of '${allowedValues.join("', '")}'`);
    }
    if (this._lifeCycleHooks[event]) {
      this._lifeCycleHooks[event].push(listener);
    } else {
      this._lifeCycleHooks[event] = [listener];
    }
    return this;
  }

  /**
   * Register callback to use as replacement for calling process.exit.
   *
   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing
   * @return {Command} `this` command for chaining
   */

  exitOverride(fn) {
    if (fn) {
      this._exitCallback = fn;
    } else {
      this._exitCallback = (err) => {
        if (err.code !== 'commander.executeSubCommandAsync') {
          throw err;
        } else {
          // Async callback from spawn events, not useful to throw.
        }
      };
    }
    return this;
  }

  /**
   * Call process.exit, and _exitCallback if defined.
   *
   * @param {number} exitCode exit code for using with process.exit
   * @param {string} code an id string representing the error
   * @param {string} message human-readable description of the error
   * @return never
   * @api private
   */

  _exit(exitCode, code, message) {
    if (this._exitCallback) {
      this._exitCallback(new CommanderError(exitCode, code, message));
      // Expecting this line is not reached.
    }
    process.exit(exitCode);
  }

  /**
   * Register callback `fn` for the command.
   *
   * @example
   * program
   *   .command('serve')
   *   .description('start service')
   *   .action(function() {
   *      // do work here
   *   });
   *
   * @param {Function} fn
   * @return {Command} `this` command for chaining
   */

  action(fn) {
    const listener = (args) => {
      // The .action callback takes an extra parameter which is the command or options.
      const expectedArgsCount = this.registeredArguments.length;
      const actionArgs = args.slice(0, expectedArgsCount);
      if (this._storeOptionsAsProperties) {
        actionArgs[expectedArgsCount] = this; // backwards compatible "options"
      } else {
        actionArgs[expectedArgsCount] = this.opts();
      }
      actionArgs.push(this);

      return fn.apply(this, actionArgs);
    };
    this._actionHandler = listener;
    return this;
  }

  /**
   * Factory routine to create a new unattached option.
   *
   * See .option() for creating an attached option, which uses this routine to
   * create the option. You can override createOption to return a custom option.
   *
   * @param {string} flags
   * @param {string} [description]
   * @return {Option} new option
   */

  createOption(flags, description) {
    return new Option(flags, description);
  }

  /**
   * Wrap parseArgs to catch 'commander.invalidArgument'.
   *
   * @param {Option | Argument} target
   * @param {string} value
   * @param {*} previous
   * @param {string} invalidArgumentMessage
   * @api private
   */

  _callParseArg(target, value, previous, invalidArgumentMessage) {
    try {
      return target.parseArg(value, previous);
    } catch (err) {
      if (err.code === 'commander.invalidArgument') {
        const message = `${invalidArgumentMessage} ${err.message}`;
        this.error(message, { exitCode: err.exitCode, code: err.code });
      }
      throw err;
    }
  }

  /**
   * Add an option.
   *
   * @param {Option} option
   * @return {Command} `this` command for chaining
   */
  addOption(option) {
    const oname = option.name();
    const name = option.attributeName();

    // store default value
    if (option.negate) {
      // --no-foo is special and defaults foo to true, unless a --foo option is already defined
      const positiveLongFlag = option.long.replace(/^--no-/, '--');
      if (!this._findOption(positiveLongFlag)) {
        this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, 'default');
      }
    } else if (option.defaultValue !== undefined) {
      this.setOptionValueWithSource(name, option.defaultValue, 'default');
    }

    // register the option
    this.options.push(option);

    // handler for cli and env supplied values
    const handleOptionValue = (val, invalidValueMessage, valueSource) => {
      // val is null for optional option used without an optional-argument.
      // val is undefined for boolean and negated option.
      if (val == null && option.presetArg !== undefined) {
        val = option.presetArg;
      }

      // custom processing
      const oldValue = this.getOptionValue(name);
      if (val !== null && option.parseArg) {
        val = this._callParseArg(option, val, oldValue, invalidValueMessage);
      } else if (val !== null && option.variadic) {
        val = option._concatValue(val, oldValue);
      }

      // Fill-in appropriate missing values. Long winded but easy to follow.
      if (val == null) {
        if (option.negate) {
          val = false;
        } else if (option.isBoolean() || option.optional) {
          val = true;
        } else {
          val = ''; // not normal, parseArg might have failed or be a mock function for testing
        }
      }
      this.setOptionValueWithSource(name, val, valueSource);
    };

    this.on('option:' + oname, (val) => {
      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;
      handleOptionValue(val, invalidValueMessage, 'cli');
    });

    if (option.envVar) {
      this.on('optionEnv:' + oname, (val) => {
        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;
        handleOptionValue(val, invalidValueMessage, 'env');
      });
    }

    return this;
  }

  /**
   * Internal implementation shared by .option() and .requiredOption()
   *
   * @api private
   */
  _optionEx(config, flags, description, fn, defaultValue) {
    if (typeof flags === 'object' && flags instanceof Option) {
      throw new Error('To add an Option object use addOption() instead of option() or requiredOption()');
    }
    const option = this.createOption(flags, description);
    option.makeOptionMandatory(!!config.mandatory);
    if (typeof fn === 'function') {
      option.default(defaultValue).argParser(fn);
    } else if (fn instanceof RegExp) {
      // deprecated
      const regex = fn;
      fn = (val, def) => {
        const m = regex.exec(val);
        return m ? m[0] : def;
      };
      option.default(defaultValue).argParser(fn);
    } else {
      option.default(fn);
    }

    return this.addOption(option);
  }

  /**
   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.
   *
   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required
   * option-argument is indicated by `<>` and an optional option-argument by `[]`.
   *
   * See the README for more details, and see also addOption() and requiredOption().
   *
   * @example
   * program
   *     .option('-p, --pepper', 'add pepper')
   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument
   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default
   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function
   *
   * @param {string} flags
   * @param {string} [description]
   * @param {Function|*} [parseArg] - custom option processing function or default value
   * @param {*} [defaultValue]
   * @return {Command} `this` command for chaining
   */

  option(flags, description, parseArg, defaultValue) {
    return this._optionEx({}, flags, description, parseArg, defaultValue);
  }

  /**
  * Add a required option which must have a value after parsing. This usually means
  * the option must be specified on the command line. (Otherwise the same as .option().)
  *
  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.
  *
  * @param {string} flags
  * @param {string} [description]
  * @param {Function|*} [parseArg] - custom option processing function or default value
  * @param {*} [defaultValue]
  * @return {Command} `this` command for chaining
  */

  requiredOption(flags, description, parseArg, defaultValue) {
    return this._optionEx({ mandatory: true }, flags, description, parseArg, defaultValue);
  }

  /**
   * Alter parsing of short flags with optional values.
   *
   * @example
   * // for `.option('-f,--flag [value]'):
   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour
   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`
   *
   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.
   */
  combineFlagAndOptionalValue(combine = true) {
    this._combineFlagAndOptionalValue = !!combine;
    return this;
  }

  /**
   * Allow unknown options on the command line.
   *
   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown
   * for unknown options.
   */
  allowUnknownOption(allowUnknown = true) {
    this._allowUnknownOption = !!allowUnknown;
    return this;
  }

  /**
   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.
   *
   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown
   * for excess arguments.
   */
  allowExcessArguments(allowExcess = true) {
    this._allowExcessArguments = !!allowExcess;
    return this;
  }

  /**
   * Enable positional options. Positional means global options are specified before subcommands which lets
   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.
   * The default behaviour is non-positional and global options may appear anywhere on the command line.
   *
   * @param {Boolean} [positional=true]
   */
  enablePositionalOptions(positional = true) {
    this._enablePositionalOptions = !!positional;
    return this;
  }

  /**
   * Pass through options that come after command-arguments rather than treat them as command-options,
   * so actual command-options come before command-arguments. Turning this on for a subcommand requires
   * positional options to have been enabled on the program (parent commands).
   * The default behaviour is non-positional and options may appear before or after command-arguments.
   *
   * @param {Boolean} [passThrough=true]
   * for unknown options.
   */
  passThroughOptions(passThrough = true) {
    this._passThroughOptions = !!passThrough;
    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {
      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');
    }
    return this;
  }

  /**
    * Whether to store option values as properties on command object,
    * or store separately (specify false). In both cases the option values can be accessed using .opts().
    *
    * @param {boolean} [storeAsProperties=true]
    * @return {Command} `this` command for chaining
    */

  storeOptionsAsProperties(storeAsProperties = true) {
    if (this.options.length) {
      throw new Error('call .storeOptionsAsProperties() before adding options');
    }
    // if (Object.keys(this._optionValues).length) {
    //   throw new Error('call .storeOptionsAsProperties() before setting option values');
    // }
    this._storeOptionsAsProperties = !!storeAsProperties;
    return this;
  }

  /**
   * Retrieve option value.
   *
   * @param {string} key
   * @return {Object} value
   */

  getOptionValue(key) {
    if (this._storeOptionsAsProperties) {
      return this[key];
    }
    return this._optionValues[key];
  }

  /**
   * Store option value.
   *
   * @param {string} key
   * @param {Object} value
   * @return {Command} `this` command for chaining
   */

  setOptionValue(key, value) {
    return this.setOptionValueWithSource(key, value, undefined);
  }

  /**
    * Store option value and where the value came from.
    *
    * @param {string} key
    * @param {Object} value
    * @param {string} source - expected values are default/config/env/cli/implied
    * @return {Command} `this` command for chaining
    */

  setOptionValueWithSource(key, value, source) {
    if (this._storeOptionsAsProperties) {
      this[key] = value;
    } else {
      this._optionValues[key] = value;
    }
    this._optionValueSources[key] = source;
    return this;
  }

  /**
    * Get source of option value.
    * Expected values are default | config | env | cli | implied
    *
    * @param {string} key
    * @return {string}
    */

  getOptionValueSource(key) {
    return this._optionValueSources[key];
  }

  /**
    * Get source of option value. See also .optsWithGlobals().
    * Expected values are default | config | env | cli | implied
    *
    * @param {string} key
    * @return {string}
    */

  getOptionValueSourceWithGlobals(key) {
    // global overwrites local, like optsWithGlobals
    let source;
    this._getCommandAndAncestors().forEach((cmd) => {
      if (cmd.getOptionValueSource(key) !== undefined) {
        source = cmd.getOptionValueSource(key);
      }
    });
    return source;
  }

  /**
   * Get user arguments from implied or explicit arguments.
   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.
   *
   * @api private
   */

  _prepareUserArgs(argv, parseOptions) {
    if (argv !== undefined && !Array.isArray(argv)) {
      throw new Error('first parameter to parse must be array or undefined');
    }
    parseOptions = parseOptions || {};

    // Default to using process.argv
    if (argv === undefined) {
      argv = process.argv;
      // @ts-ignore: unknown property
      if (process.versions && process.versions.electron) {
        parseOptions.from = 'electron';
      }
    }
    this.rawArgs = argv.slice();

    // make it a little easier for callers by supporting various argv conventions
    let userArgs;
    switch (parseOptions.from) {
      case undefined:
      case 'node':
        this._scriptPath = argv[1];
        userArgs = argv.slice(2);
        break;
      case 'electron':
        // @ts-ignore: unknown property
        if (process.defaultApp) {
          this._scriptPath = argv[1];
          userArgs = argv.slice(2);
        } else {
          userArgs = argv.slice(1);
        }
        break;
      case 'user':
        userArgs = argv.slice(0);
        break;
      default:
        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);
    }

    // Find default name for program from arguments.
    if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);
    this._name = this._name || 'program';

    return userArgs;
  }

  /**
   * Parse `argv`, setting options and invoking commands when defined.
   *
   * The default expectation is that the arguments are from node and have the application as argv[0]
   * and the script being run in argv[1], with user parameters after that.
   *
   * @example
   * program.parse(process.argv);
   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions
   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
   *
   * @param {string[]} [argv] - optional, defaults to process.argv
   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron
   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'
   * @return {Command} `this` command for chaining
   */

  parse(argv, parseOptions) {
    const userArgs = this._prepareUserArgs(argv, parseOptions);
    this._parseCommand([], userArgs);

    return this;
  }

  /**
   * Parse `argv`, setting options and invoking commands when defined.
   *
   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.
   *
   * The default expectation is that the arguments are from node and have the application as argv[0]
   * and the script being run in argv[1], with user parameters after that.
   *
   * @example
   * await program.parseAsync(process.argv);
   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions
   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
   *
   * @param {string[]} [argv]
   * @param {Object} [parseOptions]
   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'
   * @return {Promise}
   */

  async parseAsync(argv, parseOptions) {
    const userArgs = this._prepareUserArgs(argv, parseOptions);
    await this._parseCommand([], userArgs);

    return this;
  }

  /**
   * Execute a sub-command executable.
   *
   * @api private
   */

  _executeSubCommand(subcommand, args) {
    args = args.slice();
    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.
    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];

    function findFile(baseDir, baseName) {
      // Look for specified file
      const localBin = path.resolve(baseDir, baseName);
      if (fs.existsSync(localBin)) return localBin;

      // Stop looking if candidate already has an expected extension.
      if (sourceExt.includes(path.extname(baseName))) return undefined;

      // Try all the extensions.
      const foundExt = sourceExt.find(ext => fs.existsSync(`${localBin}${ext}`));
      if (foundExt) return `${localBin}${foundExt}`;

      return undefined;
    }

    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.
    this._checkForMissingMandatoryOptions();
    this._checkForConflictingOptions();

    // executableFile and executableDir might be full path, or just a name
    let executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;
    let executableDir = this._executableDir || '';
    if (this._scriptPath) {
      let resolvedScriptPath; // resolve possible symlink for installed npm binary
      try {
        resolvedScriptPath = fs.realpathSync(this._scriptPath);
      } catch (err) {
        resolvedScriptPath = this._scriptPath;
      }
      executableDir = path.resolve(path.dirname(resolvedScriptPath), executableDir);
    }

    // Look for a local file in preference to a command in PATH.
    if (executableDir) {
      let localFile = findFile(executableDir, executableFile);

      // Legacy search using prefix of script name instead of command name
      if (!localFile && !subcommand._executableFile && this._scriptPath) {
        const legacyName = path.basename(this._scriptPath, path.extname(this._scriptPath));
        if (legacyName !== this._name) {
          localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);
        }
      }
      executableFile = localFile || executableFile;
    }

    launchWithNode = sourceExt.includes(path.extname(executableFile));

    let proc;
    if (process.platform !== 'win32') {
      if (launchWithNode) {
        args.unshift(executableFile);
        // add executable arguments to spawn
        args = incrementNodeInspectorPort(process.execArgv).concat(args);

        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });
      } else {
        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });
      }
    } else {
      args.unshift(executableFile);
      // add executable arguments to spawn
      args = incrementNodeInspectorPort(process.execArgv).concat(args);
      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });
    }

    if (!proc.killed) { // testing mainly to avoid leak warnings during unit tests with mocked spawn
      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];
      signals.forEach((signal) => {
        // @ts-ignore
        process.on(signal, () => {
          if (proc.killed === false && proc.exitCode === null) {
            proc.kill(signal);
          }
        });
      });
    }

    // By default terminate process when spawned process terminates.
    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!
    const exitCallback = this._exitCallback;
    if (!exitCallback) {
      proc.on('close', process.exit.bind(process));
    } else {
      proc.on('close', () => {
        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));
      });
    }
    proc.on('error', (err) => {
      // @ts-ignore
      if (err.code === 'ENOENT') {
        const executableDirMessage = executableDir
          ? `searched for local subcommand relative to directory '${executableDir}'`
          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';
        const executableMissing = `'${executableFile}' does not exist
 - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name or path
 - ${executableDirMessage}`;
        throw new Error(executableMissing);
      // @ts-ignore
      } else if (err.code === 'EACCES') {
        throw new Error(`'${executableFile}' not executable`);
      }
      if (!exitCallback) {
        process.exit(1);
      } else {
        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');
        wrappedError.nestedError = err;
        exitCallback(wrappedError);
      }
    });

    // Store the reference to the child process
    this.runningCommand = proc;
  }

  /**
   * @api private
   */

  _dispatchSubcommand(commandName, operands, unknown) {
    const subCommand = this._findCommand(commandName);
    if (!subCommand) this.help({ error: true });

    let promiseChain;
    promiseChain = this._chainOrCallSubCommandHook(promiseChain, subCommand, 'preSubcommand');
    promiseChain = this._chainOrCall(promiseChain, () => {
      if (subCommand._executableHandler) {
        this._executeSubCommand(subCommand, operands.concat(unknown));
      } else {
        return subCommand._parseCommand(operands, unknown);
      }
    });
    return promiseChain;
  }

  /**
   * Invoke help directly if possible, or dispatch if necessary.
   * e.g. help foo
   *
   * @api private
   */

  _dispatchHelpCommand(subcommandName) {
    if (!subcommandName) {
      this.help();
    }
    const subCommand = this._findCommand(subcommandName);
    if (subCommand && !subCommand._executableHandler) {
      subCommand.help();
    }

    // Fallback to parsing the help flag to invoke the help.
    return this._dispatchSubcommand(subcommandName, [], [
      this._helpLongFlag || this._helpShortFlag
    ]);
  }

  /**
   * Check this.args against expected this.registeredArguments.
   *
   * @api private
   */

  _checkNumberOfArguments() {
    // too few
    this.registeredArguments.forEach((arg, i) => {
      if (arg.required && this.args[i] == null) {
        this.missingArgument(arg.name());
      }
    });
    // too many
    if (this.registeredArguments.length > 0 && this.registeredArguments[this.registeredArguments.length - 1].variadic) {
      return;
    }
    if (this.args.length > this.registeredArguments.length) {
      this._excessArguments(this.args);
    }
  }

  /**
   * Process this.args using this.registeredArguments and save as this.processedArgs!
   *
   * @api private
   */

  _processArguments() {
    const myParseArg = (argument, value, previous) => {
      // Extra processing for nice error message on parsing failure.
      let parsedValue = value;
      if (value !== null && argument.parseArg) {
        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;
        parsedValue = this._callParseArg(argument, value, previous, invalidValueMessage);
      }
      return parsedValue;
    };

    this._checkNumberOfArguments();

    const processedArgs = [];
    this.registeredArguments.forEach((declaredArg, index) => {
      let value = declaredArg.defaultValue;
      if (declaredArg.variadic) {
        // Collect together remaining arguments for passing together as an array.
        if (index < this.args.length) {
          value = this.args.slice(index);
          if (declaredArg.parseArg) {
            value = value.reduce((processed, v) => {
              return myParseArg(declaredArg, v, processed);
            }, declaredArg.defaultValue);
          }
        } else if (value === undefined) {
          value = [];
        }
      } else if (index < this.args.length) {
        value = this.args[index];
        if (declaredArg.parseArg) {
          value = myParseArg(declaredArg, value, declaredArg.defaultValue);
        }
      }
      processedArgs[index] = value;
    });
    this.processedArgs = processedArgs;
  }

  /**
   * Once we have a promise we chain, but call synchronously until then.
   *
   * @param {Promise|undefined} promise
   * @param {Function} fn
   * @return {Promise|undefined}
   * @api private
   */

  _chainOrCall(promise, fn) {
    // thenable
    if (promise && promise.then && typeof promise.then === 'function') {
      // already have a promise, chain callback
      return promise.then(() => fn());
    }
    // callback might return a promise
    return fn();
  }

  /**
   *
   * @param {Promise|undefined} promise
   * @param {string} event
   * @return {Promise|undefined}
   * @api private
   */

  _chainOrCallHooks(promise, event) {
    let result = promise;
    const hooks = [];
    this._getCommandAndAncestors()
      .reverse()
      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)
      .forEach(hookedCommand => {
        hookedCommand._lifeCycleHooks[event].forEach((callback) => {
          hooks.push({ hookedCommand, callback });
        });
      });
    if (event === 'postAction') {
      hooks.reverse();
    }

    hooks.forEach((hookDetail) => {
      result = this._chainOrCall(result, () => {
        return hookDetail.callback(hookDetail.hookedCommand, this);
      });
    });
    return result;
  }

  /**
   *
   * @param {Promise|undefined} promise
   * @param {Command} subCommand
   * @param {string} event
   * @return {Promise|undefined}
   * @api private
   */

  _chainOrCallSubCommandHook(promise, subCommand, event) {
    let result = promise;
    if (this._lifeCycleHooks[event] !== undefined) {
      this._lifeCycleHooks[event].forEach((hook) => {
        result = this._chainOrCall(result, () => {
          return hook(this, subCommand);
        });
      });
    }
    return result;
  }

  /**
   * Process arguments in context of this command.
   * Returns action result, in case it is a promise.
   *
   * @api private
   */

  _parseCommand(operands, unknown) {
    const parsed = this.parseOptions(unknown);
    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env
    this._parseOptionsImplied();
    operands = operands.concat(parsed.operands);
    unknown = parsed.unknown;
    this.args = operands.concat(unknown);

    if (operands && this._findCommand(operands[0])) {
      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);
    }
    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {
      return this._dispatchHelpCommand(operands[1]);
    }
    if (this._defaultCommandName) {
      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command
      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);
    }
    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {
      // probably missing subcommand and no handler, user needs help (and exit)
      this.help({ error: true });
    }

    outputHelpIfRequested(this, parsed.unknown);
    this._checkForMissingMandatoryOptions();
    this._checkForConflictingOptions();

    // We do not always call this check to avoid masking a "better" error, like unknown command.
    const checkForUnknownOptions = () => {
      if (parsed.unknown.length > 0) {
        this.unknownOption(parsed.unknown[0]);
      }
    };

    const commandEvent = `command:${this.name()}`;
    if (this._actionHandler) {
      checkForUnknownOptions();
      this._processArguments();

      let promiseChain;
      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');
      promiseChain = this._chainOrCall(promiseChain, () => this._actionHandler(this.processedArgs));
      if (this.parent) {
        promiseChain = this._chainOrCall(promiseChain, () => {
          this.parent.emit(commandEvent, operands, unknown); // legacy
        });
      }
      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');
      return promiseChain;
    }
    if (this.parent && this.parent.listenerCount(commandEvent)) {
      checkForUnknownOptions();
      this._processArguments();
      this.parent.emit(commandEvent, operands, unknown); // legacy
    } else if (operands.length) {
      if (this._findCommand('*')) { // legacy default command
        return this._dispatchSubcommand('*', operands, unknown);
      }
      if (this.listenerCount('command:*')) {
        // skip option check, emit event for possible misspelling suggestion
        this.emit('command:*', operands, unknown);
      } else if (this.commands.length) {
        this.unknownCommand();
      } else {
        checkForUnknownOptions();
        this._processArguments();
      }
    } else if (this.commands.length) {
      checkForUnknownOptions();
      // This command has subcommands and nothing hooked up at this level, so display help (and exit).
      this.help({ error: true });
    } else {
      checkForUnknownOptions();
      this._processArguments();
      // fall through for caller to handle after calling .parse()
    }
  }

  /**
   * Find matching command.
   *
   * @api private
   */
  _findCommand(name) {
    if (!name) return undefined;
    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));
  }

  /**
   * Return an option matching `arg` if any.
   *
   * @param {string} arg
   * @return {Option}
   * @api private
   */

  _findOption(arg) {
    return this.options.find(option => option.is(arg));
  }

  /**
   * Display an error message if a mandatory option does not have a value.
   * Called after checking for help flags in leaf subcommand.
   *
   * @api private
   */

  _checkForMissingMandatoryOptions() {
    // Walk up hierarchy so can call in subcommand after checking for displaying help.
    this._getCommandAndAncestors().forEach((cmd) => {
      cmd.options.forEach((anOption) => {
        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {
          cmd.missingMandatoryOptionValue(anOption);
        }
      });
    });
  }

  /**
   * Display an error message if conflicting options are used together in this.
   *
   * @api private
   */
  _checkForConflictingLocalOptions() {
    const definedNonDefaultOptions = this.options.filter(
      (option) => {
        const optionKey = option.attributeName();
        if (this.getOptionValue(optionKey) === undefined) {
          return false;
        }
        return this.getOptionValueSource(optionKey) !== 'default';
      }
    );

    const optionsWithConflicting = definedNonDefaultOptions.filter(
      (option) => option.conflictsWith.length > 0
    );

    optionsWithConflicting.forEach((option) => {
      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>
        option.conflictsWith.includes(defined.attributeName())
      );
      if (conflictingAndDefined) {
        this._conflictingOption(option, conflictingAndDefined);
      }
    });
  }

  /**
   * Display an error message if conflicting options are used together.
   * Called after checking for help flags in leaf subcommand.
   *
   * @api private
   */
  _checkForConflictingOptions() {
    // Walk up hierarchy so can call in subcommand after checking for displaying help.
    this._getCommandAndAncestors().forEach((cmd) => {
      cmd._checkForConflictingLocalOptions();
    });
  }

  /**
   * Parse options from `argv` removing known options,
   * and return argv split into operands and unknown arguments.
   *
   * Examples:
   *
   *     argv => operands, unknown
   *     --known kkk op => [op], []
   *     op --known kkk => [op], []
   *     sub --unknown uuu op => [sub], [--unknown uuu op]
   *     sub -- --unknown uuu op => [sub --unknown uuu op], []
   *
   * @param {String[]} argv
   * @return {{operands: String[], unknown: String[]}}
   */

  parseOptions(argv) {
    const operands = []; // operands, not options or values
    const unknown = []; // first unknown option and remaining unknown args
    let dest = operands;
    const args = argv.slice();

    function maybeOption(arg) {
      return arg.length > 1 && arg[0] === '-';
    }

    // parse options
    let activeVariadicOption = null;
    while (args.length) {
      const arg = args.shift();

      // literal
      if (arg === '--') {
        if (dest === unknown) dest.push(arg);
        dest.push(...args);
        break;
      }

      if (activeVariadicOption && !maybeOption(arg)) {
        this.emit(`option:${activeVariadicOption.name()}`, arg);
        continue;
      }
      activeVariadicOption = null;

      if (maybeOption(arg)) {
        const option = this._findOption(arg);
        // recognised option, call listener to assign value with possible custom processing
        if (option) {
          if (option.required) {
            const value = args.shift();
            if (value === undefined) this.optionMissingArgument(option);
            this.emit(`option:${option.name()}`, value);
          } else if (option.optional) {
            let value = null;
            // historical behaviour is optional value is following arg unless an option
            if (args.length > 0 && !maybeOption(args[0])) {
              value = args.shift();
            }
            this.emit(`option:${option.name()}`, value);
          } else { // boolean flag
            this.emit(`option:${option.name()}`);
          }
          activeVariadicOption = option.variadic ? option : null;
          continue;
        }
      }

      // Look for combo options following single dash, eat first one if known.
      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {
        const option = this._findOption(`-${arg[1]}`);
        if (option) {
          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {
            // option with value following in same argument
            this.emit(`option:${option.name()}`, arg.slice(2));
          } else {
            // boolean option, emit and put back remainder of arg for further processing
            this.emit(`option:${option.name()}`);
            args.unshift(`-${arg.slice(2)}`);
          }
          continue;
        }
      }

      // Look for known long flag with value, like --foo=bar
      if (/^--[^=]+=/.test(arg)) {
        const index = arg.indexOf('=');
        const option = this._findOption(arg.slice(0, index));
        if (option && (option.required || option.optional)) {
          this.emit(`option:${option.name()}`, arg.slice(index + 1));
          continue;
        }
      }

      // Not a recognised option by this command.
      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.

      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.
      if (maybeOption(arg)) {
        dest = unknown;
      }

      // If using positionalOptions, stop processing our options at subcommand.
      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {
        if (this._findCommand(arg)) {
          operands.push(arg);
          if (args.length > 0) unknown.push(...args);
          break;
        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {
          operands.push(arg);
          if (args.length > 0) operands.push(...args);
          break;
        } else if (this._defaultCommandName) {
          unknown.push(arg);
          if (args.length > 0) unknown.push(...args);
          break;
        }
      }

      // If using passThroughOptions, stop processing options at first command-argument.
      if (this._passThroughOptions) {
        dest.push(arg);
        if (args.length > 0) dest.push(...args);
        break;
      }

      // add arg
      dest.push(arg);
    }

    return { operands, unknown };
  }

  /**
   * Return an object containing local option values as key-value pairs.
   *
   * @return {Object}
   */
  opts() {
    if (this._storeOptionsAsProperties) {
      // Preserve original behaviour so backwards compatible when still using properties
      const result = {};
      const len = this.options.length;

      for (let i = 0; i < len; i++) {
        const key = this.options[i].attributeName();
        result[key] = key === this._versionOptionName ? this._version : this[key];
      }
      return result;
    }

    return this._optionValues;
  }

  /**
   * Return an object containing merged local and global option values as key-value pairs.
   *
   * @return {Object}
   */
  optsWithGlobals() {
    // globals overwrite locals
    return this._getCommandAndAncestors().reduce(
      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),
      {}
    );
  }

  /**
   * Display error message and exit (or call exitOverride).
   *
   * @param {string} message
   * @param {Object} [errorOptions]
   * @param {string} [errorOptions.code] - an id string representing the error
   * @param {number} [errorOptions.exitCode] - used with process.exit
   */
  error(message, errorOptions) {
    // output handling
    this._outputConfiguration.outputError(`${message}\n`, this._outputConfiguration.writeErr);
    if (typeof this._showHelpAfterError === 'string') {
      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\n`);
    } else if (this._showHelpAfterError) {
      this._outputConfiguration.writeErr('\n');
      this.outputHelp({ error: true });
    }

    // exit handling
    const config = errorOptions || {};
    const exitCode = config.exitCode || 1;
    const code = config.code || 'commander.error';
    this._exit(exitCode, code, message);
  }

  /**
   * Apply any option related environment variables, if option does
   * not have a value from cli or client code.
   *
   * @api private
   */
  _parseOptionsEnv() {
    this.options.forEach((option) => {
      if (option.envVar && option.envVar in process.env) {
        const optionKey = option.attributeName();
        // Priority check. Do not overwrite cli or options from unknown source (client-code).
        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {
          if (option.required || option.optional) { // option can take a value
            // keep very simple, optional always takes value
            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);
          } else { // boolean
            // keep very simple, only care that envVar defined and not the value
            this.emit(`optionEnv:${option.name()}`);
          }
        }
      }
    });
  }

  /**
   * Apply any implied option values, if option is undefined or default value.
   *
   * @api private
   */
  _parseOptionsImplied() {
    const dualHelper = new DualOptions(this.options);
    const hasCustomOptionValue = (optionKey) => {
      return this.getOptionValue(optionKey) !== undefined && !['default', 'implied'].includes(this.getOptionValueSource(optionKey));
    };
    this.options
      .filter(option => (option.implied !== undefined) &&
        hasCustomOptionValue(option.attributeName()) &&
        dualHelper.valueFromOption(this.getOptionValue(option.attributeName()), option))
      .forEach((option) => {
        Object.keys(option.implied)
          .filter(impliedKey => !hasCustomOptionValue(impliedKey))
          .forEach(impliedKey => {
            this.setOptionValueWithSource(impliedKey, option.implied[impliedKey], 'implied');
          });
      });
  }

  /**
   * Argument `name` is missing.
   *
   * @param {string} name
   * @api private
   */

  missingArgument(name) {
    const message = `error: missing required argument '${name}'`;
    this.error(message, { code: 'commander.missingArgument' });
  }

  /**
   * `Option` is missing an argument.
   *
   * @param {Option} option
   * @api private
   */

  optionMissingArgument(option) {
    const message = `error: option '${option.flags}' argument missing`;
    this.error(message, { code: 'commander.optionMissingArgument' });
  }

  /**
   * `Option` does not have a value, and is a mandatory option.
   *
   * @param {Option} option
   * @api private
   */

  missingMandatoryOptionValue(option) {
    const message = `error: required option '${option.flags}' not specified`;
    this.error(message, { code: 'commander.missingMandatoryOptionValue' });
  }

  /**
   * `Option` conflicts with another option.
   *
   * @param {Option} option
   * @param {Option} conflictingOption
   * @api private
   */
  _conflictingOption(option, conflictingOption) {
    // The calling code does not know whether a negated option is the source of the
    // value, so do some work to take an educated guess.
    const findBestOptionFromValue = (option) => {
      const optionKey = option.attributeName();
      const optionValue = this.getOptionValue(optionKey);
      const negativeOption = this.options.find(target => target.negate && optionKey === target.attributeName());
      const positiveOption = this.options.find(target => !target.negate && optionKey === target.attributeName());
      if (negativeOption && (
        (negativeOption.presetArg === undefined && optionValue === false) ||
        (negativeOption.presetArg !== undefined && optionValue === negativeOption.presetArg)
      )) {
        return negativeOption;
      }
      return positiveOption || option;
    };

    const getErrorMessage = (option) => {
      const bestOption = findBestOptionFromValue(option);
      const optionKey = bestOption.attributeName();
      const source = this.getOptionValueSource(optionKey);
      if (source === 'env') {
        return `environment variable '${bestOption.envVar}'`;
      }
      return `option '${bestOption.flags}'`;
    };

    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;
    this.error(message, { code: 'commander.conflictingOption' });
  }

  /**
   * Unknown option `flag`.
   *
   * @param {string} flag
   * @api private
   */

  unknownOption(flag) {
    if (this._allowUnknownOption) return;
    let suggestion = '';

    if (flag.startsWith('--') && this._showSuggestionAfterError) {
      // Looping to pick up the global options too
      let candidateFlags = [];
      let command = this;
      do {
        const moreFlags = command.createHelp().visibleOptions(command)
          .filter(option => option.long)
          .map(option => option.long);
        candidateFlags = candidateFlags.concat(moreFlags);
        command = command.parent;
      } while (command && !command._enablePositionalOptions);
      suggestion = suggestSimilar(flag, candidateFlags);
    }

    const message = `error: unknown option '${flag}'${suggestion}`;
    this.error(message, { code: 'commander.unknownOption' });
  }

  /**
   * Excess arguments, more than expected.
   *
   * @param {string[]} receivedArgs
   * @api private
   */

  _excessArguments(receivedArgs) {
    if (this._allowExcessArguments) return;

    const expected = this.registeredArguments.length;
    const s = (expected === 1) ? '' : 's';
    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';
    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;
    this.error(message, { code: 'commander.excessArguments' });
  }

  /**
   * Unknown command.
   *
   * @api private
   */

  unknownCommand() {
    const unknownName = this.args[0];
    let suggestion = '';

    if (this._showSuggestionAfterError) {
      const candidateNames = [];
      this.createHelp().visibleCommands(this).forEach((command) => {
        candidateNames.push(command.name());
        // just visible alias
        if (command.alias()) candidateNames.push(command.alias());
      });
      suggestion = suggestSimilar(unknownName, candidateNames);
    }

    const message = `error: unknown command '${unknownName}'${suggestion}`;
    this.error(message, { code: 'commander.unknownCommand' });
  }

  /**
   * Get or set the program version.
   *
   * This method auto-registers the "-V, --version" option which will print the version number.
   *
   * You can optionally supply the flags and description to override the defaults.
   *
   * @param {string} [str]
   * @param {string} [flags]
   * @param {string} [description]
   * @return {this | string | undefined} `this` command for chaining, or version string if no arguments
   */

  version(str, flags, description) {
    if (str === undefined) return this._version;
    this._version = str;
    flags = flags || '-V, --version';
    description = description || 'output the version number';
    const versionOption = this.createOption(flags, description);
    this._versionOptionName = versionOption.attributeName(); // [sic] not defined in constructor, partly legacy, partly only needed at root
    this.options.push(versionOption);
    this.on('option:' + versionOption.name(), () => {
      this._outputConfiguration.writeOut(`${str}\n`);
      this._exit(0, 'commander.version', str);
    });
    return this;
  }

  /**
   * Set the description.
   *
   * @param {string} [str]
   * @param {Object} [argsDescription]
   * @return {string|Command}
   */
  description(str, argsDescription) {
    if (str === undefined && argsDescription === undefined) return this._description;
    this._description = str;
    if (argsDescription) {
      this._argsDescription = argsDescription;
    }
    return this;
  }

  /**
   * Set the summary. Used when listed as subcommand of parent.
   *
   * @param {string} [str]
   * @return {string|Command}
   */
  summary(str) {
    if (str === undefined) return this._summary;
    this._summary = str;
    return this;
  }

  /**
   * Set an alias for the command.
   *
   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.
   *
   * @param {string} [alias]
   * @return {string|Command}
   */

  alias(alias) {
    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility

    /** @type {Command} */
    let command = this;
    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {
      // assume adding alias for last added executable subcommand, rather than this
      command = this.commands[this.commands.length - 1];
    }

    if (alias === command._name) throw new Error('Command alias can\'t be the same as its name');

    command._aliases.push(alias);
    return this;
  }

  /**
   * Set aliases for the command.
   *
   * Only the first alias is shown in the auto-generated help.
   *
   * @param {string[]} [aliases]
   * @return {string[]|Command}
   */

  aliases(aliases) {
    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().
    if (aliases === undefined) return this._aliases;

    aliases.forEach((alias) => this.alias(alias));
    return this;
  }

  /**
   * Set / get the command usage `str`.
   *
   * @param {string} [str]
   * @return {String|Command}
   */

  usage(str) {
    if (str === undefined) {
      if (this._usage) return this._usage;

      const args = this.registeredArguments.map((arg) => {
        return humanReadableArgName(arg);
      });
      return [].concat(
        (this.options.length || this._hasHelpOption ? '[options]' : []),
        (this.commands.length ? '[command]' : []),
        (this.registeredArguments.length ? args : [])
      ).join(' ');
    }

    this._usage = str;
    return this;
  }

  /**
   * Get or set the name of the command.
   *
   * @param {string} [str]
   * @return {string|Command}
   */

  name(str) {
    if (str === undefined) return this._name;
    this._name = str;
    return this;
  }

  /**
   * Set the name of the command from script filename, such as process.argv[1],
   * or require.main.filename, or __filename.
   *
   * (Used internally and public although not documented in README.)
   *
   * @example
   * program.nameFromFilename(require.main.filename);
   *
   * @param {string} filename
   * @return {Command}
   */

  nameFromFilename(filename) {
    this._name = path.basename(filename, path.extname(filename));

    return this;
  }

  /**
   * Get or set the directory for searching for executable subcommands of this command.
   *
   * @example
   * program.executableDir(__dirname);
   * // or
   * program.executableDir('subcommands');
   *
   * @param {string} [path]
   * @return {string|null|Command}
   */

  executableDir(path) {
    if (path === undefined) return this._executableDir;
    this._executableDir = path;
    return this;
  }

  /**
   * Return program help documentation.
   *
   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout
   * @return {string}
   */

  helpInformation(contextOptions) {
    const helper = this.createHelp();
    if (helper.helpWidth === undefined) {
      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();
    }
    return helper.formatHelp(this, helper);
  }

  /**
   * @api private
   */

  _getHelpContext(contextOptions) {
    contextOptions = contextOptions || {};
    const context = { error: !!contextOptions.error };
    let write;
    if (context.error) {
      write = (arg) => this._outputConfiguration.writeErr(arg);
    } else {
      write = (arg) => this._outputConfiguration.writeOut(arg);
    }
    context.write = contextOptions.write || write;
    context.command = this;
    return context;
  }

  /**
   * Output help information for this command.
   *
   * Outputs built-in help, and custom text added using `.addHelpText()`.
   *
   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout
   */

  outputHelp(contextOptions) {
    let deprecatedCallback;
    if (typeof contextOptions === 'function') {
      deprecatedCallback = contextOptions;
      contextOptions = undefined;
    }
    const context = this._getHelpContext(contextOptions);

    this._getCommandAndAncestors().reverse().forEach(command => command.emit('beforeAllHelp', context));
    this.emit('beforeHelp', context);

    let helpInformation = this.helpInformation(context);
    if (deprecatedCallback) {
      helpInformation = deprecatedCallback(helpInformation);
      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {
        throw new Error('outputHelp callback must return a string or a Buffer');
      }
    }
    context.write(helpInformation);

    if (this._helpLongFlag) {
      this.emit(this._helpLongFlag); // deprecated
    }
    this.emit('afterHelp', context);
    this._getCommandAndAncestors().forEach(command => command.emit('afterAllHelp', context));
  }

  /**
   * You can pass in flags and a description to override the help
   * flags and help description for your command. Pass in false to
   * disable the built-in help option.
   *
   * @param {string | boolean} [flags]
   * @param {string} [description]
   * @return {Command} `this` command for chaining
   */

  helpOption(flags, description) {
    if (typeof flags === 'boolean') {
      this._hasHelpOption = flags;
      return this;
    }
    this._helpFlags = flags || this._helpFlags;
    this._helpDescription = description || this._helpDescription;

    const helpFlags = splitOptionFlags(this._helpFlags);
    this._helpShortFlag = helpFlags.shortFlag;
    this._helpLongFlag = helpFlags.longFlag;

    return this;
  }

  /**
   * Output help information and exit.
   *
   * Outputs built-in help, and custom text added using `.addHelpText()`.
   *
   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout
   */

  help(contextOptions) {
    this.outputHelp(contextOptions);
    let exitCode = process.exitCode || 0;
    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {
      exitCode = 1;
    }
    // message: do not have all displayed text available so only passing placeholder.
    this._exit(exitCode, 'commander.help', '(outputHelp)');
  }

  /**
   * Add additional text to be displayed with the built-in help.
   *
   * Position is 'before' or 'after' to affect just this command,
   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.
   *
   * @param {string} position - before or after built-in help
   * @param {string | Function} text - string to add, or a function returning a string
   * @return {Command} `this` command for chaining
   */
  addHelpText(position, text) {
    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];
    if (!allowedValues.includes(position)) {
      throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${allowedValues.join("', '")}'`);
    }
    const helpEvent = `${position}Help`;
    this.on(helpEvent, (context) => {
      let helpStr;
      if (typeof text === 'function') {
        helpStr = text({ error: context.error, command: context.command });
      } else {
        helpStr = text;
      }
      // Ignore falsy value when nothing to output.
      if (helpStr) {
        context.write(`${helpStr}\n`);
      }
    });
    return this;
  }
}

/**
 * Output help information if help flags specified
 *
 * @param {Command} cmd - command to output help for
 * @param {Array} args - array of options to search for help flags
 * @api private
 */

function outputHelpIfRequested(cmd, args) {
  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);
  if (helpOption) {
    cmd.outputHelp();
    // (Do not have all displayed text available so only passing placeholder.)
    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');
  }
}

/**
 * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).
 *
 * @param {string[]} args - array of arguments from node.execArgv
 * @returns {string[]}
 * @api private
 */

function incrementNodeInspectorPort(args) {
  // Testing for these options:
  //  --inspect[=[host:]port]
  //  --inspect-brk[=[host:]port]
  //  --inspect-port=[host:]port
  return args.map((arg) => {
    if (!arg.startsWith('--inspect')) {
      return arg;
    }
    let debugOption;
    let debugHost = '127.0.0.1';
    let debugPort = '9229';
    let match;
    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {
      // e.g. --inspect
      debugOption = match[1];
    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {
      debugOption = match[1];
      if (/^\d+$/.test(match[3])) {
        // e.g. --inspect=1234
        debugPort = match[3];
      } else {
        // e.g. --inspect=localhost
        debugHost = match[3];
      }
    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null) {
      // e.g. --inspect=localhost:1234
      debugOption = match[1];
      debugHost = match[3];
      debugPort = match[4];
    }

    if (debugOption && debugPort !== '0') {
      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;
    }
    return arg;
  });
}

exports.Command = Command;


/***/ }),

/***/ 1029:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var Buffer = (__webpack_require__(7475).Buffer);

// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
// To save memory and loading time, we read table files only when requested.

exports._dbcs = DBCSCodec;

var UNASSIGNED = -1,
    GB18030_CODE = -2,
    SEQ_START  = -10,
    NODE_START = -1000,
    UNASSIGNED_NODE = new Array(0x100),
    DEF_CHAR = -1;

for (var i = 0; i < 0x100; i++)
    UNASSIGNED_NODE[i] = UNASSIGNED;


// Class DBCSCodec reads and initializes mapping tables.
function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions)
        throw new Error("DBCS codec is called without the data.")
    if (!codecOptions.table)
        throw new Error("Encoding '" + this.encodingName + "' has no data.");

    // Load tables.
    var mappingTable = codecOptions.table();


    // Decode tables: MBCS -> Unicode.

    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
    // Trie root is decodeTables[0].
    // Values: >=  0 -> unicode character code. can be > 0xFFFF
    //         == UNASSIGNED -> unknown/unassigned sequence.
    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
    //         <= NODE_START -> index of the next node in our trie to process next byte.
    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
    this.decodeTableSeq = [];

    // Actual mapping tables consist of chunks. Use them to fill up decode tables.
    for (var i = 0; i < mappingTable.length; i++)
        this._addDecodeChunk(mappingTable[i]);

    this.defaultCharUnicode = iconv.defaultCharUnicode;

    
    // Encode tables: Unicode -> DBCS.

    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
    //         == UNASSIGNED -> no conversion found. Output a default char.
    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
    this.encodeTable = [];
    
    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
    // means end of sequence (needed when one sequence is a strict subsequence of another).
    // Objects are kept separately from encodeTable to increase performance.
    this.encodeTableSeq = [];

    // Some chars can be decoded, but need not be encoded.
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals)
        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
            var val = codecOptions.encodeSkipVals[i];
            if (typeof val === 'number')
                skipEncodeChars[val] = true;
            else
                for (var j = val.from; j <= val.to; j++)
                    skipEncodeChars[j] = true;
        }
        
    // Use decode trie to recursively fill out encode tables.
    this._fillEncodeTable(0, 0, skipEncodeChars);

    // Add more encoding pairs when needed.
    if (codecOptions.encodeAdd) {
        for (var uChar in codecOptions.encodeAdd)
            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }

    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);


    // Load & create GB18030 tables when needed.
    if (typeof codecOptions.gb18030 === 'function') {
        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

        // Add GB18030 decode tables.
        var thirdByteNodeIdx = this.decodeTables.length;
        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);

        var fourthByteNodeIdx = this.decodeTables.length;
        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);

        for (var i = 0x81; i <= 0xFE; i++) {
            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];
            var secondByteNode = this.decodeTables[secondByteNodeIdx];
            for (var j = 0x30; j <= 0x39; j++)
                secondByteNode[j] = NODE_START - thirdByteNodeIdx;
        }
        for (var i = 0x81; i <= 0xFE; i++)
            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;
        for (var i = 0x30; i <= 0x39; i++)
            fourthByteNode[i] = GB18030_CODE
    }        
}

DBCSCodec.prototype.encoder = DBCSEncoder;
DBCSCodec.prototype.decoder = DBCSDecoder;

// Decoder helpers
DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
    var bytes = [];
    for (; addr > 0; addr >>= 8)
        bytes.push(addr & 0xFF);
    if (bytes.length == 0)
        bytes.push(0);

    var node = this.decodeTables[0];
    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
        var val = node[bytes[i]];

        if (val == UNASSIGNED) { // Create new node.
            node[bytes[i]] = NODE_START - this.decodeTables.length;
            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
        }
        else if (val <= NODE_START) { // Existing node.
            node = this.decodeTables[NODE_START - val];
        }
        else
            throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
}


DBCSCodec.prototype._addDecodeChunk = function(chunk) {
    // First element of chunk is the hex mbcs code where we start.
    var curAddr = parseInt(chunk[0], 16);

    // Choose the decoding node where we'll write our chars.
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 0xFF;

    // Write all other elements of the chunk to the table.
    for (var k = 1; k < chunk.length; k++) {
        var part = chunk[k];
        if (typeof part === "string") { // String, write as-is.
            for (var l = 0; l < part.length;) {
                var code = part.charCodeAt(l++);
                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                    var codeTrail = part.charCodeAt(l++);
                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                    else
                        throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                }
                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                    var len = 0xFFF - code + 2;
                    var seq = [];
                    for (var m = 0; m < len; m++)
                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                    this.decodeTableSeq.push(seq);
                }
                else
                    writeTable[curAddr++] = code; // Basic char
            }
        } 
        else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
            var charCode = writeTable[curAddr - 1] + 1;
            for (var l = 0; l < part; l++)
                writeTable[curAddr++] = charCode++;
        }
        else
            throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 0xFF)
        throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
}

// Encoder helpers
DBCSCodec.prototype._getEncodeBucket = function(uCode) {
    var high = uCode >> 8; // This could be > 0xFF because of astral characters.
    if (this.encodeTable[high] === undefined)
        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
    return this.encodeTable[high];
}

DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;
    if (bucket[low] <= SEQ_START)
        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
    else if (bucket[low] == UNASSIGNED)
        bucket[low] = dbcsCode;
}

DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
    
    // Get the root of character tree according to first character of the sequence.
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;

    var node;
    if (bucket[low] <= SEQ_START) {
        // There's already a sequence with  - use it.
        node = this.encodeTableSeq[SEQ_START-bucket[low]];
    }
    else {
        // There was no sequence object - allocate a new one.
        node = {};
        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
        bucket[low] = SEQ_START - this.encodeTableSeq.length;
        this.encodeTableSeq.push(node);
    }

    // Traverse the character tree, allocating new nodes as needed.
    for (var j = 1; j < seq.length-1; j++) {
        var oldVal = node[uCode];
        if (typeof oldVal === 'object')
            node = oldVal;
        else {
            node = node[uCode] = {}
            if (oldVal !== undefined)
                node[DEF_CHAR] = oldVal
        }
    }

    // Set the leaf to given dbcsCode.
    uCode = seq[seq.length-1];
    node[uCode] = dbcsCode;
}

DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    for (var i = 0; i < 0x100; i++) {
        var uCode = node[i];
        var mbCode = prefix + i;
        if (skipEncodeChars[mbCode])
            continue;

        if (uCode >= 0)
            this._setEncodeChar(uCode, mbCode);
        else if (uCode <= NODE_START)
            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
        else if (uCode <= SEQ_START)
            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
    }
}



// == Encoder ==================================================================

function DBCSEncoder(options, codec) {
    // Encoder state
    this.leadSurrogate = -1;
    this.seqObj = undefined;
    
    // Static data
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
}

DBCSEncoder.prototype.write = function(str) {
    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),
        leadSurrogate = this.leadSurrogate,
        seqObj = this.seqObj, nextChar = -1,
        i = 0, j = 0;

    while (true) {
        // 0. Get next character.
        if (nextChar === -1) {
            if (i == str.length) break;
            var uCode = str.charCodeAt(i++);
        }
        else {
            var uCode = nextChar;
            nextChar = -1;    
        }

        // 1. Handle surrogates.
        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
            if (uCode < 0xDC00) { // We've got lead surrogate.
                if (leadSurrogate === -1) {
                    leadSurrogate = uCode;
                    continue;
                } else {
                    leadSurrogate = uCode;
                    // Double lead surrogate found.
                    uCode = UNASSIGNED;
                }
            } else { // We've got trail surrogate.
                if (leadSurrogate !== -1) {
                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                    leadSurrogate = -1;
                } else {
                    // Incomplete surrogate pair - only trail surrogate found.
                    uCode = UNASSIGNED;
                }
                
            }
        }
        else if (leadSurrogate !== -1) {
            // Incomplete surrogate pair - only lead surrogate found.
            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.
            leadSurrogate = -1;
        }

        // 2. Convert uCode character.
        var dbcsCode = UNASSIGNED;
        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence
            var resCode = seqObj[uCode];
            if (typeof resCode === 'object') { // Sequence continues.
                seqObj = resCode;
                continue;

            } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                dbcsCode = resCode;

            } else if (resCode == undefined) { // Current character is not part of the sequence.

                // Try default character for this sequence
                resCode = seqObj[DEF_CHAR];
                if (resCode !== undefined) {
                    dbcsCode = resCode; // Found. Write it.
                    nextChar = uCode; // Current character will be written too in the next iteration.

                } else {
                    // TODO: What if we have no default? (resCode == undefined)
                    // Then, we should write first char of the sequence as-is and try the rest recursively.
                    // Didn't do it for now because no encoding has this situation yet.
                    // Currently, just skip the sequence and write current char.
                }
            }
            seqObj = undefined;
        }
        else if (uCode >= 0) {  // Regular character
            var subtable = this.encodeTable[uCode >> 8];
            if (subtable !== undefined)
                dbcsCode = subtable[uCode & 0xFF];
            
            if (dbcsCode <= SEQ_START) { // Sequence start
                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
                continue;
            }

            if (dbcsCode == UNASSIGNED && this.gb18030) {
                // Use GB18030 algorithm to find character(s) to write.
                var idx = findIdx(this.gb18030.uChars, uCode);
                if (idx != -1) {
                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                    newBuf[j++] = 0x30 + dbcsCode;
                    continue;
                }
            }
        }

        // 3. Write dbcsCode character.
        if (dbcsCode === UNASSIGNED)
            dbcsCode = this.defaultCharSingleByte;
        
        if (dbcsCode < 0x100) {
            newBuf[j++] = dbcsCode;
        }
        else if (dbcsCode < 0x10000) {
            newBuf[j++] = dbcsCode >> 8;   // high byte
            newBuf[j++] = dbcsCode & 0xFF; // low byte
        }
        else {
            newBuf[j++] = dbcsCode >> 16;
            newBuf[j++] = (dbcsCode >> 8) & 0xFF;
            newBuf[j++] = dbcsCode & 0xFF;
        }
    }

    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
}

DBCSEncoder.prototype.end = function() {
    if (this.leadSurrogate === -1 && this.seqObj === undefined)
        return; // All clean. Most often case.

    var newBuf = Buffer.alloc(10), j = 0;

    if (this.seqObj) { // We're in the sequence.
        var dbcsCode = this.seqObj[DEF_CHAR];
        if (dbcsCode !== undefined) { // Write beginning of the sequence.
            if (dbcsCode < 0x100) {
                newBuf[j++] = dbcsCode;
            }
            else {
                newBuf[j++] = dbcsCode >> 8;   // high byte
                newBuf[j++] = dbcsCode & 0xFF; // low byte
            }
        } else {
            // See todo above.
        }
        this.seqObj = undefined;
    }

    if (this.leadSurrogate !== -1) {
        // Incomplete surrogate pair - only lead surrogate found.
        newBuf[j++] = this.defaultCharSingleByte;
        this.leadSurrogate = -1;
    }
    
    return newBuf.slice(0, j);
}

// Export for testing
DBCSEncoder.prototype.findIdx = findIdx;


// == Decoder ==================================================================

function DBCSDecoder(options, codec) {
    // Decoder state
    this.nodeIdx = 0;
    this.prevBuf = Buffer.alloc(0);

    // Static data
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
}

DBCSDecoder.prototype.write = function(buf) {
    var newBuf = Buffer.alloc(buf.length*2),
        nodeIdx = this.nodeIdx, 
        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,
        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.
        uCode;

    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.
        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);
    
    for (var i = 0, j = 0; i < buf.length; i++) {
        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];

        // Lookup in current trie node.
        var uCode = this.decodeTables[nodeIdx][curByte];

        if (uCode >= 0) { 
            // Normal character, just use it.
        }
        else if (uCode === UNASSIGNED) { // Unknown char.
            // TODO: Callback with seq.
            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).
            uCode = this.defaultCharUnicode.charCodeAt(0);
        }
        else if (uCode === GB18030_CODE) {
            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);
            var idx = findIdx(this.gb18030.gbChars, ptr);
            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
        }
        else if (uCode <= NODE_START) { // Go to next trie node.
            nodeIdx = NODE_START - uCode;
            continue;
        }
        else if (uCode <= SEQ_START) { // Output a sequence of chars.
            var seq = this.decodeTableSeq[SEQ_START - uCode];
            for (var k = 0; k < seq.length - 1; k++) {
                uCode = seq[k];
                newBuf[j++] = uCode & 0xFF;
                newBuf[j++] = uCode >> 8;
            }
            uCode = seq[seq.length-1];
        }
        else
            throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

        // Write the character to buffer, handling higher planes using surrogate pair.
        if (uCode > 0xFFFF) { 
            uCode -= 0x10000;
            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);
            newBuf[j++] = uCodeLead & 0xFF;
            newBuf[j++] = uCodeLead >> 8;

            uCode = 0xDC00 + uCode % 0x400;
        }
        newBuf[j++] = uCode & 0xFF;
        newBuf[j++] = uCode >> 8;

        // Reset trie node.
        nodeIdx = 0; seqStart = i+1;
    }

    this.nodeIdx = nodeIdx;
    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
    return newBuf.slice(0, j).toString('ucs2');
}

DBCSDecoder.prototype.end = function() {
    var ret = '';

    // Try to parse all remaining chars.
    while (this.prevBuf.length > 0) {
        // Skip 1 character in the buffer.
        ret += this.defaultCharUnicode;
        var buf = this.prevBuf.slice(1);

        // Parse remaining as usual.
        this.prevBuf = Buffer.alloc(0);
        this.nodeIdx = 0;
        if (buf.length > 0)
            ret += this.write(buf);
    }

    this.nodeIdx = 0;
    return ret;
}

// Binary search for GB18030. Returns largest i such that table[i] <= val.
function findIdx(table, val) {
    if (table[0] > val)
        return -1;

    var l = 0, r = table.length;
    while (l < r-1) { // always table[l] <= val < table[r]
        var mid = l + Math.floor((r-l+1)/2);
        if (table[mid] <= val)
            l = mid;
        else
            r = mid;
    }
    return l;
}



/***/ }),

/***/ 1070:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsapScheduler = void 0;
var AsyncScheduler_1 = __webpack_require__(5031);
var AsapScheduler = (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = undefined;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
            while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AsapScheduler = AsapScheduler;
//# sourceMappingURL=AsapScheduler.js.map

/***/ }),

/***/ 1103:
/***/ ((__unused_webpack_module, exports) => {

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/


var charTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
var byteTable = [
    0xff, 0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
    0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
    0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff
];

function quintetCount(buff) {
    var quintets = Math.floor(buff.length / 5);
    return buff.length % 5 === 0 ? quintets: quintets + 1;
}

exports.encode = function(plain) {
    if(!Buffer.isBuffer(plain)){
    	plain = new Buffer(plain);
    }
    var i = 0;
    var j = 0;
    var shiftIndex = 0;
    var digit = 0;
    var encoded = new Buffer(quintetCount(plain) * 8);

    /* byte by byte isn't as pretty as quintet by quintet but tests a bit
        faster. will have to revisit. */
    while(i < plain.length) {
        var current = plain[i];

        if(shiftIndex > 3) {
            digit = current & (0xff >> shiftIndex);
            shiftIndex = (shiftIndex + 5) % 8;
            digit = (digit << shiftIndex) | ((i + 1 < plain.length) ?
                plain[i + 1] : 0) >> (8 - shiftIndex);
            i++;
        } else {
            digit = (current >> (8 - (shiftIndex + 5))) & 0x1f;
            shiftIndex = (shiftIndex + 5) % 8;
            if(shiftIndex === 0) i++;
        }

        encoded[j] = charTable.charCodeAt(digit);
        j++;
    }

    for(i = j; i < encoded.length; i++) {
        encoded[i] = 0x3d; //'='.charCodeAt(0)
    }

    return encoded;
};

exports.decode = function(encoded) {
    var shiftIndex = 0;
    var plainDigit = 0;
    var plainChar;
    var plainPos = 0;
    if(!Buffer.isBuffer(encoded)){
    	encoded = new Buffer(encoded);
    }
    var decoded = new Buffer(Math.ceil(encoded.length * 5 / 8));

    /* byte by byte isn't as pretty as octet by octet but tests a bit
        faster. will have to revisit. */
    for(var i = 0; i < encoded.length; i++) {
    	if(encoded[i] === 0x3d){ //'='
    		break;
    	}

        var encodedByte = encoded[i] - 0x30;

        if(encodedByte < byteTable.length) {
            plainDigit = byteTable[encodedByte];

            if(shiftIndex <= 3) {
                shiftIndex = (shiftIndex + 5) % 8;

                if(shiftIndex === 0) {
                    plainChar |= plainDigit;
                    decoded[plainPos] = plainChar;
                    plainPos++;
                    plainChar = 0;
                } else {
                    plainChar |= 0xff & (plainDigit << (8 - shiftIndex));
                }
            } else {
                shiftIndex = (shiftIndex + 5) % 8;
                plainChar |= 0xff & (plainDigit >>> shiftIndex);
                decoded[plainPos] = plainChar;
                plainPos++;

                plainChar = 0xff & (plainDigit << (8 - shiftIndex));
            }
        } else {
        	throw new Error('Invalid input - it is not base32 encoded string');
        }
    }

    return decoded.slice(0, plainPos);
};


/***/ }),

/***/ 1205:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { info, debug } = __webpack_require__(3750);
const utils = __webpack_require__(1444);

class Cell {
  /**
   * A representation of a cell within the table.
   * Implementations must have `init` and `draw` methods,
   * as well as `colSpan`, `rowSpan`, `desiredHeight` and `desiredWidth` properties.
   * @param options
   * @constructor
   */
  constructor(options) {
    this.setOptions(options);

    /**
     * Each cell will have it's `x` and `y` values set by the `layout-manager` prior to
     * `init` being called;
     * @type {Number}
     */
    this.x = null;
    this.y = null;
  }

  setOptions(options) {
    if (['boolean', 'number', 'bigint', 'string'].indexOf(typeof options) !== -1) {
      options = { content: '' + options };
    }
    options = options || {};
    this.options = options;
    let content = options.content;
    if (['boolean', 'number', 'bigint', 'string'].indexOf(typeof content) !== -1) {
      this.content = String(content);
    } else if (!content) {
      this.content = this.options.href || '';
    } else {
      throw new Error('Content needs to be a primitive, got: ' + typeof content);
    }
    this.colSpan = options.colSpan || 1;
    this.rowSpan = options.rowSpan || 1;
    if (this.options.href) {
      Object.defineProperty(this, 'href', {
        get() {
          return this.options.href;
        },
      });
    }
  }

  mergeTableOptions(tableOptions, cells) {
    this.cells = cells;

    let optionsChars = this.options.chars || {};
    let tableChars = tableOptions.chars;
    let chars = (this.chars = {});
    CHAR_NAMES.forEach(function (name) {
      setOption(optionsChars, tableChars, name, chars);
    });

    this.truncate = this.options.truncate || tableOptions.truncate;

    let style = (this.options.style = this.options.style || {});
    let tableStyle = tableOptions.style;
    setOption(style, tableStyle, 'padding-left', this);
    setOption(style, tableStyle, 'padding-right', this);
    this.head = style.head || tableStyle.head;
    this.border = style.border || tableStyle.border;

    this.fixedWidth = tableOptions.colWidths[this.x];
    this.lines = this.computeLines(tableOptions);

    this.desiredWidth = utils.strlen(this.content) + this.paddingLeft + this.paddingRight;
    this.desiredHeight = this.lines.length;
  }

  computeLines(tableOptions) {
    const tableWordWrap = tableOptions.wordWrap || tableOptions.textWrap;
    const { wordWrap = tableWordWrap } = this.options;
    if (this.fixedWidth && wordWrap) {
      this.fixedWidth -= this.paddingLeft + this.paddingRight;
      if (this.colSpan) {
        let i = 1;
        while (i < this.colSpan) {
          this.fixedWidth += tableOptions.colWidths[this.x + i];
          i++;
        }
      }
      const { wrapOnWordBoundary: tableWrapOnWordBoundary = true } = tableOptions;
      const { wrapOnWordBoundary = tableWrapOnWordBoundary } = this.options;
      return this.wrapLines(utils.wordWrap(this.fixedWidth, this.content, wrapOnWordBoundary));
    }
    return this.wrapLines(this.content.split('\n'));
  }

  wrapLines(computedLines) {
    const lines = utils.colorizeLines(computedLines);
    if (this.href) {
      return lines.map((line) => utils.hyperlink(this.href, line));
    }
    return lines;
  }

  /**
   * Initializes the Cells data structure.
   *
   * @param tableOptions - A fully populated set of tableOptions.
   * In addition to the standard default values, tableOptions must have fully populated the
   * `colWidths` and `rowWidths` arrays. Those arrays must have lengths equal to the number
   * of columns or rows (respectively) in this table, and each array item must be a Number.
   *
   */
  init(tableOptions) {
    let x = this.x;
    let y = this.y;
    this.widths = tableOptions.colWidths.slice(x, x + this.colSpan);
    this.heights = tableOptions.rowHeights.slice(y, y + this.rowSpan);
    this.width = this.widths.reduce(sumPlusOne, -1);
    this.height = this.heights.reduce(sumPlusOne, -1);

    this.hAlign = this.options.hAlign || tableOptions.colAligns[x];
    this.vAlign = this.options.vAlign || tableOptions.rowAligns[y];

    this.drawRight = x + this.colSpan == tableOptions.colWidths.length;
  }

  /**
   * Draws the given line of the cell.
   * This default implementation defers to methods `drawTop`, `drawBottom`, `drawLine` and `drawEmpty`.
   * @param lineNum - can be `top`, `bottom` or a numerical line number.
   * @param spanningCell - will be a number if being called from a RowSpanCell, and will represent how
   * many rows below it's being called from. Otherwise it's undefined.
   * @returns {String} The representation of this line.
   */
  draw(lineNum, spanningCell) {
    if (lineNum == 'top') return this.drawTop(this.drawRight);
    if (lineNum == 'bottom') return this.drawBottom(this.drawRight);
    let content = utils.truncate(this.content, 10, this.truncate);
    if (!lineNum) {
      info(`${this.y}-${this.x}: ${this.rowSpan - lineNum}x${this.colSpan} Cell ${content}`);
    } else {
      // debug(`${lineNum}-${this.x}: 1x${this.colSpan} RowSpanCell ${content}`);
    }
    let padLen = Math.max(this.height - this.lines.length, 0);
    let padTop;
    switch (this.vAlign) {
      case 'center':
        padTop = Math.ceil(padLen / 2);
        break;
      case 'bottom':
        padTop = padLen;
        break;
      default:
        padTop = 0;
    }
    if (lineNum < padTop || lineNum >= padTop + this.lines.length) {
      return this.drawEmpty(this.drawRight, spanningCell);
    }
    let forceTruncation = this.lines.length > this.height && lineNum + 1 >= this.height;
    return this.drawLine(lineNum - padTop, this.drawRight, forceTruncation, spanningCell);
  }

  /**
   * Renders the top line of the cell.
   * @param drawRight - true if this method should render the right edge of the cell.
   * @returns {String}
   */
  drawTop(drawRight) {
    let content = [];
    if (this.cells) {
      //TODO: cells should always exist - some tests don't fill it in though
      this.widths.forEach(function (width, index) {
        content.push(this._topLeftChar(index));
        content.push(utils.repeat(this.chars[this.y == 0 ? 'top' : 'mid'], width));
      }, this);
    } else {
      content.push(this._topLeftChar(0));
      content.push(utils.repeat(this.chars[this.y == 0 ? 'top' : 'mid'], this.width));
    }
    if (drawRight) {
      content.push(this.chars[this.y == 0 ? 'topRight' : 'rightMid']);
    }
    return this.wrapWithStyleColors('border', content.join(''));
  }

  _topLeftChar(offset) {
    let x = this.x + offset;
    let leftChar;
    if (this.y == 0) {
      leftChar = x == 0 ? 'topLeft' : offset == 0 ? 'topMid' : 'top';
    } else {
      if (x == 0) {
        leftChar = 'leftMid';
      } else {
        leftChar = offset == 0 ? 'midMid' : 'bottomMid';
        if (this.cells) {
          //TODO: cells should always exist - some tests don't fill it in though
          let spanAbove = this.cells[this.y - 1][x] instanceof Cell.ColSpanCell;
          if (spanAbove) {
            leftChar = offset == 0 ? 'topMid' : 'mid';
          }
          if (offset == 0) {
            let i = 1;
            while (this.cells[this.y][x - i] instanceof Cell.ColSpanCell) {
              i++;
            }
            if (this.cells[this.y][x - i] instanceof Cell.RowSpanCell) {
              leftChar = 'leftMid';
            }
          }
        }
      }
    }
    return this.chars[leftChar];
  }

  wrapWithStyleColors(styleProperty, content) {
    if (this[styleProperty] && this[styleProperty].length) {
      try {
        let colors = __webpack_require__(7172);
        for (let i = this[styleProperty].length - 1; i >= 0; i--) {
          colors = colors[this[styleProperty][i]];
        }
        return colors(content);
      } catch (e) {
        return content;
      }
    } else {
      return content;
    }
  }

  /**
   * Renders a line of text.
   * @param lineNum - Which line of text to render. This is not necessarily the line within the cell.
   * There may be top-padding above the first line of text.
   * @param drawRight - true if this method should render the right edge of the cell.
   * @param forceTruncationSymbol - `true` if the rendered text should end with the truncation symbol even
   * if the text fits. This is used when the cell is vertically truncated. If `false` the text should
   * only include the truncation symbol if the text will not fit horizontally within the cell width.
   * @param spanningCell - a number of if being called from a RowSpanCell. (how many rows below). otherwise undefined.
   * @returns {String}
   */
  drawLine(lineNum, drawRight, forceTruncationSymbol, spanningCell) {
    let left = this.chars[this.x == 0 ? 'left' : 'middle'];
    if (this.x && spanningCell && this.cells) {
      let cellLeft = this.cells[this.y + spanningCell][this.x - 1];
      while (cellLeft instanceof ColSpanCell) {
        cellLeft = this.cells[cellLeft.y][cellLeft.x - 1];
      }
      if (!(cellLeft instanceof RowSpanCell)) {
        left = this.chars['rightMid'];
      }
    }
    let leftPadding = utils.repeat(' ', this.paddingLeft);
    let right = drawRight ? this.chars['right'] : '';
    let rightPadding = utils.repeat(' ', this.paddingRight);
    let line = this.lines[lineNum];
    let len = this.width - (this.paddingLeft + this.paddingRight);
    if (forceTruncationSymbol) line += this.truncate || '…';
    let content = utils.truncate(line, len, this.truncate);
    content = utils.pad(content, len, ' ', this.hAlign);
    content = leftPadding + content + rightPadding;
    return this.stylizeLine(left, content, right);
  }

  stylizeLine(left, content, right) {
    left = this.wrapWithStyleColors('border', left);
    right = this.wrapWithStyleColors('border', right);
    if (this.y === 0) {
      content = this.wrapWithStyleColors('head', content);
    }
    return left + content + right;
  }

  /**
   * Renders the bottom line of the cell.
   * @param drawRight - true if this method should render the right edge of the cell.
   * @returns {String}
   */
  drawBottom(drawRight) {
    let left = this.chars[this.x == 0 ? 'bottomLeft' : 'bottomMid'];
    let content = utils.repeat(this.chars.bottom, this.width);
    let right = drawRight ? this.chars['bottomRight'] : '';
    return this.wrapWithStyleColors('border', left + content + right);
  }

  /**
   * Renders a blank line of text within the cell. Used for top and/or bottom padding.
   * @param drawRight - true if this method should render the right edge of the cell.
   * @param spanningCell - a number of if being called from a RowSpanCell. (how many rows below). otherwise undefined.
   * @returns {String}
   */
  drawEmpty(drawRight, spanningCell) {
    let left = this.chars[this.x == 0 ? 'left' : 'middle'];
    if (this.x && spanningCell && this.cells) {
      let cellLeft = this.cells[this.y + spanningCell][this.x - 1];
      while (cellLeft instanceof ColSpanCell) {
        cellLeft = this.cells[cellLeft.y][cellLeft.x - 1];
      }
      if (!(cellLeft instanceof RowSpanCell)) {
        left = this.chars['rightMid'];
      }
    }
    let right = drawRight ? this.chars['right'] : '';
    let content = utils.repeat(' ', this.width);
    return this.stylizeLine(left, content, right);
  }
}

class ColSpanCell {
  /**
   * A Cell that doesn't do anything. It just draws empty lines.
   * Used as a placeholder in column spanning.
   * @constructor
   */
  constructor() {}

  draw(lineNum) {
    if (typeof lineNum === 'number') {
      debug(`${this.y}-${this.x}: 1x1 ColSpanCell`);
    }
    return '';
  }

  init() {}

  mergeTableOptions() {}
}

class RowSpanCell {
  /**
   * A placeholder Cell for a Cell that spans multiple rows.
   * It delegates rendering to the original cell, but adds the appropriate offset.
   * @param originalCell
   * @constructor
   */
  constructor(originalCell) {
    this.originalCell = originalCell;
  }

  init(tableOptions) {
    let y = this.y;
    let originalY = this.originalCell.y;
    this.cellOffset = y - originalY;
    this.offset = findDimension(tableOptions.rowHeights, originalY, this.cellOffset);
  }

  draw(lineNum) {
    if (lineNum == 'top') {
      return this.originalCell.draw(this.offset, this.cellOffset);
    }
    if (lineNum == 'bottom') {
      return this.originalCell.draw('bottom');
    }
    debug(`${this.y}-${this.x}: 1x${this.colSpan} RowSpanCell for ${this.originalCell.content}`);
    return this.originalCell.draw(this.offset + 1 + lineNum);
  }

  mergeTableOptions() {}
}

function firstDefined(...args) {
  return args.filter((v) => v !== undefined && v !== null).shift();
}

// HELPER FUNCTIONS
function setOption(objA, objB, nameB, targetObj) {
  let nameA = nameB.split('-');
  if (nameA.length > 1) {
    nameA[1] = nameA[1].charAt(0).toUpperCase() + nameA[1].substr(1);
    nameA = nameA.join('');
    targetObj[nameA] = firstDefined(objA[nameA], objA[nameB], objB[nameA], objB[nameB]);
  } else {
    targetObj[nameB] = firstDefined(objA[nameB], objB[nameB]);
  }
}

function findDimension(dimensionTable, startingIndex, span) {
  let ret = dimensionTable[startingIndex];
  for (let i = 1; i < span; i++) {
    ret += 1 + dimensionTable[startingIndex + i];
  }
  return ret;
}

function sumPlusOne(a, b) {
  return a + b + 1;
}

let CHAR_NAMES = [
  'top',
  'top-mid',
  'top-left',
  'top-right',
  'bottom',
  'bottom-mid',
  'bottom-left',
  'bottom-right',
  'left',
  'left-mid',
  'mid',
  'mid-mid',
  'right',
  'right-mid',
  'middle',
];

module.exports = Cell;
module.exports.ColSpanCell = ColSpanCell;
module.exports.RowSpanCell = RowSpanCell;


/***/ }),

/***/ 1248:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(5977);

/***/ }),

/***/ 1258:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defer = void 0;
var Observable_1 = __webpack_require__(541);
var innerFrom_1 = __webpack_require__(2018);
function defer(observableFactory) {
    return new Observable_1.Observable(function (subscriber) {
        innerFrom_1.innerFrom(observableFactory()).subscribe(subscriber);
    });
}
exports.defer = defer;
//# sourceMappingURL=defer.js.map

/***/ }),

/***/ 1355:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const onetime = __webpack_require__(7865);
const signalExit = __webpack_require__(939);

module.exports = onetime(() => {
	signalExit(() => {
		process.stderr.write('\u001B[?25h');
	}, {alwaysLast: true});
});


/***/ }),

/***/ 1380:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Stream = __webpack_require__(2203)

class MuteStream extends Stream {
  #isTTY = null

  constructor (opts = {}) {
    super(opts)
    this.writable = this.readable = true
    this.muted = false
    this.on('pipe', this._onpipe)
    this.replace = opts.replace

    // For readline-type situations
    // This much at the start of a line being redrawn after a ctrl char
    // is seen (such as backspace) won't be redrawn as the replacement
    this._prompt = opts.prompt || null
    this._hadControl = false
  }

  #destSrc (key, def) {
    if (this._dest) {
      return this._dest[key]
    }
    if (this._src) {
      return this._src[key]
    }
    return def
  }

  #proxy (method, ...args) {
    if (typeof this._dest?.[method] === 'function') {
      this._dest[method](...args)
    }
    if (typeof this._src?.[method] === 'function') {
      this._src[method](...args)
    }
  }

  get isTTY () {
    if (this.#isTTY !== null) {
      return this.#isTTY
    }
    return this.#destSrc('isTTY', false)
  }

  // basically just get replace the getter/setter with a regular value
  set isTTY (val) {
    this.#isTTY = val
  }

  get rows () {
    return this.#destSrc('rows')
  }

  get columns () {
    return this.#destSrc('columns')
  }

  mute () {
    this.muted = true
  }

  unmute () {
    this.muted = false
  }

  _onpipe (src) {
    this._src = src
  }

  pipe (dest, options) {
    this._dest = dest
    return super.pipe(dest, options)
  }

  pause () {
    if (this._src) {
      return this._src.pause()
    }
  }

  resume () {
    if (this._src) {
      return this._src.resume()
    }
  }

  write (c) {
    if (this.muted) {
      if (!this.replace) {
        return true
      }
      // eslint-disable-next-line no-control-regex
      if (c.match(/^\u001b/)) {
        if (c.indexOf(this._prompt) === 0) {
          c = c.slice(this._prompt.length)
          c = c.replace(/./g, this.replace)
          c = this._prompt + c
        }
        this._hadControl = true
        return this.emit('data', c)
      } else {
        if (this._prompt && this._hadControl &&
          c.indexOf(this._prompt) === 0) {
          this._hadControl = false
          this.emit('data', this._prompt)
          c = c.slice(this._prompt.length)
        }
        c = c.toString().replace(/./g, this.replace)
      }
    }
    this.emit('data', c)
  }

  end (c) {
    if (this.muted) {
      if (c && this.replace) {
        c = c.toString().replace(/./g, this.replace)
      } else {
        c = null
      }
    }
    if (c) {
      this.emit('data', c)
    }
    this.emit('end')
  }

  destroy (...args) {
    return this.#proxy('destroy', ...args)
  }

  destroySoon (...args) {
    return this.#proxy('destroySoon', ...args)
  }

  close (...args) {
    return this.#proxy('close', ...args)
  }
}

module.exports = MuteStream


/***/ }),

/***/ 1426:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const fs = __webpack_require__(2358)
const path = __webpack_require__(6928)
const copySync = (__webpack_require__(5477).copySync)
const removeSync = (__webpack_require__(136).removeSync)
const mkdirpSync = (__webpack_require__(4544).mkdirpSync)
const stat = __webpack_require__(1560)

function moveSync (src, dest, opts) {
  opts = opts || {}
  const overwrite = opts.overwrite || opts.clobber || false

  const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, 'move', opts)
  stat.checkParentPathsSync(src, srcStat, dest, 'move')
  if (!isParentRoot(dest)) mkdirpSync(path.dirname(dest))
  return doRename(src, dest, overwrite, isChangingCase)
}

function isParentRoot (dest) {
  const parent = path.dirname(dest)
  const parsedPath = path.parse(parent)
  return parsedPath.root === parent
}

function doRename (src, dest, overwrite, isChangingCase) {
  if (isChangingCase) return rename(src, dest, overwrite)
  if (overwrite) {
    removeSync(dest)
    return rename(src, dest, overwrite)
  }
  if (fs.existsSync(dest)) throw new Error('dest already exists.')
  return rename(src, dest, overwrite)
}

function rename (src, dest, overwrite) {
  try {
    fs.renameSync(src, dest)
  } catch (err) {
    if (err.code !== 'EXDEV') throw err
    return moveAcrossDevice(src, dest, overwrite)
  }
}

function moveAcrossDevice (src, dest, overwrite) {
  const opts = {
    overwrite,
    errorOnExist: true,
    preserveTimestamps: true
  }
  copySync(src, dest, opts)
  return removeSync(src)
}

module.exports = moveSync


/***/ }),

/***/ 1427:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;

/***
 * Node External Editor
 *
 * Kevin Gravier <kevin@mrkmg.com>
 * MIT 2019
 */
__webpack_unused_export__ = ({ value: true });
var chardet_1 = __webpack_require__(652);
var child_process_1 = __webpack_require__(5317);
var fs_1 = __webpack_require__(9896);
var iconv_lite_1 = __webpack_require__(8109);
var tmp_1 = __webpack_require__(9704);
var CreateFileError_1 = __webpack_require__(4691);
__webpack_unused_export__ = CreateFileError_1.CreateFileError;
var LaunchEditorError_1 = __webpack_require__(7007);
__webpack_unused_export__ = LaunchEditorError_1.LaunchEditorError;
var ReadFileError_1 = __webpack_require__(9819);
__webpack_unused_export__ = ReadFileError_1.ReadFileError;
var RemoveFileError_1 = __webpack_require__(1615);
__webpack_unused_export__ = RemoveFileError_1.RemoveFileError;
function edit(text, fileOptions) {
    if (text === void 0) { text = ""; }
    var editor = new ExternalEditor(text, fileOptions);
    editor.run();
    editor.cleanup();
    return editor.text;
}
__webpack_unused_export__ = edit;
function editAsync(text, callback, fileOptions) {
    if (text === void 0) { text = ""; }
    var editor = new ExternalEditor(text, fileOptions);
    editor.runAsync(function (err, result) {
        if (err) {
            setImmediate(callback, err, null);
        }
        else {
            try {
                editor.cleanup();
                setImmediate(callback, null, result);
            }
            catch (cleanupError) {
                setImmediate(callback, cleanupError, null);
            }
        }
    });
}
exports.xV = editAsync;
var ExternalEditor = /** @class */ (function () {
    function ExternalEditor(text, fileOptions) {
        if (text === void 0) { text = ""; }
        this.text = "";
        this.fileOptions = {};
        this.text = text;
        if (fileOptions) {
            this.fileOptions = fileOptions;
        }
        this.determineEditor();
        this.createTemporaryFile();
    }
    ExternalEditor.splitStringBySpace = function (str) {
        var pieces = [];
        var currentString = "";
        for (var strIndex = 0; strIndex < str.length; strIndex++) {
            var currentLetter = str[strIndex];
            if (strIndex > 0 && currentLetter === " " && str[strIndex - 1] !== "\\" && currentString.length > 0) {
                pieces.push(currentString);
                currentString = "";
            }
            else {
                currentString += currentLetter;
            }
        }
        if (currentString.length > 0) {
            pieces.push(currentString);
        }
        return pieces;
    };
    Object.defineProperty(ExternalEditor.prototype, "temp_file", {
        get: function () {
            console.log("DEPRECATED: temp_file. Use tempFile moving forward.");
            return this.tempFile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExternalEditor.prototype, "last_exit_status", {
        get: function () {
            console.log("DEPRECATED: last_exit_status. Use lastExitStatus moving forward.");
            return this.lastExitStatus;
        },
        enumerable: true,
        configurable: true
    });
    ExternalEditor.prototype.run = function () {
        this.launchEditor();
        this.readTemporaryFile();
        return this.text;
    };
    ExternalEditor.prototype.runAsync = function (callback) {
        var _this = this;
        try {
            this.launchEditorAsync(function () {
                try {
                    _this.readTemporaryFile();
                    setImmediate(callback, null, _this.text);
                }
                catch (readError) {
                    setImmediate(callback, readError, null);
                }
            });
        }
        catch (launchError) {
            setImmediate(callback, launchError, null);
        }
    };
    ExternalEditor.prototype.cleanup = function () {
        this.removeTemporaryFile();
    };
    ExternalEditor.prototype.determineEditor = function () {
        var editor = process.env.VISUAL ? process.env.VISUAL :
            process.env.EDITOR ? process.env.EDITOR :
                /^win/.test(process.platform) ? "notepad" :
                    "vim";
        var editorOpts = ExternalEditor.splitStringBySpace(editor).map(function (piece) { return piece.replace("\\ ", " "); });
        var bin = editorOpts.shift();
        this.editor = { args: editorOpts, bin: bin };
    };
    ExternalEditor.prototype.createTemporaryFile = function () {
        try {
            this.tempFile = tmp_1.tmpNameSync(this.fileOptions);
            var opt = { encoding: "utf8" };
            if (this.fileOptions.hasOwnProperty("mode")) {
                opt.mode = this.fileOptions.mode;
            }
            fs_1.writeFileSync(this.tempFile, this.text, opt);
        }
        catch (createFileError) {
            throw new CreateFileError_1.CreateFileError(createFileError);
        }
    };
    ExternalEditor.prototype.readTemporaryFile = function () {
        try {
            var tempFileBuffer = fs_1.readFileSync(this.tempFile);
            if (tempFileBuffer.length === 0) {
                this.text = "";
            }
            else {
                var encoding = chardet_1.detect(tempFileBuffer).toString();
                if (!iconv_lite_1.encodingExists(encoding)) {
                    // Probably a bad idea, but will at least prevent crashing
                    encoding = "utf8";
                }
                this.text = iconv_lite_1.decode(tempFileBuffer, encoding);
            }
        }
        catch (readFileError) {
            throw new ReadFileError_1.ReadFileError(readFileError);
        }
    };
    ExternalEditor.prototype.removeTemporaryFile = function () {
        try {
            fs_1.unlinkSync(this.tempFile);
        }
        catch (removeFileError) {
            throw new RemoveFileError_1.RemoveFileError(removeFileError);
        }
    };
    ExternalEditor.prototype.launchEditor = function () {
        try {
            var editorProcess = child_process_1.spawnSync(this.editor.bin, this.editor.args.concat([this.tempFile]), { stdio: "inherit" });
            this.lastExitStatus = editorProcess.status;
        }
        catch (launchError) {
            throw new LaunchEditorError_1.LaunchEditorError(launchError);
        }
    };
    ExternalEditor.prototype.launchEditorAsync = function (callback) {
        var _this = this;
        try {
            var editorProcess = child_process_1.spawn(this.editor.bin, this.editor.args.concat([this.tempFile]), { stdio: "inherit" });
            editorProcess.on("exit", function (code) {
                _this.lastExitStatus = code;
                setImmediate(callback);
            });
        }
        catch (launchError) {
            throw new LaunchEditorError_1.LaunchEditorError(launchError);
        }
    };
    return ExternalEditor;
}());
__webpack_unused_export__ = ExternalEditor;


/***/ }),

/***/ 1439:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.observeNotification = exports.Notification = exports.NotificationKind = void 0;
var empty_1 = __webpack_require__(8003);
var of_1 = __webpack_require__(8181);
var throwError_1 = __webpack_require__(9822);
var isFunction_1 = __webpack_require__(8403);
var NotificationKind;
(function (NotificationKind) {
    NotificationKind["NEXT"] = "N";
    NotificationKind["ERROR"] = "E";
    NotificationKind["COMPLETE"] = "C";
})(NotificationKind = exports.NotificationKind || (exports.NotificationKind = {}));
var Notification = (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
        return observeNotification(this, observer);
    };
    Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {
        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
        return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        var _a;
        return isFunction_1.isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next)
            ? this.observe(nextOrObserver)
            : this.do(nextOrObserver, error, complete);
    };
    Notification.prototype.toObservable = function () {
        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
        var result = kind === 'N'
            ?
                of_1.of(value)
            :
                kind === 'E'
                    ?
                        throwError_1.throwError(function () { return error; })
                    :
                        kind === 'C'
                            ?
                                empty_1.EMPTY
                            :
                                0;
        if (!result) {
            throw new TypeError("Unexpected notification kind " + kind);
        }
        return result;
    };
    Notification.createNext = function (value) {
        return new Notification('N', value);
    };
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    return Notification;
}());
exports.Notification = Notification;
function observeNotification(notification, observer) {
    var _a, _b, _c;
    var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
    if (typeof kind !== 'string') {
        throw new TypeError('Invalid notification, missing "kind"');
    }
    kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}
exports.observeNotification = observeNotification;
//# sourceMappingURL=Notification.js.map

/***/ }),

/***/ 1444:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const stringWidth = __webpack_require__(3258);

function codeRegex(capture) {
  return capture ? /\u001b\[((?:\d*;){0,5}\d*)m/g : /\u001b\[(?:\d*;){0,5}\d*m/g;
}

function strlen(str) {
  let code = codeRegex();
  let stripped = ('' + str).replace(code, '');
  let split = stripped.split('\n');
  return split.reduce(function (memo, s) {
    return stringWidth(s) > memo ? stringWidth(s) : memo;
  }, 0);
}

function repeat(str, times) {
  return Array(times + 1).join(str);
}

function pad(str, len, pad, dir) {
  let length = strlen(str);
  if (len + 1 >= length) {
    let padlen = len - length;
    switch (dir) {
      case 'right': {
        str = repeat(pad, padlen) + str;
        break;
      }
      case 'center': {
        let right = Math.ceil(padlen / 2);
        let left = padlen - right;
        str = repeat(pad, left) + str + repeat(pad, right);
        break;
      }
      default: {
        str = str + repeat(pad, padlen);
        break;
      }
    }
  }
  return str;
}

let codeCache = {};

function addToCodeCache(name, on, off) {
  on = '\u001b[' + on + 'm';
  off = '\u001b[' + off + 'm';
  codeCache[on] = { set: name, to: true };
  codeCache[off] = { set: name, to: false };
  codeCache[name] = { on: on, off: off };
}

//https://github.com/Marak/colors.js/blob/master/lib/styles.js
addToCodeCache('bold', 1, 22);
addToCodeCache('italics', 3, 23);
addToCodeCache('underline', 4, 24);
addToCodeCache('inverse', 7, 27);
addToCodeCache('strikethrough', 9, 29);

function updateState(state, controlChars) {
  let controlCode = controlChars[1] ? parseInt(controlChars[1].split(';')[0]) : 0;
  if ((controlCode >= 30 && controlCode <= 39) || (controlCode >= 90 && controlCode <= 97)) {
    state.lastForegroundAdded = controlChars[0];
    return;
  }
  if ((controlCode >= 40 && controlCode <= 49) || (controlCode >= 100 && controlCode <= 107)) {
    state.lastBackgroundAdded = controlChars[0];
    return;
  }
  if (controlCode === 0) {
    for (let i in state) {
      /* istanbul ignore else */
      if (Object.prototype.hasOwnProperty.call(state, i)) {
        delete state[i];
      }
    }
    return;
  }
  let info = codeCache[controlChars[0]];
  if (info) {
    state[info.set] = info.to;
  }
}

function readState(line) {
  let code = codeRegex(true);
  let controlChars = code.exec(line);
  let state = {};
  while (controlChars !== null) {
    updateState(state, controlChars);
    controlChars = code.exec(line);
  }
  return state;
}

function unwindState(state, ret) {
  let lastBackgroundAdded = state.lastBackgroundAdded;
  let lastForegroundAdded = state.lastForegroundAdded;

  delete state.lastBackgroundAdded;
  delete state.lastForegroundAdded;

  Object.keys(state).forEach(function (key) {
    if (state[key]) {
      ret += codeCache[key].off;
    }
  });

  if (lastBackgroundAdded && lastBackgroundAdded != '\u001b[49m') {
    ret += '\u001b[49m';
  }
  if (lastForegroundAdded && lastForegroundAdded != '\u001b[39m') {
    ret += '\u001b[39m';
  }

  return ret;
}

function rewindState(state, ret) {
  let lastBackgroundAdded = state.lastBackgroundAdded;
  let lastForegroundAdded = state.lastForegroundAdded;

  delete state.lastBackgroundAdded;
  delete state.lastForegroundAdded;

  Object.keys(state).forEach(function (key) {
    if (state[key]) {
      ret = codeCache[key].on + ret;
    }
  });

  if (lastBackgroundAdded && lastBackgroundAdded != '\u001b[49m') {
    ret = lastBackgroundAdded + ret;
  }
  if (lastForegroundAdded && lastForegroundAdded != '\u001b[39m') {
    ret = lastForegroundAdded + ret;
  }

  return ret;
}

function truncateWidth(str, desiredLength) {
  if (str.length === strlen(str)) {
    return str.substr(0, desiredLength);
  }

  while (strlen(str) > desiredLength) {
    str = str.slice(0, -1);
  }

  return str;
}

function truncateWidthWithAnsi(str, desiredLength) {
  let code = codeRegex(true);
  let split = str.split(codeRegex());
  let splitIndex = 0;
  let retLen = 0;
  let ret = '';
  let myArray;
  let state = {};

  while (retLen < desiredLength) {
    myArray = code.exec(str);
    let toAdd = split[splitIndex];
    splitIndex++;
    if (retLen + strlen(toAdd) > desiredLength) {
      toAdd = truncateWidth(toAdd, desiredLength - retLen);
    }
    ret += toAdd;
    retLen += strlen(toAdd);

    if (retLen < desiredLength) {
      if (!myArray) {
        break;
      } // full-width chars may cause a whitespace which cannot be filled
      ret += myArray[0];
      updateState(state, myArray);
    }
  }

  return unwindState(state, ret);
}

function truncate(str, desiredLength, truncateChar) {
  truncateChar = truncateChar || '…';
  let lengthOfStr = strlen(str);
  if (lengthOfStr <= desiredLength) {
    return str;
  }
  desiredLength -= strlen(truncateChar);

  let ret = truncateWidthWithAnsi(str, desiredLength);

  ret += truncateChar;

  const hrefTag = '\x1B]8;;\x07';

  if (str.includes(hrefTag) && !ret.includes(hrefTag)) {
    ret += hrefTag;
  }

  return ret;
}

function defaultOptions() {
  return {
    chars: {
      top: '─',
      'top-mid': '┬',
      'top-left': '┌',
      'top-right': '┐',
      bottom: '─',
      'bottom-mid': '┴',
      'bottom-left': '└',
      'bottom-right': '┘',
      left: '│',
      'left-mid': '├',
      mid: '─',
      'mid-mid': '┼',
      right: '│',
      'right-mid': '┤',
      middle: '│',
    },
    truncate: '…',
    colWidths: [],
    rowHeights: [],
    colAligns: [],
    rowAligns: [],
    style: {
      'padding-left': 1,
      'padding-right': 1,
      head: ['red'],
      border: ['grey'],
      compact: false,
    },
    head: [],
  };
}

function mergeOptions(options, defaults) {
  options = options || {};
  defaults = defaults || defaultOptions();
  let ret = Object.assign({}, defaults, options);
  ret.chars = Object.assign({}, defaults.chars, options.chars);
  ret.style = Object.assign({}, defaults.style, options.style);
  return ret;
}

// Wrap on word boundary
function wordWrap(maxLength, input) {
  let lines = [];
  let split = input.split(/(\s+)/g);
  let line = [];
  let lineLength = 0;
  let whitespace;
  for (let i = 0; i < split.length; i += 2) {
    let word = split[i];
    let newLength = lineLength + strlen(word);
    if (lineLength > 0 && whitespace) {
      newLength += whitespace.length;
    }
    if (newLength > maxLength) {
      if (lineLength !== 0) {
        lines.push(line.join(''));
      }
      line = [word];
      lineLength = strlen(word);
    } else {
      line.push(whitespace || '', word);
      lineLength = newLength;
    }
    whitespace = split[i + 1];
  }
  if (lineLength) {
    lines.push(line.join(''));
  }
  return lines;
}

// Wrap text (ignoring word boundaries)
function textWrap(maxLength, input) {
  let lines = [];
  let line = '';
  function pushLine(str, ws) {
    if (line.length && ws) line += ws;
    line += str;
    while (line.length > maxLength) {
      lines.push(line.slice(0, maxLength));
      line = line.slice(maxLength);
    }
  }
  let split = input.split(/(\s+)/g);
  for (let i = 0; i < split.length; i += 2) {
    pushLine(split[i], i && split[i - 1]);
  }
  if (line.length) lines.push(line);
  return lines;
}

function multiLineWordWrap(maxLength, input, wrapOnWordBoundary = true) {
  let output = [];
  input = input.split('\n');
  const handler = wrapOnWordBoundary ? wordWrap : textWrap;
  for (let i = 0; i < input.length; i++) {
    output.push.apply(output, handler(maxLength, input[i]));
  }
  return output;
}

function colorizeLines(input) {
  let state = {};
  let output = [];
  for (let i = 0; i < input.length; i++) {
    let line = rewindState(state, input[i]);
    state = readState(line);
    let temp = Object.assign({}, state);
    output.push(unwindState(temp, line));
  }
  return output;
}

/**
 * Credit: Matheus Sampaio https://github.com/matheussampaio
 */
function hyperlink(url, text) {
  const OSC = '\u001B]';
  const BEL = '\u0007';
  const SEP = ';';

  return [OSC, '8', SEP, SEP, url || text, BEL, text, OSC, '8', SEP, SEP, BEL].join('');
}

module.exports = {
  strlen: strlen,
  repeat: repeat,
  pad: pad,
  truncate: truncate,
  mergeOptions: mergeOptions,
  wordWrap: multiLineWordWrap,
  colorizeLines: colorizeLines,
  hyperlink,
};


/***/ }),

/***/ 1449:
/***/ ((__unused_webpack_module, exports) => {



var BOMChar = '\uFEFF';

exports.PrependBOM = PrependBOMWrapper
function PrependBOMWrapper(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
}

PrependBOMWrapper.prototype.write = function(str) {
    if (this.addBOM) {
        str = BOMChar + str;
        this.addBOM = false;
    }

    return this.encoder.write(str);
}

PrependBOMWrapper.prototype.end = function() {
    return this.encoder.end();
}


//------------------------------------------------------------------------------

exports.StripBOM = StripBOMWrapper;
function StripBOMWrapper(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
}

StripBOMWrapper.prototype.write = function(buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res)
        return res;

    if (res[0] === BOMChar) {
        res = res.slice(1);
        if (typeof this.options.stripBOM === 'function')
            this.options.stripBOM();
    }

    this.pass = true;
    return res;
}

StripBOMWrapper.prototype.end = function() {
    return this.decoder.end();
}



/***/ }),

/***/ 1455:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:fs/promises");

/***/ }),

/***/ 1479:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[["8740","䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],["8767","綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],["87a1","𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],["8840","㇀",4,"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],["88a1","ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],["8940","𪎩𡅅"],["8943","攊"],["8946","丽滝鵎釟"],["894c","𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],["89a1","琑糼緍楆竉刧"],["89ab","醌碸酞肼"],["89b0","贋胶𠧧"],["89b5","肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],["89c1","溚舾甙"],["89c5","䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],["8a40","𧶄唥"],["8a43","𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],["8a64","𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],["8a76","䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],["8aa1","𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],["8aac","䠋𠆩㿺塳𢶍"],["8ab2","𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],["8abb","䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],["8ac9","𪘁𠸉𢫏𢳉"],["8ace","𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],["8adf","𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],["8af6","𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],["8b40","𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],["8b55","𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],["8ba1","𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],["8bde","𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],["8c40","倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],["8ca1","𣏹椙橃𣱣泿"],["8ca7","爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],["8cc9","顨杫䉶圽"],["8cce","藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],["8ce6","峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],["8d40","𠮟"],["8d42","𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],["8da1","㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],["8e40","𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],["8ea1","繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],["8f40","蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],["8fa1","𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],["9040","趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],["90a1","𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],["9140","𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],["91a1","鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],["9240","𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],["92a1","働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],["9340","媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],["93a1","摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],["9440","銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],["94a1","㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],["9540","𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],["95a1","衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],["9640","桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],["96a1","𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],["9740","愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],["97a1","𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],["9840","𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],["98a1","咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],["9940","䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],["99a1","䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],["9a40","鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],["9aa1","黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],["9b40","𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],["9b62","𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],["9ba1","椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],["9c40","嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],["9ca1","㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],["9d40","𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],["9da1","辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],["9e40","𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],["9ea1","鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],["9ead","𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],["9ec5","㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],["9ef5","噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],["9f40","籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],["9f4f","凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],["9fa1","椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],["9fae","酙隁酜"],["9fb2","酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],["9fc1","𤤙盖鮝个𠳔莾衂"],["9fc9","届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],["9fdb","歒酼龥鮗頮颴骺麨麄煺笔"],["9fe7","毺蠘罸"],["9feb","嘠𪙊蹷齓"],["9ff0","跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],["a040","𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],["a055","𡠻𦸅"],["a058","詾𢔛"],["a05b","惽癧髗鵄鍮鮏蟵"],["a063","蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],["a073","坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],["a0a1","嵗𨯂迚𨸹"],["a0a6","僙𡵆礆匲阸𠼻䁥"],["a0ae","矾"],["a0b0","糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],["a0d4","覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],["a0e2","罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],["a3c0","␀",31,"␡"],["c6a1","①",9,"⑴",9,"ⅰ",9,"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",23],["c740","す",58,"ァアィイ"],["c7a1","ゥ",81,"А",5,"ЁЖ",4],["c840","Л",26,"ёж",25,"⇧↸↹㇏𠃌乚𠂊刂䒑"],["c8a1","龰冈龱𧘇"],["c8cd","￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],["c8f5","ʃɐɛɔɵœøŋʊɪ"],["f9fe","￭"],["fa40","𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],["faa1","鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],["fb40","𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],["fba1","𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],["fc40","廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],["fca1","𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],["fd40","𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],["fda1","𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],["fe40","鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],["fea1","𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]]');

/***/ }),

/***/ 1482:
/***/ ((module) => {


const ansiEscapes = module.exports;
// TODO: remove this in the next major version
module.exports["default"] = ansiEscapes;

const ESC = '\u001B[';
const OSC = '\u001B]';
const BEL = '\u0007';
const SEP = ';';
const isTerminalApp = process.env.TERM_PROGRAM === 'Apple_Terminal';

ansiEscapes.cursorTo = (x, y) => {
	if (typeof x !== 'number') {
		throw new TypeError('The `x` argument is required');
	}

	if (typeof y !== 'number') {
		return ESC + (x + 1) + 'G';
	}

	return ESC + (y + 1) + ';' + (x + 1) + 'H';
};

ansiEscapes.cursorMove = (x, y) => {
	if (typeof x !== 'number') {
		throw new TypeError('The `x` argument is required');
	}

	let ret = '';

	if (x < 0) {
		ret += ESC + (-x) + 'D';
	} else if (x > 0) {
		ret += ESC + x + 'C';
	}

	if (y < 0) {
		ret += ESC + (-y) + 'A';
	} else if (y > 0) {
		ret += ESC + y + 'B';
	}

	return ret;
};

ansiEscapes.cursorUp = (count = 1) => ESC + count + 'A';
ansiEscapes.cursorDown = (count = 1) => ESC + count + 'B';
ansiEscapes.cursorForward = (count = 1) => ESC + count + 'C';
ansiEscapes.cursorBackward = (count = 1) => ESC + count + 'D';

ansiEscapes.cursorLeft = ESC + 'G';
ansiEscapes.cursorSavePosition = isTerminalApp ? '\u001B7' : ESC + 's';
ansiEscapes.cursorRestorePosition = isTerminalApp ? '\u001B8' : ESC + 'u';
ansiEscapes.cursorGetPosition = ESC + '6n';
ansiEscapes.cursorNextLine = ESC + 'E';
ansiEscapes.cursorPrevLine = ESC + 'F';
ansiEscapes.cursorHide = ESC + '?25l';
ansiEscapes.cursorShow = ESC + '?25h';

ansiEscapes.eraseLines = count => {
	let clear = '';

	for (let i = 0; i < count; i++) {
		clear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : '');
	}

	if (count) {
		clear += ansiEscapes.cursorLeft;
	}

	return clear;
};

ansiEscapes.eraseEndLine = ESC + 'K';
ansiEscapes.eraseStartLine = ESC + '1K';
ansiEscapes.eraseLine = ESC + '2K';
ansiEscapes.eraseDown = ESC + 'J';
ansiEscapes.eraseUp = ESC + '1J';
ansiEscapes.eraseScreen = ESC + '2J';
ansiEscapes.scrollUp = ESC + 'S';
ansiEscapes.scrollDown = ESC + 'T';

ansiEscapes.clearScreen = '\u001Bc';

ansiEscapes.clearTerminal = process.platform === 'win32' ?
	`${ansiEscapes.eraseScreen}${ESC}0f` :
	// 1. Erases the screen (Only done in case `2` is not supported)
	// 2. Erases the whole screen including scrollback buffer
	// 3. Moves cursor to the top-left position
	// More info: https://www.real-world-systems.com/docs/ANSIcode.html
	`${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;

ansiEscapes.beep = BEL;

ansiEscapes.link = (text, url) => {
	return [
		OSC,
		'8',
		SEP,
		SEP,
		url,
		BEL,
		text,
		OSC,
		'8',
		SEP,
		SEP,
		BEL
	].join('');
};

ansiEscapes.image = (buffer, options = {}) => {
	let ret = `${OSC}1337;File=inline=1`;

	if (options.width) {
		ret += `;width=${options.width}`;
	}

	if (options.height) {
		ret += `;height=${options.height}`;
	}

	if (options.preserveAspectRatio === false) {
		ret += ';preserveAspectRatio=0';
	}

	return ret + ':' + buffer.toString('base64') + BEL;
};

ansiEscapes.iTerm = {
	setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,

	annotation: (message, options = {}) => {
		let ret = `${OSC}1337;`;

		const hasX = typeof options.x !== 'undefined';
		const hasY = typeof options.y !== 'undefined';
		if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== 'undefined')) {
			throw new Error('`x`, `y` and `length` must be defined when `x` or `y` is defined');
		}

		message = message.replace(/\|/g, '');

		ret += options.isHidden ? 'AddHiddenAnnotation=' : 'AddAnnotation=';

		if (options.length > 0) {
			ret +=
					(hasX ?
						[message, options.length, options.x, options.y] :
						[options.length, message]).join('|');
		} else {
			ret += message;
		}

		return ret + BEL;
	}
};


/***/ }),

/***/ 1507:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.timeoutWith = void 0;
var async_1 = __webpack_require__(7688);
var isDate_1 = __webpack_require__(4615);
var timeout_1 = __webpack_require__(9835);
function timeoutWith(due, withObservable, scheduler) {
    var first;
    var each;
    var _with;
    scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async_1.async;
    if (isDate_1.isValidDate(due)) {
        first = due;
    }
    else if (typeof due === 'number') {
        each = due;
    }
    if (withObservable) {
        _with = function () { return withObservable; };
    }
    else {
        throw new TypeError('No observable provided to switch to');
    }
    if (first == null && each == null) {
        throw new TypeError('No timeout provided.');
    }
    return timeout_1.timeout({
        first: first,
        each: each,
        scheduler: scheduler,
        with: _with,
    });
}
exports.timeoutWith = timeoutWith;
//# sourceMappingURL=timeoutWith.js.map

/***/ }),

/***/ 1524:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stream = (__webpack_require__(2203).Stream)

module.exports = legacy

function legacy (fs) {
  return {
    ReadStream: ReadStream,
    WriteStream: WriteStream
  }

  function ReadStream (path, options) {
    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

    Stream.call(this);

    var self = this;

    this.path = path;
    this.fd = null;
    this.readable = true;
    this.paused = false;

    this.flags = 'r';
    this.mode = 438; /*=0666*/
    this.bufferSize = 64 * 1024;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.encoding) this.setEncoding(this.encoding);

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.end === undefined) {
        this.end = Infinity;
      } else if ('number' !== typeof this.end) {
        throw TypeError('end must be a Number');
      }

      if (this.start > this.end) {
        throw new Error('start must be <= end');
      }

      this.pos = this.start;
    }

    if (this.fd !== null) {
      process.nextTick(function() {
        self._read();
      });
      return;
    }

    fs.open(this.path, this.flags, this.mode, function (err, fd) {
      if (err) {
        self.emit('error', err);
        self.readable = false;
        return;
      }

      self.fd = fd;
      self.emit('open', fd);
      self._read();
    })
  }

  function WriteStream (path, options) {
    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

    Stream.call(this);

    this.path = path;
    this.fd = null;
    this.writable = true;

    this.flags = 'w';
    this.encoding = 'binary';
    this.mode = 438; /*=0666*/
    this.bytesWritten = 0;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.start < 0) {
        throw new Error('start must be >= zero');
      }

      this.pos = this.start;
    }

    this.busy = false;
    this._queue = [];

    if (this.fd === null) {
      this._open = fs.open;
      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
      this.flush();
    }
  }
}


/***/ }),

/***/ 1530:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.interval = exports.iif = exports.generate = exports.fromEventPattern = exports.fromEvent = exports.from = exports.forkJoin = exports.empty = exports.defer = exports.connectable = exports.concat = exports.combineLatest = exports.bindNodeCallback = exports.bindCallback = exports.UnsubscriptionError = exports.TimeoutError = exports.SequenceError = exports.ObjectUnsubscribedError = exports.NotFoundError = exports.EmptyError = exports.ArgumentOutOfRangeError = exports.firstValueFrom = exports.lastValueFrom = exports.isObservable = exports.identity = exports.noop = exports.pipe = exports.NotificationKind = exports.Notification = exports.Subscriber = exports.Subscription = exports.Scheduler = exports.VirtualAction = exports.VirtualTimeScheduler = exports.animationFrameScheduler = exports.animationFrame = exports.queueScheduler = exports.queue = exports.asyncScheduler = exports.async = exports.asapScheduler = exports.asap = exports.AsyncSubject = exports.ReplaySubject = exports.BehaviorSubject = exports.Subject = exports.animationFrames = exports.observable = exports.ConnectableObservable = exports.Observable = void 0;
exports.filter = exports.expand = exports.exhaustMap = exports.exhaustAll = exports.exhaust = exports.every = exports.endWith = exports.elementAt = exports.distinctUntilKeyChanged = exports.distinctUntilChanged = exports.distinct = exports.dematerialize = exports.delayWhen = exports.delay = exports.defaultIfEmpty = exports.debounceTime = exports.debounce = exports.count = exports.connect = exports.concatWith = exports.concatMapTo = exports.concatMap = exports.concatAll = exports.combineLatestWith = exports.combineLatestAll = exports.combineAll = exports.catchError = exports.bufferWhen = exports.bufferToggle = exports.bufferTime = exports.bufferCount = exports.buffer = exports.auditTime = exports.audit = exports.config = exports.NEVER = exports.EMPTY = exports.scheduled = exports.zip = exports.using = exports.timer = exports.throwError = exports.range = exports.race = exports.partition = exports.pairs = exports.onErrorResumeNext = exports.of = exports.never = exports.merge = void 0;
exports.switchMap = exports.switchAll = exports.subscribeOn = exports.startWith = exports.skipWhile = exports.skipUntil = exports.skipLast = exports.skip = exports.single = exports.shareReplay = exports.share = exports.sequenceEqual = exports.scan = exports.sampleTime = exports.sample = exports.refCount = exports.retryWhen = exports.retry = exports.repeatWhen = exports.repeat = exports.reduce = exports.raceWith = exports.publishReplay = exports.publishLast = exports.publishBehavior = exports.publish = exports.pluck = exports.pairwise = exports.onErrorResumeNextWith = exports.observeOn = exports.multicast = exports.min = exports.mergeWith = exports.mergeScan = exports.mergeMapTo = exports.mergeMap = exports.flatMap = exports.mergeAll = exports.max = exports.materialize = exports.mapTo = exports.map = exports.last = exports.isEmpty = exports.ignoreElements = exports.groupBy = exports.first = exports.findIndex = exports.find = exports.finalize = void 0;
exports.zipWith = exports.zipAll = exports.withLatestFrom = exports.windowWhen = exports.windowToggle = exports.windowTime = exports.windowCount = exports.window = exports.toArray = exports.timestamp = exports.timeoutWith = exports.timeout = exports.timeInterval = exports.throwIfEmpty = exports.throttleTime = exports.throttle = exports.tap = exports.takeWhile = exports.takeUntil = exports.takeLast = exports.take = exports.switchScan = exports.switchMapTo = void 0;
var Observable_1 = __webpack_require__(541);
Object.defineProperty(exports, "Observable", ({ enumerable: true, get: function () { return Observable_1.Observable; } }));
var ConnectableObservable_1 = __webpack_require__(3941);
Object.defineProperty(exports, "ConnectableObservable", ({ enumerable: true, get: function () { return ConnectableObservable_1.ConnectableObservable; } }));
var observable_1 = __webpack_require__(9498);
Object.defineProperty(exports, "observable", ({ enumerable: true, get: function () { return observable_1.observable; } }));
var animationFrames_1 = __webpack_require__(5041);
Object.defineProperty(exports, "animationFrames", ({ enumerable: true, get: function () { return animationFrames_1.animationFrames; } }));
var Subject_1 = __webpack_require__(6118);
Object.defineProperty(exports, "Subject", ({ enumerable: true, get: function () { return Subject_1.Subject; } }));
var BehaviorSubject_1 = __webpack_require__(9000);
Object.defineProperty(exports, "BehaviorSubject", ({ enumerable: true, get: function () { return BehaviorSubject_1.BehaviorSubject; } }));
var ReplaySubject_1 = __webpack_require__(3847);
Object.defineProperty(exports, "ReplaySubject", ({ enumerable: true, get: function () { return ReplaySubject_1.ReplaySubject; } }));
var AsyncSubject_1 = __webpack_require__(5960);
Object.defineProperty(exports, "AsyncSubject", ({ enumerable: true, get: function () { return AsyncSubject_1.AsyncSubject; } }));
var asap_1 = __webpack_require__(3615);
Object.defineProperty(exports, "asap", ({ enumerable: true, get: function () { return asap_1.asap; } }));
Object.defineProperty(exports, "asapScheduler", ({ enumerable: true, get: function () { return asap_1.asapScheduler; } }));
var async_1 = __webpack_require__(7688);
Object.defineProperty(exports, "async", ({ enumerable: true, get: function () { return async_1.async; } }));
Object.defineProperty(exports, "asyncScheduler", ({ enumerable: true, get: function () { return async_1.asyncScheduler; } }));
var queue_1 = __webpack_require__(3091);
Object.defineProperty(exports, "queue", ({ enumerable: true, get: function () { return queue_1.queue; } }));
Object.defineProperty(exports, "queueScheduler", ({ enumerable: true, get: function () { return queue_1.queueScheduler; } }));
var animationFrame_1 = __webpack_require__(5237);
Object.defineProperty(exports, "animationFrame", ({ enumerable: true, get: function () { return animationFrame_1.animationFrame; } }));
Object.defineProperty(exports, "animationFrameScheduler", ({ enumerable: true, get: function () { return animationFrame_1.animationFrameScheduler; } }));
var VirtualTimeScheduler_1 = __webpack_require__(5153);
Object.defineProperty(exports, "VirtualTimeScheduler", ({ enumerable: true, get: function () { return VirtualTimeScheduler_1.VirtualTimeScheduler; } }));
Object.defineProperty(exports, "VirtualAction", ({ enumerable: true, get: function () { return VirtualTimeScheduler_1.VirtualAction; } }));
var Scheduler_1 = __webpack_require__(3491);
Object.defineProperty(exports, "Scheduler", ({ enumerable: true, get: function () { return Scheduler_1.Scheduler; } }));
var Subscription_1 = __webpack_require__(1981);
Object.defineProperty(exports, "Subscription", ({ enumerable: true, get: function () { return Subscription_1.Subscription; } }));
var Subscriber_1 = __webpack_require__(2554);
Object.defineProperty(exports, "Subscriber", ({ enumerable: true, get: function () { return Subscriber_1.Subscriber; } }));
var Notification_1 = __webpack_require__(1439);
Object.defineProperty(exports, "Notification", ({ enumerable: true, get: function () { return Notification_1.Notification; } }));
Object.defineProperty(exports, "NotificationKind", ({ enumerable: true, get: function () { return Notification_1.NotificationKind; } }));
var pipe_1 = __webpack_require__(1943);
Object.defineProperty(exports, "pipe", ({ enumerable: true, get: function () { return pipe_1.pipe; } }));
var noop_1 = __webpack_require__(8563);
Object.defineProperty(exports, "noop", ({ enumerable: true, get: function () { return noop_1.noop; } }));
var identity_1 = __webpack_require__(8489);
Object.defineProperty(exports, "identity", ({ enumerable: true, get: function () { return identity_1.identity; } }));
var isObservable_1 = __webpack_require__(310);
Object.defineProperty(exports, "isObservable", ({ enumerable: true, get: function () { return isObservable_1.isObservable; } }));
var lastValueFrom_1 = __webpack_require__(5355);
Object.defineProperty(exports, "lastValueFrom", ({ enumerable: true, get: function () { return lastValueFrom_1.lastValueFrom; } }));
var firstValueFrom_1 = __webpack_require__(4119);
Object.defineProperty(exports, "firstValueFrom", ({ enumerable: true, get: function () { return firstValueFrom_1.firstValueFrom; } }));
var ArgumentOutOfRangeError_1 = __webpack_require__(6546);
Object.defineProperty(exports, "ArgumentOutOfRangeError", ({ enumerable: true, get: function () { return ArgumentOutOfRangeError_1.ArgumentOutOfRangeError; } }));
var EmptyError_1 = __webpack_require__(9866);
Object.defineProperty(exports, "EmptyError", ({ enumerable: true, get: function () { return EmptyError_1.EmptyError; } }));
var NotFoundError_1 = __webpack_require__(8236);
Object.defineProperty(exports, "NotFoundError", ({ enumerable: true, get: function () { return NotFoundError_1.NotFoundError; } }));
var ObjectUnsubscribedError_1 = __webpack_require__(2625);
Object.defineProperty(exports, "ObjectUnsubscribedError", ({ enumerable: true, get: function () { return ObjectUnsubscribedError_1.ObjectUnsubscribedError; } }));
var SequenceError_1 = __webpack_require__(5910);
Object.defineProperty(exports, "SequenceError", ({ enumerable: true, get: function () { return SequenceError_1.SequenceError; } }));
var timeout_1 = __webpack_require__(9835);
Object.defineProperty(exports, "TimeoutError", ({ enumerable: true, get: function () { return timeout_1.TimeoutError; } }));
var UnsubscriptionError_1 = __webpack_require__(5779);
Object.defineProperty(exports, "UnsubscriptionError", ({ enumerable: true, get: function () { return UnsubscriptionError_1.UnsubscriptionError; } }));
var bindCallback_1 = __webpack_require__(7256);
Object.defineProperty(exports, "bindCallback", ({ enumerable: true, get: function () { return bindCallback_1.bindCallback; } }));
var bindNodeCallback_1 = __webpack_require__(5436);
Object.defineProperty(exports, "bindNodeCallback", ({ enumerable: true, get: function () { return bindNodeCallback_1.bindNodeCallback; } }));
var combineLatest_1 = __webpack_require__(7952);
Object.defineProperty(exports, "combineLatest", ({ enumerable: true, get: function () { return combineLatest_1.combineLatest; } }));
var concat_1 = __webpack_require__(1780);
Object.defineProperty(exports, "concat", ({ enumerable: true, get: function () { return concat_1.concat; } }));
var connectable_1 = __webpack_require__(2668);
Object.defineProperty(exports, "connectable", ({ enumerable: true, get: function () { return connectable_1.connectable; } }));
var defer_1 = __webpack_require__(1258);
Object.defineProperty(exports, "defer", ({ enumerable: true, get: function () { return defer_1.defer; } }));
var empty_1 = __webpack_require__(8003);
Object.defineProperty(exports, "empty", ({ enumerable: true, get: function () { return empty_1.empty; } }));
var forkJoin_1 = __webpack_require__(3432);
Object.defineProperty(exports, "forkJoin", ({ enumerable: true, get: function () { return forkJoin_1.forkJoin; } }));
var from_1 = __webpack_require__(7568);
Object.defineProperty(exports, "from", ({ enumerable: true, get: function () { return from_1.from; } }));
var fromEvent_1 = __webpack_require__(9922);
Object.defineProperty(exports, "fromEvent", ({ enumerable: true, get: function () { return fromEvent_1.fromEvent; } }));
var fromEventPattern_1 = __webpack_require__(2350);
Object.defineProperty(exports, "fromEventPattern", ({ enumerable: true, get: function () { return fromEventPattern_1.fromEventPattern; } }));
var generate_1 = __webpack_require__(6311);
Object.defineProperty(exports, "generate", ({ enumerable: true, get: function () { return generate_1.generate; } }));
var iif_1 = __webpack_require__(9798);
Object.defineProperty(exports, "iif", ({ enumerable: true, get: function () { return iif_1.iif; } }));
var interval_1 = __webpack_require__(9233);
Object.defineProperty(exports, "interval", ({ enumerable: true, get: function () { return interval_1.interval; } }));
var merge_1 = __webpack_require__(2110);
Object.defineProperty(exports, "merge", ({ enumerable: true, get: function () { return merge_1.merge; } }));
var never_1 = __webpack_require__(9160);
Object.defineProperty(exports, "never", ({ enumerable: true, get: function () { return never_1.never; } }));
var of_1 = __webpack_require__(8181);
Object.defineProperty(exports, "of", ({ enumerable: true, get: function () { return of_1.of; } }));
var onErrorResumeNext_1 = __webpack_require__(5657);
Object.defineProperty(exports, "onErrorResumeNext", ({ enumerable: true, get: function () { return onErrorResumeNext_1.onErrorResumeNext; } }));
var pairs_1 = __webpack_require__(2947);
Object.defineProperty(exports, "pairs", ({ enumerable: true, get: function () { return pairs_1.pairs; } }));
var partition_1 = __webpack_require__(4488);
Object.defineProperty(exports, "partition", ({ enumerable: true, get: function () { return partition_1.partition; } }));
var race_1 = __webpack_require__(2685);
Object.defineProperty(exports, "race", ({ enumerable: true, get: function () { return race_1.race; } }));
var range_1 = __webpack_require__(8984);
Object.defineProperty(exports, "range", ({ enumerable: true, get: function () { return range_1.range; } }));
var throwError_1 = __webpack_require__(9822);
Object.defineProperty(exports, "throwError", ({ enumerable: true, get: function () { return throwError_1.throwError; } }));
var timer_1 = __webpack_require__(3051);
Object.defineProperty(exports, "timer", ({ enumerable: true, get: function () { return timer_1.timer; } }));
var using_1 = __webpack_require__(9242);
Object.defineProperty(exports, "using", ({ enumerable: true, get: function () { return using_1.using; } }));
var zip_1 = __webpack_require__(553);
Object.defineProperty(exports, "zip", ({ enumerable: true, get: function () { return zip_1.zip; } }));
var scheduled_1 = __webpack_require__(3861);
Object.defineProperty(exports, "scheduled", ({ enumerable: true, get: function () { return scheduled_1.scheduled; } }));
var empty_2 = __webpack_require__(8003);
Object.defineProperty(exports, "EMPTY", ({ enumerable: true, get: function () { return empty_2.EMPTY; } }));
var never_2 = __webpack_require__(9160);
Object.defineProperty(exports, "NEVER", ({ enumerable: true, get: function () { return never_2.NEVER; } }));
__exportStar(__webpack_require__(243), exports);
var config_1 = __webpack_require__(2454);
Object.defineProperty(exports, "config", ({ enumerable: true, get: function () { return config_1.config; } }));
var audit_1 = __webpack_require__(2027);
Object.defineProperty(exports, "audit", ({ enumerable: true, get: function () { return audit_1.audit; } }));
var auditTime_1 = __webpack_require__(9646);
Object.defineProperty(exports, "auditTime", ({ enumerable: true, get: function () { return auditTime_1.auditTime; } }));
var buffer_1 = __webpack_require__(7284);
Object.defineProperty(exports, "buffer", ({ enumerable: true, get: function () { return buffer_1.buffer; } }));
var bufferCount_1 = __webpack_require__(6193);
Object.defineProperty(exports, "bufferCount", ({ enumerable: true, get: function () { return bufferCount_1.bufferCount; } }));
var bufferTime_1 = __webpack_require__(9801);
Object.defineProperty(exports, "bufferTime", ({ enumerable: true, get: function () { return bufferTime_1.bufferTime; } }));
var bufferToggle_1 = __webpack_require__(9696);
Object.defineProperty(exports, "bufferToggle", ({ enumerable: true, get: function () { return bufferToggle_1.bufferToggle; } }));
var bufferWhen_1 = __webpack_require__(632);
Object.defineProperty(exports, "bufferWhen", ({ enumerable: true, get: function () { return bufferWhen_1.bufferWhen; } }));
var catchError_1 = __webpack_require__(2961);
Object.defineProperty(exports, "catchError", ({ enumerable: true, get: function () { return catchError_1.catchError; } }));
var combineAll_1 = __webpack_require__(7534);
Object.defineProperty(exports, "combineAll", ({ enumerable: true, get: function () { return combineAll_1.combineAll; } }));
var combineLatestAll_1 = __webpack_require__(8187);
Object.defineProperty(exports, "combineLatestAll", ({ enumerable: true, get: function () { return combineLatestAll_1.combineLatestAll; } }));
var combineLatestWith_1 = __webpack_require__(8538);
Object.defineProperty(exports, "combineLatestWith", ({ enumerable: true, get: function () { return combineLatestWith_1.combineLatestWith; } }));
var concatAll_1 = __webpack_require__(84);
Object.defineProperty(exports, "concatAll", ({ enumerable: true, get: function () { return concatAll_1.concatAll; } }));
var concatMap_1 = __webpack_require__(4534);
Object.defineProperty(exports, "concatMap", ({ enumerable: true, get: function () { return concatMap_1.concatMap; } }));
var concatMapTo_1 = __webpack_require__(4219);
Object.defineProperty(exports, "concatMapTo", ({ enumerable: true, get: function () { return concatMapTo_1.concatMapTo; } }));
var concatWith_1 = __webpack_require__(6574);
Object.defineProperty(exports, "concatWith", ({ enumerable: true, get: function () { return concatWith_1.concatWith; } }));
var connect_1 = __webpack_require__(4566);
Object.defineProperty(exports, "connect", ({ enumerable: true, get: function () { return connect_1.connect; } }));
var count_1 = __webpack_require__(287);
Object.defineProperty(exports, "count", ({ enumerable: true, get: function () { return count_1.count; } }));
var debounce_1 = __webpack_require__(5145);
Object.defineProperty(exports, "debounce", ({ enumerable: true, get: function () { return debounce_1.debounce; } }));
var debounceTime_1 = __webpack_require__(6540);
Object.defineProperty(exports, "debounceTime", ({ enumerable: true, get: function () { return debounceTime_1.debounceTime; } }));
var defaultIfEmpty_1 = __webpack_require__(4761);
Object.defineProperty(exports, "defaultIfEmpty", ({ enumerable: true, get: function () { return defaultIfEmpty_1.defaultIfEmpty; } }));
var delay_1 = __webpack_require__(7739);
Object.defineProperty(exports, "delay", ({ enumerable: true, get: function () { return delay_1.delay; } }));
var delayWhen_1 = __webpack_require__(4947);
Object.defineProperty(exports, "delayWhen", ({ enumerable: true, get: function () { return delayWhen_1.delayWhen; } }));
var dematerialize_1 = __webpack_require__(1936);
Object.defineProperty(exports, "dematerialize", ({ enumerable: true, get: function () { return dematerialize_1.dematerialize; } }));
var distinct_1 = __webpack_require__(6226);
Object.defineProperty(exports, "distinct", ({ enumerable: true, get: function () { return distinct_1.distinct; } }));
var distinctUntilChanged_1 = __webpack_require__(3802);
Object.defineProperty(exports, "distinctUntilChanged", ({ enumerable: true, get: function () { return distinctUntilChanged_1.distinctUntilChanged; } }));
var distinctUntilKeyChanged_1 = __webpack_require__(289);
Object.defineProperty(exports, "distinctUntilKeyChanged", ({ enumerable: true, get: function () { return distinctUntilKeyChanged_1.distinctUntilKeyChanged; } }));
var elementAt_1 = __webpack_require__(7305);
Object.defineProperty(exports, "elementAt", ({ enumerable: true, get: function () { return elementAt_1.elementAt; } }));
var endWith_1 = __webpack_require__(5093);
Object.defineProperty(exports, "endWith", ({ enumerable: true, get: function () { return endWith_1.endWith; } }));
var every_1 = __webpack_require__(3647);
Object.defineProperty(exports, "every", ({ enumerable: true, get: function () { return every_1.every; } }));
var exhaust_1 = __webpack_require__(5962);
Object.defineProperty(exports, "exhaust", ({ enumerable: true, get: function () { return exhaust_1.exhaust; } }));
var exhaustAll_1 = __webpack_require__(8079);
Object.defineProperty(exports, "exhaustAll", ({ enumerable: true, get: function () { return exhaustAll_1.exhaustAll; } }));
var exhaustMap_1 = __webpack_require__(654);
Object.defineProperty(exports, "exhaustMap", ({ enumerable: true, get: function () { return exhaustMap_1.exhaustMap; } }));
var expand_1 = __webpack_require__(3742);
Object.defineProperty(exports, "expand", ({ enumerable: true, get: function () { return expand_1.expand; } }));
var filter_1 = __webpack_require__(248);
Object.defineProperty(exports, "filter", ({ enumerable: true, get: function () { return filter_1.filter; } }));
var finalize_1 = __webpack_require__(3584);
Object.defineProperty(exports, "finalize", ({ enumerable: true, get: function () { return finalize_1.finalize; } }));
var find_1 = __webpack_require__(2993);
Object.defineProperty(exports, "find", ({ enumerable: true, get: function () { return find_1.find; } }));
var findIndex_1 = __webpack_require__(3821);
Object.defineProperty(exports, "findIndex", ({ enumerable: true, get: function () { return findIndex_1.findIndex; } }));
var first_1 = __webpack_require__(7934);
Object.defineProperty(exports, "first", ({ enumerable: true, get: function () { return first_1.first; } }));
var groupBy_1 = __webpack_require__(3318);
Object.defineProperty(exports, "groupBy", ({ enumerable: true, get: function () { return groupBy_1.groupBy; } }));
var ignoreElements_1 = __webpack_require__(7785);
Object.defineProperty(exports, "ignoreElements", ({ enumerable: true, get: function () { return ignoreElements_1.ignoreElements; } }));
var isEmpty_1 = __webpack_require__(3149);
Object.defineProperty(exports, "isEmpty", ({ enumerable: true, get: function () { return isEmpty_1.isEmpty; } }));
var last_1 = __webpack_require__(4118);
Object.defineProperty(exports, "last", ({ enumerable: true, get: function () { return last_1.last; } }));
var map_1 = __webpack_require__(3982);
Object.defineProperty(exports, "map", ({ enumerable: true, get: function () { return map_1.map; } }));
var mapTo_1 = __webpack_require__(8499);
Object.defineProperty(exports, "mapTo", ({ enumerable: true, get: function () { return mapTo_1.mapTo; } }));
var materialize_1 = __webpack_require__(3113);
Object.defineProperty(exports, "materialize", ({ enumerable: true, get: function () { return materialize_1.materialize; } }));
var max_1 = __webpack_require__(2198);
Object.defineProperty(exports, "max", ({ enumerable: true, get: function () { return max_1.max; } }));
var mergeAll_1 = __webpack_require__(5689);
Object.defineProperty(exports, "mergeAll", ({ enumerable: true, get: function () { return mergeAll_1.mergeAll; } }));
var flatMap_1 = __webpack_require__(9567);
Object.defineProperty(exports, "flatMap", ({ enumerable: true, get: function () { return flatMap_1.flatMap; } }));
var mergeMap_1 = __webpack_require__(4344);
Object.defineProperty(exports, "mergeMap", ({ enumerable: true, get: function () { return mergeMap_1.mergeMap; } }));
var mergeMapTo_1 = __webpack_require__(8393);
Object.defineProperty(exports, "mergeMapTo", ({ enumerable: true, get: function () { return mergeMapTo_1.mergeMapTo; } }));
var mergeScan_1 = __webpack_require__(4029);
Object.defineProperty(exports, "mergeScan", ({ enumerable: true, get: function () { return mergeScan_1.mergeScan; } }));
var mergeWith_1 = __webpack_require__(6672);
Object.defineProperty(exports, "mergeWith", ({ enumerable: true, get: function () { return mergeWith_1.mergeWith; } }));
var min_1 = __webpack_require__(7976);
Object.defineProperty(exports, "min", ({ enumerable: true, get: function () { return min_1.min; } }));
var multicast_1 = __webpack_require__(7662);
Object.defineProperty(exports, "multicast", ({ enumerable: true, get: function () { return multicast_1.multicast; } }));
var observeOn_1 = __webpack_require__(6257);
Object.defineProperty(exports, "observeOn", ({ enumerable: true, get: function () { return observeOn_1.observeOn; } }));
var onErrorResumeNextWith_1 = __webpack_require__(5215);
Object.defineProperty(exports, "onErrorResumeNextWith", ({ enumerable: true, get: function () { return onErrorResumeNextWith_1.onErrorResumeNextWith; } }));
var pairwise_1 = __webpack_require__(9558);
Object.defineProperty(exports, "pairwise", ({ enumerable: true, get: function () { return pairwise_1.pairwise; } }));
var pluck_1 = __webpack_require__(9457);
Object.defineProperty(exports, "pluck", ({ enumerable: true, get: function () { return pluck_1.pluck; } }));
var publish_1 = __webpack_require__(7019);
Object.defineProperty(exports, "publish", ({ enumerable: true, get: function () { return publish_1.publish; } }));
var publishBehavior_1 = __webpack_require__(3049);
Object.defineProperty(exports, "publishBehavior", ({ enumerable: true, get: function () { return publishBehavior_1.publishBehavior; } }));
var publishLast_1 = __webpack_require__(3435);
Object.defineProperty(exports, "publishLast", ({ enumerable: true, get: function () { return publishLast_1.publishLast; } }));
var publishReplay_1 = __webpack_require__(3544);
Object.defineProperty(exports, "publishReplay", ({ enumerable: true, get: function () { return publishReplay_1.publishReplay; } }));
var raceWith_1 = __webpack_require__(1779);
Object.defineProperty(exports, "raceWith", ({ enumerable: true, get: function () { return raceWith_1.raceWith; } }));
var reduce_1 = __webpack_require__(1848);
Object.defineProperty(exports, "reduce", ({ enumerable: true, get: function () { return reduce_1.reduce; } }));
var repeat_1 = __webpack_require__(9505);
Object.defineProperty(exports, "repeat", ({ enumerable: true, get: function () { return repeat_1.repeat; } }));
var repeatWhen_1 = __webpack_require__(4633);
Object.defineProperty(exports, "repeatWhen", ({ enumerable: true, get: function () { return repeatWhen_1.repeatWhen; } }));
var retry_1 = __webpack_require__(4422);
Object.defineProperty(exports, "retry", ({ enumerable: true, get: function () { return retry_1.retry; } }));
var retryWhen_1 = __webpack_require__(7610);
Object.defineProperty(exports, "retryWhen", ({ enumerable: true, get: function () { return retryWhen_1.retryWhen; } }));
var refCount_1 = __webpack_require__(870);
Object.defineProperty(exports, "refCount", ({ enumerable: true, get: function () { return refCount_1.refCount; } }));
var sample_1 = __webpack_require__(8584);
Object.defineProperty(exports, "sample", ({ enumerable: true, get: function () { return sample_1.sample; } }));
var sampleTime_1 = __webpack_require__(8197);
Object.defineProperty(exports, "sampleTime", ({ enumerable: true, get: function () { return sampleTime_1.sampleTime; } }));
var scan_1 = __webpack_require__(5003);
Object.defineProperty(exports, "scan", ({ enumerable: true, get: function () { return scan_1.scan; } }));
var sequenceEqual_1 = __webpack_require__(611);
Object.defineProperty(exports, "sequenceEqual", ({ enumerable: true, get: function () { return sequenceEqual_1.sequenceEqual; } }));
var share_1 = __webpack_require__(5899);
Object.defineProperty(exports, "share", ({ enumerable: true, get: function () { return share_1.share; } }));
var shareReplay_1 = __webpack_require__(3720);
Object.defineProperty(exports, "shareReplay", ({ enumerable: true, get: function () { return shareReplay_1.shareReplay; } }));
var single_1 = __webpack_require__(1782);
Object.defineProperty(exports, "single", ({ enumerable: true, get: function () { return single_1.single; } }));
var skip_1 = __webpack_require__(3209);
Object.defineProperty(exports, "skip", ({ enumerable: true, get: function () { return skip_1.skip; } }));
var skipLast_1 = __webpack_require__(8037);
Object.defineProperty(exports, "skipLast", ({ enumerable: true, get: function () { return skipLast_1.skipLast; } }));
var skipUntil_1 = __webpack_require__(8641);
Object.defineProperty(exports, "skipUntil", ({ enumerable: true, get: function () { return skipUntil_1.skipUntil; } }));
var skipWhile_1 = __webpack_require__(664);
Object.defineProperty(exports, "skipWhile", ({ enumerable: true, get: function () { return skipWhile_1.skipWhile; } }));
var startWith_1 = __webpack_require__(2664);
Object.defineProperty(exports, "startWith", ({ enumerable: true, get: function () { return startWith_1.startWith; } }));
var subscribeOn_1 = __webpack_require__(3901);
Object.defineProperty(exports, "subscribeOn", ({ enumerable: true, get: function () { return subscribeOn_1.subscribeOn; } }));
var switchAll_1 = __webpack_require__(8123);
Object.defineProperty(exports, "switchAll", ({ enumerable: true, get: function () { return switchAll_1.switchAll; } }));
var switchMap_1 = __webpack_require__(8114);
Object.defineProperty(exports, "switchMap", ({ enumerable: true, get: function () { return switchMap_1.switchMap; } }));
var switchMapTo_1 = __webpack_require__(231);
Object.defineProperty(exports, "switchMapTo", ({ enumerable: true, get: function () { return switchMapTo_1.switchMapTo; } }));
var switchScan_1 = __webpack_require__(4583);
Object.defineProperty(exports, "switchScan", ({ enumerable: true, get: function () { return switchScan_1.switchScan; } }));
var take_1 = __webpack_require__(8693);
Object.defineProperty(exports, "take", ({ enumerable: true, get: function () { return take_1.take; } }));
var takeLast_1 = __webpack_require__(6910);
Object.defineProperty(exports, "takeLast", ({ enumerable: true, get: function () { return takeLast_1.takeLast; } }));
var takeUntil_1 = __webpack_require__(8277);
Object.defineProperty(exports, "takeUntil", ({ enumerable: true, get: function () { return takeUntil_1.takeUntil; } }));
var takeWhile_1 = __webpack_require__(2212);
Object.defineProperty(exports, "takeWhile", ({ enumerable: true, get: function () { return takeWhile_1.takeWhile; } }));
var tap_1 = __webpack_require__(8345);
Object.defineProperty(exports, "tap", ({ enumerable: true, get: function () { return tap_1.tap; } }));
var throttle_1 = __webpack_require__(2818);
Object.defineProperty(exports, "throttle", ({ enumerable: true, get: function () { return throttle_1.throttle; } }));
var throttleTime_1 = __webpack_require__(8727);
Object.defineProperty(exports, "throttleTime", ({ enumerable: true, get: function () { return throttleTime_1.throttleTime; } }));
var throwIfEmpty_1 = __webpack_require__(6626);
Object.defineProperty(exports, "throwIfEmpty", ({ enumerable: true, get: function () { return throwIfEmpty_1.throwIfEmpty; } }));
var timeInterval_1 = __webpack_require__(7386);
Object.defineProperty(exports, "timeInterval", ({ enumerable: true, get: function () { return timeInterval_1.timeInterval; } }));
var timeout_2 = __webpack_require__(9835);
Object.defineProperty(exports, "timeout", ({ enumerable: true, get: function () { return timeout_2.timeout; } }));
var timeoutWith_1 = __webpack_require__(1507);
Object.defineProperty(exports, "timeoutWith", ({ enumerable: true, get: function () { return timeoutWith_1.timeoutWith; } }));
var timestamp_1 = __webpack_require__(6268);
Object.defineProperty(exports, "timestamp", ({ enumerable: true, get: function () { return timestamp_1.timestamp; } }));
var toArray_1 = __webpack_require__(3862);
Object.defineProperty(exports, "toArray", ({ enumerable: true, get: function () { return toArray_1.toArray; } }));
var window_1 = __webpack_require__(6482);
Object.defineProperty(exports, "window", ({ enumerable: true, get: function () { return window_1.window; } }));
var windowCount_1 = __webpack_require__(9047);
Object.defineProperty(exports, "windowCount", ({ enumerable: true, get: function () { return windowCount_1.windowCount; } }));
var windowTime_1 = __webpack_require__(9815);
Object.defineProperty(exports, "windowTime", ({ enumerable: true, get: function () { return windowTime_1.windowTime; } }));
var windowToggle_1 = __webpack_require__(1650);
Object.defineProperty(exports, "windowToggle", ({ enumerable: true, get: function () { return windowToggle_1.windowToggle; } }));
var windowWhen_1 = __webpack_require__(3582);
Object.defineProperty(exports, "windowWhen", ({ enumerable: true, get: function () { return windowWhen_1.windowWhen; } }));
var withLatestFrom_1 = __webpack_require__(2525);
Object.defineProperty(exports, "withLatestFrom", ({ enumerable: true, get: function () { return withLatestFrom_1.withLatestFrom; } }));
var zipAll_1 = __webpack_require__(4816);
Object.defineProperty(exports, "zipAll", ({ enumerable: true, get: function () { return zipAll_1.zipAll; } }));
var zipWith_1 = __webpack_require__(4263);
Object.defineProperty(exports, "zipWith", ({ enumerable: true, get: function () { return zipWith_1.zipWith; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1533:
/***/ ((module) => {



module.exports = (flag, argv = process.argv) => {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};


/***/ }),

/***/ 1542:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var Buffer = (__webpack_require__(181).Buffer);
// Note: not polyfilled with safer-buffer on a purpose, as overrides Buffer

// == Extend Node primitives to use iconv-lite =================================

module.exports = function (iconv) {
    var original = undefined; // Place to keep original methods.

    // Node authors rewrote Buffer internals to make it compatible with
    // Uint8Array and we cannot patch key functions since then.
    // Note: this does use older Buffer API on a purpose
    iconv.supportsNodeEncodingsExtension = !(Buffer.from || new Buffer(0) instanceof Uint8Array);

    iconv.extendNodeEncodings = function extendNodeEncodings() {
        if (original) return;
        original = {};

        if (!iconv.supportsNodeEncodingsExtension) {
            console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
            console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
            return;
        }

        var nodeNativeEncodings = {
            'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, 
            'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,
        };

        Buffer.isNativeEncoding = function(enc) {
            return enc && nodeNativeEncodings[enc.toLowerCase()];
        }

        // -- SlowBuffer -----------------------------------------------------------
        var SlowBuffer = (__webpack_require__(181).SlowBuffer);

        original.SlowBufferToString = SlowBuffer.prototype.toString;
        SlowBuffer.prototype.toString = function(encoding, start, end) {
            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding))
                return original.SlowBufferToString.call(this, encoding, start, end);

            // Otherwise, use our decoding method.
            if (typeof start == 'undefined') start = 0;
            if (typeof end == 'undefined') end = this.length;
            return iconv.decode(this.slice(start, end), encoding);
        }

        original.SlowBufferWrite = SlowBuffer.prototype.write;
        SlowBuffer.prototype.write = function(string, offset, length, encoding) {
            // Support both (string, offset, length, encoding)
            // and the legacy (string, encoding, offset, length)
            if (isFinite(offset)) {
                if (!isFinite(length)) {
                    encoding = length;
                    length = undefined;
                }
            } else {  // legacy
                var swap = encoding;
                encoding = offset;
                offset = length;
                length = swap;
            }

            offset = +offset || 0;
            var remaining = this.length - offset;
            if (!length) {
                length = remaining;
            } else {
                length = +length;
                if (length > remaining) {
                    length = remaining;
                }
            }
            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding))
                return original.SlowBufferWrite.call(this, string, offset, length, encoding);

            if (string.length > 0 && (length < 0 || offset < 0))
                throw new RangeError('attempt to write beyond buffer bounds');

            // Otherwise, use our encoding method.
            var buf = iconv.encode(string, encoding);
            if (buf.length < length) length = buf.length;
            buf.copy(this, offset, 0, length);
            return length;
        }

        // -- Buffer ---------------------------------------------------------------

        original.BufferIsEncoding = Buffer.isEncoding;
        Buffer.isEncoding = function(encoding) {
            return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
        }

        original.BufferByteLength = Buffer.byteLength;
        Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {
            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding))
                return original.BufferByteLength.call(this, str, encoding);

            // Slow, I know, but we don't have a better way yet.
            return iconv.encode(str, encoding).length;
        }

        original.BufferToString = Buffer.prototype.toString;
        Buffer.prototype.toString = function(encoding, start, end) {
            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding))
                return original.BufferToString.call(this, encoding, start, end);

            // Otherwise, use our decoding method.
            if (typeof start == 'undefined') start = 0;
            if (typeof end == 'undefined') end = this.length;
            return iconv.decode(this.slice(start, end), encoding);
        }

        original.BufferWrite = Buffer.prototype.write;
        Buffer.prototype.write = function(string, offset, length, encoding) {
            var _offset = offset, _length = length, _encoding = encoding;
            // Support both (string, offset, length, encoding)
            // and the legacy (string, encoding, offset, length)
            if (isFinite(offset)) {
                if (!isFinite(length)) {
                    encoding = length;
                    length = undefined;
                }
            } else {  // legacy
                var swap = encoding;
                encoding = offset;
                offset = length;
                length = swap;
            }

            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding))
                return original.BufferWrite.call(this, string, _offset, _length, _encoding);

            offset = +offset || 0;
            var remaining = this.length - offset;
            if (!length) {
                length = remaining;
            } else {
                length = +length;
                if (length > remaining) {
                    length = remaining;
                }
            }

            if (string.length > 0 && (length < 0 || offset < 0))
                throw new RangeError('attempt to write beyond buffer bounds');

            // Otherwise, use our encoding method.
            var buf = iconv.encode(string, encoding);
            if (buf.length < length) length = buf.length;
            buf.copy(this, offset, 0, length);
            return length;

            // TODO: Set _charsWritten.
        }


        // -- Readable -------------------------------------------------------------
        if (iconv.supportsStreams) {
            var Readable = (__webpack_require__(2203).Readable);

            original.ReadableSetEncoding = Readable.prototype.setEncoding;
            Readable.prototype.setEncoding = function setEncoding(enc, options) {
                // Use our own decoder, it has the same interface.
                // We cannot use original function as it doesn't handle BOM-s.
                this._readableState.decoder = iconv.getDecoder(enc, options);
                this._readableState.encoding = enc;
            }

            Readable.prototype.collect = iconv._collect;
        }
    }

    // Remove iconv-lite Node primitive extensions.
    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
        if (!iconv.supportsNodeEncodingsExtension)
            return;
        if (!original)
            throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.")

        delete Buffer.isNativeEncoding;

        var SlowBuffer = (__webpack_require__(181).SlowBuffer);

        SlowBuffer.prototype.toString = original.SlowBufferToString;
        SlowBuffer.prototype.write = original.SlowBufferWrite;

        Buffer.isEncoding = original.BufferIsEncoding;
        Buffer.byteLength = original.BufferByteLength;
        Buffer.prototype.toString = original.BufferToString;
        Buffer.prototype.write = original.BufferWrite;

        if (iconv.supportsStreams) {
            var Readable = (__webpack_require__(2203).Readable);

            Readable.prototype.setEncoding = original.ReadableSetEncoding;
            delete Readable.prototype.collect;
        }

        original = undefined;
    }
}


/***/ }),

/***/ 1549:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dateTimestampProvider = void 0;
exports.dateTimestampProvider = {
    now: function () {
        return (exports.dateTimestampProvider.delegate || Date).now();
    },
    delegate: undefined,
};
//# sourceMappingURL=dateTimestampProvider.js.map

/***/ }),

/***/ 1560:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const fs = __webpack_require__(6903)
const path = __webpack_require__(6928)
const u = (__webpack_require__(8556).fromPromise)

function getStats (src, dest, opts) {
  const statFunc = opts.dereference
    ? (file) => fs.stat(file, { bigint: true })
    : (file) => fs.lstat(file, { bigint: true })
  return Promise.all([
    statFunc(src),
    statFunc(dest).catch(err => {
      if (err.code === 'ENOENT') return null
      throw err
    })
  ]).then(([srcStat, destStat]) => ({ srcStat, destStat }))
}

function getStatsSync (src, dest, opts) {
  let destStat
  const statFunc = opts.dereference
    ? (file) => fs.statSync(file, { bigint: true })
    : (file) => fs.lstatSync(file, { bigint: true })
  const srcStat = statFunc(src)
  try {
    destStat = statFunc(dest)
  } catch (err) {
    if (err.code === 'ENOENT') return { srcStat, destStat: null }
    throw err
  }
  return { srcStat, destStat }
}

async function checkPaths (src, dest, funcName, opts) {
  const { srcStat, destStat } = await getStats(src, dest, opts)
  if (destStat) {
    if (areIdentical(srcStat, destStat)) {
      const srcBaseName = path.basename(src)
      const destBaseName = path.basename(dest)
      if (funcName === 'move' &&
        srcBaseName !== destBaseName &&
        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
        return { srcStat, destStat, isChangingCase: true }
      }
      throw new Error('Source and destination must not be the same.')
    }
    if (srcStat.isDirectory() && !destStat.isDirectory()) {
      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)
    }
    if (!srcStat.isDirectory() && destStat.isDirectory()) {
      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)
    }
  }

  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
    throw new Error(errMsg(src, dest, funcName))
  }

  return { srcStat, destStat }
}

function checkPathsSync (src, dest, funcName, opts) {
  const { srcStat, destStat } = getStatsSync(src, dest, opts)

  if (destStat) {
    if (areIdentical(srcStat, destStat)) {
      const srcBaseName = path.basename(src)
      const destBaseName = path.basename(dest)
      if (funcName === 'move' &&
        srcBaseName !== destBaseName &&
        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
        return { srcStat, destStat, isChangingCase: true }
      }
      throw new Error('Source and destination must not be the same.')
    }
    if (srcStat.isDirectory() && !destStat.isDirectory()) {
      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)
    }
    if (!srcStat.isDirectory() && destStat.isDirectory()) {
      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)
    }
  }

  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
    throw new Error(errMsg(src, dest, funcName))
  }
  return { srcStat, destStat }
}

// recursively check if dest parent is a subdirectory of src.
// It works for all file types including symlinks since it
// checks the src and dest inodes. It starts from the deepest
// parent and stops once it reaches the src parent or the root path.
async function checkParentPaths (src, srcStat, dest, funcName) {
  const srcParent = path.resolve(path.dirname(src))
  const destParent = path.resolve(path.dirname(dest))
  if (destParent === srcParent || destParent === path.parse(destParent).root) return

  let destStat
  try {
    destStat = await fs.stat(destParent, { bigint: true })
  } catch (err) {
    if (err.code === 'ENOENT') return
    throw err
  }

  if (areIdentical(srcStat, destStat)) {
    throw new Error(errMsg(src, dest, funcName))
  }

  return checkParentPaths(src, srcStat, destParent, funcName)
}

function checkParentPathsSync (src, srcStat, dest, funcName) {
  const srcParent = path.resolve(path.dirname(src))
  const destParent = path.resolve(path.dirname(dest))
  if (destParent === srcParent || destParent === path.parse(destParent).root) return
  let destStat
  try {
    destStat = fs.statSync(destParent, { bigint: true })
  } catch (err) {
    if (err.code === 'ENOENT') return
    throw err
  }
  if (areIdentical(srcStat, destStat)) {
    throw new Error(errMsg(src, dest, funcName))
  }
  return checkParentPathsSync(src, srcStat, destParent, funcName)
}

function areIdentical (srcStat, destStat) {
  // stat.dev can be 0n on windows when node version >= 22.x.x
  return destStat.ino !== undefined && destStat.dev !== undefined && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev
}

// return true if dest is a subdir of src, otherwise false.
// It only checks the path strings.
function isSrcSubdir (src, dest) {
  const srcArr = path.resolve(src).split(path.sep).filter(i => i)
  const destArr = path.resolve(dest).split(path.sep).filter(i => i)
  return srcArr.every((cur, i) => destArr[i] === cur)
}

function errMsg (src, dest, funcName) {
  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`
}

module.exports = {
  // checkPaths
  checkPaths: u(checkPaths),
  checkPathsSync,
  // checkParent
  checkParentPaths: u(checkParentPaths),
  checkParentPathsSync,
  // Misc
  isSrcSubdir,
  areIdentical
}


/***/ }),

/***/ 1565:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"uChars":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],"gbChars":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}');

/***/ }),

/***/ 1615:
/***/ (function(__unused_webpack_module, exports) {


/***
 * Node External Editor
 *
 * Kevin Gravier <kevin@mrkmg.com>
 * MIT 2018
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var RemoveFileError = /** @class */ (function (_super) {
    __extends(RemoveFileError, _super);
    function RemoveFileError(originalError) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, "Failed to cleanup temporary file") || this;
        _this.originalError = originalError;
        var proto = _newTarget.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(_this, proto);
        }
        else {
            _this.__proto__ = _newTarget.prototype;
        }
        return _this;
    }
    return RemoveFileError;
}(Error));
exports.RemoveFileError = RemoveFileError;


/***/ }),

/***/ 1622:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var Buffer = (__webpack_require__(7475).Buffer);

// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

// == UTF16-BE codec. ==========================================================

exports.utf16be = Utf16BECodec;
function Utf16BECodec() {
}

Utf16BECodec.prototype.encoder = Utf16BEEncoder;
Utf16BECodec.prototype.decoder = Utf16BEDecoder;
Utf16BECodec.prototype.bomAware = true;


// -- Encoding

function Utf16BEEncoder() {
}

Utf16BEEncoder.prototype.write = function(str) {
    var buf = Buffer.from(str, 'ucs2');
    for (var i = 0; i < buf.length; i += 2) {
        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
    }
    return buf;
}

Utf16BEEncoder.prototype.end = function() {
}


// -- Decoding

function Utf16BEDecoder() {
    this.overflowByte = -1;
}

Utf16BEDecoder.prototype.write = function(buf) {
    if (buf.length == 0)
        return '';

    var buf2 = Buffer.alloc(buf.length + 1),
        i = 0, j = 0;

    if (this.overflowByte !== -1) {
        buf2[0] = buf[0];
        buf2[1] = this.overflowByte;
        i = 1; j = 2;
    }

    for (; i < buf.length-1; i += 2, j+= 2) {
        buf2[j] = buf[i+1];
        buf2[j+1] = buf[i];
    }

    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

    return buf2.slice(0, j).toString('ucs2');
}

Utf16BEDecoder.prototype.end = function() {
}


// == UTF-16 codec =============================================================
// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
// Defaults to UTF-16LE, as it's prevalent and default in Node.
// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

exports.utf16 = Utf16Codec;
function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv;
}

Utf16Codec.prototype.encoder = Utf16Encoder;
Utf16Codec.prototype.decoder = Utf16Decoder;


// -- Encoding (pass-through)

function Utf16Encoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
        options.addBOM = true;
    this.encoder = codec.iconv.getEncoder('utf-16le', options);
}

Utf16Encoder.prototype.write = function(str) {
    return this.encoder.write(str);
}

Utf16Encoder.prototype.end = function() {
    return this.encoder.end();
}


// -- Decoding

function Utf16Decoder(options, codec) {
    this.decoder = null;
    this.initialBytes = [];
    this.initialBytesLen = 0;

    this.options = options || {};
    this.iconv = codec.iconv;
}

Utf16Decoder.prototype.write = function(buf) {
    if (!this.decoder) {
        // Codec is not chosen yet. Accumulate initial bytes.
        this.initialBytes.push(buf);
        this.initialBytesLen += buf.length;
        
        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)
            return '';

        // We have enough bytes -> detect endianness.
        var buf = Buffer.concat(this.initialBytes),
            encoding = detectEncoding(buf, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);
        this.initialBytes.length = this.initialBytesLen = 0;
    }

    return this.decoder.write(buf);
}

Utf16Decoder.prototype.end = function() {
    if (!this.decoder) {
        var buf = Buffer.concat(this.initialBytes),
            encoding = detectEncoding(buf, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var res = this.decoder.write(buf),
            trail = this.decoder.end();

        return trail ? (res + trail) : res;
    }
    return this.decoder.end();
}

function detectEncoding(buf, defaultEncoding) {
    var enc = defaultEncoding || 'utf-16le';

    if (buf.length >= 2) {
        // Check BOM.
        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM
            enc = 'utf-16be';
        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM
            enc = 'utf-16le';
        else {
            // No BOM found. Try to deduce encoding from initial content.
            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
            // So, we count ASCII as if it was LE or BE, and decide from that.
            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions
                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.

            for (var i = 0; i < _len; i += 2) {
                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;
                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;
            }

            if (asciiCharsBE > asciiCharsLE)
                enc = 'utf-16be';
            else if (asciiCharsBE < asciiCharsLE)
                enc = 'utf-16le';
        }
    }

    return enc;
}




/***/ }),

/***/ 1650:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.windowToggle = void 0;
var Subject_1 = __webpack_require__(6118);
var Subscription_1 = __webpack_require__(1981);
var lift_1 = __webpack_require__(4698);
var innerFrom_1 = __webpack_require__(2018);
var OperatorSubscriber_1 = __webpack_require__(1908);
var noop_1 = __webpack_require__(8563);
var arrRemove_1 = __webpack_require__(6864);
function windowToggle(openings, closingSelector) {
    return lift_1.operate(function (source, subscriber) {
        var windows = [];
        var handleError = function (err) {
            while (0 < windows.length) {
                windows.shift().error(err);
            }
            subscriber.error(err);
        };
        innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (openValue) {
            var window = new Subject_1.Subject();
            windows.push(window);
            var closingSubscription = new Subscription_1.Subscription();
            var closeWindow = function () {
                arrRemove_1.arrRemove(windows, window);
                window.complete();
                closingSubscription.unsubscribe();
            };
            var closingNotifier;
            try {
                closingNotifier = innerFrom_1.innerFrom(closingSelector(openValue));
            }
            catch (err) {
                handleError(err);
                return;
            }
            subscriber.next(window.asObservable());
            closingSubscription.add(closingNotifier.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, closeWindow, noop_1.noop, handleError)));
        }, noop_1.noop));
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var e_1, _a;
            var windowsCopy = windows.slice();
            try {
                for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
                    var window_1 = windowsCopy_1_1.value;
                    window_1.next(value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }, function () {
            while (0 < windows.length) {
                windows.shift().complete();
            }
            subscriber.complete();
        }, handleError, function () {
            while (0 < windows.length) {
                windows.shift().unsubscribe();
            }
        }));
    });
}
exports.windowToggle = windowToggle;
//# sourceMappingURL=windowToggle.js.map

/***/ }),

/***/ 1678:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var QRMode = __webpack_require__(9802);
var QRPolynomial = __webpack_require__(5739);
var QRMath = __webpack_require__(6543);
var QRMaskPattern = __webpack_require__(9207);

var QRUtil = {

    PATTERN_POSITION_TABLE : [
        [],
        [6, 18],
        [6, 22],
        [6, 26],
        [6, 30],
        [6, 34],
        [6, 22, 38],
        [6, 24, 42],
        [6, 26, 46],
        [6, 28, 50],
        [6, 30, 54],        
        [6, 32, 58],
        [6, 34, 62],
        [6, 26, 46, 66],
        [6, 26, 48, 70],
        [6, 26, 50, 74],
        [6, 30, 54, 78],
        [6, 30, 56, 82],
        [6, 30, 58, 86],
        [6, 34, 62, 90],
        [6, 28, 50, 72, 94],
        [6, 26, 50, 74, 98],
        [6, 30, 54, 78, 102],
        [6, 28, 54, 80, 106],
        [6, 32, 58, 84, 110],
        [6, 30, 58, 86, 114],
        [6, 34, 62, 90, 118],
        [6, 26, 50, 74, 98, 122],
        [6, 30, 54, 78, 102, 126],
        [6, 26, 52, 78, 104, 130],
        [6, 30, 56, 82, 108, 134],
        [6, 34, 60, 86, 112, 138],
        [6, 30, 58, 86, 114, 142],
        [6, 34, 62, 90, 118, 146],
        [6, 30, 54, 78, 102, 126, 150],
        [6, 24, 50, 76, 102, 128, 154],
        [6, 28, 54, 80, 106, 132, 158],
        [6, 32, 58, 84, 110, 136, 162],
        [6, 26, 54, 82, 110, 138, 166],
        [6, 30, 58, 86, 114, 142, 170]
    ],

    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),
    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),
    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)    | (1 << 4) | (1 << 1),

    getBCHTypeInfo : function(data) {
        var d = data << 10;
        while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
            d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) );    
        }
        return ( (data << 10) | d) ^ QRUtil.G15_MASK;
    },

    getBCHTypeNumber : function(data) {
        var d = data << 12;
        while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
            d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) );    
        }
        return (data << 12) | d;
    },

    getBCHDigit : function(data) {

        var digit = 0;

        while (data !== 0) {
            digit++;
            data >>>= 1;
        }

        return digit;
    },

    getPatternPosition : function(typeNumber) {
        return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
    },

    getMask : function(maskPattern, i, j) {
        
        switch (maskPattern) {
            
        case QRMaskPattern.PATTERN000 : return (i + j) % 2 === 0;
        case QRMaskPattern.PATTERN001 : return i % 2 === 0;
        case QRMaskPattern.PATTERN010 : return j % 3 === 0;
        case QRMaskPattern.PATTERN011 : return (i + j) % 3 === 0;
        case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 === 0;
        case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 === 0;
        case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 === 0;
        case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 === 0;

        default :
            throw new Error("bad maskPattern:" + maskPattern);
        }
    },

    getErrorCorrectPolynomial : function(errorCorrectLength) {

        var a = new QRPolynomial([1], 0);

        for (var i = 0; i < errorCorrectLength; i++) {
            a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0) );
        }

        return a;
    },

    getLengthInBits : function(mode, type) {

        if (1 <= type && type < 10) {

            // 1 - 9

            switch(mode) {
            case QRMode.MODE_NUMBER     : return 10;
            case QRMode.MODE_ALPHA_NUM  : return 9;
            case QRMode.MODE_8BIT_BYTE  : return 8;
            case QRMode.MODE_KANJI      : return 8;
            default :
                throw new Error("mode:" + mode);
            }

        } else if (type < 27) {

            // 10 - 26

            switch(mode) {
            case QRMode.MODE_NUMBER     : return 12;
            case QRMode.MODE_ALPHA_NUM  : return 11;
            case QRMode.MODE_8BIT_BYTE  : return 16;
            case QRMode.MODE_KANJI      : return 10;
            default :
                throw new Error("mode:" + mode);
            }

        } else if (type < 41) {

            // 27 - 40

            switch(mode) {
            case QRMode.MODE_NUMBER     : return 14;
            case QRMode.MODE_ALPHA_NUM  : return 13;
            case QRMode.MODE_8BIT_BYTE  : return 16;
            case QRMode.MODE_KANJI      : return 12;
            default :
                throw new Error("mode:" + mode);
            }

        } else {
            throw new Error("type:" + type);
        }
    },

    getLostPoint : function(qrCode) {
        
        var moduleCount = qrCode.getModuleCount();
        var lostPoint = 0;
        var row = 0; 
        var col = 0;

        
        // LEVEL1
        
        for (row = 0; row < moduleCount; row++) {

            for (col = 0; col < moduleCount; col++) {

                var sameCount = 0;
                var dark = qrCode.isDark(row, col);

                for (var r = -1; r <= 1; r++) {

                    if (row + r < 0 || moduleCount <= row + r) {
                        continue;
                    }

                    for (var c = -1; c <= 1; c++) {

                        if (col + c < 0 || moduleCount <= col + c) {
                            continue;
                        }

                        if (r === 0 && c === 0) {
                            continue;
                        }

                        if (dark === qrCode.isDark(row + r, col + c) ) {
                            sameCount++;
                        }
                    }
                }

                if (sameCount > 5) {
                    lostPoint += (3 + sameCount - 5);
                }
            }
        }

        // LEVEL2

        for (row = 0; row < moduleCount - 1; row++) {
            for (col = 0; col < moduleCount - 1; col++) {
                var count = 0;
                if (qrCode.isDark(row,     col    ) ) count++;
                if (qrCode.isDark(row + 1, col    ) ) count++;
                if (qrCode.isDark(row,     col + 1) ) count++;
                if (qrCode.isDark(row + 1, col + 1) ) count++;
                if (count === 0 || count === 4) {
                    lostPoint += 3;
                }
            }
        }

        // LEVEL3

        for (row = 0; row < moduleCount; row++) {
            for (col = 0; col < moduleCount - 6; col++) {
                if (qrCode.isDark(row, col) && 
                        !qrCode.isDark(row, col + 1) && 
                         qrCode.isDark(row, col + 2) && 
                         qrCode.isDark(row, col + 3) && 
                         qrCode.isDark(row, col + 4) && 
                        !qrCode.isDark(row, col + 5) && 
                         qrCode.isDark(row, col + 6) ) {
                    lostPoint += 40;
                }
            }
        }

        for (col = 0; col < moduleCount; col++) {
            for (row = 0; row < moduleCount - 6; row++) {
                if (qrCode.isDark(row, col) &&
                        !qrCode.isDark(row + 1, col) &&
                         qrCode.isDark(row + 2, col) &&
                         qrCode.isDark(row + 3, col) &&
                         qrCode.isDark(row + 4, col) &&
                        !qrCode.isDark(row + 5, col) &&
                         qrCode.isDark(row + 6, col) ) {
                    lostPoint += 40;
                }
            }
        }

        // LEVEL4
        
        var darkCount = 0;

        for (col = 0; col < moduleCount; col++) {
            for (row = 0; row < moduleCount; row++) {
                if (qrCode.isDark(row, col) ) {
                    darkCount++;
                }
            }
        }
        
        var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
        lostPoint += ratio * 10;

        return lostPoint;       
    }

};

module.exports = QRUtil;


/***/ }),

/***/ 1680:
/***/ ((module) => {

// please no
module['exports'] = function zalgo(text, options) {
  text = text || '   he is here   ';
  var soul = {
    'up': [
      '̍', '̎', '̄', '̅',
      '̿', '̑', '̆', '̐',
      '͒', '͗', '͑', '̇',
      '̈', '̊', '͂', '̓',
      '̈', '͊', '͋', '͌',
      '̃', '̂', '̌', '͐',
      '̀', '́', '̋', '̏',
      '̒', '̓', '̔', '̽',
      '̉', 'ͣ', 'ͤ', 'ͥ',
      'ͦ', 'ͧ', 'ͨ', 'ͩ',
      'ͪ', 'ͫ', 'ͬ', 'ͭ',
      'ͮ', 'ͯ', '̾', '͛',
      '͆', '̚',
    ],
    'down': [
      '̖', '̗', '̘', '̙',
      '̜', '̝', '̞', '̟',
      '̠', '̤', '̥', '̦',
      '̩', '̪', '̫', '̬',
      '̭', '̮', '̯', '̰',
      '̱', '̲', '̳', '̹',
      '̺', '̻', '̼', 'ͅ',
      '͇', '͈', '͉', '͍',
      '͎', '͓', '͔', '͕',
      '͖', '͙', '͚', '̣',
    ],
    'mid': [
      '̕', '̛', '̀', '́',
      '͘', '̡', '̢', '̧',
      '̨', '̴', '̵', '̶',
      '͜', '͝', '͞',
      '͟', '͠', '͢', '̸',
      '̷', '͡', ' ҉',
    ],
  };
  var all = [].concat(soul.up, soul.down, soul.mid);

  function randomNumber(range) {
    var r = Math.floor(Math.random() * range);
    return r;
  }

  function isChar(character) {
    var bool = false;
    all.filter(function(i) {
      bool = (i === character);
    });
    return bool;
  }


  function heComes(text, options) {
    var result = '';
    var counts;
    var l;
    options = options || {};
    options['up'] =
      typeof options['up'] !== 'undefined' ? options['up'] : true;
    options['mid'] =
      typeof options['mid'] !== 'undefined' ? options['mid'] : true;
    options['down'] =
      typeof options['down'] !== 'undefined' ? options['down'] : true;
    options['size'] =
      typeof options['size'] !== 'undefined' ? options['size'] : 'maxi';
    text = text.split('');
    for (l in text) {
      if (isChar(l)) {
        continue;
      }
      result = result + text[l];
      counts = {'up': 0, 'down': 0, 'mid': 0};
      switch (options.size) {
        case 'mini':
          counts.up = randomNumber(8);
          counts.mid = randomNumber(2);
          counts.down = randomNumber(8);
          break;
        case 'maxi':
          counts.up = randomNumber(16) + 3;
          counts.mid = randomNumber(4) + 1;
          counts.down = randomNumber(64) + 3;
          break;
        default:
          counts.up = randomNumber(8) + 1;
          counts.mid = randomNumber(6) / 2;
          counts.down = randomNumber(8) + 1;
          break;
      }

      var arr = ['up', 'mid', 'down'];
      for (var d in arr) {
        var index = arr[d];
        for (var i = 0; i <= counts[index]; i++) {
          if (options[index]) {
            result = result + soul[index][randomNumber(soul[index].length)];
          }
        }
      }
    }
    return result;
  }
  // don't summon him
  return heComes(text, options);
};



/***/ }),

/***/ 1686:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const fs = __webpack_require__(6903)
const u = (__webpack_require__(8556).fromPromise)

async function symlinkType (srcpath, type) {
  if (type) return type

  let stats
  try {
    stats = await fs.lstat(srcpath)
  } catch {
    return 'file'
  }

  return (stats && stats.isDirectory()) ? 'dir' : 'file'
}

function symlinkTypeSync (srcpath, type) {
  if (type) return type

  let stats
  try {
    stats = fs.lstatSync(srcpath)
  } catch {
    return 'file'
  }
  return (stats && stats.isDirectory()) ? 'dir' : 'file'
}

module.exports = {
  symlinkType: u(symlinkType),
  symlinkTypeSync
}


/***/ }),

/***/ 1708:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:process");

/***/ }),

/***/ 1714:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const Range = __webpack_require__(9165)

const maxSatisfying = (versions, range, options) => {
  let max = null
  let maxSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}
module.exports = maxSatisfying


/***/ }),

/***/ 1716:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",127,"€"],["8140","丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",5,"乲乴",9,"乿",6,"亇亊"],["8180","亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",6,"伋伌伒",4,"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",4,"佄佅佇",5,"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],["8240","侤侫侭侰",4,"侶",8,"俀俁係俆俇俈俉俋俌俍俒",4,"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",11],["8280","個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",10,"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",4,"偖偗偘偙偛偝",7,"偦",5,"偭",8,"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",20,"傤傦傪傫傭",4,"傳",6,"傼"],["8340","傽",17,"僐",5,"僗僘僙僛",10,"僨僩僪僫僯僰僱僲僴僶",4,"僼",9,"儈"],["8380","儉儊儌",5,"儓",13,"儢",28,"兂兇兊兌兎兏児兒兓兗兘兙兛兝",4,"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",4,"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",5],["8440","凘凙凚凜凞凟凢凣凥",5,"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",5,"剋剎剏剒剓剕剗剘"],["8480","剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",9,"剾劀劃",4,"劉",6,"劑劒劔",6,"劜劤劥劦劧劮劯劰労",9,"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",5,"勠勡勢勣勥",10,"勱",7,"勻勼勽匁匂匃匄匇匉匊匋匌匎"],["8540","匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",9,"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],["8580","厐",4,"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",6,"厷厸厹厺厼厽厾叀參",4,"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",4,"呣呥呧呩",7,"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],["8640","咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",4,"哫哬哯哰哱哴",5,"哻哾唀唂唃唄唅唈唊",4,"唒唓唕",5,"唜唝唞唟唡唥唦"],["8680","唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",4,"啑啒啓啔啗",4,"啝啞啟啠啢啣啨啩啫啯",5,"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",6,"喨",8,"喲喴営喸喺喼喿",4,"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",4,"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",4,"嗿嘂嘃嘄嘅"],["8740","嘆嘇嘊嘋嘍嘐",7,"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",11,"噏",4,"噕噖噚噛噝",4],["8780","噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",7,"嚇",6,"嚐嚑嚒嚔",14,"嚤",10,"嚰",6,"嚸嚹嚺嚻嚽",12,"囋",8,"囕囖囘囙囜団囥",5,"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",6],["8840","園",9,"圝圞圠圡圢圤圥圦圧圫圱圲圴",4,"圼圽圿坁坃坄坅坆坈坉坋坒",4,"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],["8880","垁垇垈垉垊垍",4,"垔",6,"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",8,"埄",6,"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",7,"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",4,"堫",4,"報堲堳場堶",7],["8940","堾",5,"塅",6,"塎塏塐塒塓塕塖塗塙",4,"塟",5,"塦",4,"塭",16,"塿墂墄墆墇墈墊墋墌"],["8980","墍",4,"墔",4,"墛墜墝墠",7,"墪",17,"墽墾墿壀壂壃壄壆",10,"壒壓壔壖",13,"壥",5,"壭壯壱売壴壵壷壸壺",7,"夃夅夆夈",4,"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],["8a40","夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",4,"奡奣奤奦",12,"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],["8a80","妧妬妭妰妱妳",5,"妺妼妽妿",6,"姇姈姉姌姍姎姏姕姖姙姛姞",4,"姤姦姧姩姪姫姭",11,"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",6,"娳娵娷",4,"娽娾娿婁",4,"婇婈婋",9,"婖婗婘婙婛",5],["8b40","婡婣婤婥婦婨婩婫",8,"婸婹婻婼婽婾媀",17,"媓",6,"媜",13,"媫媬"],["8b80","媭",4,"媴媶媷媹",4,"媿嫀嫃",5,"嫊嫋嫍",4,"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",4,"嫲",22,"嬊",11,"嬘",25,"嬳嬵嬶嬸",7,"孁",6],["8c40","孈",7,"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],["8c80","寑寔",8,"寠寢寣實寧審",4,"寯寱",6,"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",6,"屰屲",6,"屻屼屽屾岀岃",4,"岉岊岋岎岏岒岓岕岝",4,"岤",4],["8d40","岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",5,"峌",5,"峓",5,"峚",6,"峢峣峧峩峫峬峮峯峱",9,"峼",4],["8d80","崁崄崅崈",5,"崏",4,"崕崗崘崙崚崜崝崟",4,"崥崨崪崫崬崯",4,"崵",7,"崿",7,"嵈嵉嵍",10,"嵙嵚嵜嵞",10,"嵪嵭嵮嵰嵱嵲嵳嵵",12,"嶃",21,"嶚嶛嶜嶞嶟嶠"],["8e40","嶡",21,"嶸",12,"巆",6,"巎",12,"巜巟巠巣巤巪巬巭"],["8e80","巰巵巶巸",4,"巿帀帄帇帉帊帋帍帎帒帓帗帞",7,"帨",4,"帯帰帲",4,"帹帺帾帿幀幁幃幆",5,"幍",6,"幖",4,"幜幝幟幠幣",14,"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",4,"庮",4,"庴庺庻庼庽庿",6],["8f40","廆廇廈廋",5,"廔廕廗廘廙廚廜",11,"廩廫",8,"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],["8f80","弨弫弬弮弰弲",6,"弻弽弾弿彁",14,"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",5,"復徫徬徯",5,"徶徸徹徺徻徾",4,"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],["9040","怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",4,"怶",4,"怽怾恀恄",6,"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],["9080","悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",7,"惇惈惉惌",4,"惒惓惔惖惗惙惛惞惡",4,"惪惱惲惵惷惸惻",4,"愂愃愄愅愇愊愋愌愐",4,"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",18,"慀",6],["9140","慇慉態慍慏慐慒慓慔慖",6,"慞慟慠慡慣慤慥慦慩",6,"慱慲慳慴慶慸",18,"憌憍憏",4,"憕"],["9180","憖",6,"憞",8,"憪憫憭",9,"憸",5,"憿懀懁懃",4,"應懌",4,"懓懕",16,"懧",13,"懶",8,"戀",5,"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",4,"扂扄扅扆扊"],["9240","扏扐払扖扗扙扚扜",6,"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",5,"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],["9280","拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",5,"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",7,"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",6,"採掤掦掫掯掱掲掵掶掹掻掽掿揀"],["9340","揁揂揃揅揇揈揊揋揌揑揓揔揕揗",6,"揟揢揤",4,"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",4,"損搎搑搒搕",5,"搝搟搢搣搤"],["9380","搥搧搨搩搫搮",5,"搵",4,"搻搼搾摀摂摃摉摋",6,"摓摕摖摗摙",4,"摟",7,"摨摪摫摬摮",9,"摻",6,"撃撆撈",8,"撓撔撗撘撚撛撜撝撟",4,"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",6,"擏擑擓擔擕擖擙據"],["9440","擛擜擝擟擠擡擣擥擧",24,"攁",7,"攊",7,"攓",4,"攙",8],["9480","攢攣攤攦",4,"攬攭攰攱攲攳攷攺攼攽敀",4,"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",14,"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",7,"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",7,"旡旣旤旪旫"],["9540","旲旳旴旵旸旹旻",4,"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",4,"昽昿晀時晄",6,"晍晎晐晑晘"],["9580","晙晛晜晝晞晠晢晣晥晧晩",4,"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",4,"暞",8,"暩",4,"暯",4,"暵暶暷暸暺暻暼暽暿",25,"曚曞",7,"曧曨曪",5,"曱曵曶書曺曻曽朁朂會"],["9640","朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",5,"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",4,"杝杢杣杤杦杧杫杬杮東杴杶"],["9680","杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",7,"柂柅",9,"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",7,"柾栁栂栃栄栆栍栐栒栔栕栘",4,"栞栟栠栢",6,"栫",6,"栴栵栶栺栻栿桇桋桍桏桒桖",5],["9740","桜桝桞桟桪桬",7,"桵桸",8,"梂梄梇",7,"梐梑梒梔梕梖梘",9,"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],["9780","梹",6,"棁棃",5,"棊棌棎棏棐棑棓棔棖棗棙棛",4,"棡棢棤",9,"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",4,"椌椏椑椓",11,"椡椢椣椥",7,"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",16,"楕楖楘楙楛楜楟"],["9840","楡楢楤楥楧楨楩楪楬業楯楰楲",4,"楺楻楽楾楿榁榃榅榊榋榌榎",5,"榖榗榙榚榝",9,"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],["9880","榾榿槀槂",7,"構槍槏槑槒槓槕",5,"槜槝槞槡",11,"槮槯槰槱槳",9,"槾樀",9,"樋",11,"標",5,"樠樢",5,"権樫樬樭樮樰樲樳樴樶",6,"樿",4,"橅橆橈",7,"橑",6,"橚"],["9940","橜",4,"橢橣橤橦",10,"橲",6,"橺橻橽橾橿檁檂檃檅",8,"檏檒",4,"檘",7,"檡",5],["9980","檧檨檪檭",114,"欥欦欨",6],["9a40","欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",11,"歚",7,"歨歩歫",13,"歺歽歾歿殀殅殈"],["9a80","殌殎殏殐殑殔殕殗殘殙殜",4,"殢",7,"殫",7,"殶殸",6,"毀毃毄毆",4,"毌毎毐毑毘毚毜",4,"毢",7,"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",6,"氈",4,"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",4,"汑汒汓汖汘"],["9b40","汙汚汢汣汥汦汧汫",4,"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],["9b80","泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",5,"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",4,"涃涄涆涇涊涋涍涏涐涒涖",4,"涜涢涥涬涭涰涱涳涴涶涷涹",5,"淁淂淃淈淉淊"],["9c40","淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",7,"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],["9c80","渶渷渹渻",7,"湅",7,"湏湐湑湒湕湗湙湚湜湝湞湠",10,"湬湭湯",14,"満溁溂溄溇溈溊",4,"溑",6,"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",5],["9d40","滰滱滲滳滵滶滷滸滺",7,"漃漄漅漇漈漊",4,"漐漑漒漖",9,"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",6,"漿潀潁潂"],["9d80","潃潄潅潈潉潊潌潎",9,"潙潚潛潝潟潠潡潣潤潥潧",5,"潯潰潱潳潵潶潷潹潻潽",6,"澅澆澇澊澋澏",12,"澝澞澟澠澢",4,"澨",10,"澴澵澷澸澺",5,"濁濃",5,"濊",6,"濓",10,"濟濢濣濤濥"],["9e40","濦",7,"濰",32,"瀒",7,"瀜",6,"瀤",6],["9e80","瀫",9,"瀶瀷瀸瀺",17,"灍灎灐",13,"灟",11,"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",12,"炰炲炴炵炶為炾炿烄烅烆烇烉烋",12,"烚"],["9f40","烜烝烞烠烡烢烣烥烪烮烰",6,"烸烺烻烼烾",10,"焋",4,"焑焒焔焗焛",10,"焧",7,"焲焳焴"],["9f80","焵焷",13,"煆煇煈煉煋煍煏",12,"煝煟",4,"煥煩",4,"煯煰煱煴煵煶煷煹煻煼煾",5,"熅",4,"熋熌熍熎熐熑熒熓熕熖熗熚",4,"熡",6,"熩熪熫熭",5,"熴熶熷熸熺",8,"燄",9,"燏",4],["a040","燖",9,"燡燢燣燤燦燨",5,"燯",9,"燺",11,"爇",19],["a080","爛爜爞",9,"爩爫爭爮爯爲爳爴爺爼爾牀",6,"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",4,"犌犎犐犑犓",11,"犠",11,"犮犱犲犳犵犺",6,"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],["a1a1","　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",7,"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],["a2a1","ⅰ",9],["a2b1","⒈",19,"⑴",19,"①",9],["a2e5","㈠",9],["a2f1","Ⅰ",11],["a3a1","！＂＃￥％",88,"￣"],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a6e0","︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],["a6ee","︻︼︷︸︱"],["a6f4","︳︴"],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a840","ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",35,"▁",6],["a880","█",7,"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],["a8a1","āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],["a8bd","ńň"],["a8c0","ɡ"],["a8c5","ㄅ",36],["a940","〡",8,"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],["a959","℡㈱"],["a95c","‐"],["a960","ー゛゜ヽヾ〆ゝゞ﹉",9,"﹔﹕﹖﹗﹙",8],["a980","﹢",4,"﹨﹩﹪﹫"],["a996","〇"],["a9a4","─",75],["aa40","狜狝狟狢",5,"狪狫狵狶狹狽狾狿猀猂猄",5,"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",8],["aa80","獉獊獋獌獎獏獑獓獔獕獖獘",7,"獡",10,"獮獰獱"],["ab40","獲",11,"獿",4,"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",5,"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",4],["ab80","珋珌珎珒",6,"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",4],["ac40","珸",10,"琄琇琈琋琌琍琎琑",8,"琜",5,"琣琤琧琩琫琭琯琱琲琷",4,"琽琾琿瑀瑂",11],["ac80","瑎",6,"瑖瑘瑝瑠",12,"瑮瑯瑱",4,"瑸瑹瑺"],["ad40","瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",10,"璝璟",7,"璪",15,"璻",12],["ad80","瓈",9,"瓓",8,"瓝瓟瓡瓥瓧",6,"瓰瓱瓲"],["ae40","瓳瓵瓸",6,"甀甁甂甃甅",7,"甎甐甒甔甕甖甗甛甝甞甠",4,"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],["ae80","畝",7,"畧畨畩畫",6,"畳畵當畷畺",4,"疀疁疂疄疅疇"],["af40","疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",4,"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],["af80","瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],["b040","癅",6,"癎",5,"癕癗",4,"癝癟癠癡癢癤",6,"癬癭癮癰",7,"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],["b080","皜",7,"皥",8,"皯皰皳皵",9,"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],["b140","盄盇盉盋盌盓盕盙盚盜盝盞盠",4,"盦",7,"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",10,"眛眜眝眞眡眣眤眥眧眪眫"],["b180","眬眮眰",4,"眹眻眽眾眿睂睄睅睆睈",7,"睒",7,"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],["b240","睝睞睟睠睤睧睩睪睭",11,"睺睻睼瞁瞂瞃瞆",5,"瞏瞐瞓",11,"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",4],["b280","瞼瞾矀",12,"矎",8,"矘矙矚矝",4,"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],["b340","矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",5,"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],["b380","硛硜硞",11,"硯",7,"硸硹硺硻硽",6,"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],["b440","碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",7,"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",9],["b480","磤磥磦磧磩磪磫磭",4,"磳磵磶磸磹磻",5,"礂礃礄礆",6,"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],["b540","礍",5,"礔",9,"礟",4,"礥",14,"礵",4,"礽礿祂祃祄祅祇祊",8,"祔祕祘祙祡祣"],["b580","祤祦祩祪祫祬祮祰",6,"祹祻",4,"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],["b640","禓",6,"禛",11,"禨",10,"禴",4,"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",5,"秠秡秢秥秨秪"],["b680","秬秮秱",6,"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",4,"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],["b740","稝稟稡稢稤",14,"稴稵稶稸稺稾穀",5,"穇",9,"穒",4,"穘",16],["b780","穩",6,"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],["b840","窣窤窧窩窪窫窮",4,"窴",10,"竀",10,"竌",9,"竗竘竚竛竜竝竡竢竤竧",5,"竮竰竱竲竳"],["b880","竴",4,"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],["b940","笯笰笲笴笵笶笷笹笻笽笿",5,"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",10,"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",6,"箎箏"],["b980","箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",7,"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],["ba40","篅篈築篊篋篍篎篏篐篒篔",4,"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",4,"篸篹篺篻篽篿",7,"簈簉簊簍簎簐",5,"簗簘簙"],["ba80","簚",4,"簠",5,"簨簩簫",12,"簹",5,"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],["bb40","籃",9,"籎",36,"籵",5,"籾",9],["bb80","粈粊",6,"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",4,"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],["bc40","粿糀糂糃糄糆糉糋糎",6,"糘糚糛糝糞糡",6,"糩",5,"糰",7,"糹糺糼",13,"紋",5],["bc80","紑",14,"紡紣紤紥紦紨紩紪紬紭紮細",6,"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],["bd40","紷",54,"絯",7],["bd80","絸",32,"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],["be40","継",12,"綧",6,"綯",42],["be80","線",32,"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],["bf40","緻",62],["bf80","縺縼",4,"繂",4,"繈",21,"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],["c040","繞",35,"纃",23,"纜纝纞"],["c080","纮纴纻纼绖绤绬绹缊缐缞缷缹缻",6,"罃罆",9,"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],["c140","罖罙罛罜罝罞罠罣",4,"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",7,"羋羍羏",4,"羕",4,"羛羜羠羢羣羥羦羨",6,"羱"],["c180","羳",4,"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",4,"翖翗翙",5,"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],["c240","翤翧翨翪翫翬翭翯翲翴",6,"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",5,"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],["c280","聙聛",13,"聫",5,"聲",11,"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],["c340","聾肁肂肅肈肊肍",5,"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",4,"胏",6,"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],["c380","脌脕脗脙脛脜脝脟",12,"脭脮脰脳脴脵脷脹",4,"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],["c440","腀",5,"腇腉腍腎腏腒腖腗腘腛",4,"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",4,"膉膋膌膍膎膐膒",5,"膙膚膞",4,"膤膥"],["c480","膧膩膫",7,"膴",5,"膼膽膾膿臄臅臇臈臉臋臍",6,"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],["c540","臔",14,"臤臥臦臨臩臫臮",4,"臵",5,"臽臿舃與",4,"舎舏舑舓舕",5,"舝舠舤舥舦舧舩舮舲舺舼舽舿"],["c580","艀艁艂艃艅艆艈艊艌艍艎艐",7,"艙艛艜艝艞艠",7,"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],["c640","艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],["c680","苺苼",4,"茊茋茍茐茒茓茖茘茙茝",9,"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],["c740","茾茿荁荂荄荅荈荊",4,"荓荕",4,"荝荢荰",6,"荹荺荾",6,"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",6,"莬莭莮"],["c780","莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],["c840","菮華菳",4,"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",5,"萙萚萛萞",5,"萩",7,"萲",5,"萹萺萻萾",7,"葇葈葉"],["c880","葊",6,"葒",4,"葘葝葞葟葠葢葤",4,"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],["c940","葽",4,"蒃蒄蒅蒆蒊蒍蒏",7,"蒘蒚蒛蒝蒞蒟蒠蒢",12,"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],["c980","蓘",4,"蓞蓡蓢蓤蓧",4,"蓭蓮蓯蓱",10,"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],["ca40","蔃",8,"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",8,"蔭",9,"蔾",4,"蕄蕅蕆蕇蕋",10],["ca80","蕗蕘蕚蕛蕜蕝蕟",4,"蕥蕦蕧蕩",8,"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],["cb40","薂薃薆薈",6,"薐",10,"薝",6,"薥薦薧薩薫薬薭薱",5,"薸薺",6,"藂",6,"藊",4,"藑藒"],["cb80","藔藖",5,"藝",6,"藥藦藧藨藪",14,"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],["cc40","藹藺藼藽藾蘀",4,"蘆",10,"蘒蘓蘔蘕蘗",15,"蘨蘪",13,"蘹蘺蘻蘽蘾蘿虀"],["cc80","虁",11,"虒虓處",4,"虛虜虝號虠虡虣",7,"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],["cd40","虭虯虰虲",6,"蚃",6,"蚎",4,"蚔蚖",5,"蚞",4,"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",4,"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],["cd80","蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],["ce40","蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",6,"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",5,"蝡蝢蝦",7,"蝯蝱蝲蝳蝵"],["ce80","蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",4,"螔螕螖螘",6,"螠",4,"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],["cf40","螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",4,"蟇蟈蟉蟌",4,"蟔",6,"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",9],["cf80","蟺蟻蟼蟽蟿蠀蠁蠂蠄",5,"蠋",7,"蠔蠗蠘蠙蠚蠜",4,"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],["d040","蠤",13,"蠳",5,"蠺蠻蠽蠾蠿衁衂衃衆",5,"衎",5,"衕衖衘衚",6,"衦衧衪衭衯衱衳衴衵衶衸衹衺"],["d080","衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",4,"袝",4,"袣袥",5,"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],["d140","袬袮袯袰袲",4,"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",4,"裠裡裦裧裩",6,"裲裵裶裷裺裻製裿褀褁褃",5],["d180","褉褋",4,"褑褔",4,"褜",4,"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],["d240","褸",8,"襂襃襅",24,"襠",5,"襧",19,"襼"],["d280","襽襾覀覂覄覅覇",26,"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],["d340","覢",30,"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",6],["d380","觻",4,"訁",5,"計",21,"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],["d440","訞",31,"訿",8,"詉",21],["d480","詟",25,"詺",6,"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],["d540","誁",7,"誋",7,"誔",46],["d580","諃",32,"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],["d640","諤",34,"謈",27],["d680","謤謥謧",30,"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],["d740","譆",31,"譧",4,"譭",25],["d780","讇",24,"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],["d840","谸",8,"豂豃豄豅豈豊豋豍",7,"豖豗豘豙豛",5,"豣",6,"豬",6,"豴豵豶豷豻",6,"貃貄貆貇"],["d880","貈貋貍",6,"貕貖貗貙",20,"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],["d940","貮",62],["d980","賭",32,"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],["da40","贎",14,"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",8,"趂趃趆趇趈趉趌",4,"趒趓趕",9,"趠趡"],["da80","趢趤",12,"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],["db40","跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",6,"踆踇踈踋踍踎踐踑踒踓踕",7,"踠踡踤",4,"踫踭踰踲踳踴踶踷踸踻踼踾"],["db80","踿蹃蹅蹆蹌",4,"蹓",5,"蹚",11,"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],["dc40","蹳蹵蹷",4,"蹽蹾躀躂躃躄躆躈",6,"躑躒躓躕",6,"躝躟",11,"躭躮躰躱躳",6,"躻",7],["dc80","軃",10,"軏",21,"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],["dd40","軥",62],["dd80","輤",32,"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],["de40","轅",32,"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],["de80","迉",4,"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],["df40","這逜連逤逥逧",5,"逰",4,"逷逹逺逽逿遀遃遅遆遈",4,"過達違遖遙遚遜",5,"遤遦遧適遪遫遬遯",4,"遶",6,"遾邁"],["df80","還邅邆邇邉邊邌",4,"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],["e040","郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",19,"鄚鄛鄜"],["e080","鄝鄟鄠鄡鄤",10,"鄰鄲",6,"鄺",8,"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],["e140","酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",4,"醆醈醊醎醏醓",6,"醜",5,"醤",5,"醫醬醰醱醲醳醶醷醸醹醻"],["e180","醼",10,"釈釋釐釒",9,"針",8,"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],["e240","釦",62],["e280","鈥",32,"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",5,"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],["e340","鉆",45,"鉵",16],["e380","銆",7,"銏",24,"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],["e440","銨",5,"銯",24,"鋉",31],["e480","鋩",32,"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],["e540","錊",51,"錿",10],["e580","鍊",31,"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],["e640","鍬",34,"鎐",27],["e680","鎬",29,"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],["e740","鏎",7,"鏗",54],["e780","鐎",32,"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",6,"缪缫缬缭缯",4,"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],["e840","鐯",14,"鐿",43,"鑬鑭鑮鑯"],["e880","鑰",20,"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],["e940","锧锳锽镃镈镋镕镚镠镮镴镵長",7,"門",42],["e980","閫",32,"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],["ea40","闌",27,"闬闿阇阓阘阛阞阠阣",6,"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],["ea80","陘陙陚陜陝陞陠陣陥陦陫陭",4,"陳陸",12,"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],["eb40","隌階隑隒隓隕隖隚際隝",9,"隨",7,"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",9,"雡",6,"雫"],["eb80","雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",4,"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],["ec40","霡",8,"霫霬霮霯霱霳",4,"霺霻霼霽霿",18,"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",7],["ec80","靲靵靷",4,"靽",7,"鞆",4,"鞌鞎鞏鞐鞓鞕鞖鞗鞙",4,"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],["ed40","鞞鞟鞡鞢鞤",6,"鞬鞮鞰鞱鞳鞵",46],["ed80","韤韥韨韮",4,"韴韷",23,"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],["ee40","頏",62],["ee80","顎",32,"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",4,"钼钽钿铄铈",6,"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],["ef40","顯",5,"颋颎颒颕颙颣風",37,"飏飐飔飖飗飛飜飝飠",4],["ef80","飥飦飩",30,"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",4,"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",8,"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],["f040","餈",4,"餎餏餑",28,"餯",26],["f080","饊",9,"饖",12,"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",4,"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",6,"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],["f140","馌馎馚",10,"馦馧馩",47],["f180","駙",32,"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],["f240","駺",62],["f280","騹",32,"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],["f340","驚",17,"驲骃骉骍骎骔骕骙骦骩",6,"骲骳骴骵骹骻骽骾骿髃髄髆",4,"髍髎髏髐髒體髕髖髗髙髚髛髜"],["f380","髝髞髠髢髣髤髥髧髨髩髪髬髮髰",8,"髺髼",6,"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],["f440","鬇鬉",5,"鬐鬑鬒鬔",10,"鬠鬡鬢鬤",10,"鬰鬱鬳",7,"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",5],["f480","魛",32,"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],["f540","魼",62],["f580","鮻",32,"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],["f640","鯜",62],["f680","鰛",32,"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",5,"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",5,"鲥",4,"鲫鲭鲮鲰",7,"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],["f740","鰼",62],["f780","鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",4,"鳈鳉鳑鳒鳚鳛鳠鳡鳌",4,"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],["f840","鳣",62],["f880","鴢",32],["f940","鵃",62],["f980","鶂",32],["fa40","鶣",62],["fa80","鷢",32],["fb40","鸃",27,"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",9,"麀"],["fb80","麁麃麄麅麆麉麊麌",5,"麔",8,"麞麠",5,"麧麨麩麪"],["fc40","麫",8,"麵麶麷麹麺麼麿",4,"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",8,"黺黽黿",6],["fc80","鼆",4,"鼌鼏鼑鼒鼔鼕鼖鼘鼚",5,"鼡鼣",8,"鼭鼮鼰鼱"],["fd40","鼲",4,"鼸鼺鼼鼿",4,"齅",10,"齒",38],["fd80","齹",5,"龁龂龍",11,"龜龝龞龡",4,"郎凉秊裏隣"],["fe40","兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]]');

/***/ }),

/***/ 1742:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const u = (__webpack_require__(8556).fromPromise)
const jsonFile = __webpack_require__(3888)

jsonFile.outputJson = u(__webpack_require__(2752))
jsonFile.outputJsonSync = __webpack_require__(9690)
// aliases
jsonFile.outputJSON = jsonFile.outputJson
jsonFile.outputJSONSync = jsonFile.outputJsonSync
jsonFile.writeJSON = jsonFile.writeJson
jsonFile.writeJSONSync = jsonFile.writeJsonSync
jsonFile.readJSON = jsonFile.readJson
jsonFile.readJSONSync = jsonFile.readJsonSync

module.exports = jsonFile


/***/ }),

/***/ 1779:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.raceWith = void 0;
var race_1 = __webpack_require__(2685);
var lift_1 = __webpack_require__(4698);
var identity_1 = __webpack_require__(8489);
function raceWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return !otherSources.length
        ? identity_1.identity
        : lift_1.operate(function (source, subscriber) {
            race_1.raceInit(__spreadArray([source], __read(otherSources)))(subscriber);
        });
}
exports.raceWith = raceWith;
//# sourceMappingURL=raceWith.js.map

/***/ }),

/***/ 1780:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.concat = void 0;
var concatAll_1 = __webpack_require__(84);
var args_1 = __webpack_require__(3522);
var from_1 = __webpack_require__(7568);
function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return concatAll_1.concatAll()(from_1.from(args, args_1.popScheduler(args)));
}
exports.concat = concat;
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ 1782:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.single = void 0;
var EmptyError_1 = __webpack_require__(9866);
var SequenceError_1 = __webpack_require__(5910);
var NotFoundError_1 = __webpack_require__(8236);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function single(predicate) {
    return lift_1.operate(function (source, subscriber) {
        var hasValue = false;
        var singleValue;
        var seenValue = false;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            seenValue = true;
            if (!predicate || predicate(value, index++, source)) {
                hasValue && subscriber.error(new SequenceError_1.SequenceError('Too many matching values'));
                hasValue = true;
                singleValue = value;
            }
        }, function () {
            if (hasValue) {
                subscriber.next(singleValue);
                subscriber.complete();
            }
            else {
                subscriber.error(seenValue ? new NotFoundError_1.NotFoundError('No matching values') : new EmptyError_1.EmptyError());
            }
        }));
    });
}
exports.single = single;
//# sourceMappingURL=single.js.map

/***/ }),

/***/ 1848:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reduce = void 0;
var scanInternals_1 = __webpack_require__(9597);
var lift_1 = __webpack_require__(4698);
function reduce(accumulator, seed) {
    return lift_1.operate(scanInternals_1.scanInternals(accumulator, seed, arguments.length >= 2, false, true));
}
exports.reduce = reduce;
//# sourceMappingURL=reduce.js.map

/***/ }),

/***/ 1864:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindCallbackInternals = void 0;
var isScheduler_1 = __webpack_require__(7242);
var Observable_1 = __webpack_require__(541);
var subscribeOn_1 = __webpack_require__(3901);
var mapOneOrManyArgs_1 = __webpack_require__(4078);
var observeOn_1 = __webpack_require__(6257);
var AsyncSubject_1 = __webpack_require__(5960);
function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler)
                    .apply(this, args)
                    .pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
            };
        }
    }
    if (scheduler) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return bindCallbackInternals(isNodeStyle, callbackFunc)
                .apply(this, args)
                .pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
        };
    }
    return function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var subject = new AsyncSubject_1.AsyncSubject();
        var uninitialized = true;
        return new Observable_1.Observable(function (subscriber) {
            var subs = subject.subscribe(subscriber);
            if (uninitialized) {
                uninitialized = false;
                var isAsync_1 = false;
                var isComplete_1 = false;
                callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [
                    function () {
                        var results = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            results[_i] = arguments[_i];
                        }
                        if (isNodeStyle) {
                            var err = results.shift();
                            if (err != null) {
                                subject.error(err);
                                return;
                            }
                        }
                        subject.next(1 < results.length ? results : results[0]);
                        isComplete_1 = true;
                        if (isAsync_1) {
                            subject.complete();
                        }
                    },
                ]));
                if (isComplete_1) {
                    subject.complete();
                }
                isAsync_1 = true;
            }
            return subs;
        });
    };
}
exports.bindCallbackInternals = bindCallbackInternals;
//# sourceMappingURL=bindCallbackInternals.js.map

/***/ }),

/***/ 1880:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(2165);
const route = __webpack_require__(985);

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ 1908:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OperatorSubscriber = exports.createOperatorSubscriber = void 0;
var Subscriber_1 = __webpack_require__(2554);
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
exports.createOperatorSubscriber = createOperatorSubscriber;
var OperatorSubscriber = (function (_super) {
    __extends(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext
            ? function (value) {
                try {
                    onNext(value);
                }
                catch (err) {
                    destination.error(err);
                }
            }
            : _super.prototype._next;
        _this._error = onError
            ? function (err) {
                try {
                    onError(err);
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._error;
        _this._complete = onComplete
            ? function () {
                try {
                    onComplete();
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function () {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
    };
    return OperatorSubscriber;
}(Subscriber_1.Subscriber));
exports.OperatorSubscriber = OperatorSubscriber;
//# sourceMappingURL=OperatorSubscriber.js.map

/***/ }),

/***/ 1934:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var Buffer = (__webpack_require__(7475).Buffer);

// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
// correspond to encoded bytes (if 128 - then lower half is ASCII). 

exports._sbcs = SBCSCodec;
function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions)
        throw new Error("SBCS codec is called without the data.")
    
    // Prepare char buffer for decoding.
    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
        throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
    
    if (codecOptions.chars.length === 128) {
        var asciiString = "";
        for (var i = 0; i < 128; i++)
            asciiString += String.fromCharCode(i);
        codecOptions.chars = asciiString + codecOptions.chars;
    }

    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');
    
    // Encoding buffer.
    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

    for (var i = 0; i < codecOptions.chars.length; i++)
        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

    this.encodeBuf = encodeBuf;
}

SBCSCodec.prototype.encoder = SBCSEncoder;
SBCSCodec.prototype.decoder = SBCSDecoder;


function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf;
}

SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer.alloc(str.length);
    for (var i = 0; i < str.length; i++)
        buf[i] = this.encodeBuf[str.charCodeAt(i)];
    
    return buf;
}

SBCSEncoder.prototype.end = function() {
}


function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf;
}

SBCSDecoder.prototype.write = function(buf) {
    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer.alloc(buf.length*2);
    var idx1 = 0, idx2 = 0;
    for (var i = 0; i < buf.length; i++) {
        idx1 = buf[i]*2; idx2 = i*2;
        newBuf[idx2] = decodeBuf[idx1];
        newBuf[idx2+1] = decodeBuf[idx1+1];
    }
    return newBuf.toString('ucs2');
}

SBCSDecoder.prototype.end = function() {
}


/***/ }),

/***/ 1936:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dematerialize = void 0;
var Notification_1 = __webpack_require__(1439);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function dematerialize() {
    return lift_1.operate(function (source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (notification) { return Notification_1.observeNotification(notification, subscriber); }));
    });
}
exports.dematerialize = dematerialize;
//# sourceMappingURL=dematerialize.js.map

/***/ }),

/***/ 1943:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pipeFromArray = exports.pipe = void 0;
var identity_1 = __webpack_require__(8489);
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity_1.identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
exports.pipeFromArray = pipeFromArray;
//# sourceMappingURL=pipe.js.map

/***/ }),

/***/ 1947:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const parse = __webpack_require__(9002)
const prerelease = (version, options) => {
  const parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}
module.exports = prerelease


/***/ }),

/***/ 1979:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const patch = (a, loose) => new SemVer(a, loose).patch
module.exports = patch


/***/ }),

/***/ 1980:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const tty = __webpack_require__(7066); // eslint-disable-line unicorn/prefer-module

// eslint-disable-next-line no-warning-comments
// TODO: Use a better method when it's added to Node.js (https://github.com/nodejs/node/pull/40240)
// Lots of optionals here to support Deno.
const hasColors = tty?.WriteStream?.prototype?.hasColors?.() ?? false;

const format = (open, close) => {
	if (!hasColors) {
		return input => input;
	}

	const openCode = `\u001B[${open}m`;
	const closeCode = `\u001B[${close}m`;

	return input => {
		const string = input + ''; // eslint-disable-line no-implicit-coercion -- This is faster.
		let index = string.indexOf(closeCode);

		if (index === -1) {
			// Note: Intentionally not using string interpolation for performance reasons.
			return openCode + string + closeCode;
		}

		// Handle nested colors.

		// We could have done this, but it's too slow (as of Node.js 22).
		// return openCode + string.replaceAll(closeCode, openCode) + closeCode;

		let result = openCode;
		let lastIndex = 0;

		// SGR 22 resets both bold (1) and dim (2). When we encounter a nested
		// close for styles that use 22, we need to re-open the outer style.
		const reopenOnNestedClose = close === 22;
		const replaceCode = (reopenOnNestedClose ? closeCode : '') + openCode;

		while (index !== -1) {
			result += string.slice(lastIndex, index) + replaceCode;
			lastIndex = index + closeCode.length;
			index = string.indexOf(closeCode, lastIndex);
		}

		result += string.slice(lastIndex) + closeCode;

		return result;
	};
};

const colors = {};

colors.reset = format(0, 0);
colors.bold = format(1, 22);
colors.dim = format(2, 22);
colors.italic = format(3, 23);
colors.underline = format(4, 24);
colors.overline = format(53, 55);
colors.inverse = format(7, 27);
colors.hidden = format(8, 28);
colors.strikethrough = format(9, 29);

colors.black = format(30, 39);
colors.red = format(31, 39);
colors.green = format(32, 39);
colors.yellow = format(33, 39);
colors.blue = format(34, 39);
colors.magenta = format(35, 39);
colors.cyan = format(36, 39);
colors.white = format(37, 39);
colors.gray = format(90, 39);

colors.bgBlack = format(40, 49);
colors.bgRed = format(41, 49);
colors.bgGreen = format(42, 49);
colors.bgYellow = format(43, 49);
colors.bgBlue = format(44, 49);
colors.bgMagenta = format(45, 49);
colors.bgCyan = format(46, 49);
colors.bgWhite = format(47, 49);
colors.bgGray = format(100, 49);

colors.redBright = format(91, 39);
colors.greenBright = format(92, 39);
colors.yellowBright = format(93, 39);
colors.blueBright = format(94, 39);
colors.magentaBright = format(95, 39);
colors.cyanBright = format(96, 39);
colors.whiteBright = format(97, 39);

colors.bgRedBright = format(101, 49);
colors.bgGreenBright = format(102, 49);
colors.bgYellowBright = format(103, 49);
colors.bgBlueBright = format(104, 49);
colors.bgMagentaBright = format(105, 49);
colors.bgCyanBright = format(106, 49);
colors.bgWhiteBright = format(107, 49);

module.exports = colors; // eslint-disable-line unicorn/prefer-module


/***/ }),

/***/ 1981:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isSubscription = exports.EMPTY_SUBSCRIPTION = exports.Subscription = void 0;
var isFunction_1 = __webpack_require__(8403);
var UnsubscriptionError_1 = __webpack_require__(5779);
var arrRemove_1 = __webpack_require__(6864);
var Subscription = (function () {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function () {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                    try {
                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                            var parent_1 = _parentage_1_1.value;
                            parent_1.remove(this);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    _parentage.remove(this);
                }
            }
            var initialFinalizer = this.initialTeardown;
            if (isFunction_1.isFunction(initialFinalizer)) {
                try {
                    initialFinalizer();
                }
                catch (e) {
                    errors = e instanceof UnsubscriptionError_1.UnsubscriptionError ? e.errors : [e];
                }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        }
                        catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (errors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        }
    };
    Subscription.prototype.add = function (teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) {
                execFinalizer(teardown);
            }
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) {
                        return;
                    }
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function (parent) {
        var _parentage = this._parentage;
        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
    };
    Subscription.prototype._addParent = function (parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription.prototype._removeParent = function (parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
            this._parentage = null;
        }
        else if (Array.isArray(_parentage)) {
            arrRemove_1.arrRemove(_parentage, parent);
        }
    };
    Subscription.prototype.remove = function (teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove_1.arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription) {
            teardown._removeParent(this);
        }
    };
    Subscription.EMPTY = (function () {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    })();
    return Subscription;
}());
exports.Subscription = Subscription;
exports.EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return (value instanceof Subscription ||
        (value && 'closed' in value && isFunction_1.isFunction(value.remove) && isFunction_1.isFunction(value.add) && isFunction_1.isFunction(value.unsubscribe)));
}
exports.isSubscription = isSubscription;
function execFinalizer(finalizer) {
    if (isFunction_1.isFunction(finalizer)) {
        finalizer();
    }
    else {
        finalizer.unsubscribe();
    }
}
//# sourceMappingURL=Subscription.js.map

/***/ }),

/***/ 1994:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const ANY = Symbol('SemVer ANY')
// hoisted class for cyclic dependency
class Comparator {
  static get ANY () {
    return ANY
  }

  constructor (comp, options) {
    options = parseOptions(options)

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp
      } else {
        comp = comp.value
      }
    }

    comp = comp.trim().split(/\s+/).join(' ')
    debug('comparator', comp, options)
    this.options = options
    this.loose = !!options.loose
    this.parse(comp)

    if (this.semver === ANY) {
      this.value = ''
    } else {
      this.value = this.operator + this.semver.version
    }

    debug('comp', this)
  }

  parse (comp) {
    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const m = comp.match(r)

    if (!m) {
      throw new TypeError(`Invalid comparator: ${comp}`)
    }

    this.operator = m[1] !== undefined ? m[1] : ''
    if (this.operator === '=') {
      this.operator = ''
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      this.semver = ANY
    } else {
      this.semver = new SemVer(m[2], this.options.loose)
    }
  }

  toString () {
    return this.value
  }

  test (version) {
    debug('Comparator.test', version, this.options.loose)

    if (this.semver === ANY || version === ANY) {
      return true
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    return cmp(version, this.operator, this.semver, this.options)
  }

  intersects (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required')
    }

    if (this.operator === '') {
      if (this.value === '') {
        return true
      }
      return new Range(comp.value, options).test(this.value)
    } else if (comp.operator === '') {
      if (comp.value === '') {
        return true
      }
      return new Range(this.value, options).test(comp.semver)
    }

    options = parseOptions(options)

    // Special cases where nothing can possibly be lower
    if (options.includePrerelease &&
      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
      return false
    }
    if (!options.includePrerelease &&
      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
      return false
    }

    // Same direction increasing (> or >=)
    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
      return true
    }
    // Same direction decreasing (< or <=)
    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
      return true
    }
    // same SemVer and both sides are inclusive (<= or >=)
    if (
      (this.semver.version === comp.semver.version) &&
      this.operator.includes('=') && comp.operator.includes('=')) {
      return true
    }
    // opposite directions less than
    if (cmp(this.semver, '<', comp.semver, options) &&
      this.operator.startsWith('>') && comp.operator.startsWith('<')) {
      return true
    }
    // opposite directions greater than
    if (cmp(this.semver, '>', comp.semver, options) &&
      this.operator.startsWith('<') && comp.operator.startsWith('>')) {
      return true
    }
    return false
  }
}

module.exports = Comparator

const parseOptions = __webpack_require__(677)
const { safeRe: re, t } = __webpack_require__(32)
const cmp = __webpack_require__(9917)
const debug = __webpack_require__(7482)
const SemVer = __webpack_require__(7318)
const Range = __webpack_require__(9165)


/***/ }),

/***/ 2018:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fromReadableStreamLike = exports.fromAsyncIterable = exports.fromIterable = exports.fromPromise = exports.fromArrayLike = exports.fromInteropObservable = exports.innerFrom = void 0;
var isArrayLike_1 = __webpack_require__(9109);
var isPromise_1 = __webpack_require__(8910);
var Observable_1 = __webpack_require__(541);
var isInteropObservable_1 = __webpack_require__(7451);
var isAsyncIterable_1 = __webpack_require__(8653);
var throwUnobservableError_1 = __webpack_require__(6603);
var isIterable_1 = __webpack_require__(6897);
var isReadableStreamLike_1 = __webpack_require__(9856);
var isFunction_1 = __webpack_require__(8403);
var reportUnhandledError_1 = __webpack_require__(7394);
var observable_1 = __webpack_require__(9498);
function innerFrom(input) {
    if (input instanceof Observable_1.Observable) {
        return input;
    }
    if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
            return fromInteropObservable(input);
        }
        if (isArrayLike_1.isArrayLike(input)) {
            return fromArrayLike(input);
        }
        if (isPromise_1.isPromise(input)) {
            return fromPromise(input);
        }
        if (isAsyncIterable_1.isAsyncIterable(input)) {
            return fromAsyncIterable(input);
        }
        if (isIterable_1.isIterable(input)) {
            return fromIterable(input);
        }
        if (isReadableStreamLike_1.isReadableStreamLike(input)) {
            return fromReadableStreamLike(input);
        }
    }
    throw throwUnobservableError_1.createInvalidObservableTypeError(input);
}
exports.innerFrom = innerFrom;
function fromInteropObservable(obj) {
    return new Observable_1.Observable(function (subscriber) {
        var obs = obj[observable_1.observable]();
        if (isFunction_1.isFunction(obs.subscribe)) {
            return obs.subscribe(subscriber);
        }
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    });
}
exports.fromInteropObservable = fromInteropObservable;
function fromArrayLike(array) {
    return new Observable_1.Observable(function (subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    });
}
exports.fromArrayLike = fromArrayLike;
function fromPromise(promise) {
    return new Observable_1.Observable(function (subscriber) {
        promise
            .then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, reportUnhandledError_1.reportUnhandledError);
    });
}
exports.fromPromise = fromPromise;
function fromIterable(iterable) {
    return new Observable_1.Observable(function (subscriber) {
        var e_1, _a;
        try {
            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) {
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        subscriber.complete();
    });
}
exports.fromIterable = fromIterable;
function fromAsyncIterable(asyncIterable) {
    return new Observable_1.Observable(function (subscriber) {
        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
    });
}
exports.fromAsyncIterable = fromAsyncIterable;
function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(isReadableStreamLike_1.readableStreamLikeToAsyncGenerator(readableStream));
}
exports.fromReadableStreamLike = fromReadableStreamLike;
function process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function () {
        var value, e_2_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 11]);
                    asyncIterable_1 = __asyncValues(asyncIterable);
                    _b.label = 1;
                case 1: return [4, asyncIterable_1.next()];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return [2];
                    }
                    _b.label = 3;
                case 3: return [3, 1];
                case 4: return [3, 11];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 11];
                case 6:
                    _b.trys.push([6, , 9, 10]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                    return [4, _a.call(asyncIterable_1)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [3, 10];
                case 9:
                    if (e_2) throw e_2.error;
                    return [7];
                case 10: return [7];
                case 11:
                    subscriber.complete();
                    return [2];
            }
        });
    });
}
//# sourceMappingURL=innerFrom.js.map

/***/ }),

/***/ 2027:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.audit = void 0;
var lift_1 = __webpack_require__(4698);
var innerFrom_1 = __webpack_require__(2018);
var OperatorSubscriber_1 = __webpack_require__(1908);
function audit(durationSelector) {
    return lift_1.operate(function (source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        var durationSubscriber = null;
        var isComplete = false;
        var endDuration = function () {
            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
            durationSubscriber = null;
            if (hasValue) {
                hasValue = false;
                var value = lastValue;
                lastValue = null;
                subscriber.next(value);
            }
            isComplete && subscriber.complete();
        };
        var cleanupDuration = function () {
            durationSubscriber = null;
            isComplete && subscriber.complete();
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            lastValue = value;
            if (!durationSubscriber) {
                innerFrom_1.innerFrom(durationSelector(value)).subscribe((durationSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));
            }
        }, function () {
            isComplete = true;
            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
        }));
    });
}
exports.audit = audit;
//# sourceMappingURL=audit.js.map

/***/ }),

/***/ 2110:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.merge = void 0;
var mergeAll_1 = __webpack_require__(5689);
var innerFrom_1 = __webpack_require__(2018);
var empty_1 = __webpack_require__(8003);
var args_1 = __webpack_require__(3522);
var from_1 = __webpack_require__(7568);
function merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_1.popScheduler(args);
    var concurrent = args_1.popNumber(args, Infinity);
    var sources = args;
    return !sources.length
        ?
            empty_1.EMPTY
        : sources.length === 1
            ?
                innerFrom_1.innerFrom(sources[0])
            :
                mergeAll_1.mergeAll(concurrent)(from_1.from(sources, scheduler));
}
exports.merge = merge;
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ 2123:
/***/ (function(module) {

// This file is autogenerated. It's used to publish CJS to npm.
(function (global, factory) {
   true ? module.exports = factory() :
  0;
})(this, (function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License

  var trimLeft = /^\s+/;
  var trimRight = /\s+$/;
  function tinycolor(color, opts) {
    color = color ? color : "";
    opts = opts || {};

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
      return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }
    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) this._r = Math.round(this._r);
    if (this._g < 1) this._g = Math.round(this._g);
    if (this._b < 1) this._b = Math.round(this._b);
    this._ok = rgb.ok;
  }
  tinycolor.prototype = {
    isDark: function isDark() {
      return this.getBrightness() < 128;
    },
    isLight: function isLight() {
      return !this.isDark();
    },
    isValid: function isValid() {
      return this._ok;
    },
    getOriginalInput: function getOriginalInput() {
      return this._originalInput;
    },
    getFormat: function getFormat() {
      return this._format;
    },
    getAlpha: function getAlpha() {
      return this._a;
    },
    getBrightness: function getBrightness() {
      //http://www.w3.org/TR/AERT#color-contrast
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function getLuminance() {
      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function setAlpha(value) {
      this._a = boundAlpha(value);
      this._roundA = Math.round(100 * this._a) / 100;
      return this;
    },
    toHsv: function toHsv() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function toHsvString() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = Math.round(hsv.h * 360),
        s = Math.round(hsv.s * 100),
        v = Math.round(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function toHsl() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function toHslString() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = Math.round(hsl.h * 360),
        s = Math.round(hsl.s * 100),
        l = Math.round(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function toHex(allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function toHexString(allow3Char) {
      return "#" + this.toHex(allow3Char);
    },
    toHex8: function toHex8(allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function toHex8String(allow4Char) {
      return "#" + this.toHex8(allow4Char);
    },
    toRgb: function toRgb() {
      return {
        r: Math.round(this._r),
        g: Math.round(this._g),
        b: Math.round(this._b),
        a: this._a
      };
    },
    toRgbString: function toRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function toPercentageRgb() {
      return {
        r: Math.round(bound01(this._r, 255) * 100) + "%",
        g: Math.round(bound01(this._g, 255) * 100) + "%",
        b: Math.round(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    },
    toPercentageRgbString: function toPercentageRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function toName() {
      if (this._a === 0) {
        return "transparent";
      }
      if (this._a < 1) {
        return false;
      }
      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function toFilter(secondColor) {
      var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";
      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }
      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function toString(format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
      if (needsAlphaFormat) {
        // Special case for "transparent", all other non-alpha formats
        // will return rgba when there is transparency.
        if (format === "name" && this._a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    },
    clone: function clone() {
      return tinycolor(this.toString());
    },
    _applyModification: function _applyModification(fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    },
    lighten: function lighten() {
      return this._applyModification(_lighten, arguments);
    },
    brighten: function brighten() {
      return this._applyModification(_brighten, arguments);
    },
    darken: function darken() {
      return this._applyModification(_darken, arguments);
    },
    desaturate: function desaturate() {
      return this._applyModification(_desaturate, arguments);
    },
    saturate: function saturate() {
      return this._applyModification(_saturate, arguments);
    },
    greyscale: function greyscale() {
      return this._applyModification(_greyscale, arguments);
    },
    spin: function spin() {
      return this._applyModification(_spin, arguments);
    },
    _applyCombination: function _applyCombination(fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function analogous() {
      return this._applyCombination(_analogous, arguments);
    },
    complement: function complement() {
      return this._applyCombination(_complement, arguments);
    },
    monochromatic: function monochromatic() {
      return this._applyCombination(_monochromatic, arguments);
    },
    splitcomplement: function splitcomplement() {
      return this._applyCombination(_splitcomplement, arguments);
    },
    // Disabled until https://github.com/bgrins/TinyColor/issues/254
    // polyad: function (number) {
    //   return this._applyCombination(polyad, [number]);
    // },
    triad: function triad() {
      return this._applyCombination(polyad, [3]);
    },
    tetrad: function tetrad() {
      return this._applyCombination(polyad, [4]);
    }
  };

  // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1
  tinycolor.fromRatio = function (color, opts) {
    if (_typeof(color) == "object") {
      var newColor = {};
      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }
      color = newColor;
    }
    return tinycolor(color, opts);
  };

  // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //
  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color == "string") {
      color = stringInputToObject(color);
    }
    if (_typeof(color) == "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (color.hasOwnProperty("a")) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a
    };
  }

  // Conversion Functions
  // --------------------

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]
  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }

  // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]
  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      l = (max + min) / 2;
    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      l: l
    };
  }

  // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }
    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]
  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max == min) {
      h = 0; // achromatic
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      v: v
    };
  }

  // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h),
      f = h - i,
      p = v * (1 - s),
      q = v * (1 - f * s),
      t = v * (1 - (1 - f) * s),
      mod = i % 6,
      r = [v, q, p, p, t, v][mod],
      g = [t, v, v, q, p, p][mod],
      b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex
  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex
  function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToArgbHex`
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"
  function rgbaToArgbHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    return hex.join("");
  }

  // `equals`
  // Can be called with any tinycolor input
  tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) return false;
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };
  tinycolor.random = function () {
    return tinycolor.fromRatio({
      r: Math.random(),
      g: Math.random(),
      b: Math.random()
    });
  };

  // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

  function _desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _greyscale(color) {
    return tinycolor(color).desaturate(100);
  }
  function _lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function _brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return tinycolor(rgb);
  }
  function _darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }

  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.
  function _spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  }

  // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

  function _complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }
  function polyad(color, number) {
    if (isNaN(number) || number <= 0) {
      throw new Error("Argument to polyad must be a positive number");
    }
    var hsl = tinycolor(color).toHsl();
    var result = [tinycolor(color)];
    var step = 360 / number;
    for (var i = 1; i < number; i++) {
      result.push(tinycolor({
        h: (hsl.h + i * step) % 360,
        s: hsl.s,
        l: hsl.l
      }));
    }
    return result;
  }
  function _splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function _analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }
    return ret;
  }
  function _monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h,
      s = hsv.s,
      v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while (results--) {
      ret.push(tinycolor({
        h: h,
        s: s,
        v: v
      }));
      v = (v + modification) % 1;
    }
    return ret;
  }

  // Utility Functions
  // ---------------------

  tinycolor.mix = function (color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  };

  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

  // `contrast`
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
  tinycolor.readability = function (color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  };

  // `isReadable`
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
  tinycolor.isReadable = function (color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;
      case "AAlarge":
        out = readability >= 3;
        break;
      case "AAAsmall":
        out = readability >= 7;
        break;
    }
    return out;
  };

  // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
  tinycolor.mostReadable = function (baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);
      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
      level: level,
      size: size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  };

  // Big List of Colors
  // ------------------
  // <https://www.w3.org/TR/css-color-4/#named-colors>
  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  };

  // Make it easy to access colors via `hexNames[hex]`
  var hexNames = tinycolor.hexNames = flip(names);

  // Utilities
  // ---------

  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
  function flip(o) {
    var flipped = {};
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }
    return flipped;
  }

  // Return a valid alpha value [0,1] with all invalid values being set to 1
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }

  // Take input from [0, n] and return it as [0, 1]
  function bound01(n, max) {
    if (isOnePointZero(n)) n = "100%";
    var processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
      return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return n % max / parseFloat(max);
  }

  // Force a number between 0 and 1
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }

  // Parse a base-16 hex value into a base-10 integer
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }

  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
  }

  // Check to see if string passed in is a percentage
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") != -1;
  }

  // Force a hex value to have 2 characters
  function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
  }

  // Replace a decimal with it's percentage value
  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }
    return n;
  }

  // Converts a decimal to a hex value
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  // Converts a hex value to a decimal
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  var matchers = function () {
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }();

  // `isValidCSSUnit`
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see `matchers` above for definition).
  function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
  }

  // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
  function stringInputToObject(color) {
    color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == "transparent") {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }
    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }
    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }
    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hex8.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    if (match = matchers.hex4.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        a: convertHexToDecimal(match[4] + "" + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {
      level: "AA",
      size: "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }
    if (size !== "small" && size !== "large") {
      size = "small";
    }
    return {
      level: level,
      size: size
    };
  }

  return tinycolor;

}));


/***/ }),

/***/ 2165:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = __webpack_require__(4877);

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hsv = convert.gray.hsl;

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ 2191:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NI: () => (/* binding */ getAvailableFeatures),
/* harmony export */   addCommand: () => (/* binding */ addCommand),
/* harmony export */   iM: () => (/* binding */ showAddHelp)
/* harmony export */ });
/* unused harmony export addFeatureToProject */
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3757);
/* harmony import */ var inquirer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6824);
/* harmony import */ var gradient_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4112);
/* harmony import */ var boxen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7243);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6928);
/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7187);
/* harmony import */ var _utils_helpFormatter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4120);
/* harmony import */ var _utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(4253);
/* harmony import */ var _utils_historyManager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4720);
/* harmony import */ var _utils_cacheManager_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(342);
/* harmony import */ var _utils_pathResolver_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(3294);
/* harmony import */ var _utils_banner_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(229);












/**
 * Helper function to capitalize strings
 */
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
/**
 * Get features.json configuration with new jsonPath structure
 */
// Cache for features config to avoid repeated file reads
let featuresConfigCache = null;
async function getFeaturesConfig() {
    // Return cached config if available
    if (featuresConfigCache) {
        return featuresConfigCache;
    }
    try {
        // Use the centralized path resolver
        const featuresPath = (0,_utils_pathResolver_js__WEBPACK_IMPORTED_MODULE_10__/* .getFeaturesJsonPath */ .zl)();
        if (fs_extra__WEBPACK_IMPORTED_MODULE_5__.existsSync(featuresPath)) {
            const baseConfig = JSON.parse(fs_extra__WEBPACK_IMPORTED_MODULE_5__.readFileSync(featuresPath, 'utf-8'));
            const processedConfig = {};
            // Process each feature to load individual JSON files
            for (const [featureName, config] of Object.entries(baseConfig.features || baseConfig)) {
                const featureConfig = config;
                if (featureConfig.jsonPath) {
                    try {
                        // Load the individual feature JSON file
                        const individualFeaturePath = path__WEBPACK_IMPORTED_MODULE_4__.resolve(path__WEBPACK_IMPORTED_MODULE_4__.dirname(featuresPath), featureConfig.jsonPath);
                        if (fs_extra__WEBPACK_IMPORTED_MODULE_5__.existsSync(individualFeaturePath)) {
                            const individualFeatureData = JSON.parse(fs_extra__WEBPACK_IMPORTED_MODULE_5__.readFileSync(individualFeaturePath, 'utf-8'));
                            // Merge the base config with the individual feature data
                            processedConfig[featureName] = {
                                ...featureConfig,
                                files: individualFeatureData.files || individualFeatureData,
                                ...individualFeatureData
                            };
                        }
                        else {
                            // Silently skip missing files to avoid console spam
                            processedConfig[featureName] = featureConfig;
                        }
                    }
                    catch (error) {
                        // Silently handle errors to avoid console spam
                        processedConfig[featureName] = featureConfig;
                    }
                }
                else {
                    // Legacy format
                    processedConfig[featureName] = featureConfig;
                }
            }
            // Cache the processed config
            featuresConfigCache = { features: processedConfig };
            return featuresConfigCache;
        }
        // Return empty config without warning to avoid console spam
        featuresConfigCache = { features: {} };
        return featuresConfigCache;
    }
    catch (error) {
        // Return fallback config without warning
        return { features: {} };
    }
}
/**
 * Get available feature categories
 */
async function getAvailableFeatures() {
    const config = await getFeaturesConfig();
    return Object.keys(config.features || {});
}
/**
 * Get sub-features for a category
 */
async function getSubFeatures(category) {
    const config = await getFeaturesConfig();
    const categoryConfig = config.features?.[category];
    if (!categoryConfig || typeof categoryConfig !== 'object') {
        return [];
    }
    return Object.keys(categoryConfig.files || {});
}
/**
 * List available features from features.json with descriptions
 */
async function listAvailableFeatures() {
    await (0,_utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .ensureFeaturesLoaded */ .vV)();
    const featuresConfig = await getFeaturesConfig();
    if (!featuresConfig.features || Object.keys(featuresConfig.features).length === 0) {
        console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow('⚠️  No features found in configuration'));
        return;
    }
    const featuresData = Object.entries(featuresConfig.features).map(([key, config]) => {
        const providers = config.files ? Object.keys(config.files) : [];
        const description = config.description || 'No description available';
        const frameworks = config.supportedFrameworks ? config.supportedFrameworks.join(', ') : 'All frameworks';
        return {
            name: key,
            description,
            providers: providers.length > 0 ? providers : ['No providers'],
            frameworks,
            status: providers.length > 0 ? '✅' : '🚧'
        };
    });
    console.log('\n' + (0,boxen__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)((0,gradient_string__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Ay)(['#4facfe', '#00f2fe'])('🔮 Available Features') + '\n\n' +
        featuresData.map(feature => {
            const providersList = feature.providers.join(', ');
            return `${feature.status} ${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.bold.cyan(feature.name)}\n  ${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray(feature.description)}\n  ${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.dim('Providers: ' + providersList)}\n  ${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.dim('Frameworks: ' + feature.frameworks)}`;
        }).join('\n\n'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'cyan'
    }));
}
/**
 * Display important disclaimer about potential issues
 */
function showFeatureDisclaimer() {
    const disclaimerBox = (0,boxen__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow.bold('⚠️  IMPORTANT DISCLAIMER') + '\n\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.white('When adding features to your project:') + '\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray('• Syntax errors may occur during integration') + '\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray('• Code formatting issues might arise') + '\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray('• Manual adjustments may be required') + '\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray('• Always backup your project before adding features') + '\n\n' +
        chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.cyan('💡 It\'s recommended to test your project after feature integration'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'yellow',
        title: 'Feature Integration Warning',
        titleAlignment: 'center'
    });
    console.log(disclaimerBox);
}
/**
 * Prompt for feature category selection
 */
async function promptFeatureCategory(availableFeatures) {
    const { feature } = await inquirer__WEBPACK_IMPORTED_MODULE_1__["default"].prompt([
        {
            type: 'list',
            name: 'feature',
            message: `${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.blue('❯')} Choose a feature category to add:`,
            choices: availableFeatures.map(feature => ({
                name: `${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.green('▸')} ${capitalize(feature)}`,
                value: feature,
                short: feature
            })),
            pageSize: 12
        }
    ]);
    return feature;
}
/**
 * Prompt for feature provider selection
 */
async function promptFeatureProvider(category, providers) {
    const { provider } = await inquirer__WEBPACK_IMPORTED_MODULE_1__["default"].prompt([
        {
            type: 'list',
            name: 'provider',
            message: `${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.blue('❯')} Choose a ${category} provider:`,
            choices: providers.map(provider => ({
                name: `${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.green('▸')} ${capitalize(provider.replace(/-/g, ' '))}`,
                value: provider,
                short: provider
            })),
            pageSize: 10
        }
    ]);
    return provider;
}
/**
 * Get available providers for a feature from features.json
 */
function getFeatureProviders(feature, featureConfig) {
    if (!featureConfig.files)
        return [];
    return Object.keys(featureConfig.files);
}
/**
 * Check if framework is supported for a feature
 */
function isFrameworkSupported(featureConfig, framework) {
    if (!featureConfig.supportedFrameworks)
        return true;
    return featureConfig.supportedFrameworks.includes(framework);
}
/**
 * Show enhanced setup instructions for specific features
 */
function showEnhancedSetupInstructions(feature, provider) {
    console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.green(`\n🔧 Setup Instructions for ${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.bold(provider)} (${feature}):`));
    switch (feature) {
        case 'auth':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Configure authentication provider credentials'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Add environment variables to .env file'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Set up authentication routes and middleware'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Update your app configuration'));
            break;
        case 'ai':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Get API key from your AI provider'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Add API key to .env file'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Test AI integration endpoints'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Configure rate limiting and error handling'));
            break;
        case 'database':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Set up your database connection'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Update connection string in .env'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Run migrations if needed'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Test database connectivity'));
            break;
        case 'aws':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Configure AWS credentials (AWS CLI or IAM roles)'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Set up required AWS permissions'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Update AWS region in configuration'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Test AWS service integration'));
            break;
        case 'payment':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Get API keys from payment provider'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Add keys to .env file (separate test/live keys)'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Configure webhooks for payment events'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Test payment flow in sandbox mode'));
            break;
        case 'storage':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Configure storage provider credentials'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Set up bucket/container permissions'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Add storage configuration to .env'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Test file upload/download functionality'));
            break;
        case 'monitoring':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Get monitoring service API key'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Add configuration to .env file'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Set up error tracking and alerts'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Configure performance monitoring'));
            break;
        case 'analytics':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Get analytics service tracking ID'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Add tracking configuration'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Set up custom events and goals'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Verify data collection'));
            break;
        case 'docker':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Install Docker on your system'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Run: docker-compose up -d'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Your app will be available at the configured port'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Check logs: docker-compose logs'));
            break;
        case 'testing':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Configure test environment variables'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Set up test database/services'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Run tests: npm test'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Set up CI/CD test automation'));
            break;
        default:
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')(`1. Check the ${feature} configuration files`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Update .env file with necessary variables'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Test the integration'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('4. Review documentation for advanced setup'));
    }
    console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('\n💡 Check your project files for any additional setup instructions'));
    console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('🔗 Refer to the provider\'s official documentation for detailed configuration'));
}
/**
 * Show help for add command
 */
async function showAddHelp() {
    await (0,_utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .ensureFeaturesLoaded */ .vV)();
    const featuresConfig = await getFeaturesConfig();
    const availableFeatures = Object.keys(featuresConfig.features || {});
    const helpConfig = {
        commandName: 'Add',
        emoji: '➕',
        description: 'Add new features to your project with automatic framework integration.\nSupports authentication, databases, AI, payments, AWS services, and more.',
        usage: [
            'add [options]',
            'add <feature> [provider] [options]'
        ],
        options: [
            { flag: '-l, --list', description: 'List all available features' },
            { flag: '-v, --verbose', description: 'Show detailed output' }
        ],
        examples: [
            { command: 'add', description: 'Interactive feature selection' },
            { command: 'add auth', description: 'Show auth providers dropdown' },
            { command: 'add auth clerk', description: 'Add Clerk authentication' },
            { command: 'add aws ec2', description: 'Add AWS EC2 integration' },
            { command: 'add ai openai', description: 'Add OpenAI integration' },
            { command: 'add database postgres', description: 'Add PostgreSQL integration' },
            { command: 'add payment stripe', description: 'Add Stripe payment integration' },
            { command: 'add --list', description: 'List all available features' }
        ],
        additionalSections: [
            {
                title: `Available Features (${availableFeatures.length})`,
                items: availableFeatures.length > 0
                    ? availableFeatures
                    : ['No features configured']
            },
            {
                title: 'Supported Frameworks',
                items: [
                    'Next.js - App Router & Pages Router',
                    'React - Create React App & Vite',
                    'Express.js - Node.js backend framework',
                    'NestJS - TypeScript backend framework',
                    'Vue.js - Vue 3 with Composition API',
                    'Angular - Angular 15+',
                    'Remix - Full-stack React framework'
                ]
            }
        ],
        tips: [
            'Features are automatically configured for your framework',
            'Environment variables are added to .env files',
            'TypeScript and JavaScript are both supported',
            'Use "pi add --list" to see detailed feature information'
        ]
    };
    (0,_utils_helpFormatter_js__WEBPACK_IMPORTED_MODULE_6__/* .createStandardHelp */ .ht)(helpConfig);
}
/**
 * Main add command handler with enhanced syntax support
 * Supports:
 * - pi add (interactive dropdown)
 * - pi add <category> (show providers for category)
 * - pi add <category> <provider> (direct installation)
 * - pi add --list (list all available features)
 * - pi add --help (show help information)
 */
async function addCommand(feature, provider, options = {}) {
    try {
        // Ensure features are loaded first
        await (0,_utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .ensureFeaturesLoaded */ .vV)();
        // Handle list flag
        if (options.list || feature === '--list' || feature === '-l') {
            await listAvailableFeatures();
            return;
        }
        // Display command banner
        (0,_utils_banner_js__WEBPACK_IMPORTED_MODULE_11__/* .displayCommandBanner */ .kn)('Add', 'Add new features to your project with integrated templates and configurations');
        // Initialize history manager
        await _utils_historyManager_js__WEBPACK_IMPORTED_MODULE_8__/* .historyManager */ .O.init();
        // Show disclaimer
        showFeatureDisclaimer();
        // Use provided project path or current directory
        const projectPath = options.projectPath || process.cwd();
        let projectInfo;
        // If framework is provided (from create command), use it directly
        if (options.framework) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.green(`✅ Using ${options.framework} framework (from project creation)`));
            projectInfo = {
                framework: options.framework,
                projectLanguage: 'typescript', // Default, can be improved
                language: 'typescript'
            };
        }
        else {
            // Standalone add command - detect framework from project files
            // Get cached project info or detect it (simplified)
            projectInfo = null; // Simplified - always detect fresh
            if (!projectInfo) {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow('🔍 Analyzing project structure...'));
                projectInfo = await (0,_utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .detectProjectStack */ .$3)(projectPath);
                // Cache the detected project info
                if (projectInfo.framework && projectInfo.language) {
                    try {
                        const packageJsonPath = path__WEBPACK_IMPORTED_MODULE_4__.join(projectPath, 'package.json');
                        const projectName = await fs_extra__WEBPACK_IMPORTED_MODULE_5__.pathExists(packageJsonPath)
                            ? (await fs_extra__WEBPACK_IMPORTED_MODULE_5__.readJson(packageJsonPath)).name || path__WEBPACK_IMPORTED_MODULE_4__.basename(projectPath)
                            : path__WEBPACK_IMPORTED_MODULE_4__.basename(projectPath);
                        await (0,_utils_cacheManager_js__WEBPACK_IMPORTED_MODULE_9__/* .cacheProjectData */ .aF)(projectPath, projectName, projectInfo.projectLanguage || 'unknown');
                    }
                    catch (error) {
                        console.warn(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow('⚠️  Could not cache project info'));
                    }
                }
            }
            if (!projectInfo || !projectInfo.framework) {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red('❌ No supported framework detected in current directory'));
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow('💡 Supported frameworks: Next.js, React, Express, NestJS, Vue, Angular, Remix'));
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow('💡 Make sure you\'re in a project root with package.json'));
                // Show detected files for debugging
                const files = await fs_extra__WEBPACK_IMPORTED_MODULE_5__.readdir(projectPath);
                const relevantFiles = files.filter(f => f.endsWith('.json') || f.startsWith('package') || f.startsWith('tsconfig'));
                if (relevantFiles.length > 0) {
                    console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray(`📁 Found files: ${relevantFiles.join(', ')}`));
                }
                return;
            }
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.green(`✅ Detected ${projectInfo.framework} project (${projectInfo.projectLanguage || projectInfo.language})`));
        }
        // Validate that framework features exist in features directory
        const frameworkFeaturesPath = (0,_utils_pathResolver_js__WEBPACK_IMPORTED_MODULE_10__/* .getFeaturesPath */ .hr)();
        if (!await fs_extra__WEBPACK_IMPORTED_MODULE_5__.pathExists(frameworkFeaturesPath)) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red('❌ Features directory not found'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow('💡 Make sure you\'re running this from the Package Installer CLI root directory'));
            return;
        }
        // Load features configuration
        const featuresConfigPath = (0,_utils_pathResolver_js__WEBPACK_IMPORTED_MODULE_10__/* .getFeaturesJsonPath */ .zl)();
        if (!await fs_extra__WEBPACK_IMPORTED_MODULE_5__.pathExists(featuresConfigPath)) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red('❌ Features configuration not found'));
            return;
        }
        const featuresConfig = await getFeaturesConfig();
        const availableFeatures = Object.keys(featuresConfig.features || {});
        // Handle different command syntax cases
        if (!feature) {
            // Case 1: "pi add" - Show interactive dropdown for all features
            const selectedFeature = await promptFeatureCategory(availableFeatures);
            if (!selectedFeature)
                return;
            feature = selectedFeature;
        }
        // Validate feature exists
        if (!availableFeatures.includes(feature)) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red(`❌ Feature '${feature}' not found`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow(`💡 Available features: ${availableFeatures.join(', ')}`));
            return;
        }
        const currentFeatureConfig = featuresConfig.features[feature];
        if (!provider) {
            // Case 2: "pi add <category>" - Show providers for category
            const providers = getFeatureProviders(feature, currentFeatureConfig);
            if (providers.length === 0) {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow(`⚠️  No providers found for ${feature}`));
                return;
            }
            if (providers.length === 1) {
                provider = providers[0];
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.cyan(`🔧 Using ${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.bold(provider)} (only provider available)`));
            }
            else {
                const selectedProvider = await promptFeatureProvider(feature, providers);
                if (!selectedProvider)
                    return;
                provider = selectedProvider;
            }
        }
        // Case 3: "pi add <category> <provider>" - Direct installation
        // Validate provider exists for feature
        const providers = getFeatureProviders(feature, currentFeatureConfig);
        if (!providers.includes(provider)) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red(`❌ Provider '${provider}' not found for ${feature}`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow(`💡 Available providers: ${providers.join(', ')}`));
            return;
        }
        // Check framework compatibility
        if (!isFrameworkSupported(currentFeatureConfig, projectInfo.framework)) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red(`❌ ${feature} (${provider}) is not supported for ${projectInfo.framework}`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow(`💡 Supported frameworks: ${currentFeatureConfig.supportedFrameworks?.join(', ') || 'Not specified'}`));
            return;
        }
        // Install the feature
        console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')(`\n🚀 Installing ${feature} (${provider})...\n`));
        try {
            await (0,_utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .addFeature */ .Ue)(feature, provider, projectPath);
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.green(`\n✅ Successfully added ${feature} (${provider})`));
            // Show setup instructions
            showEnhancedSetupInstructions(feature, provider);
            // Update history (if available)
            try {
                if ("addFeature" in _utils_historyManager_js__WEBPACK_IMPORTED_MODULE_8__/* .historyManager */ .O && typeof _utils_historyManager_js__WEBPACK_IMPORTED_MODULE_8__/* .historyManager */ .O.addFeature === 'function') {
                    await _utils_historyManager_js__WEBPACK_IMPORTED_MODULE_8__/* .historyManager */ .O.addFeature(feature, provider, projectPath);
                }
            }
            catch (error) {
                // History update is optional
            }
        }
        catch (error) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red(`\n❌ Failed to add ${feature} (${provider}): ${error}`));
        }
        // Show additional project details
        if (projectInfo.packageManager) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray(`📦 Package manager: ${projectInfo.packageManager}`));
        }
        if (projectInfo.hasSrcFolder) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray(`📁 Source structure: src folder detected`));
        }
        let selectedFeature = feature;
        let selectedProvider = provider;
        // If no feature specified, show interactive selection
        if (!selectedFeature) {
            const availableFeatures = Object.keys(_utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .SUPPORTED_FEATURES */ .hm).filter(key => {
                const featureConfig = _utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .SUPPORTED_FEATURES */ .hm[key];
                const frameworkSupported = featureConfig.supportedFrameworks.includes(projectInfo.framework);
                const projectLang = projectInfo.projectLanguage || projectInfo.language || 'javascript';
                const languageSupported = featureConfig.supportedLanguages.includes(projectLang);
                return frameworkSupported && languageSupported;
            });
            if (availableFeatures.length === 0) {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow(`⚠️  No features available for ${projectInfo.framework} projects`));
                return;
            }
            const choices = availableFeatures.map(key => {
                const config = _utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .SUPPORTED_FEATURES */ .hm[key];
                const isComingSoon = Object.keys(config.files || {}).length === 0;
                const status = isComingSoon ? chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')(' (Coming Soon)') : '';
                const description = config.description || 'No description available';
                return {
                    name: `${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.bold.cyan(key)}${status}\n  ${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray(description)}`,
                    value: key,
                    disabled: isComingSoon
                };
            });
            const { feature: chosenFeature } = await inquirer__WEBPACK_IMPORTED_MODULE_1__["default"].prompt([
                {
                    type: 'list',
                    name: 'feature',
                    message: chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#9c88ff')('🚀 Select a feature to add:'),
                    choices,
                    pageSize: 10
                }
            ]);
            selectedFeature = chosenFeature;
        }
        // Check if feature exists and is supported
        if (!_utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .SUPPORTED_FEATURES */ .hm[selectedFeature]) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red(`❌ Feature '${selectedFeature}' not found`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow('💡 Use "pi add --list" to see available features'));
            return;
        }
        const featureConfig = _utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .SUPPORTED_FEATURES */ .hm[selectedFeature];
        // Check framework and language support
        if (!featureConfig.supportedFrameworks.includes(projectInfo.framework)) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red(`❌ Feature '${selectedFeature}' is not supported for ${projectInfo.framework} projects`));
            return;
        }
        if (!featureConfig.supportedLanguages.includes(projectInfo.projectLanguage || projectInfo.language || 'javascript')) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red(`❌ Feature '${selectedFeature}' is not supported for ${projectInfo.projectLanguage || projectInfo.language} projects`));
            return;
        }
        // Check if feature is coming soon
        if (Object.keys(featureConfig.files || {}).length === 0) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#ffa502')(`🚧 ${selectedFeature} is coming soon!`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('Stay tuned for updates.'));
            return;
        }
        // Get available sub-features/providers
        const subFeatures = await getSubFeatures(selectedFeature);
        // If no provider specified and multiple providers available, show selection
        if (!selectedProvider && subFeatures.length > 1) {
            const providerChoices = subFeatures.map((subFeature) => {
                // Try to get provider description or use formatted name
                const formattedName = subFeature
                    .split('-')
                    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');
                return {
                    name: `${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.bold.green(formattedName)} - ${getProviderDescription(selectedFeature, subFeature)}`,
                    value: subFeature
                };
            });
            const { provider: chosenProvider } = await inquirer__WEBPACK_IMPORTED_MODULE_1__["default"].prompt([
                {
                    type: 'list',
                    name: 'provider',
                    message: chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#9c88ff')(`🔧 Select a ${selectedFeature} provider:`),
                    choices: providerChoices,
                    pageSize: 10
                }
            ]);
            selectedProvider = chosenProvider;
        }
        else if (!selectedProvider && subFeatures.length === 1) {
            selectedProvider = subFeatures[0];
        }
        // Add the selected feature
        console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#9c88ff')(`\n🚀 Adding ${selectedFeature}${selectedProvider ? ` (${selectedProvider})` : ''} to your project...`));
        await (0,_utils_featureInstaller_js__WEBPACK_IMPORTED_MODULE_7__/* .addFeature */ .Ue)(selectedFeature, selectedProvider, process.cwd());
        // Record feature addition in history
        try {
            const currentPath = process.cwd();
            const projectName = path__WEBPACK_IMPORTED_MODULE_4__.basename(currentPath);
            await _utils_historyManager_js__WEBPACK_IMPORTED_MODULE_8__/* .historyManager */ .O.recordFeature({
                name: selectedFeature,
                projectName: projectName,
                provider: selectedProvider,
                projectPath: currentPath,
                framework: projectInfo.framework,
                success: true
            });
        }
        catch (error) {
            console.warn(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow('⚠️  Could not save feature to history'));
        }
        console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.green(`\n✅ Successfully added ${selectedFeature}${selectedProvider ? ` (${selectedProvider})` : ''} to your project!`));
        // Show next steps
        showNextSteps(selectedFeature, selectedProvider);
    }
    catch (error) {
        console.error(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.red(`❌ Error adding feature: ${error.message}`));
        // Record failed feature addition
        try {
            await _utils_historyManager_js__WEBPACK_IMPORTED_MODULE_8__/* .historyManager */ .O.recordFeature({
                name: feature || 'unknown',
                projectName: path__WEBPACK_IMPORTED_MODULE_4__.basename(process.cwd()),
                provider: provider,
                projectPath: process.cwd(),
                framework: 'unknown',
                success: false
            });
        }
        catch (historyError) {
            // Ignore history errors
        }
        process.exit(1);
    }
}
/**
 * Get provider description based on feature and provider
 */
function getProviderDescription(feature, provider) {
    const descriptions = {
        auth: {
            'clerk': 'Modern authentication with built-in UI components',
            'auth0': 'Enterprise-grade authentication platform',
            'nextauth': 'Authentication for Next.js applications',
            'firebase': 'Google Firebase Authentication',
            'supabase': 'Open source Firebase alternative'
        },
        aws: {
            'ec2': 'Elastic Compute Cloud - Virtual servers',
            's3': 'Simple Storage Service - Object storage',
            'lambda': 'Serverless compute service',
            'rds': 'Relational Database Service',
            'cloudfront': 'Content Delivery Network',
            'cognito': 'User identity and authentication',
            'dynamodb': 'NoSQL database service',
            'sqs': 'Simple Queue Service',
            'sns': 'Simple Notification Service',
            'iam': 'Identity and Access Management'
        },
        ai: {
            'openai': 'GPT models and DALL-E integration',
            'claude': 'Anthropic Claude AI assistant',
            'gemini': 'Google Gemini AI models',
            'grok': 'xAI Grok language model',
            'open-router': 'Universal API for multiple AI models'
        },
        database: {
            'prisma': 'Next-generation ORM for Node.js',
            'mongoose': 'MongoDB object modeling',
            'drizzle': 'TypeScript ORM for SQL databases',
            'sequelize': 'Promise-based ORM for multiple databases',
            'typeorm': 'ORM for TypeScript and JavaScript'
        },
        storage: {
            's3': 'AWS S3 object storage integration',
            'cloudinary': 'Image and video management',
            'firebase': 'Google Firebase Storage',
            'supabase': 'Supabase Storage integration'
        },
        payment: {
            'stripe': 'Complete payments platform',
            'paypal': 'PayPal payment integration',
            'razorpay': 'Indian payment gateway',
            'square': 'Square payment processing'
        }
    };
    return descriptions[feature]?.[provider] || `${provider} integration`;
}
/**
 * Show next steps after feature addition
 */
function showNextSteps(feature, provider) {
    console.log(`\n${chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')('📋 Next Steps:')}`);
    switch (feature) {
        case 'auth':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Configure your authentication provider'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Update your .env file with API keys'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Test the authentication flow'));
            break;
        case 'aws':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Configure AWS credentials'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Update .env file with AWS region and access keys'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Test the AWS service integration'));
            break;
        case 'ai':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Get API key from your AI provider'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Add API key to .env file'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Test AI integration endpoints'));
            break;
        case 'database':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Set up your database connection'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Update connection string in .env'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Run migrations if needed'));
            break;
        case 'docker':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('1. Install Docker on your system'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Run: docker-compose up -d'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Your app will be available at the configured port'));
            break;
        default:
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')(`1. Check the ${feature} configuration`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('2. Update .env file with necessary variables'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('3. Test the integration'));
    }
    console.log(chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')('\n💡 Check your project files for any additional setup instructions'));
}
/**
 * Add feature to project from create command integration
 */
async function addFeatureToProject(projectPath, category, provider, framework) {
    try {
        console.log(chalk.cyan(`🔧 Adding ${provider} for ${category}...`));
        // Call the main add command with framework override
        await addCommand(category, provider, {
            framework,
            projectPath,
            list: false,
            verbose: false
        });
        return true;
    }
    catch (error) {
        console.log(chalk.red(`❌ Failed to add ${provider} for ${category}: ${error}`));
        return false;
    }
}


/***/ }),

/***/ 2198:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.max = void 0;
var reduce_1 = __webpack_require__(1848);
var isFunction_1 = __webpack_require__(8403);
function max(comparer) {
    return reduce_1.reduce(isFunction_1.isFunction(comparer) ? function (x, y) { return (comparer(x, y) > 0 ? x : y); } : function (x, y) { return (x > y ? x : y); });
}
exports.max = max;
//# sourceMappingURL=max.js.map

/***/ }),

/***/ 2203:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("stream");

/***/ }),

/***/ 2212:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.takeWhile = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function takeWhile(predicate, inclusive) {
    if (inclusive === void 0) { inclusive = false; }
    return lift_1.operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var result = predicate(value, index++);
            (result || inclusive) && subscriber.next(value);
            !result && subscriber.complete();
        }));
    });
}
exports.takeWhile = takeWhile;
//# sourceMappingURL=takeWhile.js.map

/***/ }),

/***/ 2242:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QueueScheduler = void 0;
var AsyncScheduler_1 = __webpack_require__(5031);
var QueueScheduler = (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.QueueScheduler = QueueScheduler;
//# sourceMappingURL=QueueScheduler.js.map

/***/ }),

/***/ 2277:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsapAction = void 0;
var AsyncAction_1 = __webpack_require__(5970);
var immediateProvider_1 = __webpack_require__(9232);
var AsapAction = (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = immediateProvider_1.immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (delay != null ? delay > 0 : this.delay > 0) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        var actions = scheduler.actions;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
            immediateProvider_1.immediateProvider.clearImmediate(id);
            if (scheduler._scheduled === id) {
                scheduler._scheduled = undefined;
            }
        }
        return undefined;
    };
    return AsapAction;
}(AsyncAction_1.AsyncAction));
exports.AsapAction = AsapAction;
//# sourceMappingURL=AsapAction.js.map

/***/ }),

/***/ 2286:
/***/ ((module) => {

// This is not the set of all possible signals.
//
// It IS, however, the set of all signals that trigger
// an exit on either Linux or BSD systems.  Linux is a
// superset of the signal names supported on BSD, and
// the unknown signals just fail to register, so we can
// catch that easily enough.
//
// Don't bother with SIGKILL.  It's uncatchable, which
// means that we can't fire any callbacks anyway.
//
// If a user does happen to register a handler on a non-
// fatal signal like SIGWINCH or something, and then
// exit, it'll end up firing `process.emit('exit')`, so
// the handler will be fired anyway.
//
// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
// artificially, inherently leave the process in a
// state from which it is not safe to try and enter JS
// listeners.
module.exports = [
  'SIGABRT',
  'SIGALRM',
  'SIGHUP',
  'SIGINT',
  'SIGTERM'
]

if (process.platform !== 'win32') {
  module.exports.push(
    'SIGVTALRM',
    'SIGXCPU',
    'SIGXFSZ',
    'SIGUSR2',
    'SIGTRAP',
    'SIGSYS',
    'SIGQUIT',
    'SIGIOT'
    // should detect profiler and enable/disable accordingly.
    // see #21
    // 'SIGPROF'
  )
}

if (process.platform === 'linux') {
  module.exports.push(
    'SIGIO',
    'SIGPOLL',
    'SIGPWR',
    'SIGSTKFLT',
    'SIGUNUSED'
  )
}


/***/ }),

/***/ 2304:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of 
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
// Modified to work in node for this project (and some refactoring)
//---------------------------------------------------------------------

var QR8bitByte = __webpack_require__(2696);
var QRUtil = __webpack_require__(1678);
var QRPolynomial = __webpack_require__(5739);
var QRRSBlock = __webpack_require__(7129);
var QRBitBuffer = __webpack_require__(4880);

function QRCode(typeNumber, errorCorrectLevel) {
	this.typeNumber = typeNumber;
	this.errorCorrectLevel = errorCorrectLevel;
	this.modules = null;
	this.moduleCount = 0;
	this.dataCache = null;
	this.dataList = [];
}

QRCode.prototype = {
	
	addData : function(data) {
		var newData = new QR8bitByte(data);
		this.dataList.push(newData);
		this.dataCache = null;
	},
	
	isDark : function(row, col) {
		if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
			throw new Error(row + "," + col);
		}
		return this.modules[row][col];
	},

	getModuleCount : function() {
		return this.moduleCount;
	},
	
	make : function() {
		// Calculate automatically typeNumber if provided is < 1
		if (this.typeNumber < 1 ){
			var typeNumber = 1;
			for (typeNumber = 1; typeNumber < 40; typeNumber++) {
				var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);

				var buffer = new QRBitBuffer();
				var totalDataCount = 0;
				for (var i = 0; i < rsBlocks.length; i++) {
					totalDataCount += rsBlocks[i].dataCount;
				}

				for (var x = 0; x < this.dataList.length; x++) {
					var data = this.dataList[x];
					buffer.put(data.mode, 4);
					buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber) );
					data.write(buffer);
				}
				if (buffer.getLengthInBits() <= totalDataCount * 8)
					break;
			}
			this.typeNumber = typeNumber;
		}
		this.makeImpl(false, this.getBestMaskPattern() );
	},
	
	makeImpl : function(test, maskPattern) {
		
		this.moduleCount = this.typeNumber * 4 + 17;
		this.modules = new Array(this.moduleCount);
		
		for (var row = 0; row < this.moduleCount; row++) {
			
			this.modules[row] = new Array(this.moduleCount);
			
			for (var col = 0; col < this.moduleCount; col++) {
				this.modules[row][col] = null;//(col + row) % 3;
			}
		}
	
		this.setupPositionProbePattern(0, 0);
		this.setupPositionProbePattern(this.moduleCount - 7, 0);
		this.setupPositionProbePattern(0, this.moduleCount - 7);
		this.setupPositionAdjustPattern();
		this.setupTimingPattern();
		this.setupTypeInfo(test, maskPattern);
		
		if (this.typeNumber >= 7) {
			this.setupTypeNumber(test);
		}
	
		if (this.dataCache === null) {
			this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
		}
	
		this.mapData(this.dataCache, maskPattern);
	},

	setupPositionProbePattern : function(row, col)  {
		
		for (var r = -1; r <= 7; r++) {
			
			if (row + r <= -1 || this.moduleCount <= row + r) continue;
			
			for (var c = -1; c <= 7; c++) {
				
				if (col + c <= -1 || this.moduleCount <= col + c) continue;
				
				if ( (0 <= r && r <= 6 && (c === 0 || c === 6) ) || 
                     (0 <= c && c <= 6 && (r === 0 || r === 6) ) || 
                     (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {
					this.modules[row + r][col + c] = true;
				} else {
					this.modules[row + r][col + c] = false;
				}
			}		
		}		
	},
	
	getBestMaskPattern : function() {
	
		var minLostPoint = 0;
		var pattern = 0;
	
		for (var i = 0; i < 8; i++) {
			
			this.makeImpl(true, i);
	
			var lostPoint = QRUtil.getLostPoint(this);
	
			if (i === 0 || minLostPoint >  lostPoint) {
				minLostPoint = lostPoint;
				pattern = i;
			}
		}
	
		return pattern;
	},
	
	createMovieClip : function(target_mc, instance_name, depth) {
	
		var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
		var cs = 1;
	
		this.make();

		for (var row = 0; row < this.modules.length; row++) {
			
			var y = row * cs;
			
			for (var col = 0; col < this.modules[row].length; col++) {
	
				var x = col * cs;
				var dark = this.modules[row][col];
			
				if (dark) {
					qr_mc.beginFill(0, 100);
					qr_mc.moveTo(x, y);
					qr_mc.lineTo(x + cs, y);
					qr_mc.lineTo(x + cs, y + cs);
					qr_mc.lineTo(x, y + cs);
					qr_mc.endFill();
				}
			}
		}
		
		return qr_mc;
	},

	setupTimingPattern : function() {
		
		for (var r = 8; r < this.moduleCount - 8; r++) {
			if (this.modules[r][6] !== null) {
				continue;
			}
			this.modules[r][6] = (r % 2 === 0);
		}
	
		for (var c = 8; c < this.moduleCount - 8; c++) {
			if (this.modules[6][c] !== null) {
				continue;
			}
			this.modules[6][c] = (c % 2 === 0);
		}
	},
	
	setupPositionAdjustPattern : function() {
	
		var pos = QRUtil.getPatternPosition(this.typeNumber);
		
		for (var i = 0; i < pos.length; i++) {
		
			for (var j = 0; j < pos.length; j++) {
			
				var row = pos[i];
				var col = pos[j];
				
				if (this.modules[row][col] !== null) {
					continue;
				}
				
				for (var r = -2; r <= 2; r++) {
				
					for (var c = -2; c <= 2; c++) {
					
						if (Math.abs(r) === 2 || 
                            Math.abs(c) === 2 ||
                            (r === 0 && c === 0) ) {
							this.modules[row + r][col + c] = true;
						} else {
							this.modules[row + r][col + c] = false;
						}
					}
				}
			}
		}
	},
	
	setupTypeNumber : function(test) {
	
		var bits = QRUtil.getBCHTypeNumber(this.typeNumber);
        var mod;
	
		for (var i = 0; i < 18; i++) {
			mod = (!test && ( (bits >> i) & 1) === 1);
			this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
		}
	
		for (var x = 0; x < 18; x++) {
			mod = (!test && ( (bits >> x) & 1) === 1);
			this.modules[x % 3 + this.moduleCount - 8 - 3][Math.floor(x / 3)] = mod;
		}
	},
	
	setupTypeInfo : function(test, maskPattern) {
	
		var data = (this.errorCorrectLevel << 3) | maskPattern;
		var bits = QRUtil.getBCHTypeInfo(data);
        var mod;
	
		// vertical		
		for (var v = 0; v < 15; v++) {
	
			mod = (!test && ( (bits >> v) & 1) === 1);
	
			if (v < 6) {
				this.modules[v][8] = mod;
			} else if (v < 8) {
				this.modules[v + 1][8] = mod;
			} else {
				this.modules[this.moduleCount - 15 + v][8] = mod;
			}
		}
	
		// horizontal
		for (var h = 0; h < 15; h++) {
	
			mod = (!test && ( (bits >> h) & 1) === 1);
			
			if (h < 8) {
				this.modules[8][this.moduleCount - h - 1] = mod;
			} else if (h < 9) {
				this.modules[8][15 - h - 1 + 1] = mod;
			} else {
				this.modules[8][15 - h - 1] = mod;
			}
		}
	
		// fixed module
		this.modules[this.moduleCount - 8][8] = (!test);
	
	},
	
	mapData : function(data, maskPattern) {
		
		var inc = -1;
		var row = this.moduleCount - 1;
		var bitIndex = 7;
		var byteIndex = 0;
		
		for (var col = this.moduleCount - 1; col > 0; col -= 2) {
	
			if (col === 6) col--;
	
			while (true) {
	
				for (var c = 0; c < 2; c++) {
					
					if (this.modules[row][col - c] === null) {
						
						var dark = false;
	
						if (byteIndex < data.length) {
							dark = ( ( (data[byteIndex] >>> bitIndex) & 1) === 1);
						}
	
						var mask = QRUtil.getMask(maskPattern, row, col - c);
	
						if (mask) {
							dark = !dark;
						}
						
						this.modules[row][col - c] = dark;
						bitIndex--;
	
						if (bitIndex === -1) {
							byteIndex++;
							bitIndex = 7;
						}
					}
				}
								
				row += inc;
	
				if (row < 0 || this.moduleCount <= row) {
					row -= inc;
					inc = -inc;
					break;
				}
			}
		}
		
	}

};

QRCode.PAD0 = 0xEC;
QRCode.PAD1 = 0x11;

QRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {
	
	var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
	
	var buffer = new QRBitBuffer();
	
	for (var i = 0; i < dataList.length; i++) {
		var data = dataList[i];
		buffer.put(data.mode, 4);
		buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber) );
		data.write(buffer);
	}

	// calc num max data.
	var totalDataCount = 0;
	for (var x = 0; x < rsBlocks.length; x++) {
		totalDataCount += rsBlocks[x].dataCount;
	}

	if (buffer.getLengthInBits() > totalDataCount * 8) {
		throw new Error("code length overflow. (" + 
            buffer.getLengthInBits() + 
            ">" +  
            totalDataCount * 8 + 
            ")");
	}

	// end code
	if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
		buffer.put(0, 4);
	}

	// padding
	while (buffer.getLengthInBits() % 8 !== 0) {
		buffer.putBit(false);
	}

	// padding
	while (true) {
		
		if (buffer.getLengthInBits() >= totalDataCount * 8) {
			break;
		}
		buffer.put(QRCode.PAD0, 8);
		
		if (buffer.getLengthInBits() >= totalDataCount * 8) {
			break;
		}
		buffer.put(QRCode.PAD1, 8);
	}

	return QRCode.createBytes(buffer, rsBlocks);
};

QRCode.createBytes = function(buffer, rsBlocks) {

	var offset = 0;
	
	var maxDcCount = 0;
	var maxEcCount = 0;
	
	var dcdata = new Array(rsBlocks.length);
	var ecdata = new Array(rsBlocks.length);
	
	for (var r = 0; r < rsBlocks.length; r++) {

		var dcCount = rsBlocks[r].dataCount;
		var ecCount = rsBlocks[r].totalCount - dcCount;

		maxDcCount = Math.max(maxDcCount, dcCount);
		maxEcCount = Math.max(maxEcCount, ecCount);
		
		dcdata[r] = new Array(dcCount);
		
		for (var i = 0; i < dcdata[r].length; i++) {
			dcdata[r][i] = 0xff & buffer.buffer[i + offset];
		}
		offset += dcCount;
		
		var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
		var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);

		var modPoly = rawPoly.mod(rsPoly);
		ecdata[r] = new Array(rsPoly.getLength() - 1);
		for (var x = 0; x < ecdata[r].length; x++) {
            var modIndex = x + modPoly.getLength() - ecdata[r].length;
			ecdata[r][x] = (modIndex >= 0)? modPoly.get(modIndex) : 0;
		}

	}
	
	var totalCodeCount = 0;
	for (var y = 0; y < rsBlocks.length; y++) {
		totalCodeCount += rsBlocks[y].totalCount;
	}

	var data = new Array(totalCodeCount);
	var index = 0;

	for (var z = 0; z < maxDcCount; z++) {
		for (var s = 0; s < rsBlocks.length; s++) {
			if (z < dcdata[s].length) {
				data[index++] = dcdata[s][z];
			}
		}
	}

	for (var xx = 0; xx < maxEcCount; xx++) {
		for (var t = 0; t < rsBlocks.length; t++) {
			if (xx < ecdata[t].length) {
				data[index++] = ecdata[t][xx];
			}
		}
	}

	return data;

};

module.exports = QRCode;


/***/ }),

/***/ 2309:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { warn, debug } = __webpack_require__(3750);
const Cell = __webpack_require__(1205);
const { ColSpanCell, RowSpanCell } = Cell;

(function () {
  function next(alloc, col) {
    if (alloc[col] > 0) {
      return next(alloc, col + 1);
    }
    return col;
  }

  function layoutTable(table) {
    let alloc = {};
    table.forEach(function (row, rowIndex) {
      let col = 0;
      row.forEach(function (cell) {
        cell.y = rowIndex;
        // Avoid erroneous call to next() on first row
        cell.x = rowIndex ? next(alloc, col) : col;
        const rowSpan = cell.rowSpan || 1;
        const colSpan = cell.colSpan || 1;
        if (rowSpan > 1) {
          for (let cs = 0; cs < colSpan; cs++) {
            alloc[cell.x + cs] = rowSpan;
          }
        }
        col = cell.x + colSpan;
      });
      Object.keys(alloc).forEach((idx) => {
        alloc[idx]--;
        if (alloc[idx] < 1) delete alloc[idx];
      });
    });
  }

  function maxWidth(table) {
    let mw = 0;
    table.forEach(function (row) {
      row.forEach(function (cell) {
        mw = Math.max(mw, cell.x + (cell.colSpan || 1));
      });
    });
    return mw;
  }

  function maxHeight(table) {
    return table.length;
  }

  function cellsConflict(cell1, cell2) {
    let yMin1 = cell1.y;
    let yMax1 = cell1.y - 1 + (cell1.rowSpan || 1);
    let yMin2 = cell2.y;
    let yMax2 = cell2.y - 1 + (cell2.rowSpan || 1);
    let yConflict = !(yMin1 > yMax2 || yMin2 > yMax1);

    let xMin1 = cell1.x;
    let xMax1 = cell1.x - 1 + (cell1.colSpan || 1);
    let xMin2 = cell2.x;
    let xMax2 = cell2.x - 1 + (cell2.colSpan || 1);
    let xConflict = !(xMin1 > xMax2 || xMin2 > xMax1);

    return yConflict && xConflict;
  }

  function conflictExists(rows, x, y) {
    let i_max = Math.min(rows.length - 1, y);
    let cell = { x: x, y: y };
    for (let i = 0; i <= i_max; i++) {
      let row = rows[i];
      for (let j = 0; j < row.length; j++) {
        if (cellsConflict(cell, row[j])) {
          return true;
        }
      }
    }
    return false;
  }

  function allBlank(rows, y, xMin, xMax) {
    for (let x = xMin; x < xMax; x++) {
      if (conflictExists(rows, x, y)) {
        return false;
      }
    }
    return true;
  }

  function addRowSpanCells(table) {
    table.forEach(function (row, rowIndex) {
      row.forEach(function (cell) {
        for (let i = 1; i < cell.rowSpan; i++) {
          let rowSpanCell = new RowSpanCell(cell);
          rowSpanCell.x = cell.x;
          rowSpanCell.y = cell.y + i;
          rowSpanCell.colSpan = cell.colSpan;
          insertCell(rowSpanCell, table[rowIndex + i]);
        }
      });
    });
  }

  function addColSpanCells(cellRows) {
    for (let rowIndex = cellRows.length - 1; rowIndex >= 0; rowIndex--) {
      let cellColumns = cellRows[rowIndex];
      for (let columnIndex = 0; columnIndex < cellColumns.length; columnIndex++) {
        let cell = cellColumns[columnIndex];
        for (let k = 1; k < cell.colSpan; k++) {
          let colSpanCell = new ColSpanCell();
          colSpanCell.x = cell.x + k;
          colSpanCell.y = cell.y;
          cellColumns.splice(columnIndex + 1, 0, colSpanCell);
        }
      }
    }
  }

  function insertCell(cell, row) {
    let x = 0;
    while (x < row.length && row[x].x < cell.x) {
      x++;
    }
    row.splice(x, 0, cell);
  }

  function fillInTable(table) {
    let h_max = maxHeight(table);
    let w_max = maxWidth(table);
    debug(`Max rows: ${h_max}; Max cols: ${w_max}`);
    for (let y = 0; y < h_max; y++) {
      for (let x = 0; x < w_max; x++) {
        if (!conflictExists(table, x, y)) {
          let opts = { x: x, y: y, colSpan: 1, rowSpan: 1 };
          x++;
          while (x < w_max && !conflictExists(table, x, y)) {
            opts.colSpan++;
            x++;
          }
          let y2 = y + 1;
          while (y2 < h_max && allBlank(table, y2, opts.x, opts.x + opts.colSpan)) {
            opts.rowSpan++;
            y2++;
          }
          let cell = new Cell(opts);
          cell.x = opts.x;
          cell.y = opts.y;
          warn(`Missing cell at ${cell.y}-${cell.x}.`);
          insertCell(cell, table[y]);
        }
      }
    }
  }

  function generateCells(rows) {
    return rows.map(function (row) {
      if (!Array.isArray(row)) {
        let key = Object.keys(row)[0];
        row = row[key];
        if (Array.isArray(row)) {
          row = row.slice();
          row.unshift(key);
        } else {
          row = [key, row];
        }
      }
      return row.map(function (cell) {
        return new Cell(cell);
      });
    });
  }

  function makeTableLayout(rows) {
    let cellRows = generateCells(rows);
    layoutTable(cellRows);
    fillInTable(cellRows);
    addRowSpanCells(cellRows);
    addColSpanCells(cellRows);
    return cellRows;
  }

  module.exports = {
    makeTableLayout: makeTableLayout,
    layoutTable: layoutTable,
    addRowSpanCells: addRowSpanCells,
    maxWidth: maxWidth,
    fillInTable: fillInTable,
    computeWidths: makeComputeWidths('colSpan', 'desiredWidth', 'x', 1),
    computeHeights: makeComputeWidths('rowSpan', 'desiredHeight', 'y', 1),
  };
})();

function makeComputeWidths(colSpan, desiredWidth, x, forcedMin) {
  return function (vals, table) {
    let result = [];
    let spanners = [];
    let auto = {};
    table.forEach(function (row) {
      row.forEach(function (cell) {
        if ((cell[colSpan] || 1) > 1) {
          spanners.push(cell);
        } else {
          result[cell[x]] = Math.max(result[cell[x]] || 0, cell[desiredWidth] || 0, forcedMin);
        }
      });
    });

    vals.forEach(function (val, index) {
      if (typeof val === 'number') {
        result[index] = val;
      }
    });

    //spanners.forEach(function(cell){
    for (let k = spanners.length - 1; k >= 0; k--) {
      let cell = spanners[k];
      let span = cell[colSpan];
      let col = cell[x];
      let existingWidth = result[col];
      let editableCols = typeof vals[col] === 'number' ? 0 : 1;
      if (typeof existingWidth === 'number') {
        for (let i = 1; i < span; i++) {
          existingWidth += 1 + result[col + i];
          if (typeof vals[col + i] !== 'number') {
            editableCols++;
          }
        }
      } else {
        existingWidth = desiredWidth === 'desiredWidth' ? cell.desiredWidth - 1 : 1;
        if (!auto[col] || auto[col] < existingWidth) {
          auto[col] = existingWidth;
        }
      }

      if (cell[desiredWidth] > existingWidth) {
        let i = 0;
        while (editableCols > 0 && cell[desiredWidth] > existingWidth) {
          if (typeof vals[col + i] !== 'number') {
            let dif = Math.round((cell[desiredWidth] - existingWidth) / editableCols);
            existingWidth += dif;
            result[col + i] += dif;
            editableCols--;
          }
          i++;
        }
      }
    }

    Object.assign(vals, result, auto);
    for (let j = 0; j < vals.length; j++) {
      vals[j] = Math.max(forcedMin, vals[j] || 0);
    }
  };
}


/***/ }),

/***/ 2350:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fromEventPattern = void 0;
var Observable_1 = __webpack_require__(541);
var isFunction_1 = __webpack_require__(8403);
var mapOneOrManyArgs_1 = __webpack_require__(4078);
function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
    }
    return new Observable_1.Observable(function (subscriber) {
        var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue = addHandler(handler);
        return isFunction_1.isFunction(removeHandler) ? function () { return removeHandler(handler, retValue); } : undefined;
    });
}
exports.fromEventPattern = fromEventPattern;
//# sourceMappingURL=fromEventPattern.js.map

/***/ }),

/***/ 2358:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fs = __webpack_require__(9896)
var polyfills = __webpack_require__(9823)
var legacy = __webpack_require__(1524)
var clone = __webpack_require__(214)

var util = __webpack_require__(9023)

/* istanbul ignore next - node 0.x polyfill */
var gracefulQueue
var previousSymbol

/* istanbul ignore else - node 0.x polyfill */
if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
  gracefulQueue = Symbol.for('graceful-fs.queue')
  // This is used in testing by future versions
  previousSymbol = Symbol.for('graceful-fs.previous')
} else {
  gracefulQueue = '___graceful-fs.queue'
  previousSymbol = '___graceful-fs.previous'
}

function noop () {}

function publishQueue(context, queue) {
  Object.defineProperty(context, gracefulQueue, {
    get: function() {
      return queue
    }
  })
}

var debug = noop
if (util.debuglog)
  debug = util.debuglog('gfs4')
else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
  debug = function() {
    var m = util.format.apply(util, arguments)
    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
    console.error(m)
  }

// Once time initialization
if (!fs[gracefulQueue]) {
  // This queue can be shared by multiple loaded instances
  var queue = global[gracefulQueue] || []
  publishQueue(fs, queue)

  // Patch fs.close/closeSync to shared queue version, because we need
  // to retry() whenever a close happens *anywhere* in the program.
  // This is essential when multiple graceful-fs instances are
  // in play at the same time.
  fs.close = (function (fs$close) {
    function close (fd, cb) {
      return fs$close.call(fs, fd, function (err) {
        // This function uses the graceful-fs shared queue
        if (!err) {
          resetQueue()
        }

        if (typeof cb === 'function')
          cb.apply(this, arguments)
      })
    }

    Object.defineProperty(close, previousSymbol, {
      value: fs$close
    })
    return close
  })(fs.close)

  fs.closeSync = (function (fs$closeSync) {
    function closeSync (fd) {
      // This function uses the graceful-fs shared queue
      fs$closeSync.apply(fs, arguments)
      resetQueue()
    }

    Object.defineProperty(closeSync, previousSymbol, {
      value: fs$closeSync
    })
    return closeSync
  })(fs.closeSync)

  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
    process.on('exit', function() {
      debug(fs[gracefulQueue])
      __webpack_require__(2613).equal(fs[gracefulQueue].length, 0)
    })
  }
}

if (!global[gracefulQueue]) {
  publishQueue(global, fs[gracefulQueue]);
}

module.exports = patch(clone(fs))
if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
    module.exports = patch(fs)
    fs.__patched = true;
}

function patch (fs) {
  // Everything that references the open() function needs to be in here
  polyfills(fs)
  fs.gracefulify = patch

  fs.createReadStream = createReadStream
  fs.createWriteStream = createWriteStream
  var fs$readFile = fs.readFile
  fs.readFile = readFile
  function readFile (path, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$readFile(path, options, cb)

    function go$readFile (path, options, cb, startTime) {
      return fs$readFile(path, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  var fs$writeFile = fs.writeFile
  fs.writeFile = writeFile
  function writeFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$writeFile(path, data, options, cb)

    function go$writeFile (path, data, options, cb, startTime) {
      return fs$writeFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  var fs$appendFile = fs.appendFile
  if (fs$appendFile)
    fs.appendFile = appendFile
  function appendFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$appendFile(path, data, options, cb)

    function go$appendFile (path, data, options, cb, startTime) {
      return fs$appendFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  var fs$copyFile = fs.copyFile
  if (fs$copyFile)
    fs.copyFile = copyFile
  function copyFile (src, dest, flags, cb) {
    if (typeof flags === 'function') {
      cb = flags
      flags = 0
    }
    return go$copyFile(src, dest, flags, cb)

    function go$copyFile (src, dest, flags, cb, startTime) {
      return fs$copyFile(src, dest, flags, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  var fs$readdir = fs.readdir
  fs.readdir = readdir
  var noReaddirOptionVersions = /^v[0-5]\./
  function readdir (path, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    var go$readdir = noReaddirOptionVersions.test(process.version)
      ? function go$readdir (path, options, cb, startTime) {
        return fs$readdir(path, fs$readdirCallback(
          path, options, cb, startTime
        ))
      }
      : function go$readdir (path, options, cb, startTime) {
        return fs$readdir(path, options, fs$readdirCallback(
          path, options, cb, startTime
        ))
      }

    return go$readdir(path, options, cb)

    function fs$readdirCallback (path, options, cb, startTime) {
      return function (err, files) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([
            go$readdir,
            [path, options, cb],
            err,
            startTime || Date.now(),
            Date.now()
          ])
        else {
          if (files && files.sort)
            files.sort()

          if (typeof cb === 'function')
            cb.call(this, err, files)
        }
      }
    }
  }

  if (process.version.substr(0, 4) === 'v0.8') {
    var legStreams = legacy(fs)
    ReadStream = legStreams.ReadStream
    WriteStream = legStreams.WriteStream
  }

  var fs$ReadStream = fs.ReadStream
  if (fs$ReadStream) {
    ReadStream.prototype = Object.create(fs$ReadStream.prototype)
    ReadStream.prototype.open = ReadStream$open
  }

  var fs$WriteStream = fs.WriteStream
  if (fs$WriteStream) {
    WriteStream.prototype = Object.create(fs$WriteStream.prototype)
    WriteStream.prototype.open = WriteStream$open
  }

  Object.defineProperty(fs, 'ReadStream', {
    get: function () {
      return ReadStream
    },
    set: function (val) {
      ReadStream = val
    },
    enumerable: true,
    configurable: true
  })
  Object.defineProperty(fs, 'WriteStream', {
    get: function () {
      return WriteStream
    },
    set: function (val) {
      WriteStream = val
    },
    enumerable: true,
    configurable: true
  })

  // legacy names
  var FileReadStream = ReadStream
  Object.defineProperty(fs, 'FileReadStream', {
    get: function () {
      return FileReadStream
    },
    set: function (val) {
      FileReadStream = val
    },
    enumerable: true,
    configurable: true
  })
  var FileWriteStream = WriteStream
  Object.defineProperty(fs, 'FileWriteStream', {
    get: function () {
      return FileWriteStream
    },
    set: function (val) {
      FileWriteStream = val
    },
    enumerable: true,
    configurable: true
  })

  function ReadStream (path, options) {
    if (this instanceof ReadStream)
      return fs$ReadStream.apply(this, arguments), this
    else
      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
  }

  function ReadStream$open () {
    var that = this
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        if (that.autoClose)
          that.destroy()

        that.emit('error', err)
      } else {
        that.fd = fd
        that.emit('open', fd)
        that.read()
      }
    })
  }

  function WriteStream (path, options) {
    if (this instanceof WriteStream)
      return fs$WriteStream.apply(this, arguments), this
    else
      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
  }

  function WriteStream$open () {
    var that = this
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        that.destroy()
        that.emit('error', err)
      } else {
        that.fd = fd
        that.emit('open', fd)
      }
    })
  }

  function createReadStream (path, options) {
    return new fs.ReadStream(path, options)
  }

  function createWriteStream (path, options) {
    return new fs.WriteStream(path, options)
  }

  var fs$open = fs.open
  fs.open = open
  function open (path, flags, mode, cb) {
    if (typeof mode === 'function')
      cb = mode, mode = null

    return go$open(path, flags, mode, cb)

    function go$open (path, flags, mode, cb, startTime) {
      return fs$open(path, flags, mode, function (err, fd) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  return fs
}

function enqueue (elem) {
  debug('ENQUEUE', elem[0].name, elem[1])
  fs[gracefulQueue].push(elem)
  retry()
}

// keep track of the timeout between retry() calls
var retryTimer

// reset the startTime and lastTime to now
// this resets the start of the 60 second overall timeout as well as the
// delay between attempts so that we'll retry these jobs sooner
function resetQueue () {
  var now = Date.now()
  for (var i = 0; i < fs[gracefulQueue].length; ++i) {
    // entries that are only a length of 2 are from an older version, don't
    // bother modifying those since they'll be retried anyway.
    if (fs[gracefulQueue][i].length > 2) {
      fs[gracefulQueue][i][3] = now // startTime
      fs[gracefulQueue][i][4] = now // lastTime
    }
  }
  // call retry to make sure we're actively processing the queue
  retry()
}

function retry () {
  // clear the timer and remove it to help prevent unintended concurrency
  clearTimeout(retryTimer)
  retryTimer = undefined

  if (fs[gracefulQueue].length === 0)
    return

  var elem = fs[gracefulQueue].shift()
  var fn = elem[0]
  var args = elem[1]
  // these items may be unset if they were added by an older graceful-fs
  var err = elem[2]
  var startTime = elem[3]
  var lastTime = elem[4]

  // if we don't have a startTime we have no way of knowing if we've waited
  // long enough, so go ahead and retry this item now
  if (startTime === undefined) {
    debug('RETRY', fn.name, args)
    fn.apply(null, args)
  } else if (Date.now() - startTime >= 60000) {
    // it's been more than 60 seconds total, bail now
    debug('TIMEOUT', fn.name, args)
    var cb = args.pop()
    if (typeof cb === 'function')
      cb.call(null, err)
  } else {
    // the amount of time between the last attempt and right now
    var sinceAttempt = Date.now() - lastTime
    // the amount of time between when we first tried, and when we last tried
    // rounded up to at least 1
    var sinceStart = Math.max(lastTime - startTime, 1)
    // backoff. wait longer than the total time we've been retrying, but only
    // up to a maximum of 100ms
    var desiredDelay = Math.min(sinceStart * 1.2, 100)
    // it's been long enough since the last retry, do it again
    if (sinceAttempt >= desiredDelay) {
      debug('RETRY', fn.name, args)
      fn.apply(null, args.concat([startTime]))
    } else {
      // if we can't do this job yet, push it to the end of the queue
      // and let the next iteration check again
      fs[gracefulQueue].push(elem)
    }
  }

  // schedule our next run if one isn't already scheduled
  if (retryTimer === undefined) {
    retryTimer = setTimeout(retry, 0)
  }
}


/***/ }),

/***/ 2404:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const ansiStyles = __webpack_require__(3005);
const {stdout: stdoutColor, stderr: stderrColor} = __webpack_require__(9478);
const {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
} = __webpack_require__(7542);

const {isArray} = Array;

// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = [
	'ansi',
	'ansi',
	'ansi256',
	'ansi16m'
];

const styles = Object.create(null);

const applyOptions = (object, options = {}) => {
	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
		throw new Error('The `level` option should be an integer from 0 to 3');
	}

	// Detect level if not set manually
	const colorLevel = stdoutColor ? stdoutColor.level : 0;
	object.level = options.level === undefined ? colorLevel : options.level;
};

class ChalkClass {
	constructor(options) {
		// eslint-disable-next-line no-constructor-return
		return chalkFactory(options);
	}
}

const chalkFactory = options => {
	const chalk = {};
	applyOptions(chalk, options);

	chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);

	Object.setPrototypeOf(chalk, Chalk.prototype);
	Object.setPrototypeOf(chalk.template, chalk);

	chalk.template.constructor = () => {
		throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
	};

	chalk.template.Instance = ChalkClass;

	return chalk.template;
};

function Chalk(options) {
	return chalkFactory(options);
}

for (const [styleName, style] of Object.entries(ansiStyles)) {
	styles[styleName] = {
		get() {
			const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
			Object.defineProperty(this, styleName, {value: builder});
			return builder;
		}
	};
}

styles.visible = {
	get() {
		const builder = createBuilder(this, this._styler, true);
		Object.defineProperty(this, 'visible', {value: builder});
		return builder;
	}
};

const usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

for (const model of usedModels) {
	styles[model] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

for (const model of usedModels) {
	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	styles[bgModel] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

const proto = Object.defineProperties(() => {}, {
	...styles,
	level: {
		enumerable: true,
		get() {
			return this._generator.level;
		},
		set(level) {
			this._generator.level = level;
		}
	}
});

const createStyler = (open, close, parent) => {
	let openAll;
	let closeAll;
	if (parent === undefined) {
		openAll = open;
		closeAll = close;
	} else {
		openAll = parent.openAll + open;
		closeAll = close + parent.closeAll;
	}

	return {
		open,
		close,
		openAll,
		closeAll,
		parent
	};
};

const createBuilder = (self, _styler, _isEmpty) => {
	const builder = (...arguments_) => {
		if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
			// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
			return applyStyle(builder, chalkTag(builder, ...arguments_));
		}

		// Single argument is hot path, implicit coercion is faster than anything
		// eslint-disable-next-line no-implicit-coercion
		return applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));
	};

	// We alter the prototype because we must return a function, but there is
	// no way to create a function with a different prototype
	Object.setPrototypeOf(builder, proto);

	builder._generator = self;
	builder._styler = _styler;
	builder._isEmpty = _isEmpty;

	return builder;
};

const applyStyle = (self, string) => {
	if (self.level <= 0 || !string) {
		return self._isEmpty ? '' : string;
	}

	let styler = self._styler;

	if (styler === undefined) {
		return string;
	}

	const {openAll, closeAll} = styler;
	if (string.indexOf('\u001B') !== -1) {
		while (styler !== undefined) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			string = stringReplaceAll(string, styler.close, styler.open);

			styler = styler.parent;
		}
	}

	// We can move both next actions out of loop, because remaining actions in loop won't have
	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
	const lfIndex = string.indexOf('\n');
	if (lfIndex !== -1) {
		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
	}

	return openAll + string + closeAll;
};

let template;
const chalkTag = (chalk, ...strings) => {
	const [firstString] = strings;

	if (!isArray(firstString) || !isArray(firstString.raw)) {
		// If chalk() was called by itself or with a string,
		// return the string itself as a string.
		return strings.join(' ');
	}

	const arguments_ = strings.slice(1);
	const parts = [firstString.raw[0]];

	for (let i = 1; i < firstString.length; i++) {
		parts.push(
			String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'),
			String(firstString.raw[i])
		);
	}

	if (template === undefined) {
		template = __webpack_require__(6027);
	}

	return template(chalk, parts.join(''));
};

Object.defineProperties(Chalk.prototype, styles);

const chalk = Chalk(); // eslint-disable-line new-cap
chalk.supportsColor = stdoutColor;
chalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap
chalk.stderr.supportsColor = stderrColor;

module.exports = chalk;


/***/ }),

/***/ 2454:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.config = void 0;
exports.config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false,
};
//# sourceMappingURL=config.js.map

/***/ }),

/***/ 2460:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createObject = void 0;
function createObject(keys, values) {
    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
}
exports.createObject = createObject;
//# sourceMappingURL=createObject.js.map

/***/ }),

/***/ 2474:
/***/ ((module) => {



function isPromise(obj) {
  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}

/**
 * Return a function that will run a function asynchronously or synchronously
 *
 * example:
 * runAsync(wrappedFunction, callback)(...args);
 *
 * @param   {Function} func  Function to run
 * @param   {Function} [cb]    Callback function passed the `func` returned value
 * @param   {string} [proxyProperty] `this` property to be used for the callback factory
 * @return  {Function(arguments)} Arguments to pass to `func`. This function will in turn
 *                                return a Promise (Node >= 0.12) or call the callbacks.
 */

var runAsync = module.exports = function (func, cb, proxyProperty = 'async') {
  if (typeof cb === 'string') {
    proxyProperty = cb;
    cb = undefined;
  }
  cb = cb || function () {};

  return function () {

    var args = arguments;
    var originalThis = this;

    var promise = new Promise(function (resolve, reject) {
      var resolved = false;
      const wrappedResolve = function (value) {
        if (resolved) {
          console.warn('Run-async promise already resolved.')
        }
        resolved = true;
        resolve(value);
      }

      var rejected = false;
      const wrappedReject = function (value) {
        if (rejected) {
          console.warn('Run-async promise already rejected.')
        }
        rejected = true;
        reject(value);
      }

      var usingCallback = false;
      var callbackConflict = false;
      var contextEnded = false;

      var doneFactory = function () {
        if (contextEnded) {
          console.warn('Run-async async() called outside a valid run-async context, callback will be ignored.');
          return function() {};
        }
        if (callbackConflict) {
          console.warn('Run-async wrapped function (async) returned a promise.\nCalls to async() callback can have unexpected results.');
        }
        usingCallback = true;
        return function (err, value) {
          if (err) {
            wrappedReject(err);
          } else {
            wrappedResolve(value);
          }
        };
      };

      var _this;
      if (originalThis && proxyProperty && Proxy) {
        _this = new Proxy(originalThis, {
          get(_target, prop) {
            if (prop === proxyProperty) {
              if (prop in _target) {
                console.warn(`${proxyProperty} property is been shadowed by run-sync`);
              }
              return doneFactory;
            }

            return Reflect.get(...arguments);
          },
        });
      } else {
        _this = { [proxyProperty]: doneFactory };
      }

      var answer = func.apply(_this, Array.prototype.slice.call(args));

      if (usingCallback) {
        if (isPromise(answer)) {
          console.warn('Run-async wrapped function (sync) returned a promise but async() callback must be executed to resolve.');
        }
      } else {
        if (isPromise(answer)) {
          callbackConflict = true;
          answer.then(wrappedResolve, wrappedReject);
        } else {
          wrappedResolve(answer);
        }
      }
      contextEnded = true;
    });

    promise.then(cb.bind(null, null), cb);

    return promise;
  }
};

runAsync.cb = function (func, cb) {
  return runAsync(function () {
    var args = Array.prototype.slice.call(arguments);
    if (args.length === func.length - 1) {
      args.push(this.async());
    }
    return func.apply(this, args);
  }, cb);
};


/***/ }),

/***/ 2505:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Adapted from https://github.com/sindresorhus/make-dir
// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

const path = __webpack_require__(6928)

// https://github.com/nodejs/node/issues/8987
// https://github.com/libuv/libuv/pull/1088
module.exports.checkPath = function checkPath (pth) {
  if (process.platform === 'win32') {
    const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path.parse(pth).root, ''))

    if (pathHasInvalidWinCharacters) {
      const error = new Error(`Path contains invalid characters: ${pth}`)
      error.code = 'EINVAL'
      throw error
    }
  }
}


/***/ }),

/***/ 2525:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withLatestFrom = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
var identity_1 = __webpack_require__(8489);
var noop_1 = __webpack_require__(8563);
var args_1 = __webpack_require__(3522);
function withLatestFrom() {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
    }
    var project = args_1.popResultSelector(inputs);
    return lift_1.operate(function (source, subscriber) {
        var len = inputs.length;
        var otherValues = new Array(len);
        var hasValue = inputs.map(function () { return false; });
        var ready = false;
        var _loop_1 = function (i) {
            innerFrom_1.innerFrom(inputs[i]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                otherValues[i] = value;
                if (!ready && !hasValue[i]) {
                    hasValue[i] = true;
                    (ready = hasValue.every(identity_1.identity)) && (hasValue = null);
                }
            }, noop_1.noop));
        };
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            if (ready) {
                var values = __spreadArray([value], __read(otherValues));
                subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
            }
        }));
    });
}
exports.withLatestFrom = withLatestFrom;
//# sourceMappingURL=withLatestFrom.js.map

/***/ }),

/***/ 2554:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EMPTY_OBSERVER = exports.SafeSubscriber = exports.Subscriber = void 0;
var isFunction_1 = __webpack_require__(8403);
var Subscription_1 = __webpack_require__(1981);
var config_1 = __webpack_require__(2454);
var reportUnhandledError_1 = __webpack_require__(7394);
var noop_1 = __webpack_require__(8563);
var NotificationFactories_1 = __webpack_require__(681);
var timeoutProvider_1 = __webpack_require__(7826);
var errorContext_1 = __webpack_require__(798);
var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if (Subscription_1.isSubscription(destination)) {
                destination.add(_this);
            }
        }
        else {
            _this.destination = exports.EMPTY_OBSERVER;
        }
        return _this;
    }
    Subscriber.create = function (next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function (value) {
        if (this.isStopped) {
            handleStoppedNotification(NotificationFactories_1.nextNotification(value), this);
        }
        else {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (this.isStopped) {
            handleStoppedNotification(NotificationFactories_1.errorNotification(err), this);
        }
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (this.isStopped) {
            handleStoppedNotification(NotificationFactories_1.COMPLETE_NOTIFICATION, this);
        }
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        try {
            this.destination.error(err);
        }
        finally {
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function () {
        try {
            this.destination.complete();
        }
        finally {
            this.unsubscribe();
        }
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = (function () {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function (value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
            try {
                partialObserver.next(value);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    ConsumerObserver.prototype.error = function (err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
            try {
                partialObserver.error(err);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
        else {
            handleUnhandledError(err);
        }
    };
    ConsumerObserver.prototype.complete = function () {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
            try {
                partialObserver.complete();
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    return ConsumerObserver;
}());
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction_1.isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                error: error !== null && error !== void 0 ? error : undefined,
                complete: complete !== null && complete !== void 0 ? complete : undefined,
            };
        }
        else {
            var context_1;
            if (_this && config_1.config.useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () { return _this.unsubscribe(); };
                partialObserver = {
                    next: observerOrNext.next && bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                };
            }
            else {
                partialObserver = observerOrNext;
            }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber));
exports.SafeSubscriber = SafeSubscriber;
function handleUnhandledError(error) {
    if (config_1.config.useDeprecatedSynchronousErrorHandling) {
        errorContext_1.captureError(error);
    }
    else {
        reportUnhandledError_1.reportUnhandledError(error);
    }
}
function defaultErrorHandler(err) {
    throw err;
}
function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config_1.config.onStoppedNotification;
    onStoppedNotification && timeoutProvider_1.timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
}
exports.EMPTY_OBSERVER = {
    closed: true,
    next: noop_1.noop,
    error: defaultErrorHandler,
    complete: noop_1.noop,
};
//# sourceMappingURL=Subscriber.js.map

/***/ }),

/***/ 2571:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var Buffer = (__webpack_require__(7475).Buffer);

// Export Node.js internal encodings.

module.exports = {
    // Encodings
    utf8:   { type: "_internal", bomAware: true},
    cesu8:  { type: "_internal", bomAware: true},
    unicode11utf8: "utf8",

    ucs2:   { type: "_internal", bomAware: true},
    utf16le: "ucs2",

    binary: { type: "_internal" },
    base64: { type: "_internal" },
    hex:    { type: "_internal" },

    // Codec.
    _internal: InternalCodec,
};

//------------------------------------------------------------------------------

function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;

    if (this.enc === "base64")
        this.encoder = InternalEncoderBase64;
    else if (this.enc === "cesu8") {
        this.enc = "utf8"; // Use utf8 for decoding.
        this.encoder = InternalEncoderCesu8;

        // Add decoder for versions of Node not supporting CESU-8
        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
            this.decoder = InternalDecoderCesu8;
            this.defaultCharUnicode = iconv.defaultCharUnicode;
        }
    }
}

InternalCodec.prototype.encoder = InternalEncoder;
InternalCodec.prototype.decoder = InternalDecoder;

//------------------------------------------------------------------------------

// We use node.js internal decoder. Its signature is the same as ours.
var StringDecoder = (__webpack_require__(3193).StringDecoder);

if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
    StringDecoder.prototype.end = function() {};


function InternalDecoder(options, codec) {
    StringDecoder.call(this, codec.enc);
}

InternalDecoder.prototype = StringDecoder.prototype;


//------------------------------------------------------------------------------
// Encoder is mostly trivial

function InternalEncoder(options, codec) {
    this.enc = codec.enc;
}

InternalEncoder.prototype.write = function(str) {
    return Buffer.from(str, this.enc);
}

InternalEncoder.prototype.end = function() {
}


//------------------------------------------------------------------------------
// Except base64 encoder, which must keep its state.

function InternalEncoderBase64(options, codec) {
    this.prevStr = '';
}

InternalEncoderBase64.prototype.write = function(str) {
    str = this.prevStr + str;
    var completeQuads = str.length - (str.length % 4);
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);

    return Buffer.from(str, "base64");
}

InternalEncoderBase64.prototype.end = function() {
    return Buffer.from(this.prevStr, "base64");
}


//------------------------------------------------------------------------------
// CESU-8 encoder is also special.

function InternalEncoderCesu8(options, codec) {
}

InternalEncoderCesu8.prototype.write = function(str) {
    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;
    for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        // Naive implementation, but it works because CESU-8 is especially easy
        // to convert from UTF-16 (which all JS strings are encoded in).
        if (charCode < 0x80)
            buf[bufIdx++] = charCode;
        else if (charCode < 0x800) {
            buf[bufIdx++] = 0xC0 + (charCode >>> 6);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
        }
        else { // charCode will always be < 0x10000 in javascript.
            buf[bufIdx++] = 0xE0 + (charCode >>> 12);
            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
        }
    }
    return buf.slice(0, bufIdx);
}

InternalEncoderCesu8.prototype.end = function() {
}

//------------------------------------------------------------------------------
// CESU-8 decoder is not implemented in Node v4.0+

function InternalDecoderCesu8(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
}

InternalDecoderCesu8.prototype.write = function(buf) {
    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
        res = '';
    for (var i = 0; i < buf.length; i++) {
        var curByte = buf[i];
        if ((curByte & 0xC0) !== 0x80) { // Leading byte
            if (contBytes > 0) { // Previous code is invalid
                res += this.defaultCharUnicode;
                contBytes = 0;
            }

            if (curByte < 0x80) { // Single-byte code
                res += String.fromCharCode(curByte);
            } else if (curByte < 0xE0) { // Two-byte code
                acc = curByte & 0x1F;
                contBytes = 1; accBytes = 1;
            } else if (curByte < 0xF0) { // Three-byte code
                acc = curByte & 0x0F;
                contBytes = 2; accBytes = 1;
            } else { // Four or more are not supported for CESU-8.
                res += this.defaultCharUnicode;
            }
        } else { // Continuation byte
            if (contBytes > 0) { // We're waiting for it.
                acc = (acc << 6) | (curByte & 0x3f);
                contBytes--; accBytes++;
                if (contBytes === 0) {
                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                    if (accBytes === 2 && acc < 0x80 && acc > 0)
                        res += this.defaultCharUnicode;
                    else if (accBytes === 3 && acc < 0x800)
                        res += this.defaultCharUnicode;
                    else
                        // Actually add character.
                        res += String.fromCharCode(acc);
                }
            } else { // Unexpected continuation byte
                res += this.defaultCharUnicode;
            }
        }
    }
    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
    return res;
}

InternalDecoderCesu8.prototype.end = function() {
    var res = 0;
    if (this.contBytes > 0)
        res += this.defaultCharUnicode;
    return res;
}


/***/ }),

/***/ 2590:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const tinycolor = __webpack_require__(2123);

/**
 * @typedef {Object} TinyGradient.StopInput
 * @property {ColorInput} color
 * @property {number} pos
 */

/**
 * @typedef {Object} TinyGradient.StepValue
 * @type {number} [r]
 * @type {number} [g]
 * @type {number} [b]
 * @type {number} [h]
 * @type {number} [s]
 * @type {number} [v]
 * @type {number} [a]
 */

/**
 * @type {StepValue}
 */
const RGBA_MAX = { r: 256, g: 256, b: 256, a: 1 };

/**
 * @type {StepValue}
 */
const HSVA_MAX = { h: 360, s: 1, v: 1, a: 1 };

/**
 * Linearly compute the step size between start and end (not normalized)
 * @param {StepValue} start
 * @param {StepValue} end
 * @param {number} steps - number of desired steps
 * @return {StepValue}
 */
function stepize(start, end, steps) {
    let step = {};

    for (let k in start) {
        if (start.hasOwnProperty(k)) {
            step[k] = steps === 0 ? 0 : (end[k] - start[k]) / steps;
        }
    }

    return step;
}

/**
 * Compute the final step color
 * @param {StepValue} step - from `stepize`
 * @param {StepValue} start
 * @param {number} i - color index
 * @param {StepValue} max - rgba or hsva of maximum values for each channel
 * @return {StepValue}
 */
function interpolate(step, start, i, max) {
    let color = {};

    for (let k in start) {
        if (start.hasOwnProperty(k)) {
            color[k] = step[k] * i + start[k];
            color[k] = color[k] < 0 ? color[k] + max[k] : (max[k] !== 1 ? color[k] % max[k] : color[k]);
        }
    }

    return color;
}

/**
 * Generate gradient with RGBa interpolation
 * @param {StopInput} stop1
 * @param {StopInput} stop2
 * @param {number} steps
 * @return {tinycolor[]} color1 included, color2 excluded
 */
function interpolateRgb(stop1, stop2, steps) {
    const start = stop1.color.toRgb();
    const end = stop2.color.toRgb();
    const step = stepize(start, end, steps);
    let gradient = [stop1.color];

    for (let i = 1; i < steps; i++) {
        const color = interpolate(step, start, i, RGBA_MAX);
        gradient.push(tinycolor(color));
    }

    return gradient;
}

/**
 * Generate gradient with HSVa interpolation
 * @param {StopInput} stop1
 * @param {StopInput} stop2
 * @param {number} steps
 * @param {boolean|'long'|'short'} mode
 * @return {tinycolor[]} color1 included, color2 excluded
 */
function interpolateHsv(stop1, stop2, steps, mode) {
    const start = stop1.color.toHsv();
    const end = stop2.color.toHsv();

    // rgb interpolation if one of the steps in grayscale
    if (start.s === 0 || end.s === 0) {
        return interpolateRgb(stop1, stop2, steps);
    }

    let trigonometric;
    if (typeof mode === 'boolean') {
        trigonometric = mode;
    }
    else {
        const trigShortest = (start.h < end.h && end.h - start.h < 180) || (start.h > end.h && start.h - end.h > 180);
        trigonometric = (mode === 'long' && trigShortest) || (mode === 'short' && !trigShortest);
    }

    const step = stepize(start, end, steps);
    let gradient = [stop1.color];

    // recompute hue
    let diff;
    if ((start.h <= end.h && !trigonometric) || (start.h >= end.h && trigonometric)) {
        diff = end.h - start.h;
    }
    else if (trigonometric) {
        diff = 360 - end.h + start.h;
    }
    else {
        diff = 360 - start.h + end.h;
    }
    step.h = Math.pow(-1, trigonometric ? 1 : 0) * Math.abs(diff) / steps;

    for (let i = 1; i < steps; i++) {
        const color = interpolate(step, start, i, HSVA_MAX);
        gradient.push(tinycolor(color));
    }

    return gradient;
}

/**
 * Compute substeps between each stops
 * @param {StopInput[]} stops
 * @param {number} steps
 * @return {number[]}
 */
function computeSubsteps(stops, steps) {
    const l = stops.length;

    // validation
    steps = parseInt(steps, 10);

    if (isNaN(steps) || steps < 2) {
        throw new Error('Invalid number of steps (< 2)');
    }
    if (steps < l) {
        throw new Error('Number of steps cannot be inferior to number of stops');
    }

    // compute substeps from stop positions
    let substeps = [];

    for (let i = 1; i < l; i++) {
        const step = (steps - 1) * (stops[i].pos - stops[i - 1].pos);
        substeps.push(Math.max(1, Math.round(step)));
    }

    // adjust number of steps
    let totalSubsteps = 1;
    for (let n = l - 1; n--;) totalSubsteps += substeps[n];

    while (totalSubsteps !== steps) {
        if (totalSubsteps < steps) {
            const min = Math.min.apply(null, substeps);
            substeps[substeps.indexOf(min)]++;
            totalSubsteps++;
        }
        else {
            const max = Math.max.apply(null, substeps);
            substeps[substeps.indexOf(max)]--;
            totalSubsteps--;
        }
    }

    return substeps;
}

/**
 * Compute the color at a specific position
 * @param {StopInput[]} stops
 * @param {number} pos
 * @param {string} method
 * @param {StepValue} max
 * @returns {tinycolor}
 */
function computeAt(stops, pos, method, max) {
    if (pos < 0 || pos > 1) {
        throw new Error('Position must be between 0 and 1');
    }

    let start, end;
    for (let i = 0, l = stops.length; i < l - 1; i++) {
        if (pos >= stops[i].pos && pos < stops[i + 1].pos) {
            start = stops[i];
            end = stops[i + 1];
            break;
        }
    }

    if (!start) {
        start = end = stops[stops.length - 1];
    }

    const step = stepize(start.color[method](), end.color[method](), (end.pos - start.pos) * 100);
    const color = interpolate(step, start.color[method](), (pos - start.pos) * 100, max);
    return tinycolor(color);
}

class TinyGradient {
    /**
     * @param {StopInput[]|ColorInput[]} stops
     * @returns {TinyGradient}
     */
    constructor(stops) {
        // validation
        if (stops.length < 2) {
            throw new Error('Invalid number of stops (< 2)');
        }

        const havingPositions = stops[0].pos !== undefined;
        let l = stops.length;
        let p = -1;
        let lastColorLess = false;
        // create tinycolor objects and clean positions
        this.stops = stops.map((stop, i) => {
            const hasPosition = stop.pos !== undefined;
            if (havingPositions ^ hasPosition) {
                throw new Error('Cannot mix positionned and not posionned color stops');
            }

            if (hasPosition) {
                const hasColor = stop.color !== undefined;
                if (!hasColor && (lastColorLess || i === 0 || i === l - 1)) {
                    throw new Error('Cannot define two consecutive position-only stops');
                }
                lastColorLess = !hasColor;

                stop = {
                    color    : hasColor ? tinycolor(stop.color) : null,
                    colorLess: !hasColor,
                    pos      : stop.pos
                };

                if (stop.pos < 0 || stop.pos > 1) {
                    throw new Error('Color stops positions must be between 0 and 1');
                }
                else if (stop.pos < p) {
                    throw new Error('Color stops positions are not ordered');
                }
                p = stop.pos;
            }
            else {
                stop = {
                    color: tinycolor(stop.color !== undefined ? stop.color : stop),
                    pos  : i / (l - 1)
                };
            }

            return stop;
        });

        if (this.stops[0].pos !== 0) {
            this.stops.unshift({
                color: this.stops[0].color,
                pos  : 0
            });
            l++;
        }
        if (this.stops[l - 1].pos !== 1) {
            this.stops.push({
                color: this.stops[l - 1].color,
                pos  : 1
            });
        }
    }

    /**
     * Return new instance with reversed stops
     * @return {TinyGradient}
     */
    reverse() {
        let stops = [];

        this.stops.forEach(function (stop) {
            stops.push({
                color: stop.color,
                pos  : 1 - stop.pos
            });
        });

        return new TinyGradient(stops.reverse());
    }

    /**
     * Return new instance with looped stops
     * @return {TinyGradient}
     */
    loop() {
        let stops1 = [];
        let stops2 = [];

        this.stops.forEach((stop) => {
            stops1.push({
                color: stop.color,
                pos  : stop.pos / 2
            });
        });

        this.stops.slice(0, -1).forEach((stop) => {
            stops2.push({
                color: stop.color,
                pos  : 1 - stop.pos / 2
            });
        });

        return new TinyGradient(stops1.concat(stops2.reverse()));
    }

    /**
     * Generate gradient with RGBa interpolation
     * @param {number} steps
     * @return {tinycolor[]}
     */
    rgb(steps) {
        const substeps = computeSubsteps(this.stops, steps);
        let gradient = [];

        this.stops.forEach((stop, i) => {
            if (stop.colorLess) {
                stop.color = interpolateRgb(this.stops[i - 1], this.stops[i + 1], 2)[1];
            }
        });

        for (let i = 0, l = this.stops.length; i < l - 1; i++) {
            const rgb = interpolateRgb(this.stops[i], this.stops[i + 1], substeps[i]);
            gradient.splice(gradient.length, 0, ...rgb);
        }

        gradient.push(this.stops[this.stops.length - 1].color);

        return gradient;
    }

    /**
     * Generate gradient with HSVa interpolation
     * @param {number} steps
     * @param {boolean|'long'|'short'} [mode=false]
     *    - false to step in clockwise
     *    - true to step in trigonometric order
     *    - 'short' to use the shortest way
     *    - 'long' to use the longest way
     * @return {tinycolor[]}
     */
    hsv(steps, mode) {
        const substeps = computeSubsteps(this.stops, steps);
        let gradient = [];

        this.stops.forEach((stop, i) => {
            if (stop.colorLess) {
                stop.color = interpolateHsv(this.stops[i - 1], this.stops[i + 1], 2, mode)[1];
            }
        });

        for (let i = 0, l = this.stops.length; i < l - 1; i++) {
            const hsv = interpolateHsv(this.stops[i], this.stops[i + 1], substeps[i], mode);
            gradient.splice(gradient.length, 0, ...hsv);
        }

        gradient.push(this.stops[this.stops.length - 1].color);

        return gradient;
    }

    /**
     * Generate CSS3 command (no prefix) for this gradient
     * @param {String} [mode=linear] - 'linear' or 'radial'
     * @param {String} [direction] - default is 'to right' or 'ellipse at center'
     * @return {String}
     */
    css(mode, direction) {
        mode = mode || 'linear';
        direction = direction || (mode === 'linear' ? 'to right' : 'ellipse at center');

        let css = mode + '-gradient(' + direction;
        this.stops.forEach(function (stop) {
            css += ', ' + (stop.colorLess ? '' : stop.color.toRgbString() + ' ') + (stop.pos * 100) + '%';
        });
        css += ')';
        return css;
    }

    /**
     * Returns the color at specific position with RGBa interpolation
     * @param {number} pos, between 0 and 1
     * @return {tinycolor}
     */
    rgbAt(pos) {
        return computeAt(this.stops, pos, 'toRgb', RGBA_MAX);
    }

    /**
     * Returns the color at specific position with HSVa interpolation
     * @param {number} pos, between 0 and 1
     * @return {tinycolor}
     */
    hsvAt(pos) {
        return computeAt(this.stops, pos, 'toHsv', HSVA_MAX);
    }
}

/**
 * @param {StopInput[]|ColorInput[]|StopInput...|ColorInput...} stops
 * @returns {TinyGradient}
 */
module.exports = function (stops) {
    // varargs
    if (arguments.length === 1) {
        if (!Array.isArray(arguments[0])) {
            throw new Error('"stops" is not an array');
        }
        stops = arguments[0];
    }
    else {
        stops = Array.prototype.slice.call(arguments);
    }

    return new TinyGradient(stops);
};


/***/ }),

/***/ 2613:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("assert");

/***/ }),

/***/ 2625:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectUnsubscribedError = void 0;
var createErrorClass_1 = __webpack_require__(8377);
exports.ObjectUnsubscribedError = createErrorClass_1.createErrorClass(function (_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = 'ObjectUnsubscribedError';
        this.message = 'object unsubscribed';
    };
});
//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),

/***/ 2664:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.startWith = void 0;
var concat_1 = __webpack_require__(1780);
var args_1 = __webpack_require__(3522);
var lift_1 = __webpack_require__(4698);
function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var scheduler = args_1.popScheduler(values);
    return lift_1.operate(function (source, subscriber) {
        (scheduler ? concat_1.concat(values, source, scheduler) : concat_1.concat(values, source)).subscribe(subscriber);
    });
}
exports.startWith = startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),

/***/ 2668:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.connectable = void 0;
var Subject_1 = __webpack_require__(6118);
var Observable_1 = __webpack_require__(541);
var defer_1 = __webpack_require__(1258);
var DEFAULT_CONFIG = {
    connector: function () { return new Subject_1.Subject(); },
    resetOnDisconnect: true,
};
function connectable(source, config) {
    if (config === void 0) { config = DEFAULT_CONFIG; }
    var connection = null;
    var connector = config.connector, _a = config.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
    var subject = connector();
    var result = new Observable_1.Observable(function (subscriber) {
        return subject.subscribe(subscriber);
    });
    result.connect = function () {
        if (!connection || connection.closed) {
            connection = defer_1.defer(function () { return source; }).subscribe(subject);
            if (resetOnDisconnect) {
                connection.add(function () { return (subject = connector()); });
            }
        }
        return connection;
    };
    return result;
}
exports.connectable = connectable;
//# sourceMappingURL=connectable.js.map

/***/ }),

/***/ 2680:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(2203);


/***/ }),

/***/ 2685:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.raceInit = exports.race = void 0;
var Observable_1 = __webpack_require__(541);
var innerFrom_1 = __webpack_require__(2018);
var argsOrArgArray_1 = __webpack_require__(7882);
var OperatorSubscriber_1 = __webpack_require__(1908);
function race() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    sources = argsOrArgArray_1.argsOrArgArray(sources);
    return sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : new Observable_1.Observable(raceInit(sources));
}
exports.race = race;
function raceInit(sources) {
    return function (subscriber) {
        var subscriptions = [];
        var _loop_1 = function (i) {
            subscriptions.push(innerFrom_1.innerFrom(sources[i]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                if (subscriptions) {
                    for (var s = 0; s < subscriptions.length; s++) {
                        s !== i && subscriptions[s].unsubscribe();
                    }
                    subscriptions = null;
                }
                subscriber.next(value);
            })));
        };
        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
            _loop_1(i);
        }
    };
}
exports.raceInit = raceInit;
//# sourceMappingURL=race.js.map

/***/ }),

/***/ 2696:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var QRMode = __webpack_require__(9802);

function QR8bitByte(data) {
	this.mode = QRMode.MODE_8BIT_BYTE;
	this.data = data;
}

QR8bitByte.prototype = {

	getLength : function() {
		return this.data.length;
	},
	
	write : function(buffer) {
		for (var i = 0; i < this.data.length; i++) {
			// not JIS ...
			buffer.put(this.data.charCodeAt(i), 8);
		}
	}
};

module.exports = QR8bitByte;


/***/ }),

/***/ 2752:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const { stringify } = __webpack_require__(6140)
const { outputFile } = __webpack_require__(4074)

async function outputJson (file, data, options = {}) {
  const str = stringify(data, options)

  await outputFile(file, str, options)
}

module.exports = outputJson


/***/ }),

/***/ 2766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const Range = __webpack_require__(9165)
const Comparator = __webpack_require__(1994)
const { ANY } = Comparator
const satisfies = __webpack_require__(4483)
const compare = __webpack_require__(7910)

// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true

const subset = (sub, dom, options = {}) => {
  if (sub === dom) {
    return true
  }

  sub = new Range(sub, options)
  dom = new Range(dom, options)
  let sawNonNull = false

  OUTER: for (const simpleSub of sub.set) {
    for (const simpleDom of dom.set) {
      const isSub = simpleSubset(simpleSub, simpleDom, options)
      sawNonNull = sawNonNull || isSub !== null
      if (isSub) {
        continue OUTER
      }
    }
    // the null set is a subset of everything, but null simple ranges in
    // a complex range should be ignored.  so if we saw a non-null range,
    // then we know this isn't a subset, but if EVERY simple range was null,
    // then it is a subset.
    if (sawNonNull) {
      return false
    }
  }
  return true
}

const minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]
const minimumVersion = [new Comparator('>=0.0.0')]

const simpleSubset = (sub, dom, options) => {
  if (sub === dom) {
    return true
  }

  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) {
      return true
    } else if (options.includePrerelease) {
      sub = minimumVersionWithPreRelease
    } else {
      sub = minimumVersion
    }
  }

  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) {
      return true
    } else {
      dom = minimumVersion
    }
  }

  const eqSet = new Set()
  let gt, lt
  for (const c of sub) {
    if (c.operator === '>' || c.operator === '>=') {
      gt = higherGT(gt, c, options)
    } else if (c.operator === '<' || c.operator === '<=') {
      lt = lowerLT(lt, c, options)
    } else {
      eqSet.add(c.semver)
    }
  }

  if (eqSet.size > 1) {
    return null
  }

  let gtltComp
  if (gt && lt) {
    gtltComp = compare(gt.semver, lt.semver, options)
    if (gtltComp > 0) {
      return null
    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
      return null
    }
  }

  // will iterate one or zero times
  for (const eq of eqSet) {
    if (gt && !satisfies(eq, String(gt), options)) {
      return null
    }

    if (lt && !satisfies(eq, String(lt), options)) {
      return null
    }

    for (const c of dom) {
      if (!satisfies(eq, String(c), options)) {
        return false
      }
    }

    return true
  }

  let higher, lower
  let hasDomLT, hasDomGT
  // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset
  let needDomLTPre = lt &&
    !options.includePrerelease &&
    lt.semver.prerelease.length ? lt.semver : false
  let needDomGTPre = gt &&
    !options.includePrerelease &&
    gt.semver.prerelease.length ? gt.semver : false
  // exception: <1.2.3-0 is the same as <1.2.3
  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false
  }

  for (const c of dom) {
    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='
    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='
    if (gt) {
      if (needDomGTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch) {
          needDomGTPre = false
        }
      }
      if (c.operator === '>' || c.operator === '>=') {
        higher = higherGT(gt, c, options)
        if (higher === c && higher !== gt) {
          return false
        }
      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {
        return false
      }
    }
    if (lt) {
      if (needDomLTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch) {
          needDomLTPre = false
        }
      }
      if (c.operator === '<' || c.operator === '<=') {
        lower = lowerLT(lt, c, options)
        if (lower === c && lower !== lt) {
          return false
        }
      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {
        return false
      }
    }
    if (!c.operator && (lt || gt) && gtltComp !== 0) {
      return false
    }
  }

  // if there was a < or >, and nothing in the dom, then must be false
  // UNLESS it was limited by another range in the other direction.
  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
  if (gt && hasDomLT && !lt && gtltComp !== 0) {
    return false
  }

  if (lt && hasDomGT && !gt && gtltComp !== 0) {
    return false
  }

  // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple
  if (needDomGTPre || needDomLTPre) {
    return false
  }

  return true
}

// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp > 0 ? a
    : comp < 0 ? b
    : b.operator === '>' && a.operator === '>=' ? b
    : a
}

// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp < 0 ? a
    : comp > 0 ? b
    : b.operator === '<' && a.operator === '<=' ? b
    : a
}

module.exports = subset


/***/ }),

/***/ 2776:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Action = void 0;
var Subscription_1 = __webpack_require__(1981);
var Action = (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
exports.Action = Action;
//# sourceMappingURL=Action.js.map

/***/ }),

/***/ 2818:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.throttle = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
function throttle(durationSelector, config) {
    return lift_1.operate(function (source, subscriber) {
        var _a = config !== null && config !== void 0 ? config : {}, _b = _a.leading, leading = _b === void 0 ? true : _b, _c = _a.trailing, trailing = _c === void 0 ? false : _c;
        var hasValue = false;
        var sendValue = null;
        var throttled = null;
        var isComplete = false;
        var endThrottling = function () {
            throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
            throttled = null;
            if (trailing) {
                send();
                isComplete && subscriber.complete();
            }
        };
        var cleanupThrottling = function () {
            throttled = null;
            isComplete && subscriber.complete();
        };
        var startThrottle = function (value) {
            return (throttled = innerFrom_1.innerFrom(durationSelector(value)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));
        };
        var send = function () {
            if (hasValue) {
                hasValue = false;
                var value = sendValue;
                sendValue = null;
                subscriber.next(value);
                !isComplete && startThrottle(value);
            }
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            sendValue = value;
            !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
        }, function () {
            isComplete = true;
            !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
        }));
    });
}
exports.throttle = throttle;
//# sourceMappingURL=throttle.js.map

/***/ }),

/***/ 2820:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ installPackages),
/* harmony export */   installProjectDependencies: () => (/* binding */ installProjectDependencies)
/* harmony export */ });
/* unused harmony export LANGUAGE_INSTALLERS */
/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5317);
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9023);
/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7187);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6928);
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3757);
/* harmony import */ var ora__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5449);
/* harmony import */ var _languageConfig_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9431);
/**
 * Enhanced Multi-language dependency installer utility for Package Installer CLI v3.2.0
 * Supports Node.js, Python, Rust, Go, Ruby, and more with intelligent package management
 */







const execAsync = (0,util__WEBPACK_IMPORTED_MODULE_1__.promisify)(child_process__WEBPACK_IMPORTED_MODULE_0__.exec);
// Enhanced dependency installers with modern package managers
const LANGUAGE_INSTALLERS = Object.fromEntries(Object.entries(_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .ENHANCED_LANGUAGE_CONFIGS */ .gi).map(([lang, config]) => [
    lang,
    config.packageManagers.map(pm => ({
        name: pm.name,
        command: pm.installCommand,
        configFiles: pm.configFiles,
        detectCommand: pm.detectCommand,
        priority: pm.priority,
        features: pm.features.map(f => f.name)
    }))
]));
/**
 * Enhanced project file discovery with better filtering and performance
 */
async function findProjectFiles(projectPath, maxDepth = 3) {
    const foundFiles = [];
    const foundDirectories = [];
    const detectedLanguages = new Set();
    const detectedPackageManagers = new Set();
    // Skip directories that are known to be non-essential
    const skipDirectories = new Set([
        'node_modules', '.git', 'dist', 'build', '.next', '.nuxt', 'coverage',
        '.vscode', '.idea', '__pycache__', '.pytest_cache', 'target', 'vendor',
        '.gradle', '.mvn', 'bin', 'obj', '.vs', 'logs', 'tmp', 'temp'
    ]);
    async function searchDirectory(currentPath, currentDepth) {
        if (currentDepth > maxDepth)
            return;
        try {
            const entries = await fs_extra__WEBPACK_IMPORTED_MODULE_2__.readdir(currentPath, { withFileTypes: true });
            for (const entry of entries) {
                const fullPath = path__WEBPACK_IMPORTED_MODULE_3__.join(currentPath, entry.name);
                if (entry.isDirectory()) {
                    if (!skipDirectories.has(entry.name) && !entry.name.startsWith('.')) {
                        foundDirectories.push(fullPath);
                        await searchDirectory(fullPath, currentDepth + 1);
                    }
                }
                else if (entry.isFile()) {
                    // Check against all language config files
                    const allConfigFiles = (0,_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .getAllConfigFiles */ .R5)();
                    if (allConfigFiles.includes(entry.name) || entry.name.includes('.lock')) {
                        foundFiles.push(fullPath);
                        // Detect language and package manager
                        const languages = (0,_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .detectLanguageFromFiles */ .v0)([entry.name]);
                        languages.forEach(lang => {
                            detectedLanguages.add(lang.language);
                            const config = (0,_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .getLanguageConfig */ .lr)(lang.language);
                            if (config) {
                                config.packageManagers.forEach(pm => {
                                    if (pm.lockFiles.includes(entry.name) || pm.configFiles.includes(entry.name)) {
                                        detectedPackageManagers.add(pm.name);
                                    }
                                });
                            }
                        });
                    }
                }
            }
        }
        catch (error) {
            console.warn(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.yellow(`⚠️  Could not scan directory: ${currentPath}`));
        }
    }
    await searchDirectory(projectPath, 0);
    return {
        files: foundFiles,
        directories: foundDirectories,
        languages: Array.from(detectedLanguages),
        packageManagers: Array.from(detectedPackageManagers)
    };
}
/**
 * Enhanced dependency installation with better progress tracking and error handling
 */
async function installProjectDependencies(projectPath, projectName = 'project', installMcpServer = false, progressCallback) {
    const results = [];
    const startTime = Date.now();
    try {
        progressCallback?.({
            step: 'discovery',
            progress: 0,
            message: 'Discovering project structure...'
        });
        const { files, languages, packageManagers } = await findProjectFiles(projectPath);
        if (files.length === 0) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#95afc0')('📦 No configuration files found - skipping dependency installation'));
            return results;
        }
        console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#00d2d3')(`🔍 Discovered project structure:`));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#95afc0')(`   Languages: ${languages.join(', ') || 'None detected'}`));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#95afc0')(`   Package Managers: ${packageManagers.join(', ') || 'None detected'}`));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#95afc0')(`   Config Files: ${files.length}`));
        let currentProgress = 20;
        const progressIncrement = 70 / languages.length;
        // Install dependencies for each detected language
        for (const language of languages) {
            try {
                progressCallback?.({
                    step: 'installation',
                    progress: currentProgress,
                    message: `Installing ${language} dependencies...`
                });
                const result = await installLanguageDependencies(projectPath, language, {
                    timeout: 300000, // 5 minutes per language
                    retries: 2
                });
                results.push(result);
                currentProgress += progressIncrement;
            }
            catch (error) {
                console.warn(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.yellow(`⚠️  Failed to install ${language} dependencies: ${error.message}`));
                results.push({
                    success: false,
                    packages: [],
                    language,
                    packageManager: 'unknown',
                    duration: 0,
                    errors: [error.message]
                });
            }
        }
        // Install MCP server if requested and this is a Node.js project
        if (installMcpServer && languages.includes('javascript')) {
            try {
                progressCallback?.({
                    step: 'mcp',
                    progress: 90,
                    message: 'Installing MCP server tools...'
                });
                await installMcpServerAndInitializeGit(projectPath, languages.includes('javascript'));
            }
            catch (error) {
                console.warn(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.yellow('⚠️  Could not install MCP server tools'));
            }
        }
        else if (!languages.includes('javascript')) {
            // For non-JavaScript projects, just initialize git with regular commands
            try {
                await initializeGitWithRegularCommands(projectPath);
            }
            catch (error) {
                console.warn(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.yellow('⚠️  Could not initialize git repository'));
            }
        }
        progressCallback?.({
            step: 'complete',
            progress: 100,
            message: 'Dependency installation completed!'
        });
        const totalDuration = Date.now() - startTime;
        console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.green(`✅ Dependency installation completed in ${(totalDuration / 1000).toFixed(2)}s`));
        return results;
    }
    catch (error) {
        console.error(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.red(`❌ Dependency installation failed: ${error.message}`));
        throw error;
    }
}
/**
 * Install dependencies for a specific language with enhanced error handling
 */
async function installLanguageDependencies(projectPath, language, options = {}) {
    const startTime = Date.now();
    const config = (0,_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .getLanguageConfig */ .lr)(language);
    const preferredPackageManager = (0,_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .getPreferredPackageManager */ .Z9)(language);
    if (!preferredPackageManager) {
        const errorResult = {
            success: false,
            packages: [],
            language,
            packageManager: 'unknown',
            duration: Date.now() - startTime,
            errors: [`No package manager found for language: ${language}`],
            warnings: []
        };
        return errorResult;
    }
    const spinner = (0,ora__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Ay)(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#9c88ff')(`Installing ${language} dependencies with ${preferredPackageManager.name}...`)).start();
    try {
        // Check if package manager is available
        try {
            await execAsync(preferredPackageManager.detectCommand || `${preferredPackageManager.name} --version`);
        }
        catch (error) {
            spinner.warn(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.yellow(`${preferredPackageManager.name} not found, trying alternatives...`));
            const config = (0,_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .getLanguageConfig */ .lr)(language);
            if (config) {
                // Try fallback package managers
                for (const pm of config.packageManagers.slice(1)) {
                    try {
                        await execAsync(pm.detectCommand || `${pm.name} --version`);
                        spinner.text = chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#9c88ff')(`Installing ${language} dependencies with ${pm.name}...`);
                        break;
                    }
                    catch {
                        continue;
                    }
                }
            }
        }
        // Execute installation command with timeout and retries
        const installCommand = preferredPackageManager.installCommand;
        let commandOutput = '';
        let lastError = null;
        const maxRetries = options.retries || 2;
        for (let attempt = 0; attempt <= maxRetries; attempt++) {
            try {
                if (attempt > 0) {
                    spinner.text = chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#ffa502')(`Retry ${attempt}/${maxRetries} - Installing ${language} dependencies...`);
                }
                const { stdout, stderr } = await execAsync(installCommand, {
                    cwd: projectPath,
                    timeout: options.timeout || 300000, // 5 minutes default
                    maxBuffer: 1024 * 1024 * 10 // 10MB buffer
                });
                const duration = Date.now() - startTime;
                spinner.succeed(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.green(`✅ ${language} dependencies installed successfully (${(duration / 1000).toFixed(2)}s)`));
                return {
                    success: true,
                    packages: extractInstalledPackages(stdout, language),
                    language,
                    packageManager: preferredPackageManager.name,
                    duration,
                    logs: [stdout]
                };
            }
            catch (error) {
                lastError = error;
                if (attempt < maxRetries) {
                    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2s before retry
                }
            }
        }
        if (lastError) {
            throw lastError;
        }
    }
    catch (error) {
        const duration = Date.now() - startTime;
        spinner.fail(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.red(`❌ Failed to install ${language} dependencies`));
        // Provide helpful error messages and suggestions
        if (error.code === 'ENOENT') {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.yellow(`💡 ${preferredPackageManager.name} not found. Install it first:`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#95afc0')(getInstallInstructions(preferredPackageManager.name)));
        }
        else if (error.message.includes('timeout')) {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.yellow('💡 Installation timed out. Try running manually:'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#95afc0')(`   cd ${path__WEBPACK_IMPORTED_MODULE_3__.basename(projectPath)}`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#95afc0')(`   ${preferredPackageManager.installCommand}`));
        }
        return {
            success: false,
            packages: [],
            language,
            packageManager: preferredPackageManager.name,
            duration,
            errors: [error.message],
            warnings: []
        };
    }
    // Default return in case all above logic fails (should not happen, but for type safety)
    return {
        success: false,
        packages: [],
        language,
        packageManager: preferredPackageManager ? preferredPackageManager.name : 'unknown',
        duration: Date.now() - startTime,
        errors: ['Unknown error occurred during dependency installation'],
        warnings: []
    };
}
/**
 * Extract installed package names from installation output
 */
function extractInstalledPackages(output, language) {
    const packages = [];
    try {
        switch (language) {
            case 'javascript':
            case 'typescript':
                // Parse npm/yarn/pnpm/bun output
                const jsMatches = output.match(/(?:added|installed)\s+(.+?)(?:\s|$)/gi);
                if (jsMatches) {
                    jsMatches.forEach(match => {
                        const pkg = match.replace(/(?:added|installed)\s+/i, '').trim();
                        if (pkg)
                            packages.push(pkg);
                    });
                }
                break;
            case 'python':
                // Parse pip/poetry output
                const pyMatches = output.match(/Successfully installed (.+)/i);
                if (pyMatches) {
                    packages.push(...pyMatches[1].split(' ').filter(pkg => pkg.trim()));
                }
                break;
            case 'rust':
                // Parse cargo output
                const rustMatches = output.match(/Installed package `(.+?)` /gi);
                if (rustMatches) {
                    rustMatches.forEach(match => {
                        const pkg = match.match(/`(.+?)`/)?.[1];
                        if (pkg)
                            packages.push(pkg);
                    });
                }
                break;
            case 'go':
                // Parse go mod output
                const goMatches = output.match(/go: downloading (.+?) (.+)/gi);
                if (goMatches) {
                    goMatches.forEach(match => {
                        const pkg = match.replace(/go: downloading\s+/, '').split(' ')[0];
                        if (pkg)
                            packages.push(pkg);
                    });
                }
                break;
            case 'ruby':
                // Parse bundler output
                const rubyMatches = output.match(/Installing (.+?) \(/gi);
                if (rubyMatches) {
                    rubyMatches.forEach(match => {
                        const pkg = match.replace(/Installing\s+/, '').replace(/\s+\(.*/, '');
                        if (pkg)
                            packages.push(pkg);
                    });
                }
                break;
            default:
                // Generic extraction
                packages.push('dependencies');
        }
    }
    catch (error) {
        console.warn('Could not extract package names from output');
    }
    return packages;
}
/**
 * Get installation instructions for package managers
 */
function getInstallInstructions(packageManager) {
    const instructions = {
        'pnpm': 'npm install -g pnpm',
        'yarn': 'npm install -g yarn',
        'bun': 'curl -fsSL https://bun.sh/install | bash',
        'poetry': 'curl -sSL https://install.python-poetry.org | python3 -',
        'cargo': 'curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh',
        'composer': 'Visit https://getcomposer.org/download/',
        'go': 'Visit https://golang.org/dl/',
        'maven': 'Visit https://maven.apache.org/install.html',
        'bundler': 'gem install bundler',
        'dotnet': 'Visit https://dotnet.microsoft.com/download'
    };
    return instructions[packageManager] || `Install ${packageManager} from official documentation`;
}
/**
 * Enhanced package installation with better options handling
 */
async function installPackages(projectPath, language, packages, options = {}) {
    if (!packages || packages.length === 0) {
        return;
    }
    const { isDev = false, exact = false, optional = false, timeout = 120000 } = options;
    const packageManager = (0,_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .getPreferredPackageManager */ .Z9)(language);
    if (!packageManager) {
        throw new Error(`No package manager found for language: ${language}`);
    }
    let command = '';
    switch (language) {
        case 'javascript':
        case 'typescript':
            const flags = [
                isDev ? (packageManager.name === 'npm' ? '--save-dev' : packageManager.name === 'yarn' ? '--dev' : '--save-dev') : '',
                exact ? '--save-exact' : '',
                optional ? '--save-optional' : ''
            ].filter(Boolean).join(' ');
            command = `${packageManager.name} ${packageManager.name === 'npm' ? 'install' : 'add'} ${flags} ${packages.join(' ')}`;
            break;
        case 'rust':
            const cargoFlags = isDev ? '--dev' : '';
            command = `cargo add ${cargoFlags} ${packages.join(' ')}`;
            break;
        case 'python':
            if (packageManager.name === 'poetry') {
                command = `poetry add ${isDev ? '--group dev' : ''} ${packages.join(' ')}`;
            }
            else {
                command = `pip install ${packages.join(' ')}`;
            }
            break;
        case 'go':
            command = `go get ${packages.join(' ')}`;
            break;
        case 'ruby':
            command = `bundle add ${packages.join(' ')}`;
            break;
        default:
            throw new Error(`Unsupported language: ${language}`);
    }
    const spinner = (0,ora__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Ay)(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#f39c12')(`Installing ${packages.join(', ')} for ${language}...`)).start();
    try {
        await execAsync(command, {
            cwd: projectPath,
            timeout
        });
        spinner.succeed(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.green(`✅ Installed ${packages.join(', ')} for ${language}`));
    }
    catch (error) {
        spinner.fail(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.red(`❌ Failed to install ${packages.join(', ')} for ${language}: ${error.message}`));
        throw error;
    }
}
/**
 * Install MCP server and initialize git with MCP commands for JavaScript projects
 */
async function installMcpServerAndInitializeGit(projectPath, isJavaScript) {
    const spinner = (0,ora__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Ay)(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#9c88ff')('Installing @0xshariq/github-mcp-server...')).start();
    try {
        // Install the MCP server globally
        await execAsync('npm install -g @0xshariq/github-mcp-server', {
            cwd: projectPath,
            timeout: 120000 // 2 minutes timeout
        });
        spinner.text = chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#9c88ff')('Initializing git repository with MCP commands...');
        // Try MCP commands first
        try {
            await execAsync('ginit', { cwd: projectPath });
            await execAsync('gadd', { cwd: projectPath });
            await execAsync('gcommit "Initial Commit From Package Installer CLI"', { cwd: projectPath });
            spinner.succeed(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.green('✅ MCP server installed and git initialized with MCP commands'));
        }
        catch (mcpError) {
            // If MCP commands fail, fallback to regular git commands
            spinner.text = chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#ffa502')('MCP commands failed, using regular git commands...');
            await initializeGitWithRegularCommands(projectPath);
            spinner.succeed(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.green('✅ MCP server installed and git initialized with regular commands'));
        }
    }
    catch (error) {
        spinner.fail(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.red('❌ Failed to install MCP server'));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.yellow('💡 Falling back to regular git initialization...'));
        await initializeGitWithRegularCommands(projectPath);
    }
}
/**
 * Initialize git repository with regular git commands for non-JavaScript projects
 */
async function initializeGitWithRegularCommands(projectPath) {
    const spinner = (0,ora__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Ay)(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#f39c12')('Initializing git repository...')).start();
    try {
        // Check if git is already initialized
        const gitExists = await fs_extra__WEBPACK_IMPORTED_MODULE_2__.pathExists(path__WEBPACK_IMPORTED_MODULE_3__.join(projectPath, '.git'));
        if (!gitExists) {
            await execAsync('git init', { cwd: projectPath });
            spinner.text = chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#f39c12')('Adding files to git...');
            await execAsync('git add .', { cwd: projectPath });
            spinner.text = chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.hex('#f39c12')('Creating initial commit...');
            await execAsync('git commit -m "Initial Commit From Package Installer CLI"', { cwd: projectPath });
            spinner.succeed(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.green('✅ Git repository initialized successfully'));
        }
        else {
            spinner.succeed(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.green('✅ Git repository already exists'));
        }
    }
    catch (error) {
        spinner.fail(chalk__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay.red(`❌ Failed to initialize git repository: ${error.message}`));
        throw error;
    }
}


/***/ }),

/***/ 2862:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).



var ERR_STREAM_PREMATURE_CLOSE = (__webpack_require__(3201)/* .codes */ .F).ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;

/***/ }),

/***/ 2947:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pairs = void 0;
var from_1 = __webpack_require__(7568);
function pairs(obj, scheduler) {
    return from_1.from(Object.entries(obj), scheduler);
}
exports.pairs = pairs;
//# sourceMappingURL=pairs.js.map

/***/ }),

/***/ 2961:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.catchError = void 0;
var innerFrom_1 = __webpack_require__(2018);
var OperatorSubscriber_1 = __webpack_require__(1908);
var lift_1 = __webpack_require__(4698);
function catchError(selector) {
    return lift_1.operate(function (source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
            handledResult = innerFrom_1.innerFrom(selector(err, catchError(selector)(source)));
            if (innerSub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
            else {
                syncUnsub = true;
            }
        }));
        if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
        }
    });
}
exports.catchError = catchError;
//# sourceMappingURL=catchError.js.map

/***/ }),

/***/ 2975:
/***/ ((module) => {

module['exports'] = function(colors) {
  // RoY G BiV
  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta'];
  return function(letter, i, exploded) {
    if (letter === ' ') {
      return letter;
    } else {
      return colors[rainbowColors[i++ % rainbowColors.length]](letter);
    }
  };
};



/***/ }),

/***/ 2993:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFind = exports.find = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function find(predicate, thisArg) {
    return lift_1.operate(createFind(predicate, thisArg, 'value'));
}
exports.find = find;
function createFind(predicate, thisArg, emit) {
    var findIndex = emit === 'index';
    return function (source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var i = index++;
            if (predicate.call(thisArg, value, i, source)) {
                subscriber.next(findIndex ? i : value);
                subscriber.complete();
            }
        }, function () {
            subscriber.next(findIndex ? -1 : undefined);
            subscriber.complete();
        }));
    };
}
exports.createFind = createFind;
//# sourceMappingURL=find.js.map

/***/ }),

/***/ 3005:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);


const wrapAnsi16 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${code + offset}m`;
};

const wrapAnsi256 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${38 + offset};5;${code}m`;
};

const wrapAnsi16m = (fn, offset) => (...args) => {
	const rgb = fn(...args);
	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
};

const ansi2ansi = n => n;
const rgb2rgb = (r, g, b) => [r, g, b];

const setLazyProperty = (object, property, get) => {
	Object.defineProperty(object, property, {
		get: () => {
			const value = get();

			Object.defineProperty(object, property, {
				value,
				enumerable: true,
				configurable: true
			});

			return value;
		},
		enumerable: true,
		configurable: true
	});
};

/** @type {typeof import('color-convert')} */
let colorConvert;
const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
	if (colorConvert === undefined) {
		colorConvert = __webpack_require__(1880);
	}

	const offset = isBackground ? 10 : 0;
	const styles = {};

	for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
		const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
		if (sourceSpace === targetSpace) {
			styles[name] = wrap(identity, offset);
		} else if (typeof suite === 'object') {
			styles[name] = wrap(suite[targetSpace], offset);
		}
	}

	return styles;
};

function assembleStyles() {
	const codes = new Map();
	const styles = {
		modifier: {
			reset: [0, 0],
			// 21 isn't widely supported and 22 does the same thing
			bold: [1, 22],
			dim: [2, 22],
			italic: [3, 23],
			underline: [4, 24],
			inverse: [7, 27],
			hidden: [8, 28],
			strikethrough: [9, 29]
		},
		color: {
			black: [30, 39],
			red: [31, 39],
			green: [32, 39],
			yellow: [33, 39],
			blue: [34, 39],
			magenta: [35, 39],
			cyan: [36, 39],
			white: [37, 39],

			// Bright color
			blackBright: [90, 39],
			redBright: [91, 39],
			greenBright: [92, 39],
			yellowBright: [93, 39],
			blueBright: [94, 39],
			magentaBright: [95, 39],
			cyanBright: [96, 39],
			whiteBright: [97, 39]
		},
		bgColor: {
			bgBlack: [40, 49],
			bgRed: [41, 49],
			bgGreen: [42, 49],
			bgYellow: [43, 49],
			bgBlue: [44, 49],
			bgMagenta: [45, 49],
			bgCyan: [46, 49],
			bgWhite: [47, 49],

			// Bright color
			bgBlackBright: [100, 49],
			bgRedBright: [101, 49],
			bgGreenBright: [102, 49],
			bgYellowBright: [103, 49],
			bgBlueBright: [104, 49],
			bgMagentaBright: [105, 49],
			bgCyanBright: [106, 49],
			bgWhiteBright: [107, 49]
		}
	};

	// Alias bright black as gray (and grey)
	styles.color.gray = styles.color.blackBright;
	styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
	styles.color.grey = styles.color.blackBright;
	styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
	setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

	return styles;
}

// Make the export immutable
Object.defineProperty(module, 'exports', {
	enumerable: true,
	get: assembleStyles
});


/***/ }),

/***/ 3024:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:fs");

/***/ }),

/***/ 3045:
/***/ ((module, exports, __webpack_require__) => {

const { Argument } = __webpack_require__(3786);
const { Command } = __webpack_require__(1012);
const { CommanderError, InvalidArgumentError } = __webpack_require__(5367);
const { Help } = __webpack_require__(5058);
const { Option } = __webpack_require__(7696);

/**
 * Expose the root command.
 */

exports = module.exports = new Command();
exports.program = exports; // More explicit access to global command.
// createArgument, createCommand, and createOption are implicitly available as they are methods on program.

/**
 * Expose classes
 */

exports.Command = Command;
exports.Option = Option;
exports.Argument = Argument;
exports.Help = Help;

exports.CommanderError = CommanderError;
exports.InvalidArgumentError = InvalidArgumentError;
exports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated


/***/ }),

/***/ 3049:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.publishBehavior = void 0;
var BehaviorSubject_1 = __webpack_require__(9000);
var ConnectableObservable_1 = __webpack_require__(3941);
function publishBehavior(initialValue) {
    return function (source) {
        var subject = new BehaviorSubject_1.BehaviorSubject(initialValue);
        return new ConnectableObservable_1.ConnectableObservable(source, function () { return subject; });
    };
}
exports.publishBehavior = publishBehavior;
//# sourceMappingURL=publishBehavior.js.map

/***/ }),

/***/ 3051:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.timer = void 0;
var Observable_1 = __webpack_require__(541);
var async_1 = __webpack_require__(7688);
var isScheduler_1 = __webpack_require__(7242);
var isDate_1 = __webpack_require__(4615);
function timer(dueTime, intervalOrScheduler, scheduler) {
    if (dueTime === void 0) { dueTime = 0; }
    if (scheduler === void 0) { scheduler = async_1.async; }
    var intervalDuration = -1;
    if (intervalOrScheduler != null) {
        if (isScheduler_1.isScheduler(intervalOrScheduler)) {
            scheduler = intervalOrScheduler;
        }
        else {
            intervalDuration = intervalOrScheduler;
        }
    }
    return new Observable_1.Observable(function (subscriber) {
        var due = isDate_1.isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
        if (due < 0) {
            due = 0;
        }
        var n = 0;
        return scheduler.schedule(function () {
            if (!subscriber.closed) {
                subscriber.next(n++);
                if (0 <= intervalDuration) {
                    this.schedule(undefined, intervalDuration);
                }
                else {
                    subscriber.complete();
                }
            }
        }, due);
    });
}
exports.timer = timer;
//# sourceMappingURL=timer.js.map

/***/ }),

/***/ 3091:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.queue = exports.queueScheduler = void 0;
var QueueAction_1 = __webpack_require__(7041);
var QueueScheduler_1 = __webpack_require__(2242);
exports.queueScheduler = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
exports.queue = exports.queueScheduler;
//# sourceMappingURL=queue.js.map

/***/ }),

/***/ 3106:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var clone = __webpack_require__(447);

module.exports = function(options, defaults) {
  options = options || {};

  Object.keys(defaults).forEach(function(key) {
    if (typeof options[key] === 'undefined') {
      options[key] = clone(defaults[key]);
    }
  });

  return options;
};

/***/ }),

/***/ 3113:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.materialize = void 0;
var Notification_1 = __webpack_require__(1439);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function materialize() {
    return lift_1.operate(function (source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            subscriber.next(Notification_1.Notification.createNext(value));
        }, function () {
            subscriber.next(Notification_1.Notification.createComplete());
            subscriber.complete();
        }, function (err) {
            subscriber.next(Notification_1.Notification.createError(err));
            subscriber.complete();
        }));
    });
}
exports.materialize = materialize;
//# sourceMappingURL=materialize.js.map

/***/ }),

/***/ 3136:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:url");

/***/ }),

/***/ 3149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmpty = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function isEmpty() {
    return lift_1.operate(function (source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
            subscriber.next(false);
            subscriber.complete();
        }, function () {
            subscriber.next(true);
            subscriber.complete();
        }));
    });
}
exports.isEmpty = isEmpty;
//# sourceMappingURL=isEmpty.js.map

/***/ }),

/***/ 3172:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Go: () => (/* binding */ CacheManager),
  yk: () => (/* binding */ cacheManager)
});

// UNUSED EXPORTS: AdvancedCacheManager, advancedCacheManager

// EXTERNAL MODULE: ./node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/index.js
var lib = __webpack_require__(7187);
// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(6928);
// EXTERNAL MODULE: external "os"
var external_os_ = __webpack_require__(857);
// EXTERNAL MODULE: ./node_modules/.pnpm/chalk@5.6.0/node_modules/chalk/source/index.js + 4 modules
var source = __webpack_require__(3757);
;// external "zlib"
const external_zlib_namespaceObject = __WEBPACK_EXTERNAL_createRequire_require("zlib");
// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6982);
// EXTERNAL MODULE: external "util"
var external_util_ = __webpack_require__(9023);
;// ./dist/utils/cacheUtils.js
/**
 * Enhanced Cache Utility for Package Installer CLI v3.2.0
 * Advanced caching system with compression, encryption, and smart invalidation
 */







const compress = (0,external_util_.promisify)(external_zlib_namespaceObject.gzip);
const decompress = (0,external_util_.promisify)(external_zlib_namespaceObject.gunzip);
/**
 * Enhanced Cache Manager with advanced features
 */
class AdvancedCacheManager {
    constructor(options = {}) {
        this.cacheDir = external_path_.join(external_os_.homedir(), '.package-installer-cli', 'cache');
        this.cacheFile = external_path_.join(this.cacheDir, 'advanced-cache.json');
        this.lockFile = external_path_.join(this.cacheDir, 'cache.lock');
        this.historyFile = external_path_.join(external_os_.homedir(), '.package-installer-cli', 'history.json');
        this.strategy = options.strategy || 'lru';
        this.maxSize = options.maxSize || 100 * 1024 * 1024; // 100MB default
        this.compressionThreshold = options.compressionThreshold || 1024; // 1KB threshold
        this.encryptionKey = this.generateEncryptionKey();
        this.cache = this.getDefaultCache();
    }
    /**
     * Initialize advanced cache system
     */
    async init() {
        try {
            await lib.ensureDir(this.cacheDir);
            await this.acquireLock();
            if (await lib.pathExists(this.cacheFile)) {
                const data = await this.loadCacheFile();
                this.cache = { ...this.getDefaultCache(), ...data };
                await this.validateCacheIntegrity();
            }
            else {
                await this.save();
            }
            // Update access time and perform maintenance
            this.cache.metadata.lastAccessed = new Date().toISOString();
            await this.performMaintenance();
            await this.save();
        }
        catch (error) {
            console.warn(source/* default */.Ay.yellow('⚠️  Advanced cache initialization failed, using fallback cache'));
            this.cache = this.getDefaultCache();
        }
        finally {
            await this.releaseLock();
        }
    }
    /**
     * Get default cache structure with enhanced metadata
     */
    getDefaultCache() {
        return {
            version: '3.0.0',
            projects: [],
            analysis: [],
            packages: [],
            templates: [],
            templateFiles: [],
            features: [],
            system: null,
            featureUsage: {},
            performance: {
                operations: [],
                averageResponseTime: 0,
                totalOperations: 0,
                errorRate: 0,
                lastOptimized: new Date().toISOString()
            },
            metadata: {
                version: '3.0.0',
                created: new Date().toISOString(),
                lastAccessed: new Date().toISOString(),
                lastCleanup: new Date().toISOString(),
                totalHits: 0,
                totalMisses: 0,
                sizeLimit: this.maxSize,
                compressionEnabled: true,
                encryptionEnabled: false
            }
        };
    }
    /**
     * Load cache file with decompression and decryption
     */
    async loadCacheFile() {
        try {
            let data = await lib.readFile(this.cacheFile);
            // Check if compressed
            if (data[0] === 0x1f && data[1] === 0x8b) {
                const decompressed = await decompress(data);
                data = Buffer.from(decompressed);
            }
            return JSON.parse(data.toString());
        }
        catch (error) {
            console.warn('Failed to load cache file:', error);
            return {};
        }
    }
    /**
     * Save cache with compression and optional encryption
     */
    async save() {
        try {
            await this.acquireLock();
            let data = JSON.stringify(this.cache, null, 0);
            let buffer = Buffer.from(data);
            // Compress if above threshold
            if (buffer.length > this.compressionThreshold) {
                const compressed = await compress(buffer);
                buffer = Buffer.from(compressed);
            }
            await lib.writeFile(this.cacheFile, buffer);
        }
        catch (error) {
            console.warn('Failed to save cache:', error);
        }
        finally {
            await this.releaseLock();
        }
    }
    /**
     * Generate encryption key for sensitive data
     */
    generateEncryptionKey() {
        const keyPath = external_path_.join(this.cacheDir, '.key');
        try {
            if (lib.existsSync(keyPath)) {
                return lib.readFileSync(keyPath, 'utf-8');
            }
        }
        catch (error) {
            // Generate new key
        }
        const key = external_crypto_.randomBytes(32).toString('hex');
        try {
            lib.writeFileSync(keyPath, key, { mode: 0o600 });
        }
        catch (error) {
            console.warn('Could not save encryption key');
        }
        return key;
    }
    /**
     * Acquire file lock for thread-safe operations
     */
    async acquireLock() {
        let attempts = 0;
        const maxAttempts = 10;
        while (attempts < maxAttempts) {
            try {
                await lib.writeFile(this.lockFile, process.pid.toString(), { flag: 'wx' });
                return;
            }
            catch (error) {
                if (attempts === maxAttempts - 1) {
                    // Force acquire lock
                    await lib.writeFile(this.lockFile, process.pid.toString());
                    return;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
                attempts++;
            }
        }
    }
    /**
     * Release file lock
     */
    async releaseLock() {
        try {
            await lib.unlink(this.lockFile);
        }
        catch (error) {
            // Lock file might not exist
        }
    }
    /**
     * Validate cache integrity and repair if necessary
     */
    async validateCacheIntegrity() {
        const issues = [];
        // Check version compatibility
        if (this.cache.version !== '3.0.0') {
            issues.push('Version mismatch detected');
        }
        // Validate structure
        if (!this.cache.metadata) {
            this.cache.metadata = this.getDefaultCache().metadata;
            issues.push('Metadata structure repaired');
        }
        if (!this.cache.performance) {
            this.cache.performance = this.getDefaultCache().performance;
            issues.push('Performance tracking initialized');
        }
        // Clean up corrupted entries
        this.cache.projects = this.cache.projects.filter(p => p.id && p.path && p.name);
        this.cache.analysis = this.cache.analysis.filter(a => a.id && a.projectPath);
        this.cache.templates = this.cache.templates.filter(t => t.id && t.name);
        if (issues.length > 0) {
            console.log(source/* default */.Ay.blue(`🔧 Cache integrity issues resolved: ${issues.length}`));
        }
    }
    /**
     * Perform cache maintenance tasks
     */
    async performMaintenance() {
        const now = new Date();
        const lastCleanup = new Date(this.cache.metadata.lastCleanup);
        const daysSinceCleanup = (now.getTime() - lastCleanup.getTime()) / (1000 * 60 * 60 * 24);
        // Perform cleanup weekly
        if (daysSinceCleanup >= 7) {
            await this.performCleanup();
            this.cache.metadata.lastCleanup = now.toISOString();
        }
        // Optimize performance data
        await this.optimizePerformanceData();
    }
    /**
     * Clean up expired and unnecessary cache entries
     */
    async performCleanup() {
        const now = Date.now();
        let cleaned = 0;
        // Remove expired analysis cache (older than 24 hours)
        const beforeAnalysis = this.cache.analysis.length;
        this.cache.analysis = this.cache.analysis.filter(a => {
            const age = now - new Date(a.timestamp).getTime();
            return age < (a.ttl || 24 * 60 * 60 * 1000);
        });
        cleaned += beforeAnalysis - this.cache.analysis.length;
        // Remove old package cache (older than 1 week)
        const beforePackages = this.cache.packages.length;
        this.cache.packages = this.cache.packages.filter(p => {
            const age = now - new Date(p.lastChecked).getTime();
            return age < (7 * 24 * 60 * 60 * 1000);
        });
        cleaned += beforePackages - this.cache.packages.length;
        // Apply size limits based on strategy
        await this.applySizeLimits();
        if (cleaned > 0) {
            console.log(source/* default */.Ay.green(`🧹 Cache cleanup: ${cleaned} entries removed`));
        }
    }
    /**
     * Apply size limits based on caching strategy
     */
    async applySizeLimits() {
        const currentSize = JSON.stringify(this.cache).length;
        if (currentSize > this.maxSize) {
            switch (this.strategy) {
                case 'lru':
                    this.applyLRUEviction();
                    break;
                case 'lfu':
                    this.applyLFUEviction();
                    break;
                case 'ttl':
                    this.applyTTLEviction();
                    break;
            }
        }
    }
    /**
     * Apply Least Recently Used eviction
     */
    applyLRUEviction() {
        // Sort by lastAccessed and remove oldest
        this.cache.projects.sort((a, b) => new Date(b.lastAnalyzed).getTime() - new Date(a.lastAnalyzed).getTime());
        this.cache.projects = this.cache.projects.slice(0, 50);
        this.cache.analysis.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
        this.cache.analysis = this.cache.analysis.slice(0, 30);
    }
    /**
     * Apply Least Frequently Used eviction
     */
    applyLFUEviction() {
        // Sort templates by usage count
        this.cache.templates.sort((a, b) => b.usageCount - a.usageCount);
        this.cache.templates = this.cache.templates.slice(0, 20);
    }
    /**
     * Apply Time To Live eviction
     */
    applyTTLEviction() {
        const now = Date.now();
        this.cache.analysis = this.cache.analysis.filter(a => {
            const age = now - new Date(a.timestamp).getTime();
            return age < (a.ttl || 24 * 60 * 60 * 1000);
        });
    }
    /**
     * Optimize performance data
     */
    async optimizePerformanceData() {
        const operations = this.cache.performance.operations;
        // Keep only recent operations (last 1000)
        if (operations.length > 1000) {
            this.cache.performance.operations = operations.slice(-1000);
        }
        // Recalculate metrics
        const recentOps = operations.slice(-100); // Last 100 operations
        const successfulOps = recentOps.filter(op => op.success);
        this.cache.performance.averageResponseTime =
            recentOps.reduce((sum, op) => sum + op.duration, 0) / recentOps.length || 0;
        this.cache.performance.errorRate =
            ((recentOps.length - successfulOps.length) / recentOps.length) * 100 || 0;
        this.cache.performance.totalOperations = operations.length;
        this.cache.performance.lastOptimized = new Date().toISOString();
    }
    /**
     * Record operation metrics
     */
    async recordOperation(operation, duration, success, cacheHit) {
        this.cache.performance.operations.push({
            operation,
            duration,
            timestamp: new Date().toISOString(),
            success,
            cacheHit
        });
        if (cacheHit) {
            this.cache.metadata.totalHits++;
        }
        else {
            this.cache.metadata.totalMisses++;
        }
        // Save periodically to avoid frequent I/O
        if (this.cache.performance.operations.length % 10 === 0) {
            await this.save();
        }
    }
    /**
     * Enhanced project cache with compression
     */
    async setProject(projectData) {
        const id = external_crypto_.randomUUID();
        const hash = this.generateHash({ path: projectData.path, dependencies: projectData.dependencies });
        const checksum = this.generateChecksum(projectData);
        const project = {
            id,
            ...projectData,
            lastAnalyzed: new Date().toISOString(),
            hash,
            checksum,
            compressed: JSON.stringify(projectData).length > this.compressionThreshold
        };
        // Remove existing entry
        this.cache.projects = this.cache.projects.filter(p => p.path !== project.path);
        // Add new entry using strategy
        this.addProjectByStrategy(project);
        await this.save();
    }
    /**
     * Add project based on caching strategy
     */
    addProjectByStrategy(project) {
        switch (this.strategy) {
            case 'lru':
                this.cache.projects.unshift(project);
                if (this.cache.projects.length > 100) {
                    this.cache.projects = this.cache.projects.slice(0, 100);
                }
                break;
            case 'lfu':
                // Insert based on usage patterns
                this.cache.projects.push(project);
                break;
            case 'ttl':
                this.cache.projects.unshift(project);
                break;
        }
    }
    /**
     * Generate hash for cache keys
     */
    generateHash(data) {
        return external_crypto_.createHash('sha256')
            .update(JSON.stringify(data))
            .digest('hex')
            .slice(0, 16);
    }
    /**
     * Generate checksum for data integrity
     */
    generateChecksum(data) {
        return external_crypto_.createHash('md5')
            .update(JSON.stringify(data))
            .digest('hex');
    }
    /**
     * Enhanced feature caching with version tracking
     */
    async cacheFeature(feature) {
        const cachedFeature = {
            id: external_crypto_.randomUUID(),
            name: feature.name,
            provider: feature.provider || 'default',
            version: feature.version || '1.0.0',
            configuration: feature,
            lastUpdated: new Date().toISOString(),
            compatibility: [],
            installCount: 0
        };
        // Remove existing version
        this.cache.features = this.cache.features.filter(f => f.name !== feature.name);
        this.cache.features.unshift(cachedFeature);
        await this.save();
    }
    /**
     * Get cached feature with version compatibility
     */
    async getCachedFeature(name, version) {
        const features = this.cache.features.filter(f => f.name === name);
        if (version) {
            return features.find(f => f.version === version) || null;
        }
        // Return latest version
        return features.sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime())[0] || null;
    }
    /**
     * Enhanced analytics and reporting
     */
    getAdvancedStats() {
        const total = this.cache.metadata.totalHits + this.cache.metadata.totalMisses;
        const hitRate = total > 0 ? ((this.cache.metadata.totalHits / total) * 100) : 0;
        const cacheSize = JSON.stringify(this.cache).length;
        return {
            cache: {
                hitRate: `${hitRate.toFixed(1)}%`,
                totalHits: this.cache.metadata.totalHits,
                totalMisses: this.cache.metadata.totalMisses,
                size: `${(cacheSize / 1024 / 1024).toFixed(1)} MB`,
                utilization: `${((cacheSize / this.maxSize) * 100).toFixed(1)}%`,
                compressionEnabled: this.cache.metadata.compressionEnabled
            },
            performance: {
                averageResponseTime: `${this.cache.performance.averageResponseTime.toFixed(2)}ms`,
                totalOperations: this.cache.performance.totalOperations,
                errorRate: `${this.cache.performance.errorRate.toFixed(1)}%`,
                lastOptimized: this.cache.performance.lastOptimized
            },
            usage: {
                projects: this.cache.projects.length,
                templates: this.cache.templates.length,
                features: this.cache.features.length,
                packages: this.cache.packages.length
            },
            health: {
                status: hitRate > 70 && this.cache.performance.errorRate < 5 ? 'Healthy' : 'Degraded',
                lastCleanup: this.cache.metadata.lastCleanup,
                nextCleanup: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
            }
        };
    }
    /**
     * Export cache for backup
     */
    async exportCache(filePath) {
        const exportData = {
            ...this.cache,
            exportedAt: new Date().toISOString(),
            version: '3.0.0'
        };
        let data = JSON.stringify(exportData, null, 2);
        if (filePath.endsWith('.gz')) {
            const compressed = await compress(Buffer.from(data));
            await lib.writeFile(filePath, compressed);
        }
        else {
            await lib.writeFile(filePath, data);
        }
    }
    /**
     * Import cache from backup
     */
    async importCache(filePath) {
        let data;
        if (filePath.endsWith('.gz')) {
            const compressed = await lib.readFile(filePath);
            data = await decompress(compressed);
        }
        else {
            data = await lib.readFile(filePath);
        }
        const importedCache = JSON.parse(data.toString());
        // Validate imported data
        if (importedCache.version === '3.0.0') {
            this.cache = { ...this.getDefaultCache(), ...importedCache };
            await this.save();
            console.log(source/* default */.Ay.green('✅ Cache imported successfully'));
        }
        else {
            throw new Error('Incompatible cache version');
        }
    }
    /**
     * Clear cache with granular control
     */
    async clearCache(options = {}) {
        const { type = 'all', olderThan, pattern } = options;
        const cutoff = olderThan ? Date.now() - (olderThan * 60 * 60 * 1000) : 0;
        switch (type) {
            case 'projects':
                this.cache.projects = this.filterByAge(this.cache.projects, 'lastAnalyzed', cutoff, pattern);
                break;
            case 'analysis':
                this.cache.analysis = this.filterByAge(this.cache.analysis, 'timestamp', cutoff, pattern);
                break;
            case 'packages':
                this.cache.packages = this.filterByAge(this.cache.packages, 'lastChecked', cutoff, pattern);
                break;
            case 'templates':
                this.cache.templates = this.filterByAge(this.cache.templates, 'lastUsed', cutoff, pattern);
                break;
            case 'features':
                this.cache.features = this.filterByAge(this.cache.features, 'lastUpdated', cutoff, pattern);
                break;
            case 'performance':
                this.cache.performance = this.getDefaultCache().performance;
                break;
            case 'all':
            default:
                this.cache = this.getDefaultCache();
                break;
        }
        await this.save();
    }
    /**
     * Filter array by age and pattern
     */
    filterByAge(array, dateField, cutoff, pattern) {
        return array.filter(item => {
            if (cutoff > 0 && new Date(item[dateField]).getTime() < cutoff) {
                return false;
            }
            if (pattern && !pattern.test(JSON.stringify(item))) {
                return false;
            }
            return true;
        });
    }
    /**
     * Get cache data (backward compatibility)
     */
    getCache() {
        return this.cache;
    }
    /**
     * Add project to history
     */
    async addProjectToHistory(projectData) {
        try {
            await lib.ensureDir(external_path_.dirname(this.historyFile));
            let history = { projects: [], features: [], commands: [] };
            if (await lib.pathExists(this.historyFile)) {
                history = await lib.readJson(this.historyFile);
            }
            // Ensure arrays exist
            if (!history.projects)
                history.projects = [];
            if (!history.features)
                history.features = [];
            if (!history.commands)
                history.commands = [];
            // Add project with timestamp
            const projectEntry = {
                ...projectData,
                createdAt: projectData.createdAt || new Date().toISOString(),
                lastAccessed: new Date().toISOString(),
                id: external_crypto_.randomBytes(8).toString('hex')
            };
            // Remove existing entry for same path
            history.projects = history.projects.filter((p) => p.path !== projectData.path);
            // Add to beginning of array
            history.projects.unshift(projectEntry);
            // Keep only last 50 projects
            history.projects = history.projects.slice(0, 50);
            await lib.writeJson(this.historyFile, history, { spaces: 2 });
        }
        catch (error) {
            console.warn('Failed to update project history:', error);
        }
    }
    /**
     * Add feature usage to history
     */
    async addFeatureToHistory(featureData) {
        try {
            await lib.ensureDir(external_path_.dirname(this.historyFile));
            let history = { projects: [], features: [], commands: [] };
            if (await lib.pathExists(this.historyFile)) {
                history = await lib.readJson(this.historyFile);
            }
            if (!history.features)
                history.features = [];
            const featureEntry = {
                ...featureData,
                usedAt: new Date().toISOString(),
                id: external_crypto_.randomBytes(8).toString('hex')
            };
            history.features.unshift(featureEntry);
            // Keep only last 100 feature usages
            history.features = history.features.slice(0, 100);
            await lib.writeJson(this.historyFile, history, { spaces: 2 });
        }
        catch (error) {
            console.warn('Failed to update feature history:', error);
        }
    }
    /**
     * Add command usage to history
     */
    async addCommandToHistory(commandData) {
        try {
            await lib.ensureDir(external_path_.dirname(this.historyFile));
            let history = { projects: [], features: [], commands: [] };
            if (await lib.pathExists(this.historyFile)) {
                history = await lib.readJson(this.historyFile);
            }
            if (!history.commands)
                history.commands = [];
            const commandEntry = {
                ...commandData,
                executedAt: new Date().toISOString(),
                id: external_crypto_.randomBytes(8).toString('hex')
            };
            history.commands.unshift(commandEntry);
            // Keep only last 200 command executions
            history.commands = history.commands.slice(0, 200);
            await lib.writeJson(this.historyFile, history, { spaces: 2 });
        }
        catch (error) {
            console.warn('Failed to update command history:', error);
        }
    }
    /**
     * Get complete history data
     */
    async getHistory() {
        try {
            if (await lib.pathExists(this.historyFile)) {
                return await lib.readJson(this.historyFile);
            }
            return { projects: [], features: [], commands: [] };
        }
        catch (error) {
            console.warn('Failed to read history:', error);
            return { projects: [], features: [], commands: [] };
        }
    }
    /**
     * Get recent projects from history
     */
    async getRecentProjects(limit = 10) {
        try {
            const history = await this.getHistory();
            return (history.projects || []).slice(0, limit);
        }
        catch (error) {
            console.warn('Failed to get recent projects:', error);
            return [];
        }
    }
    /**
     * Get feature usage statistics
     */
    async getFeatureStats() {
        try {
            const history = await this.getHistory();
            const features = history.features || [];
            const stats = {
                totalUsages: features.length,
                uniqueFeatures: [...new Set(features.map((f) => f.name))].length,
                mostUsedFeatures: {},
                recentFeatures: features.slice(0, 10),
                successRate: features.filter((f) => f.success).length / Math.max(1, features.length) * 100
            };
            // Calculate most used features
            features.forEach((f) => {
                const key = f.provider ? `${f.name}/${f.provider}` : f.name;
                stats.mostUsedFeatures[key] = (stats.mostUsedFeatures[key] || 0) + 1;
            });
            return stats;
        }
        catch (error) {
            console.warn('Failed to get feature stats:', error);
            return { totalUsages: 0, uniqueFeatures: 0, mostUsedFeatures: {}, recentFeatures: [], successRate: 0 };
        }
    }
}
// Export singleton instance with advanced features
const advancedCacheManager = new AdvancedCacheManager({
    strategy: 'lru',
    maxSize: 100 * 1024 * 1024, // 100MB
    compressionThreshold: 1024,
    enableEncryption: false
});
// Export legacy cache manager for backward compatibility
class CacheManager extends AdvancedCacheManager {
    constructor() {
        super({
            strategy: 'lru',
            maxSize: 50 * 1024 * 1024, // 50MB for legacy
            compressionThreshold: 2048,
            enableEncryption: false
        });
    }
}
const cacheManager = new CacheManager();


/***/ }),

/***/ 3185:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)

const inc = (version, release, options, identifier, identifierBase) => {
  if (typeof (options) === 'string') {
    identifierBase = identifier
    identifier = options
    options = undefined
  }

  try {
    return new SemVer(
      version instanceof SemVer ? version.version : version,
      options
    ).inc(release, identifier, identifierBase).version
  } catch (er) {
    return null
  }
}
module.exports = inc


/***/ }),

/***/ 3193:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("string_decoder");

/***/ }),

/***/ 3201:
/***/ ((module) => {



const codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error
  }

  function getMessage (arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message
    } else {
      return message(arg1, arg2, arg3)
    }
  }

  class NodeError extends Base {
    constructor (arg1, arg2, arg3) {
      super(getMessage(arg1, arg2, arg3));
    }
  }

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;

  codes[code] = NodeError;
}

// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    const len = expected.length;
    expected = expected.map((i) => String(i));
    if (len > 2) {
      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
             expected[len - 1];
    } else if (len === 2) {
      return `one of ${thing} ${expected[0]} or ${expected[1]}`;
    } else {
      return `of ${thing} ${expected[0]}`;
    }
  } else {
    return `of ${thing} ${String(expected)}`;
  }
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
	return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
	if (this_len === undefined || this_len > str.length) {
		this_len = str.length;
	}
	return str.substring(this_len - search.length, this_len) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"'
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  let determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  let msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;
  } else {
    const type = includes(name, '.') ? 'property' : 'argument';
    msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, 'type')}`;
  }

  msg += `. Received type ${typeof actual}`;
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented'
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');

module.exports.F = codes;


/***/ }),

/***/ 3209:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.skip = void 0;
var filter_1 = __webpack_require__(248);
function skip(count) {
    return filter_1.filter(function (_, index) { return count <= index; });
}
exports.skip = skip;
//# sourceMappingURL=skip.js.map

/***/ }),

/***/ 3221:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compare = __webpack_require__(7910)
const neq = (a, b, loose) => compare(a, b, loose) !== 0
module.exports = neq


/***/ }),

/***/ 3258:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const stripAnsi = __webpack_require__(7160);
const isFullwidthCodePoint = __webpack_require__(4732);
const emojiRegex = __webpack_require__(7001);

const stringWidth = string => {
	if (typeof string !== 'string' || string.length === 0) {
		return 0;
	}

	string = stripAnsi(string);

	if (string.length === 0) {
		return 0;
	}

	string = string.replace(emojiRegex(), '  ');

	let width = 0;

	for (let i = 0; i < string.length; i++) {
		const code = string.codePointAt(i);

		// Ignore control characters
		if (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {
			continue;
		}

		// Ignore combining characters
		if (code >= 0x300 && code <= 0x36F) {
			continue;
		}

		// Surrogates
		if (code > 0xFFFF) {
			i++;
		}

		width += isFullwidthCodePoint(code) ? 2 : 1;
	}

	return width;
};

module.exports = stringWidth;
// TODO: remove this in the next major version
module.exports["default"] = stringWidth;


/***/ }),

/***/ 3294:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hr: () => (/* binding */ getFeaturesPath),
/* harmony export */   mw: () => (/* binding */ getCliRootPath),
/* harmony export */   vD: () => (/* binding */ getTemplatesPath),
/* harmony export */   wD: () => (/* binding */ getPackageJsonPath),
/* harmony export */   zl: () => (/* binding */ getFeaturesJsonPath)
/* harmony export */ });
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9896);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6928);
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7016);
/**
 * Path resolution utility for Package Installer CLI
 * Centralized path resolution logic that works for both local development and global installations
 */



/**
 * Get the CLI installation root directory
 * Works for both local development and global installations across multiple package managers
 */
function getCliRootPath() {
    const __filename = (0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)("file:///home/sharique/desktop/shariq-projects/package-installer-cli/dist/utils/pathResolver.js");
    const __dirname = path__WEBPACK_IMPORTED_MODULE_1__.dirname(__filename);
    // All possible package names across different package managers
    const packageNames = [
        '@0xshariq/package-installer', // npm
        'package-installer-cli', // PyPI, RubyGems, Rust crates
        'go_package_installer_cli' // Go (from github.com/0xshariq/go_package_installer_cli)
    ];
    // Method 1: Walk up the directory tree to find package.json with any of our package names
    let currentDir = __dirname;
    while (currentDir !== path__WEBPACK_IMPORTED_MODULE_1__.dirname(currentDir)) {
        const packageJsonPath = path__WEBPACK_IMPORTED_MODULE_1__.join(currentDir, 'package.json');
        if (fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(packageJsonPath)) {
            try {
                const packageJson = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(packageJsonPath, 'utf-8'));
                if (packageNames.includes(packageJson.name) && fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(path__WEBPACK_IMPORTED_MODULE_1__.join(currentDir, 'features'))) {
                    return currentDir;
                }
            }
            catch (error) {
                // Continue searching
            }
        }
        currentDir = path__WEBPACK_IMPORTED_MODULE_1__.dirname(currentDir);
    }
    // Method 2: Check if this is a local development environment
    const localDevPath = path__WEBPACK_IMPORTED_MODULE_1__.resolve(__dirname, '..', '..');
    if (fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(path__WEBPACK_IMPORTED_MODULE_1__.join(localDevPath, 'package.json')) &&
        fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(path__WEBPACK_IMPORTED_MODULE_1__.join(localDevPath, 'features'))) {
        try {
            const packageJson = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(path__WEBPACK_IMPORTED_MODULE_1__.join(localDevPath, 'package.json'), 'utf-8'));
            if (packageNames.includes(packageJson.name)) {
                return localDevPath;
            }
        }
        catch (error) {
            // Continue to other methods
        }
    }
    // Method 3: Check current working directory (in case the CLI is run from the project root)
    const cwdPath = process.cwd();
    const workspacePackage = path__WEBPACK_IMPORTED_MODULE_1__.join(cwdPath, 'package.json');
    if (fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(workspacePackage) && fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(path__WEBPACK_IMPORTED_MODULE_1__.join(cwdPath, 'features'))) {
        try {
            const packageJson = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(workspacePackage, 'utf-8'));
            if (packageNames.includes(packageJson.name)) {
                return cwdPath;
            }
        }
        catch (error) {
            // Continue to other methods
        }
    }
    // Method 4: Try to resolve using require.resolve for npm installations
    for (const packageName of packageNames) {
        try {
            const packageMainPath = require.resolve(`${packageName}/package.json`);
            const resolvedRoot = path__WEBPACK_IMPORTED_MODULE_1__.dirname(packageMainPath);
            if (fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(path__WEBPACK_IMPORTED_MODULE_1__.join(resolvedRoot, 'features'))) {
                return resolvedRoot;
            }
        }
        catch (error) {
            // Package not found in require cache, try next
        }
    }
    // Method 5: Check common global installation paths for all package managers
    const globalPaths = [];
    const homeDir = process.env.HOME || process.env.USERPROFILE || '';
    // npm global paths
    globalPaths.push(
    // Linux/macOS npm global paths
    '/usr/local/lib/node_modules/@0xshariq/package-installer', '/usr/lib/node_modules/@0xshariq/package-installer', 
    // User-specific npm global paths
    path__WEBPACK_IMPORTED_MODULE_1__.join(homeDir, '.npm-global/lib/node_modules/@0xshariq/package-installer'), path__WEBPACK_IMPORTED_MODULE_1__.join(homeDir, '.npm/lib/node_modules/@0xshariq/package-installer'), 
    // Windows npm global paths
    path__WEBPACK_IMPORTED_MODULE_1__.join(process.env.APPDATA || '', 'npm/node_modules/@0xshariq/package-installer'), path__WEBPACK_IMPORTED_MODULE_1__.join(process.env.ProgramFiles || '', 'nodejs/node_modules/@0xshariq/package-installer'));
    // Check all global paths
    for (const globalPath of globalPaths) {
        if (fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(globalPath) && fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(path__WEBPACK_IMPORTED_MODULE_1__.join(globalPath, 'features'))) {
            return globalPath;
        }
    }
    // Method 6: Check if npm prefix is available and use it (for npm installations)
    try {
        const { execSync } = require('child_process');
        const npmPrefix = execSync('npm config get prefix', { encoding: 'utf8' }).trim();
        const npmGlobalPath = path__WEBPACK_IMPORTED_MODULE_1__.join(npmPrefix, 'lib/node_modules/@0xshariq/package-installer');
        if (fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(npmGlobalPath) && fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(path__WEBPACK_IMPORTED_MODULE_1__.join(npmGlobalPath, 'features'))) {
            return npmGlobalPath;
        }
    }
    catch (error) {
        // npm not available or command failed
    }
    // Method 7: Check relative to script location as last resort
    const scriptRelativePath = path__WEBPACK_IMPORTED_MODULE_1__.resolve(__dirname, '../../');
    if (fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(path__WEBPACK_IMPORTED_MODULE_1__.join(scriptRelativePath, 'features'))) {
        return scriptRelativePath;
    }
    // Final fallback: use the local development path but warn user
    console.warn('⚠️  Could not resolve CLI root path, using fallback. Some features may not work correctly.');
    console.warn('💡 Try running with npx for better compatibility: npx @0xshariq/package-installer');
    return path__WEBPACK_IMPORTED_MODULE_1__.resolve(__dirname, '..', '..');
}
/**
 * Get the path to the features directory
 */
function getFeaturesPath() {
    return path__WEBPACK_IMPORTED_MODULE_1__.join(getCliRootPath(), 'features');
}
/**
 * Get the path to the features.json file
 */
function getFeaturesJsonPath() {
    return path__WEBPACK_IMPORTED_MODULE_1__.join(getFeaturesPath(), 'features.json');
}
/**
 * Get the path to the templates directory
 */
function getTemplatesPath() {
    return path__WEBPACK_IMPORTED_MODULE_1__.join(getCliRootPath(), 'templates');
}
/**
 * Get the path to the package.json file
 */
function getPackageJsonPath() {
    return path__WEBPACK_IMPORTED_MODULE_1__.join(getCliRootPath(), 'package.json');
}


/***/ }),

/***/ 3318:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.groupBy = void 0;
var Observable_1 = __webpack_require__(541);
var innerFrom_1 = __webpack_require__(2018);
var Subject_1 = __webpack_require__(6118);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function groupBy(keySelector, elementOrOptions, duration, connector) {
    return lift_1.operate(function (source, subscriber) {
        var element;
        if (!elementOrOptions || typeof elementOrOptions === 'function') {
            element = elementOrOptions;
        }
        else {
            (duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector);
        }
        var groups = new Map();
        var notify = function (cb) {
            groups.forEach(cb);
            cb(subscriber);
        };
        var handleError = function (err) { return notify(function (consumer) { return consumer.error(err); }); };
        var activeGroups = 0;
        var teardownAttempted = false;
        var groupBySourceSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, function (value) {
            try {
                var key_1 = keySelector(value);
                var group_1 = groups.get(key_1);
                if (!group_1) {
                    groups.set(key_1, (group_1 = connector ? connector() : new Subject_1.Subject()));
                    var grouped = createGroupedObservable(key_1, group_1);
                    subscriber.next(grouped);
                    if (duration) {
                        var durationSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(group_1, function () {
                            group_1.complete();
                            durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
                        }, undefined, undefined, function () { return groups.delete(key_1); });
                        groupBySourceSubscriber.add(innerFrom_1.innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
                    }
                }
                group_1.next(element ? element(value) : value);
            }
            catch (err) {
                handleError(err);
            }
        }, function () { return notify(function (consumer) { return consumer.complete(); }); }, handleError, function () { return groups.clear(); }, function () {
            teardownAttempted = true;
            return activeGroups === 0;
        });
        source.subscribe(groupBySourceSubscriber);
        function createGroupedObservable(key, groupSubject) {
            var result = new Observable_1.Observable(function (groupSubscriber) {
                activeGroups++;
                var innerSub = groupSubject.subscribe(groupSubscriber);
                return function () {
                    innerSub.unsubscribe();
                    --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();
                };
            });
            result.key = key;
            return result;
        }
    });
}
exports.groupBy = groupBy;
//# sourceMappingURL=groupBy.js.map

/***/ }),

/***/ 3432:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.forkJoin = void 0;
var Observable_1 = __webpack_require__(541);
var argsArgArrayOrObject_1 = __webpack_require__(9197);
var innerFrom_1 = __webpack_require__(2018);
var args_1 = __webpack_require__(3522);
var OperatorSubscriber_1 = __webpack_require__(1908);
var mapOneOrManyArgs_1 = __webpack_require__(4078);
var createObject_1 = __webpack_require__(2460);
function forkJoin() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var resultSelector = args_1.popResultSelector(args);
    var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;
    var result = new Observable_1.Observable(function (subscriber) {
        var length = sources.length;
        if (!length) {
            subscriber.complete();
            return;
        }
        var values = new Array(length);
        var remainingCompletions = length;
        var remainingEmissions = length;
        var _loop_1 = function (sourceIndex) {
            var hasValue = false;
            innerFrom_1.innerFrom(sources[sourceIndex]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                if (!hasValue) {
                    hasValue = true;
                    remainingEmissions--;
                }
                values[sourceIndex] = value;
            }, function () { return remainingCompletions--; }, undefined, function () {
                if (!remainingCompletions || !hasValue) {
                    if (!remainingEmissions) {
                        subscriber.next(keys ? createObject_1.createObject(keys, values) : values);
                    }
                    subscriber.complete();
                }
            }));
        };
        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
            _loop_1(sourceIndex);
        }
    });
    return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;
}
exports.forkJoin = forkJoin;
//# sourceMappingURL=forkJoin.js.map

/***/ }),

/***/ 3435:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.publishLast = void 0;
var AsyncSubject_1 = __webpack_require__(5960);
var ConnectableObservable_1 = __webpack_require__(3941);
function publishLast() {
    return function (source) {
        var subject = new AsyncSubject_1.AsyncSubject();
        return new ConnectableObservable_1.ConnectableObservable(source, function () { return subject; });
    };
}
exports.publishLast = publishLast;
//# sourceMappingURL=publishLast.js.map

/***/ }),

/***/ 3477:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const u = (__webpack_require__(8556).fromPromise)
const path = __webpack_require__(6928)
const fs = __webpack_require__(6903)

const { mkdirs, mkdirsSync } = __webpack_require__(4544)

const { symlinkPaths, symlinkPathsSync } = __webpack_require__(5220)
const { symlinkType, symlinkTypeSync } = __webpack_require__(1686)

const { pathExists } = __webpack_require__(802)

const { areIdentical } = __webpack_require__(1560)

async function createSymlink (srcpath, dstpath, type) {
  let stats
  try {
    stats = await fs.lstat(dstpath)
  } catch { }

  if (stats && stats.isSymbolicLink()) {
    const [srcStat, dstStat] = await Promise.all([
      fs.stat(srcpath),
      fs.stat(dstpath)
    ])

    if (areIdentical(srcStat, dstStat)) return
  }

  const relative = await symlinkPaths(srcpath, dstpath)
  srcpath = relative.toDst
  const toType = await symlinkType(relative.toCwd, type)
  const dir = path.dirname(dstpath)

  if (!(await pathExists(dir))) {
    await mkdirs(dir)
  }

  return fs.symlink(srcpath, dstpath, toType)
}

function createSymlinkSync (srcpath, dstpath, type) {
  let stats
  try {
    stats = fs.lstatSync(dstpath)
  } catch { }
  if (stats && stats.isSymbolicLink()) {
    const srcStat = fs.statSync(srcpath)
    const dstStat = fs.statSync(dstpath)
    if (areIdentical(srcStat, dstStat)) return
  }

  const relative = symlinkPathsSync(srcpath, dstpath)
  srcpath = relative.toDst
  type = symlinkTypeSync(relative.toCwd, type)
  const dir = path.dirname(dstpath)
  const exists = fs.existsSync(dir)
  if (exists) return fs.symlinkSync(srcpath, dstpath, type)
  mkdirsSync(dir)
  return fs.symlinkSync(srcpath, dstpath, type)
}

module.exports = {
  createSymlink: u(createSymlink),
  createSymlinkSync
}


/***/ }),

/***/ 3491:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Scheduler = void 0;
var dateTimestampProvider_1 = __webpack_require__(1549);
var Scheduler = (function () {
    function Scheduler(schedulerActionCtor, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler.now = dateTimestampProvider_1.dateTimestampProvider.now;
    return Scheduler;
}());
exports.Scheduler = Scheduler;
//# sourceMappingURL=Scheduler.js.map

/***/ }),

/***/ 3522:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.popNumber = exports.popScheduler = exports.popResultSelector = void 0;
var isFunction_1 = __webpack_require__(8403);
var isScheduler_1 = __webpack_require__(7242);
function last(arr) {
    return arr[arr.length - 1];
}
function popResultSelector(args) {
    return isFunction_1.isFunction(last(args)) ? args.pop() : undefined;
}
exports.popResultSelector = popResultSelector;
function popScheduler(args) {
    return isScheduler_1.isScheduler(last(args)) ? args.pop() : undefined;
}
exports.popScheduler = popScheduler;
function popNumber(args, defaultValue) {
    return typeof last(args) === 'number' ? args.pop() : defaultValue;
}
exports.popNumber = popNumber;
//# sourceMappingURL=args.js.map

/***/ }),

/***/ 3523:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @otplib/plugin-thirty-two
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 12.0.1
 * @license: MIT
 **/


Object.defineProperty(exports, "__esModule", ({ value: true }));

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var thirtyTwo = _interopDefault(__webpack_require__(942));

const keyDecoder = (encodedSecret, encoding) => {
  return thirtyTwo.decode(encodedSecret).toString(encoding);
};
const keyEncoder = (secret, encoding) => {
  return thirtyTwo.encode(Buffer.from(secret, encoding).toString('ascii')).toString().replace(/=/g, '');
};

exports.keyDecoder = keyDecoder;
exports.keyEncoder = keyEncoder;


/***/ }),

/***/ 3544:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.publishReplay = void 0;
var ReplaySubject_1 = __webpack_require__(3847);
var multicast_1 = __webpack_require__(7662);
var isFunction_1 = __webpack_require__(8403);
function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
    if (selectorOrScheduler && !isFunction_1.isFunction(selectorOrScheduler)) {
        timestampProvider = selectorOrScheduler;
    }
    var selector = isFunction_1.isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;
    return function (source) { return multicast_1.multicast(new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source); };
}
exports.publishReplay = publishReplay;
//# sourceMappingURL=publishReplay.js.map

/***/ }),

/***/ 3577:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const readline = __webpack_require__(3785);
const chalk = __webpack_require__(2404);
const cliCursor = __webpack_require__(131);
const cliSpinners = __webpack_require__(6762);
const logSymbols = __webpack_require__(9736);
const stripAnsi = __webpack_require__(7160);
const wcwidth = __webpack_require__(8613);
const isInteractive = __webpack_require__(6218);
const isUnicodeSupported = __webpack_require__(70);
const {BufferListStream} = __webpack_require__(7450);

const TEXT = Symbol('text');
const PREFIX_TEXT = Symbol('prefixText');
const ASCII_ETX_CODE = 0x03; // Ctrl+C emits this code

class StdinDiscarder {
	constructor() {
		this.requests = 0;

		this.mutedStream = new BufferListStream();
		this.mutedStream.pipe(process.stdout);

		const self = this; // eslint-disable-line unicorn/no-this-assignment
		this.ourEmit = function (event, data, ...args) {
			const {stdin} = process;
			if (self.requests > 0 || stdin.emit === self.ourEmit) {
				if (event === 'keypress') { // Fixes readline behavior
					return;
				}

				if (event === 'data' && data.includes(ASCII_ETX_CODE)) {
					process.emit('SIGINT');
				}

				Reflect.apply(self.oldEmit, this, [event, data, ...args]);
			} else {
				Reflect.apply(process.stdin.emit, this, [event, data, ...args]);
			}
		};
	}

	start() {
		this.requests++;

		if (this.requests === 1) {
			this.realStart();
		}
	}

	stop() {
		if (this.requests <= 0) {
			throw new Error('`stop` called more times than `start`');
		}

		this.requests--;

		if (this.requests === 0) {
			this.realStop();
		}
	}

	realStart() {
		// No known way to make it work reliably on Windows
		if (process.platform === 'win32') {
			return;
		}

		this.rl = readline.createInterface({
			input: process.stdin,
			output: this.mutedStream
		});

		this.rl.on('SIGINT', () => {
			if (process.listenerCount('SIGINT') === 0) {
				process.emit('SIGINT');
			} else {
				this.rl.close();
				process.kill(process.pid, 'SIGINT');
			}
		});
	}

	realStop() {
		if (process.platform === 'win32') {
			return;
		}

		this.rl.close();
		this.rl = undefined;
	}
}

let stdinDiscarder;

class Ora {
	constructor(options) {
		if (!stdinDiscarder) {
			stdinDiscarder = new StdinDiscarder();
		}

		if (typeof options === 'string') {
			options = {
				text: options
			};
		}

		this.options = {
			text: '',
			color: 'cyan',
			stream: process.stderr,
			discardStdin: true,
			...options
		};

		this.spinner = this.options.spinner;

		this.color = this.options.color;
		this.hideCursor = this.options.hideCursor !== false;
		this.interval = this.options.interval || this.spinner.interval || 100;
		this.stream = this.options.stream;
		this.id = undefined;
		this.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : isInteractive({stream: this.stream});
		this.isSilent = typeof this.options.isSilent === 'boolean' ? this.options.isSilent : false;

		// Set *after* `this.stream`
		this.text = this.options.text;
		this.prefixText = this.options.prefixText;
		this.linesToClear = 0;
		this.indent = this.options.indent;
		this.discardStdin = this.options.discardStdin;
		this.isDiscardingStdin = false;
	}

	get indent() {
		return this._indent;
	}

	set indent(indent = 0) {
		if (!(indent >= 0 && Number.isInteger(indent))) {
			throw new Error('The `indent` option must be an integer from 0 and up');
		}

		this._indent = indent;
	}

	_updateInterval(interval) {
		if (interval !== undefined) {
			this.interval = interval;
		}
	}

	get spinner() {
		return this._spinner;
	}

	set spinner(spinner) {
		this.frameIndex = 0;

		if (typeof spinner === 'object') {
			if (spinner.frames === undefined) {
				throw new Error('The given spinner must have a `frames` property');
			}

			this._spinner = spinner;
		} else if (!isUnicodeSupported()) {
			this._spinner = cliSpinners.line;
		} else if (spinner === undefined) {
			// Set default spinner
			this._spinner = cliSpinners.dots;
		} else if (spinner !== 'default' && cliSpinners[spinner]) {
			this._spinner = cliSpinners[spinner];
		} else {
			throw new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);
		}

		this._updateInterval(this._spinner.interval);
	}

	get text() {
		return this[TEXT];
	}

	set text(value) {
		this[TEXT] = value;
		this.updateLineCount();
	}

	get prefixText() {
		return this[PREFIX_TEXT];
	}

	set prefixText(value) {
		this[PREFIX_TEXT] = value;
		this.updateLineCount();
	}

	get isSpinning() {
		return this.id !== undefined;
	}

	getFullPrefixText(prefixText = this[PREFIX_TEXT], postfix = ' ') {
		if (typeof prefixText === 'string') {
			return prefixText + postfix;
		}

		if (typeof prefixText === 'function') {
			return prefixText() + postfix;
		}

		return '';
	}

	updateLineCount() {
		const columns = this.stream.columns || 80;
		const fullPrefixText = this.getFullPrefixText(this.prefixText, '-');
		this.lineCount = 0;
		for (const line of stripAnsi(fullPrefixText + '--' + this[TEXT]).split('\n')) {
			this.lineCount += Math.max(1, Math.ceil(wcwidth(line) / columns));
		}
	}

	get isEnabled() {
		return this._isEnabled && !this.isSilent;
	}

	set isEnabled(value) {
		if (typeof value !== 'boolean') {
			throw new TypeError('The `isEnabled` option must be a boolean');
		}

		this._isEnabled = value;
	}

	get isSilent() {
		return this._isSilent;
	}

	set isSilent(value) {
		if (typeof value !== 'boolean') {
			throw new TypeError('The `isSilent` option must be a boolean');
		}

		this._isSilent = value;
	}

	frame() {
		const {frames} = this.spinner;
		let frame = frames[this.frameIndex];

		if (this.color) {
			frame = chalk[this.color](frame);
		}

		this.frameIndex = ++this.frameIndex % frames.length;
		const fullPrefixText = (typeof this.prefixText === 'string' && this.prefixText !== '') ? this.prefixText + ' ' : '';
		const fullText = typeof this.text === 'string' ? ' ' + this.text : '';

		return fullPrefixText + frame + fullText;
	}

	clear() {
		if (!this.isEnabled || !this.stream.isTTY) {
			return this;
		}

		for (let i = 0; i < this.linesToClear; i++) {
			if (i > 0) {
				this.stream.moveCursor(0, -1);
			}

			this.stream.clearLine();
			this.stream.cursorTo(this.indent);
		}

		this.linesToClear = 0;

		return this;
	}

	render() {
		if (this.isSilent) {
			return this;
		}

		this.clear();
		this.stream.write(this.frame());
		this.linesToClear = this.lineCount;

		return this;
	}

	start(text) {
		if (text) {
			this.text = text;
		}

		if (this.isSilent) {
			return this;
		}

		if (!this.isEnabled) {
			if (this.text) {
				this.stream.write(`- ${this.text}\n`);
			}

			return this;
		}

		if (this.isSpinning) {
			return this;
		}

		if (this.hideCursor) {
			cliCursor.hide(this.stream);
		}

		if (this.discardStdin && process.stdin.isTTY) {
			this.isDiscardingStdin = true;
			stdinDiscarder.start();
		}

		this.render();
		this.id = setInterval(this.render.bind(this), this.interval);

		return this;
	}

	stop() {
		if (!this.isEnabled) {
			return this;
		}

		clearInterval(this.id);
		this.id = undefined;
		this.frameIndex = 0;
		this.clear();
		if (this.hideCursor) {
			cliCursor.show(this.stream);
		}

		if (this.discardStdin && process.stdin.isTTY && this.isDiscardingStdin) {
			stdinDiscarder.stop();
			this.isDiscardingStdin = false;
		}

		return this;
	}

	succeed(text) {
		return this.stopAndPersist({symbol: logSymbols.success, text});
	}

	fail(text) {
		return this.stopAndPersist({symbol: logSymbols.error, text});
	}

	warn(text) {
		return this.stopAndPersist({symbol: logSymbols.warning, text});
	}

	info(text) {
		return this.stopAndPersist({symbol: logSymbols.info, text});
	}

	stopAndPersist(options = {}) {
		if (this.isSilent) {
			return this;
		}

		const prefixText = options.prefixText || this.prefixText;
		const text = options.text || this.text;
		const fullText = (typeof text === 'string') ? ' ' + text : '';

		this.stop();
		this.stream.write(`${this.getFullPrefixText(prefixText, ' ')}${options.symbol || ' '}${fullText}\n`);

		return this;
	}
}

const oraFactory = function (options) {
	return new Ora(options);
};

module.exports = oraFactory;

module.exports.promise = (action, options) => {
	// eslint-disable-next-line promise/prefer-await-to-then
	if (typeof action.then !== 'function') {
		throw new TypeError('Parameter `action` must be a Promise');
	}

	const spinner = new Ora(options);
	spinner.start();

	(async () => {
		try {
			await action;
			spinner.succeed();
		} catch {
			spinner.fail();
		}
	})();

	return spinner;
};


/***/ }),

/***/ 3582:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.windowWhen = void 0;
var Subject_1 = __webpack_require__(6118);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
function windowWhen(closingSelector) {
    return lift_1.operate(function (source, subscriber) {
        var window;
        var closingSubscriber;
        var handleError = function (err) {
            window.error(err);
            subscriber.error(err);
        };
        var openWindow = function () {
            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
            window === null || window === void 0 ? void 0 : window.complete();
            window = new Subject_1.Subject();
            subscriber.next(window.asObservable());
            var closingNotifier;
            try {
                closingNotifier = innerFrom_1.innerFrom(closingSelector());
            }
            catch (err) {
                handleError(err);
                return;
            }
            closingNotifier.subscribe((closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openWindow, openWindow, handleError)));
        };
        openWindow();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) { return window.next(value); }, function () {
            window.complete();
            subscriber.complete();
        }, handleError, function () {
            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
            window = null;
        }));
    });
}
exports.windowWhen = windowWhen;
//# sourceMappingURL=windowWhen.js.map

/***/ }),

/***/ 3584:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.finalize = void 0;
var lift_1 = __webpack_require__(4698);
function finalize(callback) {
    return lift_1.operate(function (source, subscriber) {
        try {
            source.subscribe(subscriber);
        }
        finally {
            subscriber.add(callback);
        }
    });
}
exports.finalize = finalize;
//# sourceMappingURL=finalize.js.map

/***/ }),

/***/ 3615:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.asap = exports.asapScheduler = void 0;
var AsapAction_1 = __webpack_require__(2277);
var AsapScheduler_1 = __webpack_require__(1070);
exports.asapScheduler = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
exports.asap = exports.asapScheduler;
//# sourceMappingURL=asap.js.map

/***/ }),

/***/ 3647:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.every = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function every(predicate, thisArg) {
    return lift_1.operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            if (!predicate.call(thisArg, value, index++, source)) {
                subscriber.next(false);
                subscriber.complete();
            }
        }, function () {
            subscriber.next(true);
            subscriber.complete();
        }));
    });
}
exports.every = every;
//# sourceMappingURL=every.js.map

/***/ }),

/***/ 3704:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const Range = __webpack_require__(9165)
const minSatisfying = (versions, range, options) => {
  let min = null
  let minSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}
module.exports = minSatisfying


/***/ }),

/***/ 3720:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.shareReplay = void 0;
var ReplaySubject_1 = __webpack_require__(3847);
var share_1 = __webpack_require__(5899);
function shareReplay(configOrBufferSize, windowTime, scheduler) {
    var _a, _b, _c;
    var bufferSize;
    var refCount = false;
    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
        (_a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler);
    }
    else {
        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);
    }
    return share_1.share({
        connector: function () { return new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler); },
        resetOnError: true,
        resetOnComplete: false,
        resetOnRefCountZero: refCount,
    });
}
exports.shareReplay = shareReplay;
//# sourceMappingURL=shareReplay.js.map

/***/ }),

/***/ 3742:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.expand = void 0;
var lift_1 = __webpack_require__(4698);
var mergeInternals_1 = __webpack_require__(8408);
function expand(project, concurrent, scheduler) {
    if (concurrent === void 0) { concurrent = Infinity; }
    concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
    return lift_1.operate(function (source, subscriber) {
        return mergeInternals_1.mergeInternals(source, subscriber, project, concurrent, undefined, true, scheduler);
    });
}
exports.expand = expand;
//# sourceMappingURL=expand.js.map

/***/ }),

/***/ 3750:
/***/ ((module) => {

let messages = [];
let level = 0;

const debug = (msg, min) => {
  if (level >= min) {
    messages.push(msg);
  }
};

debug.WARN = 1;
debug.INFO = 2;
debug.DEBUG = 3;

debug.reset = () => {
  messages = [];
};

debug.setDebugLevel = (v) => {
  level = v;
};

debug.warn = (msg) => debug(msg, debug.WARN);
debug.info = (msg) => debug(msg, debug.INFO);
debug.debug = (msg) => debug(msg, debug.DEBUG);

debug.debugMessages = () => messages;

module.exports = debug;


/***/ }),

/***/ 3757:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Ay: () => (/* binding */ source)
});

// UNUSED EXPORTS: Chalk, backgroundColorNames, backgroundColors, chalkStderr, colorNames, colors, foregroundColorNames, foregroundColors, modifierNames, modifiers, supportsColor, supportsColorStderr

;// ./node_modules/.pnpm/chalk@5.6.0/node_modules/chalk/source/vendor/ansi-styles/index.js
const ANSI_BACKGROUND_OFFSET = 10;

const wrapAnsi16 = (offset = 0) => code => `\u001B[${code + offset}m`;

const wrapAnsi256 = (offset = 0) => code => `\u001B[${38 + offset};5;${code}m`;

const wrapAnsi16m = (offset = 0) => (red, green, blue) => `\u001B[${38 + offset};2;${red};${green};${blue}m`;

const styles = {
	modifier: {
		reset: [0, 0],
		// 21 isn't widely supported and 22 does the same thing
		bold: [1, 22],
		dim: [2, 22],
		italic: [3, 23],
		underline: [4, 24],
		overline: [53, 55],
		inverse: [7, 27],
		hidden: [8, 28],
		strikethrough: [9, 29],
	},
	color: {
		black: [30, 39],
		red: [31, 39],
		green: [32, 39],
		yellow: [33, 39],
		blue: [34, 39],
		magenta: [35, 39],
		cyan: [36, 39],
		white: [37, 39],

		// Bright color
		blackBright: [90, 39],
		gray: [90, 39], // Alias of `blackBright`
		grey: [90, 39], // Alias of `blackBright`
		redBright: [91, 39],
		greenBright: [92, 39],
		yellowBright: [93, 39],
		blueBright: [94, 39],
		magentaBright: [95, 39],
		cyanBright: [96, 39],
		whiteBright: [97, 39],
	},
	bgColor: {
		bgBlack: [40, 49],
		bgRed: [41, 49],
		bgGreen: [42, 49],
		bgYellow: [43, 49],
		bgBlue: [44, 49],
		bgMagenta: [45, 49],
		bgCyan: [46, 49],
		bgWhite: [47, 49],

		// Bright color
		bgBlackBright: [100, 49],
		bgGray: [100, 49], // Alias of `bgBlackBright`
		bgGrey: [100, 49], // Alias of `bgBlackBright`
		bgRedBright: [101, 49],
		bgGreenBright: [102, 49],
		bgYellowBright: [103, 49],
		bgBlueBright: [104, 49],
		bgMagentaBright: [105, 49],
		bgCyanBright: [106, 49],
		bgWhiteBright: [107, 49],
	},
};

const modifierNames = Object.keys(styles.modifier);
const foregroundColorNames = Object.keys(styles.color);
const backgroundColorNames = Object.keys(styles.bgColor);
const colorNames = [...foregroundColorNames, ...backgroundColorNames];

function assembleStyles() {
	const codes = new Map();

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`,
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false,
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false,
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	styles.color.ansi = wrapAnsi16();
	styles.color.ansi256 = wrapAnsi256();
	styles.color.ansi16m = wrapAnsi16m();
	styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
	styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
	styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);

	// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js
	Object.defineProperties(styles, {
		rgbToAnsi256: {
			value(red, green, blue) {
				// We use the extended greyscale palette here, with the exception of
				// black and white. normal palette only has 4 greyscale shades.
				if (red === green && green === blue) {
					if (red < 8) {
						return 16;
					}

					if (red > 248) {
						return 231;
					}

					return Math.round(((red - 8) / 247) * 24) + 232;
				}

				return 16
					+ (36 * Math.round(red / 255 * 5))
					+ (6 * Math.round(green / 255 * 5))
					+ Math.round(blue / 255 * 5);
			},
			enumerable: false,
		},
		hexToRgb: {
			value(hex) {
				const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
				if (!matches) {
					return [0, 0, 0];
				}

				let [colorString] = matches;

				if (colorString.length === 3) {
					colorString = [...colorString].map(character => character + character).join('');
				}

				const integer = Number.parseInt(colorString, 16);

				return [
					/* eslint-disable no-bitwise */
					(integer >> 16) & 0xFF,
					(integer >> 8) & 0xFF,
					integer & 0xFF,
					/* eslint-enable no-bitwise */
				];
			},
			enumerable: false,
		},
		hexToAnsi256: {
			value: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
			enumerable: false,
		},
		ansi256ToAnsi: {
			value(code) {
				if (code < 8) {
					return 30 + code;
				}

				if (code < 16) {
					return 90 + (code - 8);
				}

				let red;
				let green;
				let blue;

				if (code >= 232) {
					red = (((code - 232) * 10) + 8) / 255;
					green = red;
					blue = red;
				} else {
					code -= 16;

					const remainder = code % 36;

					red = Math.floor(code / 36) / 5;
					green = Math.floor(remainder / 6) / 5;
					blue = (remainder % 6) / 5;
				}

				const value = Math.max(red, green, blue) * 2;

				if (value === 0) {
					return 30;
				}

				// eslint-disable-next-line no-bitwise
				let result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));

				if (value === 2) {
					result += 60;
				}

				return result;
			},
			enumerable: false,
		},
		rgbToAnsi: {
			value: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),
			enumerable: false,
		},
		hexToAnsi: {
			value: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),
			enumerable: false,
		},
	});

	return styles;
}

const ansiStyles = assembleStyles();

/* harmony default export */ const ansi_styles = (ansiStyles);

// EXTERNAL MODULE: external "node:process"
var external_node_process_ = __webpack_require__(1708);
;// external "node:os"
const external_node_os_namespaceObject = __WEBPACK_EXTERNAL_createRequire_require("node:os");
// EXTERNAL MODULE: external "node:tty"
var external_node_tty_ = __webpack_require__(7066);
;// ./node_modules/.pnpm/chalk@5.6.0/node_modules/chalk/source/vendor/supports-color/index.js




// From: https://github.com/sindresorhus/has-flag/blob/main/index.js
/// function hasFlag(flag, argv = globalThis.Deno?.args ?? process.argv) {
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : external_node_process_.argv) {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}

const {env} = external_node_process_;

let flagForceColor;
if (
	hasFlag('no-color')
	|| hasFlag('no-colors')
	|| hasFlag('color=false')
	|| hasFlag('color=never')
) {
	flagForceColor = 0;
} else if (
	hasFlag('color')
	|| hasFlag('colors')
	|| hasFlag('color=true')
	|| hasFlag('color=always')
) {
	flagForceColor = 1;
}

function envForceColor() {
	if ('FORCE_COLOR' in env) {
		if (env.FORCE_COLOR === 'true') {
			return 1;
		}

		if (env.FORCE_COLOR === 'false') {
			return 0;
		}

		return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3,
	};
}

function _supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {
	const noFlagForceColor = envForceColor();
	if (noFlagForceColor !== undefined) {
		flagForceColor = noFlagForceColor;
	}

	const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;

	if (forceColor === 0) {
		return 0;
	}

	if (sniffFlags) {
		if (hasFlag('color=16m')
			|| hasFlag('color=full')
			|| hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}
	}

	// Check for Azure DevOps pipelines.
	// Has to be above the `!streamIsTTY` check.
	if ('TF_BUILD' in env && 'AGENT_NAME' in env) {
		return 1;
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (external_node_process_.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = external_node_os_namespaceObject.release().split('.');
		if (
			Number(osRelease[0]) >= 10
			&& Number(osRelease[2]) >= 10_586
		) {
			return Number(osRelease[2]) >= 14_931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['GITHUB_ACTIONS', 'GITEA_ACTIONS', 'CIRCLECI'].some(key => key in env)) {
			return 3;
		}

		if (['TRAVIS', 'APPVEYOR', 'GITLAB_CI', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if (env.TERM === 'xterm-kitty') {
		return 3;
	}

	if (env.TERM === 'xterm-ghostty') {
		return 3;
	}

	if (env.TERM === 'wezterm') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app': {
				return version >= 3 ? 3 : 2;
			}

			case 'Apple_Terminal': {
				return 2;
			}
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function createSupportsColor(stream, options = {}) {
	const level = _supportsColor(stream, {
		streamIsTTY: stream && stream.isTTY,
		...options,
	});

	return translateLevel(level);
}

const supportsColor = {
	stdout: createSupportsColor({isTTY: external_node_tty_.isatty(1)}),
	stderr: createSupportsColor({isTTY: external_node_tty_.isatty(2)}),
};

/* harmony default export */ const supports_color = (supportsColor);

;// ./node_modules/.pnpm/chalk@5.6.0/node_modules/chalk/source/utilities.js
// TODO: When targeting Node.js 16, use `String.prototype.replaceAll`.
function stringReplaceAll(string, substring, replacer) {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.slice(endIndex, index) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.slice(endIndex);
	return returnValue;
}

function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.slice(endIndex, (gotCR ? index - 1 : index)) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.slice(endIndex);
	return returnValue;
}

;// ./node_modules/.pnpm/chalk@5.6.0/node_modules/chalk/source/index.js




const {stdout: stdoutColor, stderr: stderrColor} = supports_color;

const GENERATOR = Symbol('GENERATOR');
const STYLER = Symbol('STYLER');
const IS_EMPTY = Symbol('IS_EMPTY');

// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = [
	'ansi',
	'ansi',
	'ansi256',
	'ansi16m',
];

const source_styles = Object.create(null);

const applyOptions = (object, options = {}) => {
	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
		throw new Error('The `level` option should be an integer from 0 to 3');
	}

	// Detect level if not set manually
	const colorLevel = stdoutColor ? stdoutColor.level : 0;
	object.level = options.level === undefined ? colorLevel : options.level;
};

class Chalk {
	constructor(options) {
		// eslint-disable-next-line no-constructor-return
		return chalkFactory(options);
	}
}

const chalkFactory = options => {
	const chalk = (...strings) => strings.join(' ');
	applyOptions(chalk, options);

	Object.setPrototypeOf(chalk, createChalk.prototype);

	return chalk;
};

function createChalk(options) {
	return chalkFactory(options);
}

Object.setPrototypeOf(createChalk.prototype, Function.prototype);

for (const [styleName, style] of Object.entries(ansi_styles)) {
	source_styles[styleName] = {
		get() {
			const builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);
			Object.defineProperty(this, styleName, {value: builder});
			return builder;
		},
	};
}

source_styles.visible = {
	get() {
		const builder = createBuilder(this, this[STYLER], true);
		Object.defineProperty(this, 'visible', {value: builder});
		return builder;
	},
};

const getModelAnsi = (model, level, type, ...arguments_) => {
	if (model === 'rgb') {
		if (level === 'ansi16m') {
			return ansi_styles[type].ansi16m(...arguments_);
		}

		if (level === 'ansi256') {
			return ansi_styles[type].ansi256(ansi_styles.rgbToAnsi256(...arguments_));
		}

		return ansi_styles[type].ansi(ansi_styles.rgbToAnsi(...arguments_));
	}

	if (model === 'hex') {
		return getModelAnsi('rgb', level, type, ...ansi_styles.hexToRgb(...arguments_));
	}

	return ansi_styles[type][model](...arguments_);
};

const usedModels = ['rgb', 'hex', 'ansi256'];

for (const model of usedModels) {
	source_styles[model] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(getModelAnsi(model, levelMapping[level], 'color', ...arguments_), ansi_styles.color.close, this[STYLER]);
				return createBuilder(this, styler, this[IS_EMPTY]);
			};
		},
	};

	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	source_styles[bgModel] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(getModelAnsi(model, levelMapping[level], 'bgColor', ...arguments_), ansi_styles.bgColor.close, this[STYLER]);
				return createBuilder(this, styler, this[IS_EMPTY]);
			};
		},
	};
}

const proto = Object.defineProperties(() => {}, {
	...source_styles,
	level: {
		enumerable: true,
		get() {
			return this[GENERATOR].level;
		},
		set(level) {
			this[GENERATOR].level = level;
		},
	},
});

const createStyler = (open, close, parent) => {
	let openAll;
	let closeAll;
	if (parent === undefined) {
		openAll = open;
		closeAll = close;
	} else {
		openAll = parent.openAll + open;
		closeAll = close + parent.closeAll;
	}

	return {
		open,
		close,
		openAll,
		closeAll,
		parent,
	};
};

const createBuilder = (self, _styler, _isEmpty) => {
	// Single argument is hot path, implicit coercion is faster than anything
	// eslint-disable-next-line no-implicit-coercion
	const builder = (...arguments_) => applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));

	// We alter the prototype because we must return a function, but there is
	// no way to create a function with a different prototype
	Object.setPrototypeOf(builder, proto);

	builder[GENERATOR] = self;
	builder[STYLER] = _styler;
	builder[IS_EMPTY] = _isEmpty;

	return builder;
};

const applyStyle = (self, string) => {
	if (self.level <= 0 || !string) {
		return self[IS_EMPTY] ? '' : string;
	}

	let styler = self[STYLER];

	if (styler === undefined) {
		return string;
	}

	const {openAll, closeAll} = styler;
	if (string.includes('\u001B')) {
		while (styler !== undefined) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			string = stringReplaceAll(string, styler.close, styler.open);

			styler = styler.parent;
		}
	}

	// We can move both next actions out of loop, because remaining actions in loop won't have
	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
	const lfIndex = string.indexOf('\n');
	if (lfIndex !== -1) {
		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
	}

	return openAll + string + closeAll;
};

Object.defineProperties(createChalk.prototype, source_styles);

const chalk = createChalk();
const chalkStderr = createChalk({level: stderrColor ? stderrColor.level : 0});





/* harmony default export */ const source = (chalk);


/***/ }),

/***/ 3785:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("readline");

/***/ }),

/***/ 3786:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const { InvalidArgumentError } = __webpack_require__(5367);

class Argument {
  /**
   * Initialize a new command argument with the given name and description.
   * The default is that the argument is required, and you can explicitly
   * indicate this with <> around the name. Put [] around the name for an optional argument.
   *
   * @param {string} name
   * @param {string} [description]
   */

  constructor(name, description) {
    this.description = description || '';
    this.variadic = false;
    this.parseArg = undefined;
    this.defaultValue = undefined;
    this.defaultValueDescription = undefined;
    this.argChoices = undefined;

    switch (name[0]) {
      case '<': // e.g. <required>
        this.required = true;
        this._name = name.slice(1, -1);
        break;
      case '[': // e.g. [optional]
        this.required = false;
        this._name = name.slice(1, -1);
        break;
      default:
        this.required = true;
        this._name = name;
        break;
    }

    if (this._name.length > 3 && this._name.slice(-3) === '...') {
      this.variadic = true;
      this._name = this._name.slice(0, -3);
    }
  }

  /**
   * Return argument name.
   *
   * @return {string}
   */

  name() {
    return this._name;
  }

  /**
   * @api private
   */

  _concatValue(value, previous) {
    if (previous === this.defaultValue || !Array.isArray(previous)) {
      return [value];
    }

    return previous.concat(value);
  }

  /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   *
   * @param {*} value
   * @param {string} [description]
   * @return {Argument}
   */

  default(value, description) {
    this.defaultValue = value;
    this.defaultValueDescription = description;
    return this;
  }

  /**
   * Set the custom handler for processing CLI command arguments into argument values.
   *
   * @param {Function} [fn]
   * @return {Argument}
   */

  argParser(fn) {
    this.parseArg = fn;
    return this;
  }

  /**
   * Only allow argument value to be one of choices.
   *
   * @param {string[]} values
   * @return {Argument}
   */

  choices(values) {
    this.argChoices = values.slice();
    this.parseArg = (arg, previous) => {
      if (!this.argChoices.includes(arg)) {
        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);
      }
      if (this.variadic) {
        return this._concatValue(arg, previous);
      }
      return arg;
    };
    return this;
  }

  /**
   * Make argument required.
   */
  argRequired() {
    this.required = true;
    return this;
  }

  /**
   * Make argument optional.
   */
  argOptional() {
    this.required = false;
    return this;
  }
}

/**
 * Takes an argument and returns its human readable equivalent for help usage.
 *
 * @param {Argument} arg
 * @return {string}
 * @api private
 */

function humanReadableArgName(arg) {
  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');

  return arg.required
    ? '<' + nameOutput + '>'
    : '[' + nameOutput + ']';
}

exports.Argument = Argument;
exports.humanReadableArgName = humanReadableArgName;


/***/ }),

/***/ 3802:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.distinctUntilChanged = void 0;
var identity_1 = __webpack_require__(8489);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) { keySelector = identity_1.identity; }
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return lift_1.operate(function (source, subscriber) {
        var previousKey;
        var first = true;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var currentKey = keySelector(value);
            if (first || !comparator(previousKey, currentKey)) {
                first = false;
                previousKey = currentKey;
                subscriber.next(value);
            }
        }));
    });
}
exports.distinctUntilChanged = distinctUntilChanged;
function defaultCompare(a, b) {
    return a === b;
}
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),

/***/ 3821:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findIndex = void 0;
var lift_1 = __webpack_require__(4698);
var find_1 = __webpack_require__(2993);
function findIndex(predicate, thisArg) {
    return lift_1.operate(find_1.createFind(predicate, thisArg, 'index'));
}
exports.findIndex = findIndex;
//# sourceMappingURL=findIndex.js.map

/***/ }),

/***/ 3847:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReplaySubject = void 0;
var Subject_1 = __webpack_require__(6118);
var dateTimestampProvider_1 = __webpack_require__(1549);
var ReplaySubject = (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) { _bufferSize = Infinity; }
        if (_windowTime === void 0) { _windowTime = Infinity; }
        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider_1.dateTimestampProvider; }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
    }
    ReplaySubject.prototype.next = function (value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
            subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
    };
    ReplaySubject.prototype._trimBuffer = function () {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last = 0;
            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                last = i;
            }
            last && _buffer.splice(0, last + 1);
        }
    };
    return ReplaySubject;
}(Subject_1.Subject));
exports.ReplaySubject = ReplaySubject;
//# sourceMappingURL=ReplaySubject.js.map

/***/ }),

/***/ 3858:
/***/ ((module) => {

module['exports'] = function(colors) {
  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green',
    'blue', 'white', 'cyan', 'magenta', 'brightYellow', 'brightRed',
    'brightGreen', 'brightBlue', 'brightWhite', 'brightCyan', 'brightMagenta'];
  return function(letter, i, exploded) {
    return letter === ' ' ? letter :
      colors[
          available[Math.round(Math.random() * (available.length - 2))]
      ](letter);
  };
};


/***/ }),

/***/ 3861:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scheduled = void 0;
var scheduleObservable_1 = __webpack_require__(8216);
var schedulePromise_1 = __webpack_require__(7656);
var scheduleArray_1 = __webpack_require__(992);
var scheduleIterable_1 = __webpack_require__(6035);
var scheduleAsyncIterable_1 = __webpack_require__(7791);
var isInteropObservable_1 = __webpack_require__(7451);
var isPromise_1 = __webpack_require__(8910);
var isArrayLike_1 = __webpack_require__(9109);
var isIterable_1 = __webpack_require__(6897);
var isAsyncIterable_1 = __webpack_require__(8653);
var throwUnobservableError_1 = __webpack_require__(6603);
var isReadableStreamLike_1 = __webpack_require__(9856);
var scheduleReadableStreamLike_1 = __webpack_require__(30);
function scheduled(input, scheduler) {
    if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
            return scheduleObservable_1.scheduleObservable(input, scheduler);
        }
        if (isArrayLike_1.isArrayLike(input)) {
            return scheduleArray_1.scheduleArray(input, scheduler);
        }
        if (isPromise_1.isPromise(input)) {
            return schedulePromise_1.schedulePromise(input, scheduler);
        }
        if (isAsyncIterable_1.isAsyncIterable(input)) {
            return scheduleAsyncIterable_1.scheduleAsyncIterable(input, scheduler);
        }
        if (isIterable_1.isIterable(input)) {
            return scheduleIterable_1.scheduleIterable(input, scheduler);
        }
        if (isReadableStreamLike_1.isReadableStreamLike(input)) {
            return scheduleReadableStreamLike_1.scheduleReadableStreamLike(input, scheduler);
        }
    }
    throw throwUnobservableError_1.createInvalidObservableTypeError(input);
}
exports.scheduled = scheduled;
//# sourceMappingURL=scheduled.js.map

/***/ }),

/***/ 3862:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toArray = void 0;
var reduce_1 = __webpack_require__(1848);
var lift_1 = __webpack_require__(4698);
var arrReducer = function (arr, value) { return (arr.push(value), arr); };
function toArray() {
    return lift_1.operate(function (source, subscriber) {
        reduce_1.reduce(arrReducer, [])(source).subscribe(subscriber);
    });
}
exports.toArray = toArray;
//# sourceMappingURL=toArray.js.map

/***/ }),

/***/ 3877:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"dots":{"interval":80,"frames":["⠋","⠙","⠹","⠸","⠼","⠴","⠦","⠧","⠇","⠏"]},"dots2":{"interval":80,"frames":["⣾","⣽","⣻","⢿","⡿","⣟","⣯","⣷"]},"dots3":{"interval":80,"frames":["⠋","⠙","⠚","⠞","⠖","⠦","⠴","⠲","⠳","⠓"]},"dots4":{"interval":80,"frames":["⠄","⠆","⠇","⠋","⠙","⠸","⠰","⠠","⠰","⠸","⠙","⠋","⠇","⠆"]},"dots5":{"interval":80,"frames":["⠋","⠙","⠚","⠒","⠂","⠂","⠒","⠲","⠴","⠦","⠖","⠒","⠐","⠐","⠒","⠓","⠋"]},"dots6":{"interval":80,"frames":["⠁","⠉","⠙","⠚","⠒","⠂","⠂","⠒","⠲","⠴","⠤","⠄","⠄","⠤","⠴","⠲","⠒","⠂","⠂","⠒","⠚","⠙","⠉","⠁"]},"dots7":{"interval":80,"frames":["⠈","⠉","⠋","⠓","⠒","⠐","⠐","⠒","⠖","⠦","⠤","⠠","⠠","⠤","⠦","⠖","⠒","⠐","⠐","⠒","⠓","⠋","⠉","⠈"]},"dots8":{"interval":80,"frames":["⠁","⠁","⠉","⠙","⠚","⠒","⠂","⠂","⠒","⠲","⠴","⠤","⠄","⠄","⠤","⠠","⠠","⠤","⠦","⠖","⠒","⠐","⠐","⠒","⠓","⠋","⠉","⠈","⠈"]},"dots9":{"interval":80,"frames":["⢹","⢺","⢼","⣸","⣇","⡧","⡗","⡏"]},"dots10":{"interval":80,"frames":["⢄","⢂","⢁","⡁","⡈","⡐","⡠"]},"dots11":{"interval":100,"frames":["⠁","⠂","⠄","⡀","⢀","⠠","⠐","⠈"]},"dots12":{"interval":80,"frames":["⢀⠀","⡀⠀","⠄⠀","⢂⠀","⡂⠀","⠅⠀","⢃⠀","⡃⠀","⠍⠀","⢋⠀","⡋⠀","⠍⠁","⢋⠁","⡋⠁","⠍⠉","⠋⠉","⠋⠉","⠉⠙","⠉⠙","⠉⠩","⠈⢙","⠈⡙","⢈⠩","⡀⢙","⠄⡙","⢂⠩","⡂⢘","⠅⡘","⢃⠨","⡃⢐","⠍⡐","⢋⠠","⡋⢀","⠍⡁","⢋⠁","⡋⠁","⠍⠉","⠋⠉","⠋⠉","⠉⠙","⠉⠙","⠉⠩","⠈⢙","⠈⡙","⠈⠩","⠀⢙","⠀⡙","⠀⠩","⠀⢘","⠀⡘","⠀⠨","⠀⢐","⠀⡐","⠀⠠","⠀⢀","⠀⡀"]},"dots13":{"interval":80,"frames":["⣼","⣹","⢻","⠿","⡟","⣏","⣧","⣶"]},"dots8Bit":{"interval":80,"frames":["⠀","⠁","⠂","⠃","⠄","⠅","⠆","⠇","⡀","⡁","⡂","⡃","⡄","⡅","⡆","⡇","⠈","⠉","⠊","⠋","⠌","⠍","⠎","⠏","⡈","⡉","⡊","⡋","⡌","⡍","⡎","⡏","⠐","⠑","⠒","⠓","⠔","⠕","⠖","⠗","⡐","⡑","⡒","⡓","⡔","⡕","⡖","⡗","⠘","⠙","⠚","⠛","⠜","⠝","⠞","⠟","⡘","⡙","⡚","⡛","⡜","⡝","⡞","⡟","⠠","⠡","⠢","⠣","⠤","⠥","⠦","⠧","⡠","⡡","⡢","⡣","⡤","⡥","⡦","⡧","⠨","⠩","⠪","⠫","⠬","⠭","⠮","⠯","⡨","⡩","⡪","⡫","⡬","⡭","⡮","⡯","⠰","⠱","⠲","⠳","⠴","⠵","⠶","⠷","⡰","⡱","⡲","⡳","⡴","⡵","⡶","⡷","⠸","⠹","⠺","⠻","⠼","⠽","⠾","⠿","⡸","⡹","⡺","⡻","⡼","⡽","⡾","⡿","⢀","⢁","⢂","⢃","⢄","⢅","⢆","⢇","⣀","⣁","⣂","⣃","⣄","⣅","⣆","⣇","⢈","⢉","⢊","⢋","⢌","⢍","⢎","⢏","⣈","⣉","⣊","⣋","⣌","⣍","⣎","⣏","⢐","⢑","⢒","⢓","⢔","⢕","⢖","⢗","⣐","⣑","⣒","⣓","⣔","⣕","⣖","⣗","⢘","⢙","⢚","⢛","⢜","⢝","⢞","⢟","⣘","⣙","⣚","⣛","⣜","⣝","⣞","⣟","⢠","⢡","⢢","⢣","⢤","⢥","⢦","⢧","⣠","⣡","⣢","⣣","⣤","⣥","⣦","⣧","⢨","⢩","⢪","⢫","⢬","⢭","⢮","⢯","⣨","⣩","⣪","⣫","⣬","⣭","⣮","⣯","⢰","⢱","⢲","⢳","⢴","⢵","⢶","⢷","⣰","⣱","⣲","⣳","⣴","⣵","⣶","⣷","⢸","⢹","⢺","⢻","⢼","⢽","⢾","⢿","⣸","⣹","⣺","⣻","⣼","⣽","⣾","⣿"]},"sand":{"interval":80,"frames":["⠁","⠂","⠄","⡀","⡈","⡐","⡠","⣀","⣁","⣂","⣄","⣌","⣔","⣤","⣥","⣦","⣮","⣶","⣷","⣿","⡿","⠿","⢟","⠟","⡛","⠛","⠫","⢋","⠋","⠍","⡉","⠉","⠑","⠡","⢁"]},"line":{"interval":130,"frames":["-","\\\\","|","/"]},"line2":{"interval":100,"frames":["⠂","-","–","—","–","-"]},"pipe":{"interval":100,"frames":["┤","┘","┴","└","├","┌","┬","┐"]},"simpleDots":{"interval":400,"frames":[".  ",".. ","...","   "]},"simpleDotsScrolling":{"interval":200,"frames":[".  ",".. ","..."," ..","  .","   "]},"star":{"interval":70,"frames":["✶","✸","✹","✺","✹","✷"]},"star2":{"interval":80,"frames":["+","x","*"]},"flip":{"interval":70,"frames":["_","_","_","-","`","`","\'","´","-","_","_","_"]},"hamburger":{"interval":100,"frames":["☱","☲","☴"]},"growVertical":{"interval":120,"frames":["▁","▃","▄","▅","▆","▇","▆","▅","▄","▃"]},"growHorizontal":{"interval":120,"frames":["▏","▎","▍","▌","▋","▊","▉","▊","▋","▌","▍","▎"]},"balloon":{"interval":140,"frames":[" ",".","o","O","@","*"," "]},"balloon2":{"interval":120,"frames":[".","o","O","°","O","o","."]},"noise":{"interval":100,"frames":["▓","▒","░"]},"bounce":{"interval":120,"frames":["⠁","⠂","⠄","⠂"]},"boxBounce":{"interval":120,"frames":["▖","▘","▝","▗"]},"boxBounce2":{"interval":100,"frames":["▌","▀","▐","▄"]},"triangle":{"interval":50,"frames":["◢","◣","◤","◥"]},"binary":{"interval":80,"frames":["010010","001100","100101","111010","111101","010111","101011","111000","110011","110101"]},"arc":{"interval":100,"frames":["◜","◠","◝","◞","◡","◟"]},"circle":{"interval":120,"frames":["◡","⊙","◠"]},"squareCorners":{"interval":180,"frames":["◰","◳","◲","◱"]},"circleQuarters":{"interval":120,"frames":["◴","◷","◶","◵"]},"circleHalves":{"interval":50,"frames":["◐","◓","◑","◒"]},"squish":{"interval":100,"frames":["╫","╪"]},"toggle":{"interval":250,"frames":["⊶","⊷"]},"toggle2":{"interval":80,"frames":["▫","▪"]},"toggle3":{"interval":120,"frames":["□","■"]},"toggle4":{"interval":100,"frames":["■","□","▪","▫"]},"toggle5":{"interval":100,"frames":["▮","▯"]},"toggle6":{"interval":300,"frames":["ဝ","၀"]},"toggle7":{"interval":80,"frames":["⦾","⦿"]},"toggle8":{"interval":100,"frames":["◍","◌"]},"toggle9":{"interval":100,"frames":["◉","◎"]},"toggle10":{"interval":100,"frames":["㊂","㊀","㊁"]},"toggle11":{"interval":50,"frames":["⧇","⧆"]},"toggle12":{"interval":120,"frames":["☗","☖"]},"toggle13":{"interval":80,"frames":["=","*","-"]},"arrow":{"interval":100,"frames":["←","↖","↑","↗","→","↘","↓","↙"]},"arrow2":{"interval":80,"frames":["⬆️ ","↗️ ","➡️ ","↘️ ","⬇️ ","↙️ ","⬅️ ","↖️ "]},"arrow3":{"interval":120,"frames":["▹▹▹▹▹","▸▹▹▹▹","▹▸▹▹▹","▹▹▸▹▹","▹▹▹▸▹","▹▹▹▹▸"]},"bouncingBar":{"interval":80,"frames":["[    ]","[=   ]","[==  ]","[=== ]","[====]","[ ===]","[  ==]","[   =]","[    ]","[   =]","[  ==]","[ ===]","[====]","[=== ]","[==  ]","[=   ]"]},"bouncingBall":{"interval":80,"frames":["( ●    )","(  ●   )","(   ●  )","(    ● )","(     ●)","(    ● )","(   ●  )","(  ●   )","( ●    )","(●     )"]},"smiley":{"interval":200,"frames":["😄 ","😝 "]},"monkey":{"interval":300,"frames":["🙈 ","🙈 ","🙉 ","🙊 "]},"hearts":{"interval":100,"frames":["💛 ","💙 ","💜 ","💚 ","❤️ "]},"clock":{"interval":100,"frames":["🕛 ","🕐 ","🕑 ","🕒 ","🕓 ","🕔 ","🕕 ","🕖 ","🕗 ","🕘 ","🕙 ","🕚 "]},"earth":{"interval":180,"frames":["🌍 ","🌎 ","🌏 "]},"material":{"interval":17,"frames":["█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁","██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁","███▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁","████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁","██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁","██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁","███████▁▁▁▁▁▁▁▁▁▁▁▁▁","████████▁▁▁▁▁▁▁▁▁▁▁▁","█████████▁▁▁▁▁▁▁▁▁▁▁","█████████▁▁▁▁▁▁▁▁▁▁▁","██████████▁▁▁▁▁▁▁▁▁▁","███████████▁▁▁▁▁▁▁▁▁","█████████████▁▁▁▁▁▁▁","██████████████▁▁▁▁▁▁","██████████████▁▁▁▁▁▁","▁██████████████▁▁▁▁▁","▁██████████████▁▁▁▁▁","▁██████████████▁▁▁▁▁","▁▁██████████████▁▁▁▁","▁▁▁██████████████▁▁▁","▁▁▁▁█████████████▁▁▁","▁▁▁▁██████████████▁▁","▁▁▁▁██████████████▁▁","▁▁▁▁▁██████████████▁","▁▁▁▁▁██████████████▁","▁▁▁▁▁██████████████▁","▁▁▁▁▁▁██████████████","▁▁▁▁▁▁██████████████","▁▁▁▁▁▁▁█████████████","▁▁▁▁▁▁▁█████████████","▁▁▁▁▁▁▁▁████████████","▁▁▁▁▁▁▁▁████████████","▁▁▁▁▁▁▁▁▁███████████","▁▁▁▁▁▁▁▁▁███████████","▁▁▁▁▁▁▁▁▁▁██████████","▁▁▁▁▁▁▁▁▁▁██████████","▁▁▁▁▁▁▁▁▁▁▁▁████████","▁▁▁▁▁▁▁▁▁▁▁▁▁███████","▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████","█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████","██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███","██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███","███▁▁▁▁▁▁▁▁▁▁▁▁▁▁███","████▁▁▁▁▁▁▁▁▁▁▁▁▁▁██","█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█","█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█","██████▁▁▁▁▁▁▁▁▁▁▁▁▁█","████████▁▁▁▁▁▁▁▁▁▁▁▁","█████████▁▁▁▁▁▁▁▁▁▁▁","█████████▁▁▁▁▁▁▁▁▁▁▁","█████████▁▁▁▁▁▁▁▁▁▁▁","█████████▁▁▁▁▁▁▁▁▁▁▁","███████████▁▁▁▁▁▁▁▁▁","████████████▁▁▁▁▁▁▁▁","████████████▁▁▁▁▁▁▁▁","██████████████▁▁▁▁▁▁","██████████████▁▁▁▁▁▁","▁██████████████▁▁▁▁▁","▁██████████████▁▁▁▁▁","▁▁▁█████████████▁▁▁▁","▁▁▁▁▁████████████▁▁▁","▁▁▁▁▁████████████▁▁▁","▁▁▁▁▁▁███████████▁▁▁","▁▁▁▁▁▁▁▁█████████▁▁▁","▁▁▁▁▁▁▁▁█████████▁▁▁","▁▁▁▁▁▁▁▁▁█████████▁▁","▁▁▁▁▁▁▁▁▁█████████▁▁","▁▁▁▁▁▁▁▁▁▁█████████▁","▁▁▁▁▁▁▁▁▁▁▁████████▁","▁▁▁▁▁▁▁▁▁▁▁████████▁","▁▁▁▁▁▁▁▁▁▁▁▁███████▁","▁▁▁▁▁▁▁▁▁▁▁▁███████▁","▁▁▁▁▁▁▁▁▁▁▁▁▁███████","▁▁▁▁▁▁▁▁▁▁▁▁▁███████","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁","▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"]},"moon":{"interval":80,"frames":["🌑 ","🌒 ","🌓 ","🌔 ","🌕 ","🌖 ","🌗 ","🌘 "]},"runner":{"interval":140,"frames":["🚶 ","🏃 "]},"pong":{"interval":80,"frames":["▐⠂       ▌","▐⠈       ▌","▐ ⠂      ▌","▐ ⠠      ▌","▐  ⡀     ▌","▐  ⠠     ▌","▐   ⠂    ▌","▐   ⠈    ▌","▐    ⠂   ▌","▐    ⠠   ▌","▐     ⡀  ▌","▐     ⠠  ▌","▐      ⠂ ▌","▐      ⠈ ▌","▐       ⠂▌","▐       ⠠▌","▐       ⡀▌","▐      ⠠ ▌","▐      ⠂ ▌","▐     ⠈  ▌","▐     ⠂  ▌","▐    ⠠   ▌","▐    ⡀   ▌","▐   ⠠    ▌","▐   ⠂    ▌","▐  ⠈     ▌","▐  ⠂     ▌","▐ ⠠      ▌","▐ ⡀      ▌","▐⠠       ▌"]},"shark":{"interval":120,"frames":["▐|\\\\____________▌","▐_|\\\\___________▌","▐__|\\\\__________▌","▐___|\\\\_________▌","▐____|\\\\________▌","▐_____|\\\\_______▌","▐______|\\\\______▌","▐_______|\\\\_____▌","▐________|\\\\____▌","▐_________|\\\\___▌","▐__________|\\\\__▌","▐___________|\\\\_▌","▐____________|\\\\▌","▐____________/|▌","▐___________/|_▌","▐__________/|__▌","▐_________/|___▌","▐________/|____▌","▐_______/|_____▌","▐______/|______▌","▐_____/|_______▌","▐____/|________▌","▐___/|_________▌","▐__/|__________▌","▐_/|___________▌","▐/|____________▌"]},"dqpb":{"interval":100,"frames":["d","q","p","b"]},"weather":{"interval":100,"frames":["☀️ ","☀️ ","☀️ ","🌤 ","⛅️ ","🌥 ","☁️ ","🌧 ","🌨 ","🌧 ","🌨 ","🌧 ","🌨 ","⛈ ","🌨 ","🌧 ","🌨 ","☁️ ","🌥 ","⛅️ ","🌤 ","☀️ ","☀️ "]},"christmas":{"interval":400,"frames":["🌲","🎄"]},"grenade":{"interval":80,"frames":["،  ","′  "," ´ "," ‾ ","  ⸌","  ⸊","  |","  ⁎","  ⁕"," ෴ ","  ⁓","   ","   ","   "]},"point":{"interval":125,"frames":["∙∙∙","●∙∙","∙●∙","∙∙●","∙∙∙"]},"layer":{"interval":150,"frames":["-","=","≡"]},"betaWave":{"interval":80,"frames":["ρββββββ","βρβββββ","ββρββββ","βββρβββ","ββββρββ","βββββρβ","ββββββρ"]},"fingerDance":{"interval":160,"frames":["🤘 ","🤟 ","🖖 ","✋ ","🤚 ","👆 "]},"fistBump":{"interval":80,"frames":["🤜　　　　🤛 ","🤜　　　　🤛 ","🤜　　　　🤛 ","　🤜　　🤛　 ","　　🤜🤛　　 ","　🤜✨🤛　　 ","🤜　✨　🤛　 "]},"soccerHeader":{"interval":80,"frames":[" 🧑⚽️       🧑 ","🧑  ⚽️      🧑 ","🧑   ⚽️     🧑 ","🧑    ⚽️    🧑 ","🧑     ⚽️   🧑 ","🧑      ⚽️  🧑 ","🧑       ⚽️🧑  ","🧑      ⚽️  🧑 ","🧑     ⚽️   🧑 ","🧑    ⚽️    🧑 ","🧑   ⚽️     🧑 ","🧑  ⚽️      🧑 "]},"mindblown":{"interval":160,"frames":["😐 ","😐 ","😮 ","😮 ","😦 ","😦 ","😧 ","😧 ","🤯 ","💥 ","✨ ","　 ","　 ","　 "]},"speaker":{"interval":160,"frames":["🔈 ","🔉 ","🔊 ","🔉 "]},"orangePulse":{"interval":100,"frames":["🔸 ","🔶 ","🟠 ","🟠 ","🔶 "]},"bluePulse":{"interval":100,"frames":["🔹 ","🔷 ","🔵 ","🔵 ","🔷 "]},"orangeBluePulse":{"interval":100,"frames":["🔸 ","🔶 ","🟠 ","🟠 ","🔶 ","🔹 ","🔷 ","🔵 ","🔵 ","🔷 "]},"timeTravel":{"interval":100,"frames":["🕛 ","🕚 ","🕙 ","🕘 ","🕗 ","🕖 ","🕕 ","🕔 ","🕓 ","🕒 ","🕑 ","🕐 "]},"aesthetic":{"interval":80,"frames":["▰▱▱▱▱▱▱","▰▰▱▱▱▱▱","▰▰▰▱▱▱▱","▰▰▰▰▱▱▱","▰▰▰▰▰▱▱","▰▰▰▰▰▰▱","▰▰▰▰▰▰▰","▰▱▱▱▱▱▱"]},"dwarfFortress":{"interval":80,"frames":[" ██████£££  ","☺██████£££  ","☺██████£££  ","☺▓█████£££  ","☺▓█████£££  ","☺▒█████£££  ","☺▒█████£££  ","☺░█████£££  ","☺░█████£££  ","☺ █████£££  "," ☺█████£££  "," ☺█████£££  "," ☺▓████£££  "," ☺▓████£££  "," ☺▒████£££  "," ☺▒████£££  "," ☺░████£££  "," ☺░████£££  "," ☺ ████£££  ","  ☺████£££  ","  ☺████£££  ","  ☺▓███£££  ","  ☺▓███£££  ","  ☺▒███£££  ","  ☺▒███£££  ","  ☺░███£££  ","  ☺░███£££  ","  ☺ ███£££  ","   ☺███£££  ","   ☺███£££  ","   ☺▓██£££  ","   ☺▓██£££  ","   ☺▒██£££  ","   ☺▒██£££  ","   ☺░██£££  ","   ☺░██£££  ","   ☺ ██£££  ","    ☺██£££  ","    ☺██£££  ","    ☺▓█£££  ","    ☺▓█£££  ","    ☺▒█£££  ","    ☺▒█£££  ","    ☺░█£££  ","    ☺░█£££  ","    ☺ █£££  ","     ☺█£££  ","     ☺█£££  ","     ☺▓£££  ","     ☺▓£££  ","     ☺▒£££  ","     ☺▒£££  ","     ☺░£££  ","     ☺░£££  ","     ☺ £££  ","      ☺£££  ","      ☺£££  ","      ☺▓££  ","      ☺▓££  ","      ☺▒££  ","      ☺▒££  ","      ☺░££  ","      ☺░££  ","      ☺ ££  ","       ☺££  ","       ☺££  ","       ☺▓£  ","       ☺▓£  ","       ☺▒£  ","       ☺▒£  ","       ☺░£  ","       ☺░£  ","       ☺ £  ","        ☺£  ","        ☺£  ","        ☺▓  ","        ☺▓  ","        ☺▒  ","        ☺▒  ","        ☺░  ","        ☺░  ","        ☺   ","        ☺  &","        ☺ ☼&","       ☺ ☼ &","       ☺☼  &","      ☺☼  & ","      ‼   & ","     ☺   &  ","    ‼    &  ","   ☺    &   ","  ‼     &   "," ☺     &    ","‼      &    ","      &     ","      &     ","     &   ░  ","     &   ▒  ","    &    ▓  ","    &    £  ","   &    ░£  ","   &    ▒£  ","  &     ▓£  ","  &     ££  "," &     ░££  "," &     ▒££  ","&      ▓££  ","&      £££  ","      ░£££  ","      ▒£££  ","      ▓£££  ","      █£££  ","     ░█£££  ","     ▒█£££  ","     ▓█£££  ","     ██£££  ","    ░██£££  ","    ▒██£££  ","    ▓██£££  ","    ███£££  ","   ░███£££  ","   ▒███£££  ","   ▓███£££  ","   ████£££  ","  ░████£££  ","  ▒████£££  ","  ▓████£££  ","  █████£££  "," ░█████£££  "," ▒█████£££  "," ▓█████£££  "," ██████£££  "," ██████£££  "]}}');

/***/ }),

/***/ 3888:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const jsonFile = __webpack_require__(625)

module.exports = {
  // jsonfile exports
  readJson: jsonFile.readFile,
  readJsonSync: jsonFile.readFileSync,
  writeJson: jsonFile.writeFile,
  writeJsonSync: jsonFile.writeFileSync
}


/***/ }),

/***/ 3901:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.subscribeOn = void 0;
var lift_1 = __webpack_require__(4698);
function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return lift_1.operate(function (source, subscriber) {
        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
    });
}
exports.subscribeOn = subscribeOn;
//# sourceMappingURL=subscribeOn.js.map

/***/ }),

/***/ 3941:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectableObservable = void 0;
var Observable_1 = __webpack_require__(541);
var Subscription_1 = __webpack_require__(1981);
var refCount_1 = __webpack_require__(870);
var OperatorSubscriber_1 = __webpack_require__(1908);
var lift_1 = __webpack_require__(4698);
var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if (lift_1.hasLift(source)) {
            _this.lift = source.lift;
        }
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype._teardown = function () {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
    };
    ConnectableObservable.prototype.connect = function () {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new Subscription_1.Subscription();
            var subject_1 = this.getSubject();
            connection.add(this.source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subject_1, undefined, function () {
                _this._teardown();
                subject_1.complete();
            }, function (err) {
                _this._teardown();
                subject_1.error(err);
            }, function () { return _this._teardown(); })));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount_1.refCount()(this);
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),

/***/ 3965:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var util = __webpack_require__(9023),
  Match = __webpack_require__ (5757);

/**
 * This class recognizes single-byte encodings. Because the encoding scheme is so
 * simple, language statistics are used to do the matching.
 */

function NGramParser(theNgramList, theByteMap) {
  var N_GRAM_MASK = 0xFFFFFF;

  this.byteIndex = 0;
  this.ngram = 0;

  this.ngramList = theNgramList;
  this.byteMap = theByteMap;

  this.ngramCount = 0;
  this.hitCount = 0;

  this.spaceChar;

  /*
   * Binary search for value in table, which must have exactly 64 entries.
   */
  this.search = function(table, value) {
    var index = 0;

    if (table[index + 32] <= value) index += 32;
    if (table[index + 16] <= value) index += 16;
    if (table[index + 8]  <= value) index += 8;
    if (table[index + 4]  <= value) index += 4;
    if (table[index + 2]  <= value) index += 2;
    if (table[index + 1]  <= value) index += 1;
    if (table[index]      > value)  index -= 1;

    if (index < 0 || table[index] != value)
      return -1;

    return index;
  };

  this.lookup = function(thisNgram) {
    this.ngramCount += 1;
    if (this.search(this.ngramList, thisNgram) >= 0) {
      this.hitCount += 1;
    }
  };

  this.addByte = function(b) {
    this.ngram = ((this.ngram << 8) + (b & 0xFF)) & N_GRAM_MASK;
    this.lookup(this.ngram);
  }

  this.nextByte = function(det) {
    if (this.byteIndex >= det.fInputLen)
      return -1;

    return det.fInputBytes[this.byteIndex++] & 0xFF;
  }

  this.parse = function(det, spaceCh) {
    var b, ignoreSpace = false;
    this.spaceChar = spaceCh;

    while ((b = this.nextByte(det)) >= 0) {
      var mb = this.byteMap[b];

      // TODO: 0x20 might not be a space in all character sets...
      if (mb != 0) {
        if (!(mb == this.spaceChar && ignoreSpace)) {
          this.addByte(mb);
        }

        ignoreSpace = (mb == this.spaceChar);
      }
    }

    // TODO: Is this OK? The buffer could have ended in the middle of a word...
    this.addByte(this.spaceChar);

    var rawPercent = this.hitCount / this.ngramCount;

    // TODO - This is a bit of a hack to take care of a case
    // were we were getting a confidence of 135...
    if (rawPercent > 0.33)
      return 98;

    return Math.floor(rawPercent * 300.0);
  };
};

function NGramsPlusLang(la, ng) {
  this.fLang = la;
  this.fNGrams = ng;
};

function sbcs() {};
sbcs.prototype.spaceChar = 0x20;
sbcs.prototype.ngrams = function() {};
sbcs.prototype.byteMap = function() {};
sbcs.prototype.match = function(det) {

  var ngrams = this.ngrams();
  var multiple = (Array.isArray(ngrams) && ngrams[0] instanceof NGramsPlusLang);

  if (!multiple) {
    var parser = new NGramParser(ngrams, this.byteMap());
    var confidence = parser.parse(det, this.spaceChar);
    return confidence <= 0 ? null : new Match(det, this, confidence);
  }

  var bestConfidenceSoFar = -1;
  var lang = null;

  for (var i = ngrams.length - 1; i >= 0; i--) {
    var ngl = ngrams[i];

    var parser = new NGramParser(ngl.fNGrams, this.byteMap());
    var confidence = parser.parse(det, this.spaceChar);
    if (confidence > bestConfidenceSoFar) {
      bestConfidenceSoFar = confidence;
      lang = ngl.fLang;
    }
  }

  var name = this.name(det);
  return bestConfidenceSoFar <= 0 ? null : new Match(det, this, bestConfidenceSoFar, name, lang);
};


module.exports.ISO_8859_1 = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
      0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0x20,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xDF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
    ];
  };

  this.ngrams = function() {
    return [
      new NGramsPlusLang('da', [
        0x206166, 0x206174, 0x206465, 0x20656E, 0x206572, 0x20666F, 0x206861, 0x206920,
        0x206D65, 0x206F67, 0x2070E5, 0x207369, 0x207374, 0x207469, 0x207669, 0x616620,
        0x616E20, 0x616E64, 0x617220, 0x617420, 0x646520, 0x64656E, 0x646572, 0x646574,
        0x652073, 0x656420, 0x656465, 0x656E20, 0x656E64, 0x657220, 0x657265, 0x657320,
        0x657420, 0x666F72, 0x676520, 0x67656E, 0x676572, 0x696765, 0x696C20, 0x696E67,
        0x6B6520, 0x6B6B65, 0x6C6572, 0x6C6967, 0x6C6C65, 0x6D6564, 0x6E6465, 0x6E6520,
        0x6E6720, 0x6E6765, 0x6F6720, 0x6F6D20, 0x6F7220, 0x70E520, 0x722064, 0x722065,
        0x722073, 0x726520, 0x737465, 0x742073, 0x746520, 0x746572, 0x74696C, 0x766572
      ]),
      new NGramsPlusLang('de', [
        0x20616E, 0x206175, 0x206265, 0x206461, 0x206465, 0x206469, 0x206569, 0x206765,
        0x206861, 0x20696E, 0x206D69, 0x207363, 0x207365, 0x20756E, 0x207665, 0x20766F,
        0x207765, 0x207A75, 0x626572, 0x636820, 0x636865, 0x636874, 0x646173, 0x64656E,
        0x646572, 0x646965, 0x652064, 0x652073, 0x65696E, 0x656974, 0x656E20, 0x657220,
        0x657320, 0x67656E, 0x68656E, 0x687420, 0x696368, 0x696520, 0x696E20, 0x696E65,
        0x697420, 0x6C6963, 0x6C6C65, 0x6E2061, 0x6E2064, 0x6E2073, 0x6E6420, 0x6E6465,
        0x6E6520, 0x6E6720, 0x6E6765, 0x6E7465, 0x722064, 0x726465, 0x726569, 0x736368,
        0x737465, 0x742064, 0x746520, 0x74656E, 0x746572, 0x756E64, 0x756E67, 0x766572
      ]),
      new NGramsPlusLang('en', [
        0x206120, 0x20616E, 0x206265, 0x20636F, 0x20666F, 0x206861, 0x206865, 0x20696E,
        0x206D61, 0x206F66, 0x207072, 0x207265, 0x207361, 0x207374, 0x207468, 0x20746F,
        0x207768, 0x616964, 0x616C20, 0x616E20, 0x616E64, 0x617320, 0x617420, 0x617465,
        0x617469, 0x642061, 0x642074, 0x652061, 0x652073, 0x652074, 0x656420, 0x656E74,
        0x657220, 0x657320, 0x666F72, 0x686174, 0x686520, 0x686572, 0x696420, 0x696E20,
        0x696E67, 0x696F6E, 0x697320, 0x6E2061, 0x6E2074, 0x6E6420, 0x6E6720, 0x6E7420,
        0x6F6620, 0x6F6E20, 0x6F7220, 0x726520, 0x727320, 0x732061, 0x732074, 0x736169,
        0x737420, 0x742074, 0x746572, 0x746861, 0x746865, 0x74696F, 0x746F20, 0x747320
      ]),
      new NGramsPlusLang('es', [
        0x206120, 0x206361, 0x20636F, 0x206465, 0x20656C, 0x20656E, 0x206573, 0x20696E,
        0x206C61, 0x206C6F, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207265, 0x207365,
        0x20756E, 0x207920, 0x612063, 0x612064, 0x612065, 0x61206C, 0x612070, 0x616369,
        0x61646F, 0x616C20, 0x617220, 0x617320, 0x6369F3, 0x636F6E, 0x646520, 0x64656C,
        0x646F20, 0x652064, 0x652065, 0x65206C, 0x656C20, 0x656E20, 0x656E74, 0x657320,
        0x657374, 0x69656E, 0x69F36E, 0x6C6120, 0x6C6F73, 0x6E2065, 0x6E7465, 0x6F2064,
        0x6F2065, 0x6F6E20, 0x6F7220, 0x6F7320, 0x706172, 0x717565, 0x726120, 0x726573,
        0x732064, 0x732065, 0x732070, 0x736520, 0x746520, 0x746F20, 0x756520, 0xF36E20
      ]),
      new NGramsPlusLang('fr', [
        0x206175, 0x20636F, 0x206461, 0x206465, 0x206475, 0x20656E, 0x206574, 0x206C61,
        0x206C65, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207365, 0x20736F, 0x20756E,
        0x20E020, 0x616E74, 0x617469, 0x636520, 0x636F6E, 0x646520, 0x646573, 0x647520,
        0x652061, 0x652063, 0x652064, 0x652065, 0x65206C, 0x652070, 0x652073, 0x656E20,
        0x656E74, 0x657220, 0x657320, 0x657420, 0x657572, 0x696F6E, 0x697320, 0x697420,
        0x6C6120, 0x6C6520, 0x6C6573, 0x6D656E, 0x6E2064, 0x6E6520, 0x6E7320, 0x6E7420,
        0x6F6E20, 0x6F6E74, 0x6F7572, 0x717565, 0x72206C, 0x726520, 0x732061, 0x732064,
        0x732065, 0x73206C, 0x732070, 0x742064, 0x746520, 0x74696F, 0x756520, 0x757220
      ]),
      new NGramsPlusLang('it', [
        0x20616C, 0x206368, 0x20636F, 0x206465, 0x206469, 0x206520, 0x20696C, 0x20696E,
        0x206C61, 0x207065, 0x207072, 0x20756E, 0x612063, 0x612064, 0x612070, 0x612073,
        0x61746F, 0x636865, 0x636F6E, 0x64656C, 0x646920, 0x652061, 0x652063, 0x652064,
        0x652069, 0x65206C, 0x652070, 0x652073, 0x656C20, 0x656C6C, 0x656E74, 0x657220,
        0x686520, 0x692061, 0x692063, 0x692064, 0x692073, 0x696120, 0x696C20, 0x696E20,
        0x696F6E, 0x6C6120, 0x6C6520, 0x6C6920, 0x6C6C61, 0x6E6520, 0x6E6920, 0x6E6F20,
        0x6E7465, 0x6F2061, 0x6F2064, 0x6F2069, 0x6F2073, 0x6F6E20, 0x6F6E65, 0x706572,
        0x726120, 0x726520, 0x736920, 0x746120, 0x746520, 0x746920, 0x746F20, 0x7A696F
      ]),
      new NGramsPlusLang('nl', [
        0x20616C, 0x206265, 0x206461, 0x206465, 0x206469, 0x206565, 0x20656E, 0x206765,
        0x206865, 0x20696E, 0x206D61, 0x206D65, 0x206F70, 0x207465, 0x207661, 0x207665,
        0x20766F, 0x207765, 0x207A69, 0x61616E, 0x616172, 0x616E20, 0x616E64, 0x617220,
        0x617420, 0x636874, 0x646520, 0x64656E, 0x646572, 0x652062, 0x652076, 0x65656E,
        0x656572, 0x656E20, 0x657220, 0x657273, 0x657420, 0x67656E, 0x686574, 0x696520,
        0x696E20, 0x696E67, 0x697320, 0x6E2062, 0x6E2064, 0x6E2065, 0x6E2068, 0x6E206F,
        0x6E2076, 0x6E6465, 0x6E6720, 0x6F6E64, 0x6F6F72, 0x6F7020, 0x6F7220, 0x736368,
        0x737465, 0x742064, 0x746520, 0x74656E, 0x746572, 0x76616E, 0x766572, 0x766F6F
      ]),
      new NGramsPlusLang('no', [
        0x206174, 0x206176, 0x206465, 0x20656E, 0x206572, 0x20666F, 0x206861, 0x206920,
        0x206D65, 0x206F67, 0x2070E5, 0x207365, 0x20736B, 0x20736F, 0x207374, 0x207469,
        0x207669, 0x20E520, 0x616E64, 0x617220, 0x617420, 0x646520, 0x64656E, 0x646574,
        0x652073, 0x656420, 0x656E20, 0x656E65, 0x657220, 0x657265, 0x657420, 0x657474,
        0x666F72, 0x67656E, 0x696B6B, 0x696C20, 0x696E67, 0x6B6520, 0x6B6B65, 0x6C6520,
        0x6C6C65, 0x6D6564, 0x6D656E, 0x6E2073, 0x6E6520, 0x6E6720, 0x6E6765, 0x6E6E65,
        0x6F6720, 0x6F6D20, 0x6F7220, 0x70E520, 0x722073, 0x726520, 0x736F6D, 0x737465,
        0x742073, 0x746520, 0x74656E, 0x746572, 0x74696C, 0x747420, 0x747465, 0x766572
      ]),
      new NGramsPlusLang('pt', [
        0x206120, 0x20636F, 0x206461, 0x206465, 0x20646F, 0x206520, 0x206573, 0x206D61,
        0x206E6F, 0x206F20, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207265, 0x207365,
        0x20756D, 0x612061, 0x612063, 0x612064, 0x612070, 0x616465, 0x61646F, 0x616C20,
        0x617220, 0x617261, 0x617320, 0x636F6D, 0x636F6E, 0x646120, 0x646520, 0x646F20,
        0x646F73, 0x652061, 0x652064, 0x656D20, 0x656E74, 0x657320, 0x657374, 0x696120,
        0x696361, 0x6D656E, 0x6E7465, 0x6E746F, 0x6F2061, 0x6F2063, 0x6F2064, 0x6F2065,
        0x6F2070, 0x6F7320, 0x706172, 0x717565, 0x726120, 0x726573, 0x732061, 0x732064,
        0x732065, 0x732070, 0x737461, 0x746520, 0x746F20, 0x756520, 0xE36F20, 0xE7E36F
      ]),
      new NGramsPlusLang('sv', [
        0x206174, 0x206176, 0x206465, 0x20656E, 0x2066F6, 0x206861, 0x206920, 0x20696E,
        0x206B6F, 0x206D65, 0x206F63, 0x2070E5, 0x20736B, 0x20736F, 0x207374, 0x207469,
        0x207661, 0x207669, 0x20E472, 0x616465, 0x616E20, 0x616E64, 0x617220, 0x617474,
        0x636820, 0x646520, 0x64656E, 0x646572, 0x646574, 0x656420, 0x656E20, 0x657220,
        0x657420, 0x66F672, 0x67656E, 0x696C6C, 0x696E67, 0x6B6120, 0x6C6C20, 0x6D6564,
        0x6E2073, 0x6E6120, 0x6E6465, 0x6E6720, 0x6E6765, 0x6E696E, 0x6F6368, 0x6F6D20,
        0x6F6E20, 0x70E520, 0x722061, 0x722073, 0x726120, 0x736B61, 0x736F6D, 0x742073,
        0x746120, 0x746520, 0x746572, 0x74696C, 0x747420, 0x766172, 0xE47220, 0xF67220,
      ])
    ];
  };

  this.name = function(det) {
    return (det && det.fC1Bytes) ? 'windows-1252' : 'ISO-8859-1';
  };
};
util.inherits(module.exports.ISO_8859_1, sbcs);


module.exports.ISO_8859_2 = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0xB1, 0x20, 0xB3, 0x20, 0xB5, 0xB6, 0x20,
      0x20, 0xB9, 0xBA, 0xBB, 0xBC, 0x20, 0xBE, 0xBF,
      0x20, 0xB1, 0x20, 0xB3, 0x20, 0xB5, 0xB6, 0xB7,
      0x20, 0xB9, 0xBA, 0xBB, 0xBC, 0x20, 0xBE, 0xBF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xDF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x20
    ];
  }

  this.ngrams = function() {
    return [
      new NGramsPlusLang('cs', [
        0x206120, 0x206279, 0x20646F, 0x206A65, 0x206E61, 0x206E65, 0x206F20, 0x206F64,
        0x20706F, 0x207072, 0x2070F8, 0x20726F, 0x207365, 0x20736F, 0x207374, 0x20746F,
        0x207620, 0x207679, 0x207A61, 0x612070, 0x636520, 0x636820, 0x652070, 0x652073,
        0x652076, 0x656D20, 0x656EED, 0x686F20, 0x686F64, 0x697374, 0x6A6520, 0x6B7465,
        0x6C6520, 0x6C6920, 0x6E6120, 0x6EE920, 0x6EEC20, 0x6EED20, 0x6F2070, 0x6F646E,
        0x6F6A69, 0x6F7374, 0x6F7520, 0x6F7661, 0x706F64, 0x706F6A, 0x70726F, 0x70F865,
        0x736520, 0x736F75, 0x737461, 0x737469, 0x73746E, 0x746572, 0x746EED, 0x746F20,
        0x752070, 0xBE6520, 0xE16EED, 0xE9686F, 0xED2070, 0xED2073, 0xED6D20, 0xF86564,
      ]),
      new NGramsPlusLang('hu', [
        0x206120, 0x20617A, 0x206265, 0x206567, 0x20656C, 0x206665, 0x206861, 0x20686F,
        0x206973, 0x206B65, 0x206B69, 0x206BF6, 0x206C65, 0x206D61, 0x206D65, 0x206D69,
        0x206E65, 0x20737A, 0x207465, 0x20E973, 0x612061, 0x61206B, 0x61206D, 0x612073,
        0x616B20, 0x616E20, 0x617A20, 0x62616E, 0x62656E, 0x656779, 0x656B20, 0x656C20,
        0x656C65, 0x656D20, 0x656E20, 0x657265, 0x657420, 0x657465, 0x657474, 0x677920,
        0x686F67, 0x696E74, 0x697320, 0x6B2061, 0x6BF67A, 0x6D6567, 0x6D696E, 0x6E2061,
        0x6E616B, 0x6E656B, 0x6E656D, 0x6E7420, 0x6F6779, 0x732061, 0x737A65, 0x737A74,
        0x737AE1, 0x73E967, 0x742061, 0x747420, 0x74E173, 0x7A6572, 0xE16E20, 0xE97320,
      ]),
      new NGramsPlusLang('pl', [
        0x20637A, 0x20646F, 0x206920, 0x206A65, 0x206B6F, 0x206D61, 0x206D69, 0x206E61,
        0x206E69, 0x206F64, 0x20706F, 0x207072, 0x207369, 0x207720, 0x207769, 0x207779,
        0x207A20, 0x207A61, 0x612070, 0x612077, 0x616E69, 0x636820, 0x637A65, 0x637A79,
        0x646F20, 0x647A69, 0x652070, 0x652073, 0x652077, 0x65207A, 0x65676F, 0x656A20,
        0x656D20, 0x656E69, 0x676F20, 0x696120, 0x696520, 0x69656A, 0x6B6120, 0x6B6920,
        0x6B6965, 0x6D6965, 0x6E6120, 0x6E6961, 0x6E6965, 0x6F2070, 0x6F7761, 0x6F7769,
        0x706F6C, 0x707261, 0x70726F, 0x70727A, 0x727A65, 0x727A79, 0x7369EA, 0x736B69,
        0x737461, 0x776965, 0x796368, 0x796D20, 0x7A6520, 0x7A6965, 0x7A7920, 0xF37720,
      ]),
      new NGramsPlusLang('ro', [
        0x206120, 0x206163, 0x206361, 0x206365, 0x20636F, 0x206375, 0x206465, 0x206469,
        0x206C61, 0x206D61, 0x207065, 0x207072, 0x207365, 0x2073E3, 0x20756E, 0x20BA69,
        0x20EE6E, 0x612063, 0x612064, 0x617265, 0x617420, 0x617465, 0x617520, 0x636172,
        0x636F6E, 0x637520, 0x63E320, 0x646520, 0x652061, 0x652063, 0x652064, 0x652070,
        0x652073, 0x656120, 0x656920, 0x656C65, 0x656E74, 0x657374, 0x692061, 0x692063,
        0x692064, 0x692070, 0x696520, 0x696920, 0x696E20, 0x6C6120, 0x6C6520, 0x6C6F72,
        0x6C7569, 0x6E6520, 0x6E7472, 0x6F7220, 0x70656E, 0x726520, 0x726561, 0x727520,
        0x73E320, 0x746520, 0x747275, 0x74E320, 0x756920, 0x756C20, 0xBA6920, 0xEE6E20,
      ])
    ];
  };

  this.name = function(det) {
    return (det && det.fC1Bytes) ? 'windows-1250' : 'ISO-8859-2';
  };
};
util.inherits(module.exports.ISO_8859_2, sbcs);


module.exports.ISO_8859_5 = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x20, 0xFE, 0xFF,
      0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
      0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
      0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0x20, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x20, 0xFE, 0xFF
    ];
  };

  this.ngrams = function() {
    return [
      0x20D220, 0x20D2DE, 0x20D4DE, 0x20D7D0, 0x20D820, 0x20DAD0, 0x20DADE, 0x20DDD0,
      0x20DDD5, 0x20DED1, 0x20DFDE, 0x20DFE0, 0x20E0D0, 0x20E1DE, 0x20E1E2, 0x20E2DE,
      0x20E7E2, 0x20EDE2, 0xD0DDD8, 0xD0E2EC, 0xD3DE20, 0xD5DBEC, 0xD5DDD8, 0xD5E1E2,
      0xD5E220, 0xD820DF, 0xD8D520, 0xD8D820, 0xD8EF20, 0xDBD5DD, 0xDBD820, 0xDBECDD,
      0xDDD020, 0xDDD520, 0xDDD8D5, 0xDDD8EF, 0xDDDE20, 0xDDDED2, 0xDE20D2, 0xDE20DF,
      0xDE20E1, 0xDED220, 0xDED2D0, 0xDED3DE, 0xDED920, 0xDEDBEC, 0xDEDC20, 0xDEE1E2,
      0xDFDEDB, 0xDFE0D5, 0xDFE0D8, 0xDFE0DE, 0xE0D0D2, 0xE0D5D4, 0xE1E2D0, 0xE1E2D2,
      0xE1E2D8, 0xE1EF20, 0xE2D5DB, 0xE2DE20, 0xE2DEE0, 0xE2EC20, 0xE7E2DE, 0xEBE520
    ];
  };

  this.name = function(det) {
    return 'ISO-8859-5';
  };

  this.language = function() {
    return 'ru';
  };
};
util.inherits(module.exports.ISO_8859_5, sbcs);


module.exports.ISO_8859_6 = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
      0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
      0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
      0xD8, 0xD9, 0xDA, 0x20, 0x20, 0x20, 0x20, 0x20,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    ];
  };

  this.ngrams = function() {
    return [
      0x20C7E4, 0x20C7E6, 0x20C8C7, 0x20D9E4, 0x20E1EA, 0x20E4E4, 0x20E5E6, 0x20E8C7,
      0xC720C7, 0xC7C120, 0xC7CA20, 0xC7D120, 0xC7E420, 0xC7E4C3, 0xC7E4C7, 0xC7E4C8,
      0xC7E4CA, 0xC7E4CC, 0xC7E4CD, 0xC7E4CF, 0xC7E4D3, 0xC7E4D9, 0xC7E4E2, 0xC7E4E5,
      0xC7E4E8, 0xC7E4EA, 0xC7E520, 0xC7E620, 0xC7E6CA, 0xC820C7, 0xC920C7, 0xC920E1,
      0xC920E4, 0xC920E5, 0xC920E8, 0xCA20C7, 0xCF20C7, 0xCFC920, 0xD120C7, 0xD1C920,
      0xD320C7, 0xD920C7, 0xD9E4E9, 0xE1EA20, 0xE420C7, 0xE4C920, 0xE4E920, 0xE4EA20,
      0xE520C7, 0xE5C720, 0xE5C920, 0xE5E620, 0xE620C7, 0xE720C7, 0xE7C720, 0xE8C7E4,
      0xE8E620, 0xE920C7, 0xEA20C7, 0xEA20E5, 0xEA20E8, 0xEAC920, 0xEAD120, 0xEAE620
    ];
  };

  this.name = function(det) {
    return 'ISO-8859-6';
  };

  this.language = function() {
    return 'ar';
  };
};
util.inherits(module.exports.ISO_8859_6, sbcs);


module.exports.ISO_8859_7 = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0xA1, 0xA2, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xDC, 0x20,
      0xDD, 0xDE, 0xDF, 0x20, 0xFC, 0x20, 0xFD, 0xFE,
      0xC0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0x20, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
      0xF8, 0xF9, 0xFA, 0xFB, 0xDC, 0xDD, 0xDE, 0xDF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x20
    ];
  };

  this.ngrams = function() {
    return [
      0x20E1ED, 0x20E1F0, 0x20E3E9, 0x20E4E9, 0x20E5F0, 0x20E720, 0x20EAE1, 0x20ECE5,
      0x20EDE1, 0x20EF20, 0x20F0E1, 0x20F0EF, 0x20F0F1, 0x20F3F4, 0x20F3F5, 0x20F4E7,
      0x20F4EF, 0xDFE120, 0xE120E1, 0xE120F4, 0xE1E920, 0xE1ED20, 0xE1F0FC, 0xE1F220,
      0xE3E9E1, 0xE5E920, 0xE5F220, 0xE720F4, 0xE7ED20, 0xE7F220, 0xE920F4, 0xE9E120,
      0xE9EADE, 0xE9F220, 0xEAE1E9, 0xEAE1F4, 0xECE520, 0xED20E1, 0xED20E5, 0xED20F0,
      0xEDE120, 0xEFF220, 0xEFF520, 0xF0EFF5, 0xF0F1EF, 0xF0FC20, 0xF220E1, 0xF220E5,
      0xF220EA, 0xF220F0, 0xF220F4, 0xF3E520, 0xF3E720, 0xF3F4EF, 0xF4E120, 0xF4E1E9,
      0xF4E7ED, 0xF4E7F2, 0xF4E9EA, 0xF4EF20, 0xF4EFF5, 0xF4F9ED, 0xF9ED20, 0xFEED20
    ];
  };

  this.name = function(det) {
    return (det && det.fC1Bytes) ? 'windows-1253' : 'ISO-8859-7';
  };

  this.language = function() {
    return 'el';
  };
};
util.inherits(module.exports.ISO_8859_7, sbcs);

module.exports.ISO_8859_8 = function() {

  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
      0xF8, 0xF9, 0xFA, 0x20, 0x20, 0x20, 0x20, 0x20
    ];
  };

  this.ngrams = function() {
    return [
      new NGramsPlusLang('he', [
        0x20E0E5, 0x20E0E7, 0x20E0E9, 0x20E0FA, 0x20E1E9, 0x20E1EE, 0x20E4E0, 0x20E4E5,
        0x20E4E9, 0x20E4EE, 0x20E4F2, 0x20E4F9, 0x20E4FA, 0x20ECE0, 0x20ECE4, 0x20EEE0,
        0x20F2EC, 0x20F9EC, 0xE0FA20, 0xE420E0, 0xE420E1, 0xE420E4, 0xE420EC, 0xE420EE,
        0xE420F9, 0xE4E5E0, 0xE5E020, 0xE5ED20, 0xE5EF20, 0xE5F820, 0xE5FA20, 0xE920E4,
        0xE9E420, 0xE9E5FA, 0xE9E9ED, 0xE9ED20, 0xE9EF20, 0xE9F820, 0xE9FA20, 0xEC20E0,
        0xEC20E4, 0xECE020, 0xECE420, 0xED20E0, 0xED20E1, 0xED20E4, 0xED20EC, 0xED20EE,
        0xED20F9, 0xEEE420, 0xEF20E4, 0xF0E420, 0xF0E920, 0xF0E9ED, 0xF2EC20, 0xF820E4,
        0xF8E9ED, 0xF9EC20, 0xFA20E0, 0xFA20E1, 0xFA20E4, 0xFA20EC, 0xFA20EE, 0xFA20F9,
      ]),
      new NGramsPlusLang('he', [
        0x20E0E5, 0x20E0EC, 0x20E4E9, 0x20E4EC, 0x20E4EE, 0x20E4F0, 0x20E9F0, 0x20ECF2,
        0x20ECF9, 0x20EDE5, 0x20EDE9, 0x20EFE5, 0x20EFE9, 0x20F8E5, 0x20F8E9, 0x20FAE0,
        0x20FAE5, 0x20FAE9, 0xE020E4, 0xE020EC, 0xE020ED, 0xE020FA, 0xE0E420, 0xE0E5E4,
        0xE0EC20, 0xE0EE20, 0xE120E4, 0xE120ED, 0xE120FA, 0xE420E4, 0xE420E9, 0xE420EC,
        0xE420ED, 0xE420EF, 0xE420F8, 0xE420FA, 0xE4EC20, 0xE5E020, 0xE5E420, 0xE7E020,
        0xE9E020, 0xE9E120, 0xE9E420, 0xEC20E4, 0xEC20ED, 0xEC20FA, 0xECF220, 0xECF920,
        0xEDE9E9, 0xEDE9F0, 0xEDE9F8, 0xEE20E4, 0xEE20ED, 0xEE20FA, 0xEEE120, 0xEEE420,
        0xF2E420, 0xF920E4, 0xF920ED, 0xF920FA, 0xF9E420, 0xFAE020, 0xFAE420, 0xFAE5E9,
      ])
    ];
  };

  this.name = function(det) {
    return (det && det.fC1Bytes) ? 'windows-1255' : 'ISO-8859-8';
  };

  this.language = function() {
    return 'he';
  };

};
util.inherits(module.exports.ISO_8859_8, sbcs);


module.exports.ISO_8859_9 = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
      0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0x20,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x69, 0xFE, 0xDF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
    ];
  };

  this.ngrams = function() {
    return [
      0x206261, 0x206269, 0x206275, 0x206461, 0x206465, 0x206765, 0x206861, 0x20696C,
      0x206B61, 0x206B6F, 0x206D61, 0x206F6C, 0x207361, 0x207461, 0x207665, 0x207961,
      0x612062, 0x616B20, 0x616C61, 0x616D61, 0x616E20, 0x616EFD, 0x617220, 0x617261,
      0x6172FD, 0x6173FD, 0x617961, 0x626972, 0x646120, 0x646520, 0x646920, 0x652062,
      0x65206B, 0x656469, 0x656E20, 0x657220, 0x657269, 0x657369, 0x696C65, 0x696E20,
      0x696E69, 0x697220, 0x6C616E, 0x6C6172, 0x6C6520, 0x6C6572, 0x6E2061, 0x6E2062,
      0x6E206B, 0x6E6461, 0x6E6465, 0x6E6520, 0x6E6920, 0x6E696E, 0x6EFD20, 0x72696E,
      0x72FD6E, 0x766520, 0x796120, 0x796F72, 0xFD6E20, 0xFD6E64, 0xFD6EFD, 0xFDF0FD
    ];
  };

  this.name = function(det) {
    return (det && det.fC1Bytes) ? 'windows-1254' : 'ISO-8859-9';
  };

  this.language = function() {
    return 'tr';
  };
};
util.inherits(module.exports.ISO_8859_9, sbcs);


module.exports.windows_1251 = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x90, 0x83, 0x20, 0x83, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x9A, 0x20, 0x9C, 0x9D, 0x9E, 0x9F,
      0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x9A, 0x20, 0x9C, 0x9D, 0x9E, 0x9F,
      0x20, 0xA2, 0xA2, 0xBC, 0x20, 0xB4, 0x20, 0x20,
      0xB8, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0xBF,
      0x20, 0x20, 0xB3, 0xB3, 0xB4, 0xB5, 0x20, 0x20,
      0xB8, 0x20, 0xBA, 0x20, 0xBC, 0xBE, 0xBE, 0xBF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
      0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
    ];
  };

  this.ngrams = function() {
    return [
      0x20E220, 0x20E2EE, 0x20E4EE, 0x20E7E0, 0x20E820, 0x20EAE0, 0x20EAEE, 0x20EDE0,
      0x20EDE5, 0x20EEE1, 0x20EFEE, 0x20EFF0, 0x20F0E0, 0x20F1EE, 0x20F1F2, 0x20F2EE,
      0x20F7F2, 0x20FDF2, 0xE0EDE8, 0xE0F2FC, 0xE3EE20, 0xE5EBFC, 0xE5EDE8, 0xE5F1F2,
      0xE5F220, 0xE820EF, 0xE8E520, 0xE8E820, 0xE8FF20, 0xEBE5ED, 0xEBE820, 0xEBFCED,
      0xEDE020, 0xEDE520, 0xEDE8E5, 0xEDE8FF, 0xEDEE20, 0xEDEEE2, 0xEE20E2, 0xEE20EF,
      0xEE20F1, 0xEEE220, 0xEEE2E0, 0xEEE3EE, 0xEEE920, 0xEEEBFC, 0xEEEC20, 0xEEF1F2,
      0xEFEEEB, 0xEFF0E5, 0xEFF0E8, 0xEFF0EE, 0xF0E0E2, 0xF0E5E4, 0xF1F2E0, 0xF1F2E2,
      0xF1F2E8, 0xF1FF20, 0xF2E5EB, 0xF2EE20, 0xF2EEF0, 0xF2FC20, 0xF7F2EE, 0xFBF520
    ];
  };

  this.name = function(det) {
    return 'windows-1251';
  };

  this.language = function() {
    return 'ru';
  };
};
util.inherits(module.exports.windows_1251, sbcs);


module.exports.windows_1256 = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x81, 0x20, 0x83, 0x20, 0x20, 0x20, 0x20,
      0x88, 0x20, 0x8A, 0x20, 0x9C, 0x8D, 0x8E, 0x8F,
      0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x98, 0x20, 0x9A, 0x20, 0x9C, 0x20, 0x20, 0x9F,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
      0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
      0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0x20,
      0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
      0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
      0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
      0x20, 0x20, 0x20, 0x20, 0xF4, 0x20, 0x20, 0x20,
      0x20, 0xF9, 0x20, 0xFB, 0xFC, 0x20, 0x20, 0xFF
    ];
  };

  this.ngrams = function() {
    return [
      0x20C7E1, 0x20C7E4, 0x20C8C7, 0x20DAE1, 0x20DDED, 0x20E1E1, 0x20E3E4, 0x20E6C7,
      0xC720C7, 0xC7C120, 0xC7CA20, 0xC7D120, 0xC7E120, 0xC7E1C3, 0xC7E1C7, 0xC7E1C8,
      0xC7E1CA, 0xC7E1CC, 0xC7E1CD, 0xC7E1CF, 0xC7E1D3, 0xC7E1DA, 0xC7E1DE, 0xC7E1E3,
      0xC7E1E6, 0xC7E1ED, 0xC7E320, 0xC7E420, 0xC7E4CA, 0xC820C7, 0xC920C7, 0xC920DD,
      0xC920E1, 0xC920E3, 0xC920E6, 0xCA20C7, 0xCF20C7, 0xCFC920, 0xD120C7, 0xD1C920,
      0xD320C7, 0xDA20C7, 0xDAE1EC, 0xDDED20, 0xE120C7, 0xE1C920, 0xE1EC20, 0xE1ED20,
      0xE320C7, 0xE3C720, 0xE3C920, 0xE3E420, 0xE420C7, 0xE520C7, 0xE5C720, 0xE6C7E1,
      0xE6E420, 0xEC20C7, 0xED20C7, 0xED20E3, 0xED20E6, 0xEDC920, 0xEDD120, 0xEDE420
    ];
  };

  this.name = function(det) {
    return 'windows-1256';
  };

  this.language = function() {
    return 'ar';
  };
};
util.inherits(module.exports.windows_1256, sbcs);


module.exports.KOI8_R = function() {
  this.byteMap = function() {
    return [
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
      0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
      0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0xA3, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0xA3, 0x20, 0x20, 0x20, 0x20,
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
      0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
      0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
      0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
      0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
      0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
      0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
      0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
      0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
    ];
  };

  this.ngrams = function() {
    return [
      0x20C4CF, 0x20C920, 0x20CBC1, 0x20CBCF, 0x20CEC1, 0x20CEC5, 0x20CFC2, 0x20D0CF,
      0x20D0D2, 0x20D2C1, 0x20D3CF, 0x20D3D4, 0x20D4CF, 0x20D720, 0x20D7CF, 0x20DAC1,
      0x20DCD4, 0x20DED4, 0xC1CEC9, 0xC1D4D8, 0xC5CCD8, 0xC5CEC9, 0xC5D3D4, 0xC5D420,
      0xC7CF20, 0xC920D0, 0xC9C520, 0xC9C920, 0xC9D120, 0xCCC5CE, 0xCCC920, 0xCCD8CE,
      0xCEC120, 0xCEC520, 0xCEC9C5, 0xCEC9D1, 0xCECF20, 0xCECFD7, 0xCF20D0, 0xCF20D3,
      0xCF20D7, 0xCFC7CF, 0xCFCA20, 0xCFCCD8, 0xCFCD20, 0xCFD3D4, 0xCFD720, 0xCFD7C1,
      0xD0CFCC, 0xD0D2C5, 0xD0D2C9, 0xD0D2CF, 0xD2C1D7, 0xD2C5C4, 0xD3D120, 0xD3D4C1,
      0xD3D4C9, 0xD3D4D7, 0xD4C5CC, 0xD4CF20, 0xD4CFD2, 0xD4D820, 0xD9C820, 0xDED4CF
    ];
  };

  this.name = function(det) {
    return 'KOI8-R';
  };

  this.language = function() {
    return 'ru';
  };
};
util.inherits(module.exports.KOI8_R, sbcs);


/*
module.exports.ISO_8859_7 = function() {
  this.byteMap = function() {
    return [

    ];
  };

  this.ngrams = function() {
    return [

    ];
  };

  this.name = function(det) {
    if (typeof det == 'undefined')
      return 'ISO-8859-7';
    return det.fC1Bytes ? 'windows-1253' : 'ISO-8859-7';
  };

  this.language = function() {
    return 'el';
  };
};
util.inherits(module.exports.ISO_8859_7, sbcs);
*/



/***/ }),

/***/ 3982:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.map = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function map(project, thisArg) {
    return lift_1.operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            subscriber.next(project.call(thisArg, value, index++));
        }));
    });
}
exports.map = map;
//# sourceMappingURL=map.js.map

/***/ }),

/***/ 4029:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mergeScan = void 0;
var lift_1 = __webpack_require__(4698);
var mergeInternals_1 = __webpack_require__(8408);
function mergeScan(accumulator, seed, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    return lift_1.operate(function (source, subscriber) {
        var state = seed;
        return mergeInternals_1.mergeInternals(source, subscriber, function (value, index) { return accumulator(state, value, index); }, concurrent, function (value) {
            state = value;
        }, false, undefined, function () { return (state = null); });
    });
}
exports.mergeScan = mergeScan;
//# sourceMappingURL=mergeScan.js.map

/***/ }),

/***/ 4071:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compareBuild = __webpack_require__(6231)
const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
module.exports = rsort


/***/ }),

/***/ 4074:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const u = (__webpack_require__(8556).fromPromise)
const fs = __webpack_require__(6903)
const path = __webpack_require__(6928)
const mkdir = __webpack_require__(4544)
const pathExists = (__webpack_require__(802).pathExists)

async function outputFile (file, data, encoding = 'utf-8') {
  const dir = path.dirname(file)

  if (!(await pathExists(dir))) {
    await mkdir.mkdirs(dir)
  }

  return fs.writeFile(file, data, encoding)
}

function outputFileSync (file, ...args) {
  const dir = path.dirname(file)
  if (!fs.existsSync(dir)) {
    mkdir.mkdirsSync(dir)
  }

  fs.writeFileSync(file, ...args)
}

module.exports = {
  outputFile: u(outputFile),
  outputFileSync
}


/***/ }),

/***/ 4078:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapOneOrManyArgs = void 0;
var map_1 = __webpack_require__(3982);
var isArray = Array.isArray;
function callOrApply(fn, args) {
    return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
    return map_1.map(function (args) { return callOrApply(fn, args); });
}
exports.mapOneOrManyArgs = mapOneOrManyArgs;
//# sourceMappingURL=mapOneOrManyArgs.js.map

/***/ }),

/***/ 4105:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = (__webpack_require__(6671).Buffer);
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.I = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ 4112:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony exports multiline, atlas, cristal, teen, mind, morning, vice, passion, fruit, instagram, retro, summer, rainbow, pastel */
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3757);
/* harmony import */ var tinygradient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2590);


const gradient = (...colors) => {
    let gradient;
    let options;
    if (colors.length === 0) {
        throw new Error('Missing gradient colors');
    }
    if (!Array.isArray(colors[0])) {
        // Deprecated varargs syntax
        if (colors.length === 1) {
            throw new Error(`Expected an array of colors, received ${JSON.stringify(colors[0])}`);
        }
        gradient = tinygradient__WEBPACK_IMPORTED_MODULE_1__(...colors);
    }
    // New syntax: (colors[], options)
    else {
        gradient = tinygradient__WEBPACK_IMPORTED_MODULE_1__(colors[0]);
        options = validateOptions(colors[1]);
    }
    const fn = (str, deprecatedOptions) => {
        return applyGradient(str ? str.toString() : '', gradient, deprecatedOptions ?? options);
    };
    fn.multiline = (str, deprecatedOptions) => multiline(str ? str.toString() : '', gradient, deprecatedOptions ?? options);
    return fn;
};
const getColors = (gradient, options, count) => {
    return options.interpolation?.toLowerCase() === 'hsv'
        ? gradient.hsv(count, options.hsvSpin?.toLowerCase() || false)
        : gradient.rgb(count);
};
function applyGradient(str, gradient, opts) {
    const options = validateOptions(opts);
    const colorsCount = Math.max(str.replace(/\s/g, '').length, gradient.stops.length);
    const colors = getColors(gradient, options, colorsCount);
    let result = '';
    for (const s of str) {
        result += s.match(/\s/g) ? s : chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex(colors.shift()?.toHex() || '#000')(s);
    }
    return result;
}
function multiline(str, gradient, opts) {
    const options = validateOptions(opts);
    const lines = str.split('\n');
    const maxLength = Math.max(...lines.map((l) => l.length), gradient.stops.length);
    const colors = getColors(gradient, options, maxLength);
    const results = [];
    for (const line of lines) {
        const lineColors = colors.slice(0);
        let lineResult = '';
        for (const l of line) {
            lineResult += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex(lineColors.shift()?.toHex() || '#000')(l);
        }
        results.push(lineResult);
    }
    return results.join('\n');
}
function validateOptions(opts) {
    const options = { interpolation: 'rgb', hsvSpin: 'short', ...opts };
    if (opts !== undefined && typeof opts !== 'object') {
        throw new TypeError(`Expected \`options\` to be an \`object\`, got \`${typeof opts}\``);
    }
    if (typeof options.interpolation !== 'string') {
        throw new TypeError(`Expected \`options.interpolation\` to be \`rgb\` or \`hsv\`, got \`${typeof options.interpolation}\``);
    }
    if (options.interpolation.toLowerCase() === 'hsv' && typeof options.hsvSpin !== 'string') {
        throw new TypeError(`Expected \`options.hsvSpin\` to be a \`short\` or \`long\`, got \`${typeof options.hsvSpin}\``);
    }
    return options;
}
const aliases = {
    atlas: { colors: ['#feac5e', '#c779d0', '#4bc0c8'], options: {} },
    cristal: { colors: ['#bdfff3', '#4ac29a'], options: {} },
    teen: { colors: ['#77a1d3', '#79cbca', '#e684ae'], options: {} },
    mind: { colors: ['#473b7b', '#3584a7', '#30d2be'], options: {} },
    morning: { colors: ['#ff5f6d', '#ffc371'], options: { interpolation: 'hsv' } },
    vice: { colors: ['#5ee7df', '#b490ca'], options: { interpolation: 'hsv' } },
    passion: { colors: ['#f43b47', '#453a94'], options: {} },
    fruit: { colors: ['#ff4e50', '#f9d423'], options: {} },
    instagram: { colors: ['#833ab4', '#fd1d1d', '#fcb045'], options: {} },
    retro: {
        colors: ['#3f51b1', '#5a55ae', '#7b5fac', '#8f6aae', '#a86aa4', '#cc6b8e', '#f18271', '#f3a469', '#f7c978'],
        options: {},
    },
    summer: { colors: ['#fdbb2d', '#22c1c3'], options: {} },
    rainbow: { colors: ['#ff0000', '#ff0100'], options: { interpolation: 'hsv', hsvSpin: 'long' } },
    pastel: { colors: ['#74ebd5', '#74ecd5'], options: { interpolation: 'hsv', hsvSpin: 'long' } },
};
function gradientAlias(alias) {
    const result = (str) => gradient(...alias.colors)(str, alias.options);
    result.multiline = (str = '') => gradient(...alias.colors).multiline(str, alias.options);
    return result;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (gradient);
const atlas = gradientAlias(aliases.atlas);
const cristal = gradientAlias(aliases.cristal);
const teen = gradientAlias(aliases.teen);
const mind = gradientAlias(aliases.mind);
const morning = gradientAlias(aliases.morning);
const vice = gradientAlias(aliases.vice);
const passion = gradientAlias(aliases.passion);
const fruit = gradientAlias(aliases.fruit);
const instagram = gradientAlias(aliases.instagram);
const retro = gradientAlias(aliases.retro);
const summer = gradientAlias(aliases.summer);
const rainbow = gradientAlias(aliases.rainbow);
const pastel = gradientAlias(aliases.pastel);
// Deprecated exports
gradient.atlas = atlas;
gradient.cristal = cristal;
gradient.teen = teen;
gradient.mind = mind;
gradient.morning = morning;
gradient.vice = vice;
gradient.passion = passion;
gradient.fruit = fruit;
gradient.instagram = instagram;
gradient.retro = retro;
gradient.summer = summer;
gradient.rainbow = rainbow;
gradient.pastel = pastel;


/***/ }),

/***/ 4118:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.last = void 0;
var EmptyError_1 = __webpack_require__(9866);
var filter_1 = __webpack_require__(248);
var takeLast_1 = __webpack_require__(6910);
var throwIfEmpty_1 = __webpack_require__(6626);
var defaultIfEmpty_1 = __webpack_require__(4761);
var identity_1 = __webpack_require__(8489);
function last(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) {
        return source.pipe(predicate ? filter_1.filter(function (v, i) { return predicate(v, i, source); }) : identity_1.identity, takeLast_1.takeLast(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function () { return new EmptyError_1.EmptyError(); }));
    };
}
exports.last = last;
//# sourceMappingURL=last.js.map

/***/ }),

/***/ 4119:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.firstValueFrom = void 0;
var EmptyError_1 = __webpack_require__(9866);
var Subscriber_1 = __webpack_require__(2554);
function firstValueFrom(source, config) {
    var hasConfig = typeof config === 'object';
    return new Promise(function (resolve, reject) {
        var subscriber = new Subscriber_1.SafeSubscriber({
            next: function (value) {
                resolve(value);
                subscriber.unsubscribe();
            },
            error: reject,
            complete: function () {
                if (hasConfig) {
                    resolve(config.defaultValue);
                }
                else {
                    reject(new EmptyError_1.EmptyError());
                }
            },
        });
        source.subscribe(subscriber);
    });
}
exports.firstValueFrom = firstValueFrom;
//# sourceMappingURL=firstValueFrom.js.map

/***/ }),

/***/ 4120:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ht: () => (/* binding */ createStandardHelp)
/* harmony export */ });
/* unused harmony exports createQuickHelp, createErrorHelp */
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3757);
/* harmony import */ var gradient_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4112);
/* harmony import */ var boxen__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7243);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9546);
/**
 * Standardized Help Formatter for Package Installer CLI
 * Creates consistent, beautiful help displays for all commands
 */




/**
 * Create standardized help display for commands
 */
function createStandardHelp(config) {
    const version = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .getPackageVersion */ .RB)();
    const piGradient = (0,gradient_string__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)(['#00c6ff', '#0072ff']);
    const headerGradient = (0,gradient_string__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)(['#4facfe', '#00f2fe']);
    let helpContent = '';
    // Header
    helpContent += headerGradient(`${config.emoji} Package Installer CLI - ${config.commandName} Command`) + '\n\n';
    // Description
    helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.white(config.description) + '\n\n';
    // Usage
    helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.cyan('Usage:') + '\n';
    config.usage.forEach(usage => {
        helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.white(`  ${piGradient('pi')} ${usage}`) + '\n';
    });
    helpContent += '\n';
    // Options
    helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.cyan('Options:') + '\n';
    // Check if help flag already exists
    const hasHelpFlag = config.options && config.options.some(option => option.flag.includes('-h') || option.flag.includes('--help'));
    // Add custom options first
    if (config.options && config.options.length > 0) {
        config.options.forEach(option => {
            helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray(`  ${option.flag.padEnd(20)} ${option.description}`) + '\n';
        });
    }
    // Add the global help flag only if it doesn't already exist
    if (!hasHelpFlag) {
        helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray(`  -h, --help`.padEnd(20) + ' Show this help message') + '\n';
    }
    helpContent += '\n';
    // Examples
    if (config.examples && config.examples.length > 0) {
        helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.cyan('Examples:') + '\n';
        config.examples.forEach(example => {
            // Check if command already starts with 'pi', if not add it
            const command = example.command.startsWith('pi ') ? example.command : `pi ${example.command}`;
            const formattedCommand = command.replace(/^pi /, `${piGradient('pi')} `);
            helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.gray(`  ${formattedCommand.padEnd(35)} # ${example.description}`) + '\n';
        });
        helpContent += '\n';
    }
    // Additional sections
    if (config.additionalSections && config.additionalSections.length > 0) {
        config.additionalSections.forEach(section => {
            helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#00d2d3')(`💡 ${section.title}:`) + '\n';
            section.items.forEach(item => {
                helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#95afc0')(`  • ${item}`) + '\n';
            });
            helpContent += '\n';
        });
    }
    // Tips
    if (config.tips && config.tips.length > 0) {
        config.tips.forEach(tip => {
            helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.yellow(`💡 Tip: ${tip}`) + '\n';
        });
    }
    // Version footer
    helpContent += chalk__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.hex('#636e72')(`\n📦 Package Installer CLI v${version} • Fast • Smart • Feature-Rich`);
    console.log('\n' + (0,boxen__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A)(helpContent, {
        padding: 1,
        borderStyle: 'round',
        borderColor: 'cyan',
        backgroundColor: '#0a0a0a'
    }));
}
/**
 * Quick help display for commands with minimal options
 */
function createQuickHelp(commandName, emoji, description, usage, options) {
    const piGradient = gradient(['#00c6ff', '#0072ff']);
    const headerGradient = gradient(['#4facfe', '#00f2fe']);
    let helpContent = headerGradient(`${emoji} ${commandName.toUpperCase()} COMMAND HELP`) + '\n\n';
    helpContent += chalk.white(description) + '\n\n';
    helpContent += chalk.cyan('Usage:') + '\n';
    helpContent += chalk.white(`  ${piGradient('pi')} ${usage}`) + '\n\n';
    if (options.length > 0) {
        helpContent += chalk.cyan('Options:') + '\n';
        options.forEach(option => {
            helpContent += chalk.gray(`  ${option}`) + '\n';
        });
    }
    console.log('\n' + boxen(helpContent, {
        padding: 1,
        borderStyle: 'round',
        borderColor: 'cyan',
        backgroundColor: '#0a0a0a'
    }));
}
/**
 * Create error help display
 */
function createErrorHelp(commandName, error, suggestion) {
    let helpContent = chalk.red(`❌ ${commandName.toUpperCase()} ERROR`) + '\n\n';
    helpContent += chalk.white(error) + '\n';
    if (suggestion) {
        helpContent += '\n' + chalk.yellow(`💡 Suggestion: ${suggestion}`) + '\n';
    }
    helpContent += '\n' + chalk.gray(`Run: `) + chalk.cyan(`pi ${commandName} --help`) + chalk.gray(` for more information`);
    console.log('\n' + boxen(helpContent, {
        padding: 1,
        borderStyle: 'round',
        borderColor: 'red',
        backgroundColor: '#0a0a0a'
    }));
}


/***/ }),

/***/ 4215:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



// Description of supported double byte encodings and aliases.
// Tables are not require()-d until they are needed to speed up library load.
// require()-s are direct to support Browserify.

module.exports = {
    
    // == Japanese/ShiftJIS ====================================================
    // All japanese encodings are based on JIS X set of standards:
    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
    //              Has several variations in 1978, 1983, 1990 and 1997.
    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
    //              2 planes, first is superset of 0208, second - revised 0212.
    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

    // Byte encodings are:
    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
    //               0x00-0x7F       - lower part of 0201
    //               0x8E, 0xA1-0xDF - upper part of 0201
    //               (0xA1-0xFE)x2   - 0208 plane (94x94).
    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
    //               Used as-is in ISO2022 family.
    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
    //                0201-1976 Roman, 0208-1978, 0208-1983.
    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
    //
    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
    //
    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

    'shiftjis': {
        type: '_dbcs',
        table: function() { return __webpack_require__(4227) },
        encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
        encodeSkipVals: [{from: 0xED40, to: 0xF940}],
    },
    'csshiftjis': 'shiftjis',
    'mskanji': 'shiftjis',
    'sjis': 'shiftjis',
    'windows31j': 'shiftjis',
    'ms31j': 'shiftjis',
    'xsjis': 'shiftjis',
    'windows932': 'shiftjis',
    'ms932': 'shiftjis',
    '932': 'shiftjis',
    'cp932': 'shiftjis',

    'eucjp': {
        type: '_dbcs',
        table: function() { return __webpack_require__(9594) },
        encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
    },

    // TODO: KDDI extension to Shift_JIS
    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


    // == Chinese/GBK ==========================================================
    // http://en.wikipedia.org/wiki/GBK
    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
    'gb2312': 'cp936',
    'gb231280': 'cp936',
    'gb23121980': 'cp936',
    'csgb2312': 'cp936',
    'csiso58gb231280': 'cp936',
    'euccn': 'cp936',

    // Microsoft's CP936 is a subset and approximation of GBK.
    'windows936': 'cp936',
    'ms936': 'cp936',
    '936': 'cp936',
    'cp936': {
        type: '_dbcs',
        table: function() { return __webpack_require__(1716) },
    },

    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
    'gbk': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(1716).concat)(__webpack_require__(8174)) },
    },
    'xgbk': 'gbk',
    'isoir58': 'gbk',

    // GB18030 is an algorithmic extension of GBK.
    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
    // http://icu-project.org/docs/papers/gb18030.html
    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
    'gb18030': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(1716).concat)(__webpack_require__(8174)) },
        gb18030: function() { return __webpack_require__(1565) },
        encodeSkipVals: [0x80],
        encodeAdd: {'€': 0xA2E3},
    },

    'chinese': 'gb18030',


    // == Korean ===============================================================
    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
    'windows949': 'cp949',
    'ms949': 'cp949',
    '949': 'cp949',
    'cp949': {
        type: '_dbcs',
        table: function() { return __webpack_require__(5578) },
    },

    'cseuckr': 'cp949',
    'csksc56011987': 'cp949',
    'euckr': 'cp949',
    'isoir149': 'cp949',
    'korean': 'cp949',
    'ksc56011987': 'cp949',
    'ksc56011989': 'cp949',
    'ksc5601': 'cp949',


    // == Big5/Taiwan/Hong Kong ================================================
    // There are lots of tables for Big5 and cp950. Please see the following links for history:
    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
    // Variations, in roughly number of defined chars:
    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
    //  * Big5-2003 (Taiwan standard) almost superset of cp950.
    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
    //    Plus, it has 4 combining sequences.
    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
    //    Implementations are not consistent within browsers; sometimes labeled as just big5.
    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
    // 
    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

    'windows950': 'cp950',
    'ms950': 'cp950',
    '950': 'cp950',
    'cp950': {
        type: '_dbcs',
        table: function() { return __webpack_require__(5094) },
    },

    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
    'big5': 'big5hkscs',
    'big5hkscs': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(5094).concat)(__webpack_require__(1479)) },
        encodeSkipVals: [0xa2cc],
    },

    'cnbig5': 'big5hkscs',
    'csbig5': 'big5hkscs',
    'xxbig5': 'big5hkscs',
};


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.concatMapTo = void 0;
var concatMap_1 = __webpack_require__(4534);
var isFunction_1 = __webpack_require__(8403);
function concatMapTo(innerObservable, resultSelector) {
    return isFunction_1.isFunction(resultSelector) ? concatMap_1.concatMap(function () { return innerObservable; }, resultSelector) : concatMap_1.concatMap(function () { return innerObservable; });
}
exports.concatMapTo = concatMapTo;
//# sourceMappingURL=concatMapTo.js.map

/***/ }),

/***/ 4227:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",128],["a1","｡",62],["8140","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×"],["8180","÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],["81b8","∈∋⊆⊇⊂⊃∪∩"],["81c8","∧∨￢⇒⇔∀∃"],["81da","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["81f0","Å‰♯♭♪†‡¶"],["81fc","◯"],["824f","０",9],["8260","Ａ",25],["8281","ａ",25],["829f","ぁ",82],["8340","ァ",62],["8380","ム",22],["839f","Α",16,"Σ",6],["83bf","α",16,"σ",6],["8440","А",5,"ЁЖ",25],["8470","а",5,"ёж",7],["8480","о",17],["849f","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["8740","①",19,"Ⅰ",9],["875f","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["877e","㍻"],["8780","〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["889f","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["8940","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],["8980","園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["8a40","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],["8a80","橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["8b40","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],["8b80","朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["8c40","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],["8c80","劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["8d40","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],["8d80","項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["8e40","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],["8e80","死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["8f40","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],["8f80","準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["9040","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],["9080","逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["9140","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],["9180","操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["9240","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],["9280","逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["9340","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],["9380","凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["9440","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],["9480","楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["9540","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],["9580","斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["9640","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],["9680","摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["9740","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],["9780","沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["9840","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["989f","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["9940","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],["9980","凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["9a40","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],["9a80","噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["9b40","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],["9b80","它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["9c40","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],["9c80","怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["9d40","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],["9d80","捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["9e40","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],["9e80","梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["9f40","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],["9f80","麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["e040","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],["e080","烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e140","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],["e180","痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e240","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],["e280","窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e340","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],["e380","縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e440","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],["e480","艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e540","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],["e580","蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["e640","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],["e680","諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["e740","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],["e780","轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["e840","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],["e880","閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["e940","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],["e980","騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["ea40","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],["ea80","黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],["ed40","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],["ed80","塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["ee40","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],["ee80","蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["eeef","ⅰ",9,"￢￤＇＂"],["f040","",62],["f080","",124],["f140","",62],["f180","",124],["f240","",62],["f280","",124],["f340","",62],["f380","",124],["f440","",62],["f480","",124],["f540","",62],["f580","",124],["f640","",62],["f680","",124],["f740","",62],["f780","",124],["f840","",62],["f880","",124],["f940",""],["fa40","ⅰ",9,"Ⅰ",9,"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],["fa80","兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],["fb40","涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],["fb80","祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],["fc40","髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]]');

/***/ }),

/***/ 4249:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fromSubscribable = void 0;
var Observable_1 = __webpack_require__(541);
function fromSubscribable(subscribable) {
    return new Observable_1.Observable(function (subscriber) { return subscribable.subscribe(subscriber); });
}
exports.fromSubscribable = fromSubscribable;
//# sourceMappingURL=fromSubscribable.js.map

/***/ }),

/***/ 4253:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $3: () => (/* binding */ detectProjectStack),
/* harmony export */   Ue: () => (/* binding */ addFeature),
/* harmony export */   hm: () => (/* binding */ SUPPORTED_FEATURES),
/* harmony export */   vV: () => (/* binding */ ensureFeaturesLoaded)
/* harmony export */ });
/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7187);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6928);
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7016);
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3757);
/* harmony import */ var ora__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5449);
/* harmony import */ var _dependencyInstaller_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2820);
/* harmony import */ var _languageConfig_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9431);
/* harmony import */ var _cacheManager_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(342);
/* harmony import */ var _pathResolver_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3294);
/* harmony import */ var _commands_add_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(2191);
/**
 * Feature installer utility - Handles adding authentication, Docker, and other features to projects
 */











// Get the directory of this file for proper path resolution
const __filename = (0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)("file:///home/sharique/desktop/shariq-projects/package-installer-cli/dist/utils/featureInstaller.js");
const __dirname = (0,path__WEBPACK_IMPORTED_MODULE_1__.dirname)(__filename);
// Load supported features from cached or direct file access
let SUPPORTED_FEATURES = {};
/**
 * Load features from cache or file system with new jsonPath structure
 */
async function loadFeatures() {
    try {
        // Get CLI installation directory using the centralized path resolver
        const featuresPath = (0,_pathResolver_js__WEBPACK_IMPORTED_MODULE_8__/* .getFeaturesJsonPath */ .zl)();
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(featuresPath)) {
            const featuresData = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readJson(featuresPath);
            const featuresConfig = featuresData.features || featuresData;
            // Get available features using the centralized function
            const availableFeatures = await (0,_commands_add_js__WEBPACK_IMPORTED_MODULE_9__/* .getAvailableFeatures */ .NI)();
            // Process each feature and load its individual JSON file
            for (const [featureName, config] of Object.entries(featuresConfig)) {
                const featureConfig = config;
                if (featureConfig.jsonPath) {
                    try {
                        // Load the individual feature JSON file
                        const individualFeaturePath = path__WEBPACK_IMPORTED_MODULE_1__.resolve(path__WEBPACK_IMPORTED_MODULE_1__.dirname(featuresPath), featureConfig.jsonPath);
                        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(individualFeaturePath)) {
                            const individualFeatureData = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readJson(individualFeaturePath);
                            // Merge the base config with the individual feature data
                            // The individual JSON files directly contain the provider structure
                            SUPPORTED_FEATURES[featureName] = {
                                supportedFrameworks: featureConfig.supportedFrameworks || [],
                                supportedLanguages: featureConfig.supportedLanguages || [],
                                files: individualFeatureData, // Direct provider structure
                                description: featureConfig.description
                            };
                        }
                        else {
                            console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Individual feature file not found: ${individualFeaturePath}`));
                            // Fallback to base config
                            SUPPORTED_FEATURES[featureName] = {
                                supportedFrameworks: featureConfig.supportedFrameworks || [],
                                supportedLanguages: featureConfig.supportedLanguages || [],
                                files: {},
                                description: featureConfig.description
                            };
                        }
                    }
                    catch (error) {
                        console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Could not load individual feature file for ${featureName}`));
                        // Fallback to base config
                        SUPPORTED_FEATURES[featureName] = {
                            supportedFrameworks: featureConfig.supportedFrameworks || [],
                            supportedLanguages: featureConfig.supportedLanguages || [],
                            files: {},
                            description: featureConfig.description
                        };
                    }
                }
                else {
                    // Legacy format - direct files in config
                    SUPPORTED_FEATURES[featureName] = {
                        supportedFrameworks: featureConfig.supportedFrameworks || [],
                        supportedLanguages: featureConfig.supportedLanguages || [],
                        files: featureConfig.files || {},
                        description: featureConfig.description
                    };
                }
            }
        }
        else {
            console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Features file not found at: ${featuresPath}`));
        }
    }
    catch (error) {
        console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow('⚠️  Could not load features.json, using fallback configuration'));
    }
}
// Lazy loading flag
let featuresLoaded = false;
// Lazy load features when needed
async function ensureFeaturesLoaded() {
    if (!featuresLoaded) {
        await loadFeatures();
        featuresLoaded = true;
    }
}
// Export for use in other modules

// Re-export path utilities for backward compatibility

/**
 * Detect the current project's framework and language with improved logic
 */
/**
 * Detect if a Next.js project uses src folder structure (Next.js only)
 */
async function detectNextjsSrcStructure(projectPath) {
    try {
        const srcPath = path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'src');
        if (!await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(srcPath)) {
            return false;
        }
        // Check for Next.js App Router (app directory in src)
        const srcAppPath = path__WEBPACK_IMPORTED_MODULE_1__.join(srcPath, 'app');
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(srcAppPath)) {
            return true;
        }
        // Check for Next.js Pages Router (pages directory in src) 
        const srcPagesPath = path__WEBPACK_IMPORTED_MODULE_1__.join(srcPath, 'pages');
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(srcPagesPath)) {
            return true;
        }
        // Check for components, lib, utils directories in src (common Next.js patterns)
        const commonDirs = ['components', 'lib', 'utils', 'styles', 'hooks'];
        for (const dir of commonDirs) {
            const dirPath = path__WEBPACK_IMPORTED_MODULE_1__.join(srcPath, dir);
            if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(dirPath)) {
                return true;
            }
        }
        // Check for any TypeScript/JavaScript files in src root
        const srcFiles = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readdir(srcPath);
        const codeFiles = srcFiles.filter(file => file.endsWith('.ts') || file.endsWith('.tsx') ||
            file.endsWith('.js') || file.endsWith('.jsx'));
        return codeFiles.length > 0;
    }
    catch (error) {
        return false;
    }
}
/**
 * Adjust file path for Next.js src folder structure (Next.js specific)
 * Dynamically places files in src/ folder based on their path structure
 */
function adjustNextjsSrcFilePath(filePath, hasSrcFolder, projectPath) {
    // If project doesn't use src folder, return original path
    if (!hasSrcFolder) {
        return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, filePath);
    }
    // Files that should ALWAYS be in root regardless of src folder for Next.js
    const rootOnlyFiles = [
        '.env', '.env.local', '.env.example', '.env.development', '.env.production',
        'package.json', 'next.config.js', 'next.config.mjs', 'next.config.ts',
        'tailwind.config.js', 'tailwind.config.ts', 'postcss.config.js', 'postcss.config.ts',
        'tsconfig.json', 'jsconfig.json', 'README.md', '.gitignore',
        'docker-compose.yml', 'Dockerfile', 'yarn.lock', 'pnpm-lock.yaml', 'package-lock.json'
    ];
    const fileName = path__WEBPACK_IMPORTED_MODULE_1__.basename(filePath);
    // Always put public/ files in root public/
    if (filePath.startsWith('public/')) {
        return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, filePath);
    }
    // Always put root-only files in project root
    if (rootOnlyFiles.includes(fileName)) {
        return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, filePath);
    }
    // If filePath already starts with src/, keep as is
    if (filePath.startsWith('src/')) {
        return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, filePath);
    }
    // Everything else goes in src/ folder for Next.js projects with src structure
    // This includes: app/, pages/, components/, lib/, utils/, styles/, hooks/, types/, middleware.ts, etc.
    return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'src', filePath);
}
/**
 * Adjust file path for framework-specific folder structures
 * Dynamically places files based on detected project structure
 */
function adjustFrameworkFilePath(filePath, framework, hasSrcFolder, projectPath) {
    // Files that should ALWAYS be in root regardless of src folder
    const rootOnlyFiles = [
        '.env',
        '.env.local',
        '.env.example',
        '.env.development',
        '.env.production',
        'package.json',
        'next.config.js',
        'next.config.mjs',
        'next.config.ts',
        'tailwind.config.js',
        'tailwind.config.ts',
        'postcss.config.js',
        'postcss.config.ts',
        'middleware.ts',
        'middleware.js',
        'vite.config.js',
        'vite.config.ts',
        'nuxt.config.js',
        'nuxt.config.ts',
        'vue.config.js',
        'angular.json',
        'nest-cli.json',
        'tsconfig.json',
        'jsconfig.json',
        '.gitignore',
        'README.md',
        'docker-compose.yml',
        'Dockerfile'
    ];
    const fileName = path__WEBPACK_IMPORTED_MODULE_1__.basename(filePath);
    const fileDir = path__WEBPACK_IMPORTED_MODULE_1__.dirname(filePath);
    // Check if this file should always be in root
    if (rootOnlyFiles.includes(fileName) || filePath.startsWith('public/')) {
        return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, filePath);
    }
    // Framework-specific logic for src folder structure
    switch (framework) {
        case 'nextjs':
            return adjustNextjsSrcFilePath(filePath, hasSrcFolder, projectPath);
        case 'reactjs':
        case 'vuejs':
        case 'angularjs': {
            if (hasSrcFolder && !filePath.startsWith('src/')) {
                const appDirs = ['components', 'pages', 'lib', 'utils', 'hooks', 'services', 'types'];
                const isAppFile = appDirs.some(dir => filePath.startsWith(dir + '/')) ||
                    fileName.match(/\.(jsx?|tsx?|vue)$/) && !fileName.includes('config');
                if (isAppFile) {
                    return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'src', filePath);
                }
            }
            return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, filePath);
        }
        case 'nestjs': {
            if (!filePath.startsWith('src/') && !rootOnlyFiles.includes(fileName)) {
                return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'src', filePath);
            }
            return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, filePath);
        }
        default: {
            if (hasSrcFolder && !filePath.startsWith('src/') && !rootOnlyFiles.includes(fileName)) {
                const backendFiles = ['controllers', 'routes', 'services', 'utils', 'middleware', 'models'];
                const shouldGoInSrc = backendFiles.some(dir => filePath.startsWith(dir + '/')) ||
                    (fileName.match(/\.(js|ts)$/) && fileDir !== '.' && !fileName.includes('config'));
                if (shouldGoInSrc) {
                    return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'src', filePath);
                }
            }
            return path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, filePath);
        }
    }
}
async function detectProjectStack(projectPath) {
    try {
        // Skip cache lookup for simplicity - always detect fresh
        // Detect language first
        const files = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readdir(projectPath);
        const detectedLanguages = (0,_languageConfig_js__WEBPACK_IMPORTED_MODULE_6__/* .detectLanguageFromFiles */ .v0)(files);
        const primaryLanguage = detectedLanguages[0];
        let framework;
        let isComboTemplate = false;
        let packageManager = 'npm';
        let projectLanguage = 'javascript';
        let hasSrcFolder = false;
        const packageJsonPath = path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'package.json');
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(packageJsonPath)) {
            const packageJson = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readJson(packageJsonPath);
            const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
            // Detect TypeScript
            if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'tsconfig.json'))) {
                projectLanguage = 'typescript';
            }
            else if (dependencies['typescript']) {
                projectLanguage = 'typescript';
            }
            // Check for src folder structure
            hasSrcFolder = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'src'));
            // Detect package manager
            packageManager = await detectPackageManager(projectPath);
            // Detect framework
            if (dependencies['next']) {
                framework = 'nextjs';
                // For Next.js projects, do a more thorough src folder detection
                hasSrcFolder = await detectNextjsSrcStructure(projectPath);
            }
            else if (dependencies['react']) {
                framework = 'reactjs';
            }
            else if (dependencies['express']) {
                framework = 'expressjs';
            }
            else if (dependencies['@nestjs/core']) {
                framework = 'nestjs';
            }
            else if (dependencies['vue']) {
                framework = 'vuejs';
            }
            else if (dependencies['@angular/core']) {
                framework = 'angularjs';
            }
            else if (dependencies['@remix-run/react']) {
                framework = 'remixjs';
            }
            // For other frameworks, simple src folder check
            if (framework !== 'nextjs' && !hasSrcFolder) {
                hasSrcFolder = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'src'));
            }
            // Cache the detected information
            await (0,_cacheManager_js__WEBPACK_IMPORTED_MODULE_7__/* .cacheProjectData */ .aF)(projectPath, packageJson.name || path__WEBPACK_IMPORTED_MODULE_1__.basename(projectPath), typeof projectLanguage === 'string' ? projectLanguage : 'unknown');
        }
        return {
            framework,
            language: typeof primaryLanguage === 'string' ? primaryLanguage : ((primaryLanguage && typeof primaryLanguage.language === 'string') ? primaryLanguage.language : undefined),
            projectLanguage,
            isComboTemplate,
            packageManager,
            hasSrcFolder
        };
    }
    catch (error) {
        console.error('Error detecting project stack:', error);
        return {};
    }
}
/**
 * Detect package manager for the project
 */
async function detectPackageManager(projectPath) {
    if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'pnpm-lock.yaml'))) {
        return 'pnpm';
    }
    else if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'yarn.lock'))) {
        return 'yarn';
    }
    else if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(path__WEBPACK_IMPORTED_MODULE_1__.join(projectPath, 'bun.lockb'))) {
        return 'bun';
    }
    return 'npm';
}
/**
 * Add a feature to the current project
 */
async function addFeature(featureName, provider, projectPath = process.cwd()) {
    const spinner = (0,ora__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay)(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#9c88ff')(`Adding ${featureName} feature...`)).start();
    try {
        // Ensure features are loaded
        await ensureFeaturesLoaded();
        // Validate project path exists
        if (!await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(projectPath)) {
            throw new Error(`Project path does not exist: ${projectPath}`);
        }
        // Get project information
        const projectInfo = await detectProjectStack(projectPath);
        if (!projectInfo.framework) {
            spinner.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow('Could not detect project framework automatically'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('📋 Supported frameworks: nextjs, expressjs, nestjs, reactjs, vuejs, angularjs, remixjs'));
            throw new Error('Could not detect project framework. Please ensure you\'re in a valid project directory.');
        }
        // Get feature configuration
        const featureConfig = SUPPORTED_FEATURES[featureName];
        if (!featureConfig) {
            const availableFeatures = Object.keys(SUPPORTED_FEATURES);
            throw new Error(`Feature '${featureName}' not found. Available features: ${availableFeatures.join(', ')}`);
        }
        // Check if feature supports this framework
        if (!featureConfig.supportedFrameworks.includes(projectInfo.framework)) {
            throw new Error(`Feature '${featureName}' is not supported for ${projectInfo.framework} projects. Supported frameworks: ${featureConfig.supportedFrameworks.join(', ')}`);
        }
        spinner.text = chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#9c88ff')(`Detected ${projectInfo.framework} project (${projectInfo.projectLanguage})`);
        // Check if this feature has a simple structure (framework-based) or complex (provider-based)
        let selectedProvider = provider;
        const availableProviders = Object.keys(featureConfig.files);
        const hasSimpleStructure = availableProviders.includes(projectInfo.framework);
        if (!hasSimpleStructure && !selectedProvider && featureConfig.files) {
            // Complex structure with providers
            if (availableProviders.length > 1) {
                spinner.stop();
                const inquirer = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6824));
                const { provider: chosenProvider } = await inquirer.default.prompt([
                    {
                        type: 'list',
                        name: 'provider',
                        message: `Choose a ${featureName} provider:`,
                        choices: availableProviders
                    }
                ]);
                selectedProvider = chosenProvider;
                spinner.start(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#9c88ff')(`Adding ${featureName} (${selectedProvider}) feature...`));
            }
            else {
                selectedProvider = availableProviders[0];
            }
        }
        else if (hasSimpleStructure) {
            // Simple structure - use framework as the "provider"
            selectedProvider = projectInfo.framework;
        }
        // Get files for the specific provider, framework, and language
        const files = getFeatureFiles(featureConfig, selectedProvider, projectInfo.framework, projectInfo.projectLanguage);
        if (Object.keys(files).length === 0) {
            throw new Error(`No files configured for ${featureName} with ${selectedProvider} provider for ${projectInfo.framework} (${projectInfo.projectLanguage})`);
        }
        spinner.text = `Processing ${Object.keys(files).length} files...`;
        // Process each file based on its action
        for (const [filePath, fileConfig] of Object.entries(files)) {
            await processFeatureFile(filePath, fileConfig, featureName, selectedProvider, projectInfo, projectPath);
        }
        spinner.succeed(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.green(`✅ ${featureName} feature added successfully!`));
        // Update cache with feature usage
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.gray(`📊 Feature ${featureName} used for ${projectInfo.framework || 'unknown'} project`));
        // Show setup instructions
        showSetupInstructions(featureName, selectedProvider);
        // Show additional helpful messages
        console.log(`\n${chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#f39c12')('📋 Next Steps:')}`);
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('• Review the created/updated files to ensure they match your project needs'));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('• Update environment variables in .env files with your actual values'));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('• Test the feature integration by running your project'));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('• Check the documentation for any additional configuration steps'));
    }
    catch (error) {
        spinner.fail(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.red(`❌ Failed to add ${featureName} feature: ${error.message}`));
        throw error;
    }
}
/**
 * Get feature files for a specific provider, framework, and language
 * Handles both structures:
 * 1. provider -> framework -> language -> files (auth, ai, etc.)
 * 2. framework -> files (docker, gitignore, etc.)
 */
function getFeatureFiles(featureConfig, provider, framework, language) {
    // Check if this is a simple framework-based structure (no providers)
    if (featureConfig.files[framework] && !featureConfig.files[provider]) {
        // Simple structure: framework -> files
        const frameworkConfig = featureConfig.files[framework];
        if (frameworkConfig && typeof frameworkConfig === 'object') {
            // Check if it has action properties (direct files) or language subdirectories
            const firstKey = Object.keys(frameworkConfig)[0];
            if (firstKey && frameworkConfig[firstKey]?.action) {
                // Direct files with actions
                return frameworkConfig;
            }
            else if (frameworkConfig[language]) {
                // Has language subdirectories
                return frameworkConfig[language];
            }
            else if (frameworkConfig['typescript'] && language === 'javascript') {
                // Fallback to typescript
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  JavaScript templates not available, using TypeScript templates`));
                return frameworkConfig['typescript'];
            }
        }
        return frameworkConfig || {};
    }
    // Complex structure: provider -> framework -> language -> files
    const providerConfig = featureConfig.files[provider];
    if (!providerConfig)
        return {};
    const frameworkConfig = providerConfig[framework];
    if (!frameworkConfig)
        return {};
    const languageConfig = frameworkConfig[language];
    if (!languageConfig) {
        // Fallback to typescript if javascript not available
        const tsConfig = frameworkConfig['typescript'];
        if (tsConfig && language === 'javascript') {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  JavaScript templates not available, using TypeScript templates`));
            return tsConfig;
        }
        return {};
    }
    return languageConfig;
}
/**
 * Resolve template file path with fallback strategies
 * Handles dynamic resolution for all framework files
 */
async function resolveTemplateFilePath(featureName, provider, framework, language, filePath) {
    const cliRoot = (0,_pathResolver_js__WEBPACK_IMPORTED_MODULE_8__/* .getCliRootPath */ .mw)();
    // Primary path strategies in order of preference
    const pathStrategies = [
        // 1. Full path with all parameters
        path__WEBPACK_IMPORTED_MODULE_1__.join(cliRoot, 'features', featureName, provider, framework, language, filePath),
        // 2. Without language subfolder (framework-only)
        path__WEBPACK_IMPORTED_MODULE_1__.join(cliRoot, 'features', featureName, provider, framework, filePath),
        // 3. Generic provider path (no framework/language)
        path__WEBPACK_IMPORTED_MODULE_1__.join(cliRoot, 'features', featureName, provider, filePath),
        // 4. Feature root path (no provider/framework/language)
        path__WEBPACK_IMPORTED_MODULE_1__.join(cliRoot, 'features', featureName, filePath),
        // 5. Try with typescript if javascript doesn't exist
        ...(language === 'javascript' ? [
            path__WEBPACK_IMPORTED_MODULE_1__.join(cliRoot, 'features', featureName, provider, framework, 'typescript', filePath)
        ] : []),
        // 6. Try with javascript if typescript doesn't exist  
        ...(language === 'typescript' ? [
            path__WEBPACK_IMPORTED_MODULE_1__.join(cliRoot, 'features', featureName, provider, framework, 'javascript', filePath)
        ] : [])
    ];
    // Try each strategy until we find an existing file
    for (const templatePath of pathStrategies) {
        try {
            if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(templatePath)) {
                return templatePath;
            }
        }
        catch (error) {
            // Continue to next strategy
            continue;
        }
    }
    return null;
}
/**
 * Process a single feature file based on its action
 */
async function processFeatureFile(filePath, fileConfig, featureName, provider, projectInfo, projectPath) {
    const { action } = fileConfig;
    // Resolve template file path with dynamic fallback strategies
    const sourceFilePath = await resolveTemplateFilePath(featureName, provider, projectInfo.framework, projectInfo.projectLanguage, filePath);
    if (!sourceFilePath) {
        console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Template file not found for: ${filePath}`));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.gray(`   Searched in feature: ${featureName}, provider: ${provider}, framework: ${projectInfo.framework}, language: ${projectInfo.projectLanguage}`));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.gray(`   This might be due to running a globally installed CLI. Consider using 'npx' or installing locally.`));
        return;
    }
    // Handle file path adjustment based on project structure - framework agnostic
    let targetFilePath = adjustFrameworkFilePath(filePath, projectInfo.framework || 'unknown', projectInfo.hasSrcFolder || false, projectPath);
    // Ensure all parent directories exist before processing
    await fs_extra__WEBPACK_IMPORTED_MODULE_0__.ensureDir(path__WEBPACK_IMPORTED_MODULE_1__.dirname(targetFilePath));
    switch (action) {
        case 'install':
            await handlePackageInstallation(sourceFilePath, projectPath, projectInfo.packageManager || 'npm', projectInfo.language);
            break;
        case 'create':
            await handleFileCreation(sourceFilePath, targetFilePath);
            break;
        case 'overwrite':
            await handleFileOverwrite(sourceFilePath, targetFilePath);
            break;
        case 'append':
            await handleFileAppend(sourceFilePath, targetFilePath);
            break;
        case 'prepend':
            await handleFilePrepend(sourceFilePath, targetFilePath);
            break;
        default:
            console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Unknown action '${action}' for file: ${filePath}`));
    }
}
/**
 * Handle package.json installation
 */
async function handlePackageInstallation(sourceFilePath, projectPath, packageManager, language) {
    try {
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(sourceFilePath)) {
            const packageData = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readJson(sourceFilePath);
            const dependencies = packageData.dependencies || {};
            const devDependencies = packageData.devDependencies || {};
            const allDeps = Object.keys(dependencies);
            const allDevDeps = Object.keys(devDependencies);
            if (allDeps.length > 0 || allDevDeps.length > 0) {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.blue(`📦 Installing packages with ${packageManager}:`));
                // Install regular dependencies
                if (allDeps.length > 0) {
                    console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.cyan(`   Dependencies: ${allDeps.join(', ')}`));
                    try {
                        await (0,_dependencyInstaller_js__WEBPACK_IMPORTED_MODULE_5__/* .installPackages */ .R)(projectPath, language || 'javascript', allDeps, {
                            isDev: false,
                            timeout: 180000 // 3 minutes timeout
                        });
                    }
                    catch (error) {
                        console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Failed to auto-install dependencies: ${error.message}`));
                        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`💡 Please install these dependencies manually:`));
                        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')(`   ${getInstallCommand(packageManager, allDeps, false)}`));
                    }
                }
                // Install dev dependencies
                if (allDevDeps.length > 0) {
                    console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.cyan(`   Dev Dependencies: ${allDevDeps.join(', ')}`));
                    try {
                        await (0,_dependencyInstaller_js__WEBPACK_IMPORTED_MODULE_5__/* .installPackages */ .R)(projectPath, language || 'javascript', allDevDeps, {
                            isDev: true,
                            timeout: 180000 // 3 minutes timeout
                        });
                    }
                    catch (error) {
                        console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`   ⚠️  Failed to auto-install dev dependencies: ${error.message}`));
                        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`   💡 Please install these dev dependencies manually:`));
                        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')(`      ${getInstallCommand(packageManager, allDevDeps, true)}`));
                    }
                }
            }
            else {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  No packages found to install in: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), sourceFilePath)}`));
            }
        }
        else {
            console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Package.json template file not found: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), sourceFilePath)}`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.gray(`   This might be due to running a globally installed CLI. Consider using 'npx' or installing locally.`));
        }
    }
    catch (error) {
        console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Could not install packages: ${error.message}`));
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`💡 Please install dependencies manually by checking the feature's package.json file.`));
    }
}
/**
 * Handle file creation (only if it doesn't exist)
 */
async function handleFileCreation(sourceFilePath, targetFilePath) {
    if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(targetFilePath)) {
        console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  File already exists, skipping: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
        return;
    }
    try {
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(sourceFilePath)) {
            await copyTemplateFile(sourceFilePath, targetFilePath);
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.green(`✅ Created: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
        }
        else {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Template file not found, skipping: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), sourceFilePath)}`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.gray(`   This might be due to running a globally installed CLI. Consider using 'npx' or installing locally.`));
        }
    }
    catch (error) {
        console.error(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.red(`❌ Failed to create file ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}: ${error.message}`));
        throw error;
    }
}
/**
 * Handle file overwrite (replace existing content or create if doesn't exist)
 */
async function handleFileOverwrite(sourceFilePath, targetFilePath) {
    // Ensure target directory exists
    await fs_extra__WEBPACK_IMPORTED_MODULE_0__.ensureDir(path__WEBPACK_IMPORTED_MODULE_1__.dirname(targetFilePath));
    const fileExists = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(targetFilePath);
    try {
        // Check if source template exists
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(sourceFilePath)) {
            await copyTemplateFile(sourceFilePath, targetFilePath);
            if (fileExists) {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.green(`✅ Updated: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
            }
            else {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.green(`✅ Created: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
            }
        }
        else {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Template file not found, skipping overwrite: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), sourceFilePath)}`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.gray(`   This might be due to running a globally installed CLI. Consider using 'npx' or installing locally.`));
        }
    }
    catch (error) {
        console.error(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.red(`❌ Failed to overwrite/create ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}: ${error.message}`));
        throw error;
    }
}
/**
 * Handle file append (add content to end of file, create if doesn't exist)
 */
async function handleFileAppend(sourceFilePath, targetFilePath) {
    // Ensure target directory exists
    await fs_extra__WEBPACK_IMPORTED_MODULE_0__.ensureDir(path__WEBPACK_IMPORTED_MODULE_1__.dirname(targetFilePath));
    const fileExists = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(targetFilePath);
    let existingContent = '';
    try {
        if (fileExists) {
            existingContent = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readFile(targetFilePath, 'utf8');
        }
        let contentToAppend = '';
        // Check if source template exists
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(sourceFilePath)) {
            contentToAppend = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readFile(sourceFilePath, 'utf8');
        }
        else {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Template file not found, skipping append: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), sourceFilePath)}`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.gray(`   This might be due to running a globally installed CLI. Consider using 'npx' or installing locally.`));
            return;
        }
        // Only append if the content isn't already present (avoid duplicates)
        if (!existingContent.includes(contentToAppend.trim())) {
            const separator = existingContent.endsWith('\n') || !existingContent ? '' : '\n';
            const newContent = existingContent + separator + contentToAppend;
            await fs_extra__WEBPACK_IMPORTED_MODULE_0__.outputFile(targetFilePath, newContent);
            if (fileExists) {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.green(`✅ Appended to: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
            }
            else {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.green(`✅ Created with content: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
            }
        }
        else {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Content already exists in file, skipping append: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
        }
    }
    catch (error) {
        console.error(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.red(`❌ Failed to append/create ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}: ${error.message}`));
        throw error;
    }
}
/**
 * Handle file prepend (add content to beginning of file, create if doesn't exist)
 */
async function handleFilePrepend(sourceFilePath, targetFilePath) {
    // Ensure target directory exists
    await fs_extra__WEBPACK_IMPORTED_MODULE_0__.ensureDir(path__WEBPACK_IMPORTED_MODULE_1__.dirname(targetFilePath));
    const fileExists = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(targetFilePath);
    let existingContent = '';
    try {
        if (fileExists) {
            existingContent = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readFile(targetFilePath, 'utf-8');
        }
        let templateContent;
        // Check if source template exists
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(sourceFilePath)) {
            templateContent = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readFile(sourceFilePath, 'utf-8');
        }
        else {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Template file not found, skipping prepend: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), sourceFilePath)}`));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.gray(`   This might be due to running a globally installed CLI. Consider using 'npx' or installing locally.`));
            return;
        }
        // Only prepend if the content isn't already present (avoid duplicates)
        if (!existingContent.includes(templateContent.trim())) {
            const separator = templateContent.endsWith('\n') ? '' : '\n';
            const newContent = templateContent + separator + existingContent;
            await fs_extra__WEBPACK_IMPORTED_MODULE_0__.outputFile(targetFilePath, newContent);
            if (fileExists) {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.green(`✅ Prepended to: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
            }
            else {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.green(`✅ Created with content: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
            }
        }
        else {
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`⚠️  Content already exists in file, skipping prepend: ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}`));
        }
    }
    catch (error) {
        console.error(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.red(`❌ Failed to prepend/create ${path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), targetFilePath)}: ${error.message}`));
        throw error;
    }
}
/**
 * Copy template file to target location with framework-agnostic content processing
 */
async function copyTemplateFile(sourceFilePath, targetFilePath) {
    if (!await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(sourceFilePath)) {
        const relativePath = path__WEBPACK_IMPORTED_MODULE_1__.relative(process.cwd(), sourceFilePath);
        console.error(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.red(`❌ Template file not found: ${relativePath}`));
        console.error(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow(`💡 This might be due to running a globally installed CLI. Consider using 'npx' or installing locally.`));
        throw new Error(`Template file not found: ${sourceFilePath}`);
    }
    try {
        // Ensure target directory exists
        await fs_extra__WEBPACK_IMPORTED_MODULE_0__.ensureDir(path__WEBPACK_IMPORTED_MODULE_1__.dirname(targetFilePath));
        // For code files, we might need to adjust import paths based on project structure
        if (path__WEBPACK_IMPORTED_MODULE_1__.extname(sourceFilePath).match(/\.(js|jsx|ts|tsx)$/)) {
            const templateContent = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readFile(sourceFilePath, 'utf-8');
            // Process content based on project structure (framework-agnostic)
            let processedContent = templateContent;
            // Adjust import paths for src-based project structures
            if (targetFilePath.includes('/src/')) {
                processedContent = processedContent.replace(/from ['"]@\//g, 'from "@/');
                processedContent = processedContent.replace(/from ['"]\.\.\//g, 'from "../');
            }
            await fs_extra__WEBPACK_IMPORTED_MODULE_0__.writeFile(targetFilePath, processedContent);
        }
        else {
            // For non-code files, just copy directly
            await fs_extra__WEBPACK_IMPORTED_MODULE_0__.copy(sourceFilePath, targetFilePath);
        }
    }
    catch (error) {
        console.error(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.red(`❌ Failed to copy template file: ${error}`));
        throw error;
    }
}
/**
 * Show setup instructions for a feature
 */
function showSetupInstructions(featureName, provider) {
    console.log(`\n${chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#00d2d3')('📋 Setup Instructions:')}`);
    switch (featureName) {
        case 'auth':
            if (provider === 'clerk') {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('1. Sign up at https://clerk.com'));
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('2. Get your API keys from the dashboard'));
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('3. Add them to your .env file'));
            }
            else if (provider === 'auth0') {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('1. Sign up at https://auth0.com'));
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('2. Create an application and get your domain/client ID'));
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('3. Configure your .env file'));
            }
            else if (provider === 'next-auth') {
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('1. Configure providers in your auth config'));
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('2. Set NEXTAUTH_SECRET in .env'));
                console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('3. Add provider client IDs/secrets'));
            }
            break;
        case 'database':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('1. Set up your database connection'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('2. Update connection string in .env'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('3. Run migrations if needed'));
            break;
        case 'docker':
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('1. Install Docker on your system'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('2. Run: docker-compose up -d'));
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')('3. Your app will be available at the configured port'));
            break;
        default:
            console.log(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.hex('#95afc0')(`Check the documentation for ${featureName} configuration`));
    }
}
/**
 * Generate the correct install command for different package managers
 */
function getInstallCommand(packageManager, packages, isDev) {
    switch (packageManager) {
        case 'npm':
            return `npm install ${isDev ? '--save-dev' : ''} ${packages.join(' ')}`;
        case 'yarn':
            return `yarn add ${isDev ? '--dev' : ''} ${packages.join(' ')}`;
        case 'pnpm':
            return `pnpm add ${isDev ? '--save-dev' : ''} ${packages.join(' ')}`;
        case 'bun':
            return `bun add ${isDev ? '--dev' : ''} ${packages.join(' ')}`;
        case 'gem':
            return `gem install ${packages.join(' ')}`;
        case 'pip':
            return `pip install ${packages.join(' ')}`;
        default:
            return `npm install ${isDev ? '--save-dev' : ''} ${packages.join(' ')}`;
    }
}


/***/ }),

/***/ 4263:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.zipWith = void 0;
var zip_1 = __webpack_require__(5055);
function zipWith() {
    var otherInputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherInputs[_i] = arguments[_i];
    }
    return zip_1.zip.apply(void 0, __spreadArray([], __read(otherInputs)));
}
exports.zipWith = zipWith;
//# sourceMappingURL=zipWith.js.map

/***/ }),

/***/ 4283:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * otplib
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 12.0.1
 * @license: MIT
 **/


Object.defineProperty(exports, "__esModule", ({ value: true }));

var presetDefault = __webpack_require__(8095);



Object.keys(presetDefault).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return presetDefault[k];
		}
	});
});


/***/ }),

/***/ 4301:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const u = (__webpack_require__(8556).fromPromise)
module.exports = {
  move: u(__webpack_require__(7480)),
  moveSync: __webpack_require__(1426)
}


/***/ }),

/***/ 4324:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = (__webpack_require__(4434).EventEmitter);
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(2680);
/*</replacement>*/

var Buffer = (__webpack_require__(181).Buffer);
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = __webpack_require__(9023);
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = __webpack_require__(9865);
var destroyImpl = __webpack_require__(4552);
var _require = __webpack_require__(7963),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = (__webpack_require__(3201)/* .codes */ .F),
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
__webpack_require__(7835)(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(5606);
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = (__webpack_require__(4105)/* .StringDecoder */ .I);
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || __webpack_require__(5606);
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = (__webpack_require__(4105)/* .StringDecoder */ .I);
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(9035);
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(4884);
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

/***/ }),

/***/ 4335:
/***/ ((module) => {



// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0'

const MAX_LENGTH = 256
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6

const RELEASE_TYPES = [
  'major',
  'premajor',
  'minor',
  'preminor',
  'patch',
  'prepatch',
  'prerelease',
]

module.exports = {
  MAX_LENGTH,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER,
  RELEASE_TYPES,
  SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 0b001,
  FLAG_LOOSE: 0b010,
}


/***/ }),

/***/ 4344:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mergeMap = void 0;
var map_1 = __webpack_require__(3982);
var innerFrom_1 = __webpack_require__(2018);
var lift_1 = __webpack_require__(4698);
var mergeInternals_1 = __webpack_require__(8408);
var isFunction_1 = __webpack_require__(8403);
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    if (isFunction_1.isFunction(resultSelector)) {
        return mergeMap(function (a, i) { return map_1.map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom_1.innerFrom(project(a, i))); }, concurrent);
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return lift_1.operate(function (source, subscriber) { return mergeInternals_1.mergeInternals(source, subscriber, project, concurrent); });
}
exports.mergeMap = mergeMap;
//# sourceMappingURL=mergeMap.js.map

/***/ }),

/***/ 4396:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



// Update this array if you add/rename/remove files in this directory.
// We support Browserify by skipping automatic module discovery and requiring modules directly.
var modules = [
    __webpack_require__(2571),
    __webpack_require__(1622),
    __webpack_require__(348),
    __webpack_require__(1934),
    __webpack_require__(6478),
    __webpack_require__(234),
    __webpack_require__(1029),
    __webpack_require__(4215),
];

// Put all encoding/alias/codec definitions to single object and export it. 
for (var i = 0; i < modules.length; i++) {
    var module = modules[i];
    for (var enc in module)
        if (Object.prototype.hasOwnProperty.call(module, enc))
            exports[enc] = module[enc];
}


/***/ }),

/***/ 4414:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ stringWidth)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/strip-ansi@7.1.0/node_modules/strip-ansi/index.js + 1 modules
var strip_ansi = __webpack_require__(4729);
;// ./node_modules/.pnpm/get-east-asian-width@1.3.0/node_modules/get-east-asian-width/lookup.js
// Generated code.

function isAmbiguous(x) {
	return x === 0xA1
		|| x === 0xA4
		|| x === 0xA7
		|| x === 0xA8
		|| x === 0xAA
		|| x === 0xAD
		|| x === 0xAE
		|| x >= 0xB0 && x <= 0xB4
		|| x >= 0xB6 && x <= 0xBA
		|| x >= 0xBC && x <= 0xBF
		|| x === 0xC6
		|| x === 0xD0
		|| x === 0xD7
		|| x === 0xD8
		|| x >= 0xDE && x <= 0xE1
		|| x === 0xE6
		|| x >= 0xE8 && x <= 0xEA
		|| x === 0xEC
		|| x === 0xED
		|| x === 0xF0
		|| x === 0xF2
		|| x === 0xF3
		|| x >= 0xF7 && x <= 0xFA
		|| x === 0xFC
		|| x === 0xFE
		|| x === 0x101
		|| x === 0x111
		|| x === 0x113
		|| x === 0x11B
		|| x === 0x126
		|| x === 0x127
		|| x === 0x12B
		|| x >= 0x131 && x <= 0x133
		|| x === 0x138
		|| x >= 0x13F && x <= 0x142
		|| x === 0x144
		|| x >= 0x148 && x <= 0x14B
		|| x === 0x14D
		|| x === 0x152
		|| x === 0x153
		|| x === 0x166
		|| x === 0x167
		|| x === 0x16B
		|| x === 0x1CE
		|| x === 0x1D0
		|| x === 0x1D2
		|| x === 0x1D4
		|| x === 0x1D6
		|| x === 0x1D8
		|| x === 0x1DA
		|| x === 0x1DC
		|| x === 0x251
		|| x === 0x261
		|| x === 0x2C4
		|| x === 0x2C7
		|| x >= 0x2C9 && x <= 0x2CB
		|| x === 0x2CD
		|| x === 0x2D0
		|| x >= 0x2D8 && x <= 0x2DB
		|| x === 0x2DD
		|| x === 0x2DF
		|| x >= 0x300 && x <= 0x36F
		|| x >= 0x391 && x <= 0x3A1
		|| x >= 0x3A3 && x <= 0x3A9
		|| x >= 0x3B1 && x <= 0x3C1
		|| x >= 0x3C3 && x <= 0x3C9
		|| x === 0x401
		|| x >= 0x410 && x <= 0x44F
		|| x === 0x451
		|| x === 0x2010
		|| x >= 0x2013 && x <= 0x2016
		|| x === 0x2018
		|| x === 0x2019
		|| x === 0x201C
		|| x === 0x201D
		|| x >= 0x2020 && x <= 0x2022
		|| x >= 0x2024 && x <= 0x2027
		|| x === 0x2030
		|| x === 0x2032
		|| x === 0x2033
		|| x === 0x2035
		|| x === 0x203B
		|| x === 0x203E
		|| x === 0x2074
		|| x === 0x207F
		|| x >= 0x2081 && x <= 0x2084
		|| x === 0x20AC
		|| x === 0x2103
		|| x === 0x2105
		|| x === 0x2109
		|| x === 0x2113
		|| x === 0x2116
		|| x === 0x2121
		|| x === 0x2122
		|| x === 0x2126
		|| x === 0x212B
		|| x === 0x2153
		|| x === 0x2154
		|| x >= 0x215B && x <= 0x215E
		|| x >= 0x2160 && x <= 0x216B
		|| x >= 0x2170 && x <= 0x2179
		|| x === 0x2189
		|| x >= 0x2190 && x <= 0x2199
		|| x === 0x21B8
		|| x === 0x21B9
		|| x === 0x21D2
		|| x === 0x21D4
		|| x === 0x21E7
		|| x === 0x2200
		|| x === 0x2202
		|| x === 0x2203
		|| x === 0x2207
		|| x === 0x2208
		|| x === 0x220B
		|| x === 0x220F
		|| x === 0x2211
		|| x === 0x2215
		|| x === 0x221A
		|| x >= 0x221D && x <= 0x2220
		|| x === 0x2223
		|| x === 0x2225
		|| x >= 0x2227 && x <= 0x222C
		|| x === 0x222E
		|| x >= 0x2234 && x <= 0x2237
		|| x === 0x223C
		|| x === 0x223D
		|| x === 0x2248
		|| x === 0x224C
		|| x === 0x2252
		|| x === 0x2260
		|| x === 0x2261
		|| x >= 0x2264 && x <= 0x2267
		|| x === 0x226A
		|| x === 0x226B
		|| x === 0x226E
		|| x === 0x226F
		|| x === 0x2282
		|| x === 0x2283
		|| x === 0x2286
		|| x === 0x2287
		|| x === 0x2295
		|| x === 0x2299
		|| x === 0x22A5
		|| x === 0x22BF
		|| x === 0x2312
		|| x >= 0x2460 && x <= 0x24E9
		|| x >= 0x24EB && x <= 0x254B
		|| x >= 0x2550 && x <= 0x2573
		|| x >= 0x2580 && x <= 0x258F
		|| x >= 0x2592 && x <= 0x2595
		|| x === 0x25A0
		|| x === 0x25A1
		|| x >= 0x25A3 && x <= 0x25A9
		|| x === 0x25B2
		|| x === 0x25B3
		|| x === 0x25B6
		|| x === 0x25B7
		|| x === 0x25BC
		|| x === 0x25BD
		|| x === 0x25C0
		|| x === 0x25C1
		|| x >= 0x25C6 && x <= 0x25C8
		|| x === 0x25CB
		|| x >= 0x25CE && x <= 0x25D1
		|| x >= 0x25E2 && x <= 0x25E5
		|| x === 0x25EF
		|| x === 0x2605
		|| x === 0x2606
		|| x === 0x2609
		|| x === 0x260E
		|| x === 0x260F
		|| x === 0x261C
		|| x === 0x261E
		|| x === 0x2640
		|| x === 0x2642
		|| x === 0x2660
		|| x === 0x2661
		|| x >= 0x2663 && x <= 0x2665
		|| x >= 0x2667 && x <= 0x266A
		|| x === 0x266C
		|| x === 0x266D
		|| x === 0x266F
		|| x === 0x269E
		|| x === 0x269F
		|| x === 0x26BF
		|| x >= 0x26C6 && x <= 0x26CD
		|| x >= 0x26CF && x <= 0x26D3
		|| x >= 0x26D5 && x <= 0x26E1
		|| x === 0x26E3
		|| x === 0x26E8
		|| x === 0x26E9
		|| x >= 0x26EB && x <= 0x26F1
		|| x === 0x26F4
		|| x >= 0x26F6 && x <= 0x26F9
		|| x === 0x26FB
		|| x === 0x26FC
		|| x === 0x26FE
		|| x === 0x26FF
		|| x === 0x273D
		|| x >= 0x2776 && x <= 0x277F
		|| x >= 0x2B56 && x <= 0x2B59
		|| x >= 0x3248 && x <= 0x324F
		|| x >= 0xE000 && x <= 0xF8FF
		|| x >= 0xFE00 && x <= 0xFE0F
		|| x === 0xFFFD
		|| x >= 0x1F100 && x <= 0x1F10A
		|| x >= 0x1F110 && x <= 0x1F12D
		|| x >= 0x1F130 && x <= 0x1F169
		|| x >= 0x1F170 && x <= 0x1F18D
		|| x === 0x1F18F
		|| x === 0x1F190
		|| x >= 0x1F19B && x <= 0x1F1AC
		|| x >= 0xE0100 && x <= 0xE01EF
		|| x >= 0xF0000 && x <= 0xFFFFD
		|| x >= 0x100000 && x <= 0x10FFFD;
}

function lookup_isFullWidth(x) {
	return x === 0x3000
		|| x >= 0xFF01 && x <= 0xFF60
		|| x >= 0xFFE0 && x <= 0xFFE6;
}

function lookup_isWide(x) {
	return x >= 0x1100 && x <= 0x115F
		|| x === 0x231A
		|| x === 0x231B
		|| x === 0x2329
		|| x === 0x232A
		|| x >= 0x23E9 && x <= 0x23EC
		|| x === 0x23F0
		|| x === 0x23F3
		|| x === 0x25FD
		|| x === 0x25FE
		|| x === 0x2614
		|| x === 0x2615
		|| x >= 0x2630 && x <= 0x2637
		|| x >= 0x2648 && x <= 0x2653
		|| x === 0x267F
		|| x >= 0x268A && x <= 0x268F
		|| x === 0x2693
		|| x === 0x26A1
		|| x === 0x26AA
		|| x === 0x26AB
		|| x === 0x26BD
		|| x === 0x26BE
		|| x === 0x26C4
		|| x === 0x26C5
		|| x === 0x26CE
		|| x === 0x26D4
		|| x === 0x26EA
		|| x === 0x26F2
		|| x === 0x26F3
		|| x === 0x26F5
		|| x === 0x26FA
		|| x === 0x26FD
		|| x === 0x2705
		|| x === 0x270A
		|| x === 0x270B
		|| x === 0x2728
		|| x === 0x274C
		|| x === 0x274E
		|| x >= 0x2753 && x <= 0x2755
		|| x === 0x2757
		|| x >= 0x2795 && x <= 0x2797
		|| x === 0x27B0
		|| x === 0x27BF
		|| x === 0x2B1B
		|| x === 0x2B1C
		|| x === 0x2B50
		|| x === 0x2B55
		|| x >= 0x2E80 && x <= 0x2E99
		|| x >= 0x2E9B && x <= 0x2EF3
		|| x >= 0x2F00 && x <= 0x2FD5
		|| x >= 0x2FF0 && x <= 0x2FFF
		|| x >= 0x3001 && x <= 0x303E
		|| x >= 0x3041 && x <= 0x3096
		|| x >= 0x3099 && x <= 0x30FF
		|| x >= 0x3105 && x <= 0x312F
		|| x >= 0x3131 && x <= 0x318E
		|| x >= 0x3190 && x <= 0x31E5
		|| x >= 0x31EF && x <= 0x321E
		|| x >= 0x3220 && x <= 0x3247
		|| x >= 0x3250 && x <= 0xA48C
		|| x >= 0xA490 && x <= 0xA4C6
		|| x >= 0xA960 && x <= 0xA97C
		|| x >= 0xAC00 && x <= 0xD7A3
		|| x >= 0xF900 && x <= 0xFAFF
		|| x >= 0xFE10 && x <= 0xFE19
		|| x >= 0xFE30 && x <= 0xFE52
		|| x >= 0xFE54 && x <= 0xFE66
		|| x >= 0xFE68 && x <= 0xFE6B
		|| x >= 0x16FE0 && x <= 0x16FE4
		|| x === 0x16FF0
		|| x === 0x16FF1
		|| x >= 0x17000 && x <= 0x187F7
		|| x >= 0x18800 && x <= 0x18CD5
		|| x >= 0x18CFF && x <= 0x18D08
		|| x >= 0x1AFF0 && x <= 0x1AFF3
		|| x >= 0x1AFF5 && x <= 0x1AFFB
		|| x === 0x1AFFD
		|| x === 0x1AFFE
		|| x >= 0x1B000 && x <= 0x1B122
		|| x === 0x1B132
		|| x >= 0x1B150 && x <= 0x1B152
		|| x === 0x1B155
		|| x >= 0x1B164 && x <= 0x1B167
		|| x >= 0x1B170 && x <= 0x1B2FB
		|| x >= 0x1D300 && x <= 0x1D356
		|| x >= 0x1D360 && x <= 0x1D376
		|| x === 0x1F004
		|| x === 0x1F0CF
		|| x === 0x1F18E
		|| x >= 0x1F191 && x <= 0x1F19A
		|| x >= 0x1F200 && x <= 0x1F202
		|| x >= 0x1F210 && x <= 0x1F23B
		|| x >= 0x1F240 && x <= 0x1F248
		|| x === 0x1F250
		|| x === 0x1F251
		|| x >= 0x1F260 && x <= 0x1F265
		|| x >= 0x1F300 && x <= 0x1F320
		|| x >= 0x1F32D && x <= 0x1F335
		|| x >= 0x1F337 && x <= 0x1F37C
		|| x >= 0x1F37E && x <= 0x1F393
		|| x >= 0x1F3A0 && x <= 0x1F3CA
		|| x >= 0x1F3CF && x <= 0x1F3D3
		|| x >= 0x1F3E0 && x <= 0x1F3F0
		|| x === 0x1F3F4
		|| x >= 0x1F3F8 && x <= 0x1F43E
		|| x === 0x1F440
		|| x >= 0x1F442 && x <= 0x1F4FC
		|| x >= 0x1F4FF && x <= 0x1F53D
		|| x >= 0x1F54B && x <= 0x1F54E
		|| x >= 0x1F550 && x <= 0x1F567
		|| x === 0x1F57A
		|| x === 0x1F595
		|| x === 0x1F596
		|| x === 0x1F5A4
		|| x >= 0x1F5FB && x <= 0x1F64F
		|| x >= 0x1F680 && x <= 0x1F6C5
		|| x === 0x1F6CC
		|| x >= 0x1F6D0 && x <= 0x1F6D2
		|| x >= 0x1F6D5 && x <= 0x1F6D7
		|| x >= 0x1F6DC && x <= 0x1F6DF
		|| x === 0x1F6EB
		|| x === 0x1F6EC
		|| x >= 0x1F6F4 && x <= 0x1F6FC
		|| x >= 0x1F7E0 && x <= 0x1F7EB
		|| x === 0x1F7F0
		|| x >= 0x1F90C && x <= 0x1F93A
		|| x >= 0x1F93C && x <= 0x1F945
		|| x >= 0x1F947 && x <= 0x1F9FF
		|| x >= 0x1FA70 && x <= 0x1FA7C
		|| x >= 0x1FA80 && x <= 0x1FA89
		|| x >= 0x1FA8F && x <= 0x1FAC6
		|| x >= 0x1FACE && x <= 0x1FADC
		|| x >= 0x1FADF && x <= 0x1FAE9
		|| x >= 0x1FAF0 && x <= 0x1FAF8
		|| x >= 0x20000 && x <= 0x2FFFD
		|| x >= 0x30000 && x <= 0x3FFFD;
}

function lookup_getCategory(x) {
	if (isAmbiguous(x)) return 'ambiguous';

	if (lookup_isFullWidth(x)) return 'fullwidth';

	if (
		x === 0x20A9
		|| x >= 0xFF61 && x <= 0xFFBE
		|| x >= 0xFFC2 && x <= 0xFFC7
		|| x >= 0xFFCA && x <= 0xFFCF
		|| x >= 0xFFD2 && x <= 0xFFD7
		|| x >= 0xFFDA && x <= 0xFFDC
		|| x >= 0xFFE8 && x <= 0xFFEE
	) {
		return 'halfwidth';
	}

	if (
		x >= 0x20 && x <= 0x7E
		|| x === 0xA2
		|| x === 0xA3
		|| x === 0xA5
		|| x === 0xA6
		|| x === 0xAC
		|| x === 0xAF
		|| x >= 0x27E6 && x <= 0x27ED
		|| x === 0x2985
		|| x === 0x2986
	) {
		return 'narrow';
	}

	if (lookup_isWide(x)) return 'wide';

	return 'neutral';
}



;// ./node_modules/.pnpm/get-east-asian-width@1.3.0/node_modules/get-east-asian-width/index.js


function validate(codePoint) {
	if (!Number.isSafeInteger(codePoint)) {
		throw new TypeError(`Expected a code point, got \`${typeof codePoint}\`.`);
	}
}

function eastAsianWidthType(codePoint) {
	validate(codePoint);

	return getCategory(codePoint);
}

function eastAsianWidth(codePoint, {ambiguousAsWide = false} = {}) {
	validate(codePoint);

	if (
		lookup_isFullWidth(codePoint)
		|| lookup_isWide(codePoint)
		|| (ambiguousAsWide && isAmbiguous(codePoint))
	) {
		return 2;
	}

	return 1;
}

// For Prettier. This doesn't count "ambiguous" characters or check for valid input.
// https://github.com/sindresorhus/get-east-asian-width/pull/6
const _isNarrowWidth = codePoint => !(isFullWidth(codePoint) || isWide(codePoint));

;// ./node_modules/.pnpm/emoji-regex@10.4.0/node_modules/emoji-regex/index.mjs
/* harmony default export */ const emoji_regex = (() => {
	// https://mths.be/emoji
	return /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE89\uDE8F-\uDEC2\uDEC6\uDECE-\uDEDC\uDEDF-\uDEE9]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
});

;// ./node_modules/.pnpm/string-width@7.2.0/node_modules/string-width/index.js




const segmenter = new Intl.Segmenter();

const defaultIgnorableCodePointRegex = /^\p{Default_Ignorable_Code_Point}$/u;

function stringWidth(string, options = {}) {
	if (typeof string !== 'string' || string.length === 0) {
		return 0;
	}

	const {
		ambiguousIsNarrow = true,
		countAnsiEscapeCodes = false,
	} = options;

	if (!countAnsiEscapeCodes) {
		string = (0,strip_ansi/* default */.A)(string);
	}

	if (string.length === 0) {
		return 0;
	}

	let width = 0;
	const eastAsianWidthOptions = {ambiguousAsWide: !ambiguousIsNarrow};

	for (const {segment: character} of segmenter.segment(string)) {
		const codePoint = character.codePointAt(0);

		// Ignore control characters
		if (codePoint <= 0x1F || (codePoint >= 0x7F && codePoint <= 0x9F)) {
			continue;
		}

		// Ignore zero-width characters
		if (
			(codePoint >= 0x20_0B && codePoint <= 0x20_0F) // Zero-width space, non-joiner, joiner, left-to-right mark, right-to-left mark
			|| codePoint === 0xFE_FF // Zero-width no-break space
		) {
			continue;
		}

		// Ignore combining characters
		if (
			(codePoint >= 0x3_00 && codePoint <= 0x3_6F) // Combining diacritical marks
			|| (codePoint >= 0x1A_B0 && codePoint <= 0x1A_FF) // Combining diacritical marks extended
			|| (codePoint >= 0x1D_C0 && codePoint <= 0x1D_FF) // Combining diacritical marks supplement
			|| (codePoint >= 0x20_D0 && codePoint <= 0x20_FF) // Combining diacritical marks for symbols
			|| (codePoint >= 0xFE_20 && codePoint <= 0xFE_2F) // Combining half marks
		) {
			continue;
		}

		// Ignore surrogate pairs
		if (codePoint >= 0xD8_00 && codePoint <= 0xDF_FF) {
			continue;
		}

		// Ignore variation selectors
		if (codePoint >= 0xFE_00 && codePoint <= 0xFE_0F) {
			continue;
		}

		// This covers some of the above cases, but we still keep them for performance reasons.
		if (defaultIgnorableCodePointRegex.test(character)) {
			continue;
		}

		// TODO: Use `/\p{RGI_Emoji}/v` when targeting Node.js 20.
		if (emoji_regex().test(character)) {
			width += 2;
			continue;
		}

		width += eastAsianWidth(codePoint, eastAsianWidthOptions);
	}

	return width;
}


/***/ }),

/***/ 4422:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.retry = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var identity_1 = __webpack_require__(8489);
var timer_1 = __webpack_require__(3051);
var innerFrom_1 = __webpack_require__(2018);
function retry(configOrCount) {
    if (configOrCount === void 0) { configOrCount = Infinity; }
    var config;
    if (configOrCount && typeof configOrCount === 'object') {
        config = configOrCount;
    }
    else {
        config = {
            count: configOrCount,
        };
    }
    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
    return count <= 0
        ? identity_1.identity
        : lift_1.operate(function (source, subscriber) {
            var soFar = 0;
            var innerSub;
            var subscribeForRetry = function () {
                var syncUnsub = false;
                innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                    if (resetOnSuccess) {
                        soFar = 0;
                    }
                    subscriber.next(value);
                }, undefined, function (err) {
                    if (soFar++ < count) {
                        var resub_1 = function () {
                            if (innerSub) {
                                innerSub.unsubscribe();
                                innerSub = null;
                                subscribeForRetry();
                            }
                            else {
                                syncUnsub = true;
                            }
                        };
                        if (delay != null) {
                            var notifier = typeof delay === 'number' ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(err, soFar));
                            var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
                                notifierSubscriber_1.unsubscribe();
                                resub_1();
                            }, function () {
                                subscriber.complete();
                            });
                            notifier.subscribe(notifierSubscriber_1);
                        }
                        else {
                            resub_1();
                        }
                    }
                    else {
                        subscriber.error(err);
                    }
                }));
                if (syncUnsub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    subscribeForRetry();
                }
            };
            subscribeForRetry();
        });
}
exports.retry = retry;
//# sourceMappingURL=retry.js.map

/***/ }),

/***/ 4434:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("events");

/***/ }),

/***/ 4455:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var util = __webpack_require__(9023),
  Match = __webpack_require__ (5757);

/**
 * Binary search implementation (recursive)
 */
function binarySearch(arr, searchValue) {
  function find(arr, searchValue, left, right) {
    if (right < left)
      return -1;

    /*
    int mid = mid = (left + right) / 2;
    There is a bug in the above line;
    Joshua Bloch suggests the following replacement:
    */
    var mid = Math.floor((left + right) >>> 1);
    if (searchValue > arr[mid])
      return find(arr, searchValue, mid + 1, right);

    if (searchValue < arr[mid])
      return find(arr, searchValue, left, mid - 1);

    return mid;
  };

  return find(arr, searchValue, 0, arr.length - 1);
};

// 'Character'  iterated character class.
//    Recognizers for specific mbcs encodings make their 'characters' available
//    by providing a nextChar() function that fills in an instance of iteratedChar
//    with the next char from the input.
//    The returned characters are not converted to Unicode, but remain as the raw
//    bytes (concatenated into an int) from the codepage data.
//
//  For Asian charsets, use the raw input rather than the input that has been
//   stripped of markup.  Detection only considers multi-byte chars, effectively
//   stripping markup anyway, and double byte chars do occur in markup too.
//
function IteratedChar() {

  this.charValue = 0; // 1-4 bytes from the raw input data
  this.index     = 0;
  this.nextIndex = 0;
  this.error     = false;
  this.done      = false;

  this.reset = function() {
    this.charValue = 0;
    this.index     = -1;
    this.nextIndex = 0;
    this.error     = false;
    this.done      = false;
  };

  this.nextByte = function(det) {
    if (this.nextIndex >= det.fRawLength) {
      this.done = true;
      return -1;
    }
    var byteValue = det.fRawInput[this.nextIndex++] & 0x00ff;
    return byteValue;
  };
};



/**
 * Asian double or multi-byte - charsets.
 * Match is determined mostly by the input data adhering to the
 * encoding scheme for the charset, and, optionally,
 * frequency-of-occurence of characters.
 */

function mbcs() {};

/**
 * Test the match of this charset with the input text data
 *      which is obtained via the CharsetDetector object.
 *
 * @param det  The CharsetDetector, which contains the input text
 *             to be checked for being in this charset.
 * @return     Two values packed into one int  (Damn java, anyhow)
 *             bits 0-7:  the match confidence, ranging from 0-100
 *             bits 8-15: The match reason, an enum-like value.
 */
mbcs.prototype.match = function(det) {

  var singleByteCharCount = 0,  //TODO Do we really need this?
    doubleByteCharCount = 0,
    commonCharCount     = 0,
    badCharCount        = 0,
    totalCharCount      = 0,
    confidence          = 0;

  var iter = new IteratedChar();

  detectBlock: {
    for (iter.reset(); this.nextChar(iter, det);) {
      totalCharCount++;
      if (iter.error) {
        badCharCount++;
      } else {
        var cv = iter.charValue & 0xFFFFFFFF;

        if (cv <= 0xff) {
          singleByteCharCount++;
        } else {
          doubleByteCharCount++;
          if (this.commonChars != null) {
            // NOTE: This assumes that there are no 4-byte common chars.
            if (binarySearch(this.commonChars, cv) >= 0) {
              commonCharCount++;
            }
          }
        }
      }
      if (badCharCount >= 2 && badCharCount * 5 >= doubleByteCharCount) {
        // console.log('its here!')
        // Bail out early if the byte data is not matching the encoding scheme.
        break detectBlock;
      }
    }

    if (doubleByteCharCount <= 10 && badCharCount== 0) {
      // Not many multi-byte chars.
      if (doubleByteCharCount == 0 && totalCharCount < 10) {
        // There weren't any multibyte sequences, and there was a low density of non-ASCII single bytes.
        // We don't have enough data to have any confidence.
        // Statistical analysis of single byte non-ASCII charcters would probably help here.
        confidence = 0;
      }
      else {
        //   ASCII or ISO file?  It's probably not our encoding,
        //   but is not incompatible with our encoding, so don't give it a zero.
        confidence = 10;
      }
      break detectBlock;
    }

    //
    //  No match if there are too many characters that don't fit the encoding scheme.
    //    (should we have zero tolerance for these?)
    //
    if (doubleByteCharCount < 20 * badCharCount) {
      confidence = 0;
      break detectBlock;
    }

    if (this.commonChars == null) {
      // We have no statistics on frequently occuring characters.
      //  Assess confidence purely on having a reasonable number of
      //  multi-byte characters (the more the better
      confidence = 30 + doubleByteCharCount - 20 * badCharCount;
      if (confidence > 100) {
        confidence = 100;
      }
    } else {
      //
      // Frequency of occurence statistics exist.
      //
      var maxVal = Math.log(parseFloat(doubleByteCharCount) / 4);
      var scaleFactor = 90.0 / maxVal;
      confidence = Math.floor(Math.log(commonCharCount + 1) * scaleFactor + 10);
      confidence = Math.min(confidence, 100);
    }
  }   // end of detectBlock:

  return confidence == 0 ? null : new Match(det, this, confidence);
};

/**
 * Get the next character (however many bytes it is) from the input data
 *    Subclasses for specific charset encodings must implement this function
 *    to get characters according to the rules of their encoding scheme.
 *
 *  This function is not a method of class iteratedChar only because
 *   that would require a lot of extra derived classes, which is awkward.
 * @param it  The iteratedChar 'struct' into which the returned char is placed.
 * @param det The charset detector, which is needed to get at the input byte data
 *            being iterated over.
 * @return    True if a character was returned, false at end of input.
 */

mbcs.prototype.nextChar = function(iter, det) {};



/**
 * Shift-JIS charset recognizer.
 */
module.exports.sjis = function() {
  this.name = function() {
    return 'Shift-JIS';
  };
  this.language = function() {
    return 'ja';
  };

  // TODO:  This set of data comes from the character frequency-
  //        of-occurence analysis tool.  The data needs to be moved
  //        into a resource and loaded from there.
  this.commonChars = [
    0x8140, 0x8141, 0x8142, 0x8145, 0x815b, 0x8169, 0x816a, 0x8175, 0x8176, 0x82a0,
    0x82a2, 0x82a4, 0x82a9, 0x82aa, 0x82ab, 0x82ad, 0x82af, 0x82b1, 0x82b3, 0x82b5,
    0x82b7, 0x82bd, 0x82be, 0x82c1, 0x82c4, 0x82c5, 0x82c6, 0x82c8, 0x82c9, 0x82cc,
    0x82cd, 0x82dc, 0x82e0, 0x82e7, 0x82e8, 0x82e9, 0x82ea, 0x82f0, 0x82f1, 0x8341,
    0x8343, 0x834e, 0x834f, 0x8358, 0x835e, 0x8362, 0x8367, 0x8375, 0x8376, 0x8389,
    0x838a, 0x838b, 0x838d, 0x8393, 0x8e96, 0x93fa, 0x95aa
  ];

  this.nextChar = function(iter, det) {
    iter.index = iter.nextIndex;
    iter.error = false;

    var firstByte;
    firstByte = iter.charValue = iter.nextByte(det);
    if (firstByte < 0)
      return false;

    if (firstByte <= 0x7f || (firstByte > 0xa0 && firstByte <= 0xdf))
      return true;

    var secondByte = iter.nextByte(det);
    if (secondByte < 0)
      return false;

    iter.charValue = (firstByte << 8) | secondByte;
    if (! ((secondByte >= 0x40 && secondByte <= 0x7f) || (secondByte >= 0x80 && secondByte <= 0xff))) {
      // Illegal second byte value.
      iter.error = true;
    }
    return true;
  };
};
util.inherits(module.exports.sjis, mbcs);



/**
 *   Big5 charset recognizer.
 */
module.exports.big5 = function() {
  this.name = function() {
    return 'Big5';
  };
  this.language = function() {
    return 'zh';
  };
  // TODO:  This set of data comes from the character frequency-
  //        of-occurence analysis tool.  The data needs to be moved
  //        into a resource and loaded from there.
  this.commonChars = [
    0xa140, 0xa141, 0xa142, 0xa143, 0xa147, 0xa149, 0xa175, 0xa176, 0xa440, 0xa446,
    0xa447, 0xa448, 0xa451, 0xa454, 0xa457, 0xa464, 0xa46a, 0xa46c, 0xa477, 0xa4a3,
    0xa4a4, 0xa4a7, 0xa4c1, 0xa4ce, 0xa4d1, 0xa4df, 0xa4e8, 0xa4fd, 0xa540, 0xa548,
    0xa558, 0xa569, 0xa5cd, 0xa5e7, 0xa657, 0xa661, 0xa662, 0xa668, 0xa670, 0xa6a8,
    0xa6b3, 0xa6b9, 0xa6d3, 0xa6db, 0xa6e6, 0xa6f2, 0xa740, 0xa751, 0xa759, 0xa7da,
    0xa8a3, 0xa8a5, 0xa8ad, 0xa8d1, 0xa8d3, 0xa8e4, 0xa8fc, 0xa9c0, 0xa9d2, 0xa9f3,
    0xaa6b, 0xaaba, 0xaabe, 0xaacc, 0xaafc, 0xac47, 0xac4f, 0xacb0, 0xacd2, 0xad59,
    0xaec9, 0xafe0, 0xb0ea, 0xb16f, 0xb2b3, 0xb2c4, 0xb36f, 0xb44c, 0xb44e, 0xb54c,
    0xb5a5, 0xb5bd, 0xb5d0, 0xb5d8, 0xb671, 0xb7ed, 0xb867, 0xb944, 0xbad8, 0xbb44,
    0xbba1, 0xbdd1, 0xc2c4, 0xc3b9, 0xc440, 0xc45f
  ];
  this.nextChar = function(iter, det) {
    iter.index = iter.nextIndex;
    iter.error = false;

    var firstByte = iter.charValue = iter.nextByte(det);

    if (firstByte < 0)
      return false;

    // single byte character.
    if (firstByte <= 0x7f || firstByte == 0xff)
      return true;

    var secondByte = iter.nextByte(det);

    if (secondByte < 0)
      return false;

    iter.charValue = (iter.charValue << 8) | secondByte;

    if (secondByte < 0x40 || secondByte == 0x7f || secondByte == 0xff)
      iter.error = true;

    return true;
  };
};
util.inherits(module.exports.big5, mbcs);



/**
 *  EUC charset recognizers.  One abstract class that provides the common function
 *  for getting the next character according to the EUC encoding scheme,
 *  and nested derived classes for EUC_KR, EUC_JP, EUC_CN.
 *
 *  Get the next character value for EUC based encodings.
 *  Character 'value' is simply the raw bytes that make up the character
 *     packed into an int.
 */
function eucNextChar(iter, det) {
  iter.index = iter.nextIndex;
  iter.error = false;
  var firstByte  = 0;
  var secondByte = 0;
  var thirdByte  = 0;
  //int fourthByte = 0;
  buildChar: {
    firstByte = iter.charValue = iter.nextByte(det);
    if (firstByte < 0) {
      // Ran off the end of the input data
      iter.done = true;
      break buildChar;
    }
    if (firstByte <= 0x8d) {
      // single byte char
      break buildChar;
    }
    secondByte = iter.nextByte(det);
    iter.charValue = (iter.charValue << 8) | secondByte;
    if (firstByte >= 0xA1 && firstByte <= 0xfe) {
      // Two byte Char
      if (secondByte < 0xa1) {
        iter.error = true;
      }
      break buildChar;
    }
    if (firstByte == 0x8e) {
      // Code Set 2.
      //   In EUC-JP, total char size is 2 bytes, only one byte of actual char value.
      //   In EUC-TW, total char size is 4 bytes, three bytes contribute to char value.
      // We don't know which we've got.
      // Treat it like EUC-JP.  If the data really was EUC-TW, the following two
      //   bytes will look like a well formed 2 byte char.
      if (secondByte < 0xa1) {
        iter.error = true;
      }
      break buildChar;
    }
    if (firstByte == 0x8f) {
      // Code set 3.
      // Three byte total char size, two bytes of actual char value.
      thirdByte = iter.nextByte(det);
      iter.charValue = (iter.charValue << 8) | thirdByte;
      if (thirdByte < 0xa1) {
        iter.error = true;
      }
    }
  }
  return iter.done == false;
};



/**
 * The charset recognize for EUC-JP.  A singleton instance of this class
 *    is created and kept by the public CharsetDetector class
 */
module.exports.euc_jp = function() {
  this.name = function() {
    return 'EUC-JP';
  };
  this.language = function() {
    return 'ja';
  };

  // TODO:  This set of data comes from the character frequency-
  //        of-occurence analysis tool.  The data needs to be moved
  //        into a resource and loaded from there.
  this.commonChars = [
    0xa1a1, 0xa1a2, 0xa1a3, 0xa1a6, 0xa1bc, 0xa1ca, 0xa1cb, 0xa1d6, 0xa1d7, 0xa4a2,
    0xa4a4, 0xa4a6, 0xa4a8, 0xa4aa, 0xa4ab, 0xa4ac, 0xa4ad, 0xa4af, 0xa4b1, 0xa4b3,
    0xa4b5, 0xa4b7, 0xa4b9, 0xa4bb, 0xa4bd, 0xa4bf, 0xa4c0, 0xa4c1, 0xa4c3, 0xa4c4,
    0xa4c6, 0xa4c7, 0xa4c8, 0xa4c9, 0xa4ca, 0xa4cb, 0xa4ce, 0xa4cf, 0xa4d0, 0xa4de,
    0xa4df, 0xa4e1, 0xa4e2, 0xa4e4, 0xa4e8, 0xa4e9, 0xa4ea, 0xa4eb, 0xa4ec, 0xa4ef,
    0xa4f2, 0xa4f3, 0xa5a2, 0xa5a3, 0xa5a4, 0xa5a6, 0xa5a7, 0xa5aa, 0xa5ad, 0xa5af,
    0xa5b0, 0xa5b3, 0xa5b5, 0xa5b7, 0xa5b8, 0xa5b9, 0xa5bf, 0xa5c3, 0xa5c6, 0xa5c7,
    0xa5c8, 0xa5c9, 0xa5cb, 0xa5d0, 0xa5d5, 0xa5d6, 0xa5d7, 0xa5de, 0xa5e0, 0xa5e1,
    0xa5e5, 0xa5e9, 0xa5ea, 0xa5eb, 0xa5ec, 0xa5ed, 0xa5f3, 0xb8a9, 0xb9d4, 0xbaee,
    0xbbc8, 0xbef0, 0xbfb7, 0xc4ea, 0xc6fc, 0xc7bd, 0xcab8, 0xcaf3, 0xcbdc, 0xcdd1
  ];

  this.nextChar = eucNextChar;
};
util.inherits(module.exports.euc_jp, mbcs);



/**
 * The charset recognize for EUC-KR.  A singleton instance of this class
 *    is created and kept by the public CharsetDetector class
 */
module.exports.euc_kr = function() {
  this.name = function() {
    return 'EUC-KR';
  };
  this.language = function() {
    return 'ko';
  };

  // TODO:  This set of data comes from the character frequency-
  //        of-occurence analysis tool.  The data needs to be moved
  //        into a resource and loaded from there.
  this.commonChars = [
    0xb0a1, 0xb0b3, 0xb0c5, 0xb0cd, 0xb0d4, 0xb0e6, 0xb0ed, 0xb0f8, 0xb0fa, 0xb0fc,
    0xb1b8, 0xb1b9, 0xb1c7, 0xb1d7, 0xb1e2, 0xb3aa, 0xb3bb, 0xb4c2, 0xb4cf, 0xb4d9,
    0xb4eb, 0xb5a5, 0xb5b5, 0xb5bf, 0xb5c7, 0xb5e9, 0xb6f3, 0xb7af, 0xb7c2, 0xb7ce,
    0xb8a6, 0xb8ae, 0xb8b6, 0xb8b8, 0xb8bb, 0xb8e9, 0xb9ab, 0xb9ae, 0xb9cc, 0xb9ce,
    0xb9fd, 0xbab8, 0xbace, 0xbad0, 0xbaf1, 0xbbe7, 0xbbf3, 0xbbfd, 0xbcad, 0xbcba,
    0xbcd2, 0xbcf6, 0xbdba, 0xbdc0, 0xbdc3, 0xbdc5, 0xbec6, 0xbec8, 0xbedf, 0xbeee,
    0xbef8, 0xbefa, 0xbfa1, 0xbfa9, 0xbfc0, 0xbfe4, 0xbfeb, 0xbfec, 0xbff8, 0xc0a7,
    0xc0af, 0xc0b8, 0xc0ba, 0xc0bb, 0xc0bd, 0xc0c7, 0xc0cc, 0xc0ce, 0xc0cf, 0xc0d6,
    0xc0da, 0xc0e5, 0xc0fb, 0xc0fc, 0xc1a4, 0xc1a6, 0xc1b6, 0xc1d6, 0xc1df, 0xc1f6,
    0xc1f8, 0xc4a1, 0xc5cd, 0xc6ae, 0xc7cf, 0xc7d1, 0xc7d2, 0xc7d8, 0xc7e5, 0xc8ad
  ];

  this.nextChar = eucNextChar;
};
util.inherits(module.exports.euc_kr, mbcs);



/**
 *   GB-18030 recognizer. Uses simplified Chinese statistics.
 */
module.exports.gb_18030 = function() {
  this.name = function() {
    return 'GB18030';
  };
  this.language = function() {
    return 'zh';
  };

  /*
   *  Get the next character value for EUC based encodings.
   *  Character 'value' is simply the raw bytes that make up the character
   *     packed into an int.
   */
  this.nextChar = function(iter, det) {
    iter.index = iter.nextIndex;
    iter.error = false;
    var firstByte  = 0;
    var secondByte = 0;
    var thirdByte  = 0;
    var fourthByte = 0;
    buildChar: {
      firstByte = iter.charValue = iter.nextByte(det);
      if (firstByte < 0) {
        // Ran off the end of the input data
        iter.done = true;
        break buildChar;
      }
      if (firstByte <= 0x80) {
        // single byte char
        break buildChar;
      }
      secondByte = iter.nextByte(det);
      iter.charValue = (iter.charValue << 8) | secondByte;
      if (firstByte >= 0x81 && firstByte <= 0xFE) {
        // Two byte Char
        if ((secondByte >= 0x40 && secondByte <= 0x7E) || (secondByte >=80 && secondByte <= 0xFE)) {
          break buildChar;
        }
        // Four byte char
        if (secondByte >= 0x30 && secondByte <= 0x39) {
          thirdByte = iter.nextByte(det);
          if (thirdByte >= 0x81 && thirdByte <= 0xFE) {
            fourthByte = iter.nextByte(det);
            if (fourthByte >= 0x30 && fourthByte <= 0x39) {
              iter.charValue = (iter.charValue << 16) | (thirdByte << 8) | fourthByte;
              break buildChar;
            }
          }
        }
        iter.error = true;
        break buildChar;
      }
    }
    return iter.done == false;
  };

  // TODO:  This set of data comes from the character frequency-
  //        of-occurence analysis tool.  The data needs to be moved
  //        into a resource and loaded from there.
  this.commonChars = [
    0xa1a1, 0xa1a2, 0xa1a3, 0xa1a4, 0xa1b0, 0xa1b1, 0xa1f1, 0xa1f3, 0xa3a1, 0xa3ac,
    0xa3ba, 0xb1a8, 0xb1b8, 0xb1be, 0xb2bb, 0xb3c9, 0xb3f6, 0xb4f3, 0xb5bd, 0xb5c4,
    0xb5e3, 0xb6af, 0xb6d4, 0xb6e0, 0xb7a2, 0xb7a8, 0xb7bd, 0xb7d6, 0xb7dd, 0xb8b4,
    0xb8df, 0xb8f6, 0xb9ab, 0xb9c9, 0xb9d8, 0xb9fa, 0xb9fd, 0xbacd, 0xbba7, 0xbbd6,
    0xbbe1, 0xbbfa, 0xbcbc, 0xbcdb, 0xbcfe, 0xbdcc, 0xbecd, 0xbedd, 0xbfb4, 0xbfc6,
    0xbfc9, 0xc0b4, 0xc0ed, 0xc1cb, 0xc2db, 0xc3c7, 0xc4dc, 0xc4ea, 0xc5cc, 0xc6f7,
    0xc7f8, 0xc8ab, 0xc8cb, 0xc8d5, 0xc8e7, 0xc9cf, 0xc9fa, 0xcab1, 0xcab5, 0xcac7,
    0xcad0, 0xcad6, 0xcaf5, 0xcafd, 0xccec, 0xcdf8, 0xceaa, 0xcec4, 0xced2, 0xcee5,
    0xcfb5, 0xcfc2, 0xcfd6, 0xd0c2, 0xd0c5, 0xd0d0, 0xd0d4, 0xd1a7, 0xd2aa, 0xd2b2,
    0xd2b5, 0xd2bb, 0xd2d4, 0xd3c3, 0xd3d0, 0xd3fd, 0xd4c2, 0xd4da, 0xd5e2, 0xd6d0
  ];
};
util.inherits(module.exports.gb_18030, mbcs);


/***/ }),

/***/ 4483:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const Range = __webpack_require__(9165)
const satisfies = (version, range, options) => {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}
module.exports = satisfies


/***/ }),

/***/ 4487:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const stringWidth = __webpack_require__(3258)

function ansiAlign (text, opts) {
  if (!text) return text

  opts = opts || {}
  const align = opts.align || 'center'

  // short-circuit `align: 'left'` as no-op
  if (align === 'left') return text

  const split = opts.split || '\n'
  const pad = opts.pad || ' '
  const widthDiffFn = align !== 'right' ? halfDiff : fullDiff

  let returnString = false
  if (!Array.isArray(text)) {
    returnString = true
    text = String(text).split(split)
  }

  let width
  let maxWidth = 0
  text = text.map(function (str) {
    str = String(str)
    width = stringWidth(str)
    maxWidth = Math.max(width, maxWidth)
    return {
      str,
      width
    }
  }).map(function (obj) {
    return new Array(widthDiffFn(maxWidth, obj.width) + 1).join(pad) + obj.str
  })

  return returnString ? text.join(split) : text
}

ansiAlign.left = function left (text) {
  return ansiAlign(text, { align: 'left' })
}

ansiAlign.center = function center (text) {
  return ansiAlign(text, { align: 'center' })
}

ansiAlign.right = function right (text) {
  return ansiAlign(text, { align: 'right' })
}

module.exports = ansiAlign

function halfDiff (maxWidth, curWidth) {
  return Math.floor((maxWidth - curWidth) / 2)
}

function fullDiff (maxWidth, curWidth) {
  return maxWidth - curWidth
}


/***/ }),

/***/ 4488:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.partition = void 0;
var not_1 = __webpack_require__(9470);
var filter_1 = __webpack_require__(248);
var innerFrom_1 = __webpack_require__(2018);
function partition(source, predicate, thisArg) {
    return [filter_1.filter(predicate, thisArg)(innerFrom_1.innerFrom(source)), filter_1.filter(not_1.not(predicate, thisArg))(innerFrom_1.innerFrom(source))];
}
exports.partition = partition;
//# sourceMappingURL=partition.js.map

/***/ }),

/***/ 4529:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.performanceTimestampProvider = void 0;
exports.performanceTimestampProvider = {
    now: function () {
        return (exports.performanceTimestampProvider.delegate || performance).now();
    },
    delegate: undefined,
};
//# sourceMappingURL=performanceTimestampProvider.js.map

/***/ }),

/***/ 4534:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.concatMap = void 0;
var mergeMap_1 = __webpack_require__(4344);
var isFunction_1 = __webpack_require__(8403);
function concatMap(project, resultSelector) {
    return isFunction_1.isFunction(resultSelector) ? mergeMap_1.mergeMap(project, resultSelector, 1) : mergeMap_1.mergeMap(project, 1);
}
exports.concatMap = concatMap;
//# sourceMappingURL=concatMap.js.map

/***/ }),

/***/ 4544:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const u = (__webpack_require__(8556).fromPromise)
const { makeDir: _makeDir, makeDirSync } = __webpack_require__(270)
const makeDir = u(_makeDir)

module.exports = {
  mkdirs: makeDir,
  mkdirsSync: makeDirSync,
  // alias
  mkdirp: makeDir,
  mkdirpSync: makeDirSync,
  ensureDir: makeDir,
  ensureDirSync: makeDirSync
}


/***/ }),

/***/ 4552:
/***/ ((module) => {



// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};

/***/ }),

/***/ 4566:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.connect = void 0;
var Subject_1 = __webpack_require__(6118);
var innerFrom_1 = __webpack_require__(2018);
var lift_1 = __webpack_require__(4698);
var fromSubscribable_1 = __webpack_require__(4249);
var DEFAULT_CONFIG = {
    connector: function () { return new Subject_1.Subject(); },
};
function connect(selector, config) {
    if (config === void 0) { config = DEFAULT_CONFIG; }
    var connector = config.connector;
    return lift_1.operate(function (source, subscriber) {
        var subject = connector();
        innerFrom_1.innerFrom(selector(fromSubscribable_1.fromSubscribable(subject))).subscribe(subscriber);
        subscriber.add(source.subscribe(subject));
    });
}
exports.connect = connect;
//# sourceMappingURL=connect.js.map

/***/ }),

/***/ 4583:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.switchScan = void 0;
var switchMap_1 = __webpack_require__(8114);
var lift_1 = __webpack_require__(4698);
function switchScan(accumulator, seed) {
    return lift_1.operate(function (source, subscriber) {
        var state = seed;
        switchMap_1.switchMap(function (value, index) { return accumulator(state, value, index); }, function (_, innerValue) { return ((state = innerValue), innerValue); })(source).subscribe(subscriber);
        return function () {
            state = null;
        };
    });
}
exports.switchScan = switchScan;
//# sourceMappingURL=switchScan.js.map

/***/ }),

/***/ 4615:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isValidDate = void 0;
function isValidDate(value) {
    return value instanceof Date && !isNaN(value);
}
exports.isValidDate = isValidDate;
//# sourceMappingURL=isDate.js.map

/***/ }),

/***/ 4633:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.repeatWhen = void 0;
var innerFrom_1 = __webpack_require__(2018);
var Subject_1 = __webpack_require__(6118);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function repeatWhen(notifier) {
    return lift_1.operate(function (source, subscriber) {
        var innerSub;
        var syncResub = false;
        var completions$;
        var isNotifierComplete = false;
        var isMainComplete = false;
        var checkComplete = function () { return isMainComplete && isNotifierComplete && (subscriber.complete(), true); };
        var getCompletionSubject = function () {
            if (!completions$) {
                completions$ = new Subject_1.Subject();
                innerFrom_1.innerFrom(notifier(completions$)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
                    if (innerSub) {
                        subscribeForRepeatWhen();
                    }
                    else {
                        syncResub = true;
                    }
                }, function () {
                    isNotifierComplete = true;
                    checkComplete();
                }));
            }
            return completions$;
        };
        var subscribeForRepeatWhen = function () {
            isMainComplete = false;
            innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, function () {
                isMainComplete = true;
                !checkComplete() && getCompletionSubject().next();
            }));
            if (syncResub) {
                innerSub.unsubscribe();
                innerSub = null;
                syncResub = false;
                subscribeForRepeatWhen();
            }
        };
        subscribeForRepeatWhen();
    });
}
exports.repeatWhen = repeatWhen;
//# sourceMappingURL=repeatWhen.js.map

/***/ }),

/***/ 4688:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const parse = __webpack_require__(9002)
const clean = (version, options) => {
  const s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}
module.exports = clean


/***/ }),

/***/ 4691:
/***/ (function(__unused_webpack_module, exports) {


/***
 * Node External Editor
 *
 * Kevin Gravier <kevin@mrkmg.com>
 * MIT 2018
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var CreateFileError = /** @class */ (function (_super) {
    __extends(CreateFileError, _super);
    function CreateFileError(originalError) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, "Failed to create temporary file for editor") || this;
        _this.originalError = originalError;
        var proto = _newTarget.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(_this, proto);
        }
        else {
            _this.__proto__ = _newTarget.prototype;
        }
        return _this;
    }
    return CreateFileError;
}(Error));
exports.CreateFileError = CreateFileError;


/***/ }),

/***/ 4698:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.operate = exports.hasLift = void 0;
var isFunction_1 = __webpack_require__(8403);
function hasLift(source) {
    return isFunction_1.isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
exports.hasLift = hasLift;
function operate(init) {
    return function (source) {
        if (hasLift(source)) {
            return source.lift(function (liftedSource) {
                try {
                    return init(liftedSource, this);
                }
                catch (err) {
                    this.error(err);
                }
            });
        }
        throw new TypeError('Unable to lift unknown Observable type');
    };
}
exports.operate = operate;
//# sourceMappingURL=lift.js.map

/***/ }),

/***/ 4720:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ historyManager),
/* harmony export */   c: () => (/* binding */ HistoryManager)
/* harmony export */ });
/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7187);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6928);
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(857);
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3757);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6982);
/**
 * History Manager - Track CLI usage and store frameworks/features in hidden CLI folder
 */





class HistoryManager {
    constructor() {
        // Use the same hidden folder as other cache files
        this.cliDir = path__WEBPACK_IMPORTED_MODULE_1__.join(os__WEBPACK_IMPORTED_MODULE_2__.homedir(), '.package-installer-cli');
        this.historyFile = path__WEBPACK_IMPORTED_MODULE_1__.join(this.cliDir, 'history.json');
        this.frameworksFile = path__WEBPACK_IMPORTED_MODULE_1__.join(this.cliDir, 'frameworks.json');
        this.featuresFile = path__WEBPACK_IMPORTED_MODULE_1__.join(this.cliDir, 'features-usage.json');
        this.history = this.getDefaultHistory();
    }
    /**
     * Initialize history system
     */
    async init() {
        try {
            await fs_extra__WEBPACK_IMPORTED_MODULE_0__.ensureDir(this.cliDir);
            if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(this.historyFile)) {
                const data = await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readJson(this.historyFile);
                this.history = { ...this.getDefaultHistory(), ...data };
            }
            else {
                await this.save();
            }
            // Update last used timestamp
            this.history.statistics.lastUsed = new Date().toISOString();
            await this.save();
            // Initialize separate framework and feature files
            await this.initializeFrameworksFile();
            await this.initializeFeaturesFile();
        }
        catch (error) {
            console.warn(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.yellow('⚠️  History initialization failed, using memory history'));
            this.history = this.getDefaultHistory();
        }
    }
    /**
     * Initialize frameworks tracking file
     */
    async initializeFrameworksFile() {
        if (!await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(this.frameworksFile)) {
            const frameworks = {
                lastUpdated: new Date().toISOString(),
                frameworks: this.history.statistics.frameworkUsage
            };
            await fs_extra__WEBPACK_IMPORTED_MODULE_0__.writeJson(this.frameworksFile, frameworks, { spaces: 2 });
        }
    }
    /**
     * Initialize features tracking file
     */
    async initializeFeaturesFile() {
        if (!await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(this.featuresFile)) {
            const features = {
                lastUpdated: new Date().toISOString(),
                features: this.history.statistics.featureUsage
            };
            await fs_extra__WEBPACK_IMPORTED_MODULE_0__.writeJson(this.featuresFile, features, { spaces: 2 });
        }
    }
    /**
     * Get default history structure
     */
    getDefaultHistory() {
        return {
            version: '3.0.0',
            lastUpdated: new Date().toISOString(),
            projects: [],
            features: [],
            commands: [],
            statistics: {
                totalProjects: 0,
                totalFeatures: 0,
                totalCommands: 0,
                frameworkUsage: {},
                featureUsage: {},
                mostUsedFramework: '',
                mostUsedFeature: '',
                lastUsed: new Date().toISOString(),
                totalUsageTime: 0
            }
        };
    }
    /**
     * Record a new project creation
     */
    async recordProject(project) {
        const id = this.generateId();
        const now = new Date().toISOString();
        const projectEntry = {
            id,
            name: project.name,
            path: project.path,
            framework: project.framework,
            language: project.language,
            template: project.template,
            features: project.features || [],
            createdAt: now,
            lastModified: now,
            size: 0,
            dependencies: []
        };
        this.history.projects.unshift(projectEntry);
        // Update statistics
        this.history.statistics.totalProjects++;
        this.updateFrameworkUsage(project.framework, project.language, project.template);
        await this.save();
        await this.saveFrameworksFile();
    }
    /**
     * Record a feature addition
     */
    async recordFeature(feature) {
        const id = this.generateId();
        const now = new Date().toISOString();
        const featureEntry = {
            id,
            name: feature.name,
            projectPath: feature.projectPath,
            projectName: feature.projectName,
            framework: feature.framework,
            provider: feature.provider,
            addedAt: now,
            success: feature.success !== false
        };
        this.history.features.unshift(featureEntry);
        // Update project to include the feature
        const project = this.history.projects.find(p => p.path === feature.projectPath);
        if (project && !project.features.includes(feature.name)) {
            project.features.push(feature.name);
            project.lastModified = now;
        }
        // Update statistics
        this.history.statistics.totalFeatures++;
        this.updateFeatureUsage(feature.name, feature.framework, feature.provider);
        await this.save();
        await this.saveFeaturesFile();
    }
    /**
     * Record a command execution
     */
    async recordCommand(command) {
        const id = this.generateId();
        const now = new Date().toISOString();
        const commandEntry = {
            id,
            command: command.command,
            args: command.args,
            executedAt: now,
            success: command.success,
            executionTime: command.executionTime,
            workingDirectory: process.cwd()
        };
        this.history.commands.unshift(commandEntry);
        // Keep only last 100 commands
        if (this.history.commands.length > 100) {
            this.history.commands = this.history.commands.slice(0, 100);
        }
        // Update statistics
        this.history.statistics.totalCommands++;
        this.history.statistics.totalUsageTime += command.executionTime;
        await this.save();
    }
    /**
     * Update framework usage statistics
     */
    updateFrameworkUsage(framework, language, template) {
        if (!this.history.statistics.frameworkUsage[framework]) {
            this.history.statistics.frameworkUsage[framework] = {
                count: 0,
                lastUsed: new Date().toISOString(),
                languages: {},
                templates: {}
            };
        }
        const fw = this.history.statistics.frameworkUsage[framework];
        fw.count++;
        fw.lastUsed = new Date().toISOString();
        if (!fw.languages[language]) {
            fw.languages[language] = 0;
        }
        fw.languages[language]++;
        if (template && !fw.templates[template]) {
            fw.templates[template] = 0;
        }
        if (template) {
            fw.templates[template]++;
        }
        // Update most used framework
        const frameworks = Object.entries(this.history.statistics.frameworkUsage);
        const mostUsed = frameworks.reduce((prev, curr) => prev[1].count > curr[1].count ? prev : curr);
        this.history.statistics.mostUsedFramework = mostUsed[0];
    }
    /**
     * Update feature usage statistics
     */
    updateFeatureUsage(feature, framework, provider) {
        if (!this.history.statistics.featureUsage[feature]) {
            this.history.statistics.featureUsage[feature] = {
                count: 0,
                lastUsed: new Date().toISOString(),
                frameworks: {},
                providers: {}
            };
        }
        const feat = this.history.statistics.featureUsage[feature];
        feat.count++;
        feat.lastUsed = new Date().toISOString();
        if (!feat.frameworks[framework]) {
            feat.frameworks[framework] = 0;
        }
        feat.frameworks[framework]++;
        if (provider) {
            if (!feat.providers[provider]) {
                feat.providers[provider] = 0;
            }
            feat.providers[provider]++;
        }
        // Update most used feature
        const features = Object.entries(this.history.statistics.featureUsage);
        if (features.length > 0) {
            const mostUsed = features.reduce((prev, curr) => prev[1].count > curr[1].count ? prev : curr);
            this.history.statistics.mostUsedFeature = mostUsed[0];
        }
    }
    /**
     * Save frameworks data to separate file
     */
    async saveFrameworksFile() {
        const frameworks = {
            lastUpdated: new Date().toISOString(),
            frameworks: this.history.statistics.frameworkUsage
        };
        await fs_extra__WEBPACK_IMPORTED_MODULE_0__.writeJson(this.frameworksFile, frameworks, { spaces: 2 });
    }
    /**
     * Save features data to separate file
     */
    async saveFeaturesFile() {
        const features = {
            lastUpdated: new Date().toISOString(),
            features: this.history.statistics.featureUsage
        };
        await fs_extra__WEBPACK_IMPORTED_MODULE_0__.writeJson(this.featuresFile, features, { spaces: 2 });
    }
    /**
     * Get recent projects
     */
    getRecentProjects(limit = 10) {
        return this.history.projects
            .sort((a, b) => new Date(b.lastModified).getTime() - new Date(a.lastModified).getTime())
            .slice(0, limit);
    }
    /**
     * Get recent features
     */
    getRecentFeatures(limit = 10) {
        return this.history.features
            .sort((a, b) => new Date(b.addedAt).getTime() - new Date(a.addedAt).getTime())
            .slice(0, limit);
    }
    /**
     * Get framework usage statistics
     */
    getFrameworkStats() {
        return Object.entries(this.history.statistics.frameworkUsage)
            .map(([framework, data]) => ({
            framework,
            count: data.count,
            languages: Object.keys(data.languages),
            lastUsed: data.lastUsed
        }))
            .sort((a, b) => b.count - a.count);
    }
    /**
     * Get feature usage statistics
     */
    getFeatureStats() {
        return Object.entries(this.history.statistics.featureUsage)
            .map(([feature, data]) => ({
            feature,
            count: data.count,
            frameworks: Object.keys(data.frameworks),
            lastUsed: data.lastUsed
        }))
            .sort((a, b) => b.count - a.count);
    }
    /**
     * Get command usage statistics
     */
    getCommandStats() {
        const commandCounts = {};
        this.history.commands.forEach(cmd => {
            if (!commandCounts[cmd.command]) {
                commandCounts[cmd.command] = { count: 0, lastUsed: cmd.executedAt };
            }
            commandCounts[cmd.command].count++;
            if (new Date(cmd.executedAt) > new Date(commandCounts[cmd.command].lastUsed)) {
                commandCounts[cmd.command].lastUsed = cmd.executedAt;
            }
        });
        return Object.entries(commandCounts)
            .map(([command, data]) => ({
            command,
            count: data.count,
            lastUsed: data.lastUsed
        }))
            .sort((a, b) => b.count - a.count);
    }
    /**
     * Get complete history
     */
    getHistory() {
        return this.history;
    }
    /**
     * Save history to file
     */
    async save() {
        this.history.lastUpdated = new Date().toISOString();
        await fs_extra__WEBPACK_IMPORTED_MODULE_0__.writeJson(this.historyFile, this.history, { spaces: 2 });
    }
    /**
     * Generate unique ID
     */
    generateId() {
        return crypto__WEBPACK_IMPORTED_MODULE_4__.randomBytes(8).toString('hex');
    }
    /**
     * Clear history (with backup)
     */
    async clearHistory() {
        // Create backup
        const backupFile = path__WEBPACK_IMPORTED_MODULE_1__.join(this.cliDir, `history-backup-${Date.now()}.json`);
        if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(this.historyFile)) {
            await fs_extra__WEBPACK_IMPORTED_MODULE_0__.copy(this.historyFile, backupFile);
        }
        // Reset history
        this.history = this.getDefaultHistory();
        await this.save();
        // Clear separate files
        await fs_extra__WEBPACK_IMPORTED_MODULE_0__.remove(this.frameworksFile);
        await fs_extra__WEBPACK_IMPORTED_MODULE_0__.remove(this.featuresFile);
        await this.initializeFrameworksFile();
        await this.initializeFeaturesFile();
    }
    /**
     * Export history data
     */
    async exportHistory(outputPath) {
        const exportData = {
            exportedAt: new Date().toISOString(),
            version: this.history.version,
            history: this.history,
            frameworks: await this.loadFrameworksFile(),
            features: await this.loadFeaturesFile()
        };
        await fs_extra__WEBPACK_IMPORTED_MODULE_0__.writeJson(outputPath, exportData, { spaces: 2 });
    }
    /**
     * Load frameworks data
     */
    async loadFrameworksFile() {
        try {
            if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(this.frameworksFile)) {
                return await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readJson(this.frameworksFile);
            }
        }
        catch (error) {
            console.warn('Could not load frameworks file');
        }
        return { frameworks: {} };
    }
    /**
     * Load features data
     */
    async loadFeaturesFile() {
        try {
            if (await fs_extra__WEBPACK_IMPORTED_MODULE_0__.pathExists(this.featuresFile)) {
                return await fs_extra__WEBPACK_IMPORTED_MODULE_0__.readJson(this.featuresFile);
            }
        }
        catch (error) {
            console.warn('Could not load features file');
        }
        return { features: {} };
    }
    /**
     * Add clone history entry
     */
    async addCloneHistory(entry) {
        try {
            await this.init();
            // Create unique ID for the clone entry
            const id = crypto__WEBPACK_IMPORTED_MODULE_4__.randomBytes(8).toString('hex');
            // Add to history with ID
            const historyEntry = {
                id,
                ...entry
            };
            this.history.cloneHistory = this.history.cloneHistory || [];
            this.history.cloneHistory.unshift(historyEntry);
            // Keep only last 50 clone entries
            if (this.history.cloneHistory.length > 50) {
                this.history.cloneHistory = this.history.cloneHistory.slice(0, 50);
            }
            // Update statistics
            if (entry.success) {
                this.history.statistics.totalProjects++;
            }
            // Save to file
            await this.save();
        }
        catch (error) {
            console.error(chalk__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay.red('Failed to add clone history:'), error.message);
        }
    }
    /**
     * Get clone history
     */
    async getCloneHistory() {
        try {
            await this.init();
            return this.history.cloneHistory || [];
        }
        catch (error) {
            console.error('Failed to get clone history');
            return [];
        }
    }
    /**
     * Get recent clone history (last 10)
     */
    async getRecentClones() {
        const history = await this.getCloneHistory();
        return history.slice(0, 10);
    }
}
// Export singleton instance
const historyManager = new HistoryManager();


/***/ }),

/***/ 4729:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ stripAnsi)
});

;// ./node_modules/.pnpm/ansi-regex@6.2.0/node_modules/ansi-regex/index.js
function ansiRegex({onlyFirst = false} = {}) {
	// Valid string terminator sequences are BEL, ESC\, and 0x9c
	const ST = '(?:\\u0007|\\u001B\\u005C|\\u009C)';

	// OSC sequences only: ESC ] ... ST (non-greedy until the first ST)
	const osc = `(?:\\u001B\\][\\s\\S]*?${ST})`;

	// CSI and related: ESC/C1, optional intermediates, optional params (supports ; and :) then final byte
	const csi = '[\\u001B\\u009B][[\\]()#;?]*(?:\\d{1,4}(?:[;:]\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]';

	const pattern = `${osc}|${csi}`;

	return new RegExp(pattern, onlyFirst ? undefined : 'g');
}

;// ./node_modules/.pnpm/strip-ansi@7.1.0/node_modules/strip-ansi/index.js


const regex = ansiRegex();

function stripAnsi(string) {
	if (typeof string !== 'string') {
		throw new TypeError(`Expected a \`string\`, got \`${typeof string}\``);
	}

	// Even though the regex is global, we don't need to reset the `.lastIndex`
	// because unlike `.exec()` and `.test()`, `.replace()` does it automatically
	// and doing it manually has a performance penalty.
	return string.replace(regex, '');
}


/***/ }),

/***/ 4731:
/***/ ((module) => {

/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var styles = {};
module['exports'] = styles;

var codes = {
  reset: [0, 0],

  bold: [1, 22],
  dim: [2, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  hidden: [8, 28],
  strikethrough: [9, 29],

  black: [30, 39],
  red: [31, 39],
  green: [32, 39],
  yellow: [33, 39],
  blue: [34, 39],
  magenta: [35, 39],
  cyan: [36, 39],
  white: [37, 39],
  gray: [90, 39],
  grey: [90, 39],

  brightRed: [91, 39],
  brightGreen: [92, 39],
  brightYellow: [93, 39],
  brightBlue: [94, 39],
  brightMagenta: [95, 39],
  brightCyan: [96, 39],
  brightWhite: [97, 39],

  bgBlack: [40, 49],
  bgRed: [41, 49],
  bgGreen: [42, 49],
  bgYellow: [43, 49],
  bgBlue: [44, 49],
  bgMagenta: [45, 49],
  bgCyan: [46, 49],
  bgWhite: [47, 49],
  bgGray: [100, 49],
  bgGrey: [100, 49],

  bgBrightRed: [101, 49],
  bgBrightGreen: [102, 49],
  bgBrightYellow: [103, 49],
  bgBrightBlue: [104, 49],
  bgBrightMagenta: [105, 49],
  bgBrightCyan: [106, 49],
  bgBrightWhite: [107, 49],

  // legacy styles for colors pre v1.0.0
  blackBG: [40, 49],
  redBG: [41, 49],
  greenBG: [42, 49],
  yellowBG: [43, 49],
  blueBG: [44, 49],
  magentaBG: [45, 49],
  cyanBG: [46, 49],
  whiteBG: [47, 49],

};

Object.keys(codes).forEach(function(key) {
  var val = codes[key];
  var style = styles[key] = [];
  style.open = '\u001b[' + val[0] + 'm';
  style.close = '\u001b[' + val[1] + 'm';
});


/***/ }),

/***/ 4732:
/***/ ((module) => {

/* eslint-disable yoda */


const isFullwidthCodePoint = codePoint => {
	if (Number.isNaN(codePoint)) {
		return false;
	}

	// Code points are derived from:
	// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt
	if (
		codePoint >= 0x1100 && (
			codePoint <= 0x115F || // Hangul Jamo
			codePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET
			codePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET
			// CJK Radicals Supplement .. Enclosed CJK Letters and Months
			(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||
			// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
			(0x3250 <= codePoint && codePoint <= 0x4DBF) ||
			// CJK Unified Ideographs .. Yi Radicals
			(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||
			// Hangul Jamo Extended-A
			(0xA960 <= codePoint && codePoint <= 0xA97C) ||
			// Hangul Syllables
			(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||
			// CJK Compatibility Ideographs
			(0xF900 <= codePoint && codePoint <= 0xFAFF) ||
			// Vertical Forms
			(0xFE10 <= codePoint && codePoint <= 0xFE19) ||
			// CJK Compatibility Forms .. Small Form Variants
			(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||
			// Halfwidth and Fullwidth Forms
			(0xFF01 <= codePoint && codePoint <= 0xFF60) ||
			(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||
			// Kana Supplement
			(0x1B000 <= codePoint && codePoint <= 0x1B001) ||
			// Enclosed Ideographic Supplement
			(0x1F200 <= codePoint && codePoint <= 0x1F251) ||
			// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
			(0x20000 <= codePoint && codePoint <= 0x3FFFD)
		)
	) {
		return true;
	}

	return false;
};

module.exports = isFullwidthCodePoint;
module.exports["default"] = isFullwidthCodePoint;


/***/ }),

/***/ 4761:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultIfEmpty = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function defaultIfEmpty(defaultValue) {
    return lift_1.operate(function (source, subscriber) {
        var hasValue = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            subscriber.next(value);
        }, function () {
            if (!hasValue) {
                subscriber.next(defaultValue);
            }
            subscriber.complete();
        }));
    });
}
exports.defaultIfEmpty = defaultIfEmpty;
//# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),

/***/ 4789:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.iterator = exports.getSymbolIterator = void 0;
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
exports.getSymbolIterator = getSymbolIterator;
exports.iterator = getSymbolIterator();
//# sourceMappingURL=iterator.js.map

/***/ }),

/***/ 4790:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * For Node.js, simply re-export the core `util.deprecate` function.
 */

module.exports = __webpack_require__(9023).deprecate;


/***/ }),

/***/ 4813:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const Range = __webpack_require__(9165)

// Mostly just for testing and legacy API reasons
const toComparators = (range, options) =>
  new Range(range, options).set
    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))

module.exports = toComparators


/***/ }),

/***/ 4816:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.zipAll = void 0;
var zip_1 = __webpack_require__(553);
var joinAllInternals_1 = __webpack_require__(8805);
function zipAll(project) {
    return joinAllInternals_1.joinAllInternals(zip_1.zip, project);
}
exports.zipAll = zipAll;
//# sourceMappingURL=zipAll.js.map

/***/ }),

/***/ 4867:
/***/ ((module) => {

module.exports = [
    [ 0x0300, 0x036F ], [ 0x0483, 0x0486 ], [ 0x0488, 0x0489 ],
    [ 0x0591, 0x05BD ], [ 0x05BF, 0x05BF ], [ 0x05C1, 0x05C2 ],
    [ 0x05C4, 0x05C5 ], [ 0x05C7, 0x05C7 ], [ 0x0600, 0x0603 ],
    [ 0x0610, 0x0615 ], [ 0x064B, 0x065E ], [ 0x0670, 0x0670 ],
    [ 0x06D6, 0x06E4 ], [ 0x06E7, 0x06E8 ], [ 0x06EA, 0x06ED ],
    [ 0x070F, 0x070F ], [ 0x0711, 0x0711 ], [ 0x0730, 0x074A ],
    [ 0x07A6, 0x07B0 ], [ 0x07EB, 0x07F3 ], [ 0x0901, 0x0902 ],
    [ 0x093C, 0x093C ], [ 0x0941, 0x0948 ], [ 0x094D, 0x094D ],
    [ 0x0951, 0x0954 ], [ 0x0962, 0x0963 ], [ 0x0981, 0x0981 ],
    [ 0x09BC, 0x09BC ], [ 0x09C1, 0x09C4 ], [ 0x09CD, 0x09CD ],
    [ 0x09E2, 0x09E3 ], [ 0x0A01, 0x0A02 ], [ 0x0A3C, 0x0A3C ],
    [ 0x0A41, 0x0A42 ], [ 0x0A47, 0x0A48 ], [ 0x0A4B, 0x0A4D ],
    [ 0x0A70, 0x0A71 ], [ 0x0A81, 0x0A82 ], [ 0x0ABC, 0x0ABC ],
    [ 0x0AC1, 0x0AC5 ], [ 0x0AC7, 0x0AC8 ], [ 0x0ACD, 0x0ACD ],
    [ 0x0AE2, 0x0AE3 ], [ 0x0B01, 0x0B01 ], [ 0x0B3C, 0x0B3C ],
    [ 0x0B3F, 0x0B3F ], [ 0x0B41, 0x0B43 ], [ 0x0B4D, 0x0B4D ],
    [ 0x0B56, 0x0B56 ], [ 0x0B82, 0x0B82 ], [ 0x0BC0, 0x0BC0 ],
    [ 0x0BCD, 0x0BCD ], [ 0x0C3E, 0x0C40 ], [ 0x0C46, 0x0C48 ],
    [ 0x0C4A, 0x0C4D ], [ 0x0C55, 0x0C56 ], [ 0x0CBC, 0x0CBC ],
    [ 0x0CBF, 0x0CBF ], [ 0x0CC6, 0x0CC6 ], [ 0x0CCC, 0x0CCD ],
    [ 0x0CE2, 0x0CE3 ], [ 0x0D41, 0x0D43 ], [ 0x0D4D, 0x0D4D ],
    [ 0x0DCA, 0x0DCA ], [ 0x0DD2, 0x0DD4 ], [ 0x0DD6, 0x0DD6 ],
    [ 0x0E31, 0x0E31 ], [ 0x0E34, 0x0E3A ], [ 0x0E47, 0x0E4E ],
    [ 0x0EB1, 0x0EB1 ], [ 0x0EB4, 0x0EB9 ], [ 0x0EBB, 0x0EBC ],
    [ 0x0EC8, 0x0ECD ], [ 0x0F18, 0x0F19 ], [ 0x0F35, 0x0F35 ],
    [ 0x0F37, 0x0F37 ], [ 0x0F39, 0x0F39 ], [ 0x0F71, 0x0F7E ],
    [ 0x0F80, 0x0F84 ], [ 0x0F86, 0x0F87 ], [ 0x0F90, 0x0F97 ],
    [ 0x0F99, 0x0FBC ], [ 0x0FC6, 0x0FC6 ], [ 0x102D, 0x1030 ],
    [ 0x1032, 0x1032 ], [ 0x1036, 0x1037 ], [ 0x1039, 0x1039 ],
    [ 0x1058, 0x1059 ], [ 0x1160, 0x11FF ], [ 0x135F, 0x135F ],
    [ 0x1712, 0x1714 ], [ 0x1732, 0x1734 ], [ 0x1752, 0x1753 ],
    [ 0x1772, 0x1773 ], [ 0x17B4, 0x17B5 ], [ 0x17B7, 0x17BD ],
    [ 0x17C6, 0x17C6 ], [ 0x17C9, 0x17D3 ], [ 0x17DD, 0x17DD ],
    [ 0x180B, 0x180D ], [ 0x18A9, 0x18A9 ], [ 0x1920, 0x1922 ],
    [ 0x1927, 0x1928 ], [ 0x1932, 0x1932 ], [ 0x1939, 0x193B ],
    [ 0x1A17, 0x1A18 ], [ 0x1B00, 0x1B03 ], [ 0x1B34, 0x1B34 ],
    [ 0x1B36, 0x1B3A ], [ 0x1B3C, 0x1B3C ], [ 0x1B42, 0x1B42 ],
    [ 0x1B6B, 0x1B73 ], [ 0x1DC0, 0x1DCA ], [ 0x1DFE, 0x1DFF ],
    [ 0x200B, 0x200F ], [ 0x202A, 0x202E ], [ 0x2060, 0x2063 ],
    [ 0x206A, 0x206F ], [ 0x20D0, 0x20EF ], [ 0x302A, 0x302F ],
    [ 0x3099, 0x309A ], [ 0xA806, 0xA806 ], [ 0xA80B, 0xA80B ],
    [ 0xA825, 0xA826 ], [ 0xFB1E, 0xFB1E ], [ 0xFE00, 0xFE0F ],
    [ 0xFE20, 0xFE23 ], [ 0xFEFF, 0xFEFF ], [ 0xFFF9, 0xFFFB ],
    [ 0x10A01, 0x10A03 ], [ 0x10A05, 0x10A06 ], [ 0x10A0C, 0x10A0F ],
    [ 0x10A38, 0x10A3A ], [ 0x10A3F, 0x10A3F ], [ 0x1D167, 0x1D169 ],
    [ 0x1D173, 0x1D182 ], [ 0x1D185, 0x1D18B ], [ 0x1D1AA, 0x1D1AD ],
    [ 0x1D242, 0x1D244 ], [ 0xE0001, 0xE0001 ], [ 0xE0020, 0xE007F ],
    [ 0xE0100, 0xE01EF ]
]


/***/ }),

/***/ 4877:
/***/ ((module) => {



module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ 4880:
/***/ ((module) => {

function QRBitBuffer() {
	this.buffer = [];
	this.length = 0;
}

QRBitBuffer.prototype = {

	get : function(index) {
		var bufIndex = Math.floor(index / 8);
		return ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;
	},
	
	put : function(num, length) {
		for (var i = 0; i < length; i++) {
			this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);
		}
	},
	
	getLengthInBits : function() {
		return this.length;
	},
	
	putBit : function(bit) {
	
		var bufIndex = Math.floor(this.length / 8);
		if (this.buffer.length <= bufIndex) {
			this.buffer.push(0);
		}
	
		if (bit) {
			this.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );
		}
	
		this.length++;
	}
};

module.exports = QRBitBuffer;


/***/ }),

/***/ 4884:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ERR_INVALID_ARG_TYPE = (__webpack_require__(3201)/* .codes */ .F).ERR_INVALID_ARG_TYPE;
function from(Readable, iterable, opts) {
  var iterator;
  if (iterable && typeof iterable.next === 'function') {
    iterator = iterable;
  } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);
  var readable = new Readable(_objectSpread({
    objectMode: true
  }, opts));
  // Reading boolean to protect against _read
  // being called before last iteration completion.
  var reading = false;
  readable._read = function () {
    if (!reading) {
      reading = true;
      next();
    }
  };
  function next() {
    return _next2.apply(this, arguments);
  }
  function _next2() {
    _next2 = _asyncToGenerator(function* () {
      try {
        var _yield$iterator$next = yield iterator.next(),
          value = _yield$iterator$next.value,
          done = _yield$iterator$next.done;
        if (done) {
          readable.push(null);
        } else if (readable.push(yield value)) {
          next();
        } else {
          reading = false;
        }
      } catch (err) {
        readable.destroy(err);
      }
    });
    return _next2.apply(this, arguments);
  }
  return readable;
}
module.exports = from;


/***/ }),

/***/ 4914:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;
var _require$codes = (__webpack_require__(3201)/* .codes */ .F),
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = __webpack_require__(5606);
__webpack_require__(7835)(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),

/***/ 4947:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.delayWhen = void 0;
var concat_1 = __webpack_require__(1780);
var take_1 = __webpack_require__(8693);
var ignoreElements_1 = __webpack_require__(7785);
var mapTo_1 = __webpack_require__(8499);
var mergeMap_1 = __webpack_require__(4344);
var innerFrom_1 = __webpack_require__(2018);
function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
        return function (source) {
            return concat_1.concat(subscriptionDelay.pipe(take_1.take(1), ignoreElements_1.ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));
        };
    }
    return mergeMap_1.mergeMap(function (value, index) { return innerFrom_1.innerFrom(delayDurationSelector(value, index)).pipe(take_1.take(1), mapTo_1.mapTo(value)); });
}
exports.delayWhen = delayWhen;
//# sourceMappingURL=delayWhen.js.map

/***/ }),

/***/ 5003:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scan = void 0;
var lift_1 = __webpack_require__(4698);
var scanInternals_1 = __webpack_require__(9597);
function scan(accumulator, seed) {
    return lift_1.operate(scanInternals_1.scanInternals(accumulator, seed, arguments.length >= 2, true));
}
exports.scan = scan;
//# sourceMappingURL=scan.js.map

/***/ }),

/***/ 5017:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const u = (__webpack_require__(8556).fromPromise)
const fs = __webpack_require__(6903)
const path = __webpack_require__(6928)
const mkdir = __webpack_require__(4544)
const remove = __webpack_require__(136)

const emptyDir = u(async function emptyDir (dir) {
  let items
  try {
    items = await fs.readdir(dir)
  } catch {
    return mkdir.mkdirs(dir)
  }

  return Promise.all(items.map(item => remove.remove(path.join(dir, item))))
})

function emptyDirSync (dir) {
  let items
  try {
    items = fs.readdirSync(dir)
  } catch {
    return mkdir.mkdirsSync(dir)
  }

  items.forEach(item => {
    item = path.join(dir, item)
    remove.removeSync(item)
  })
}

module.exports = {
  emptyDirSync,
  emptydirSync: emptyDirSync,
  emptyDir,
  emptydir: emptyDir
}


/***/ }),

/***/ 5031:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsyncScheduler = void 0;
var Scheduler_1 = __webpack_require__(3491);
var AsyncScheduler = (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler_1.Scheduler.now; }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this._active) {
            actions.push(action);
            return;
        }
        var error;
        this._active = true;
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions.shift()));
        this._active = false;
        if (error) {
            while ((action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
exports.AsyncScheduler = AsyncScheduler;
//# sourceMappingURL=AsyncScheduler.js.map

/***/ }),

/***/ 5041:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.animationFrames = void 0;
var Observable_1 = __webpack_require__(541);
var performanceTimestampProvider_1 = __webpack_require__(4529);
var animationFrameProvider_1 = __webpack_require__(5964);
function animationFrames(timestampProvider) {
    return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;
}
exports.animationFrames = animationFrames;
function animationFramesFactory(timestampProvider) {
    return new Observable_1.Observable(function (subscriber) {
        var provider = timestampProvider || performanceTimestampProvider_1.performanceTimestampProvider;
        var start = provider.now();
        var id = 0;
        var run = function () {
            if (!subscriber.closed) {
                id = animationFrameProvider_1.animationFrameProvider.requestAnimationFrame(function (timestamp) {
                    id = 0;
                    var now = provider.now();
                    subscriber.next({
                        timestamp: timestampProvider ? now : timestamp,
                        elapsed: now - start,
                    });
                    run();
                });
            }
        };
        run();
        return function () {
            if (id) {
                animationFrameProvider_1.animationFrameProvider.cancelAnimationFrame(id);
            }
        };
    });
}
var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();
//# sourceMappingURL=animationFrames.js.map

/***/ }),

/***/ 5055:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.zip = void 0;
var zip_1 = __webpack_require__(553);
var lift_1 = __webpack_require__(4698);
function zip() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    return lift_1.operate(function (source, subscriber) {
        zip_1.zip.apply(void 0, __spreadArray([source], __read(sources))).subscribe(subscriber);
    });
}
exports.zip = zip;
//# sourceMappingURL=zip.js.map

/***/ }),

/***/ 5058:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const { humanReadableArgName } = __webpack_require__(3786);

/**
 * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`
 * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types
 * @typedef { import("./argument.js").Argument } Argument
 * @typedef { import("./command.js").Command } Command
 * @typedef { import("./option.js").Option } Option
 */

// Although this is a class, methods are static in style to allow override using subclass or just functions.
class Help {
  constructor() {
    this.helpWidth = undefined;
    this.sortSubcommands = false;
    this.sortOptions = false;
    this.showGlobalOptions = false;
  }

  /**
   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.
   *
   * @param {Command} cmd
   * @returns {Command[]}
   */

  visibleCommands(cmd) {
    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);
    if (cmd._hasImplicitHelpCommand()) {
      // Create a command matching the implicit help command.
      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);
      const helpCommand = cmd.createCommand(helpName)
        .helpOption(false);
      helpCommand.description(cmd._helpCommandDescription);
      if (helpArgs) helpCommand.arguments(helpArgs);
      visibleCommands.push(helpCommand);
    }
    if (this.sortSubcommands) {
      visibleCommands.sort((a, b) => {
        // @ts-ignore: overloaded return type
        return a.name().localeCompare(b.name());
      });
    }
    return visibleCommands;
  }

  /**
   * Compare options for sort.
   *
   * @param {Option} a
   * @param {Option} b
   * @returns number
   */
  compareOptions(a, b) {
    const getSortKey = (option) => {
      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.
      return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');
    };
    return getSortKey(a).localeCompare(getSortKey(b));
  }

  /**
   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.
   *
   * @param {Command} cmd
   * @returns {Option[]}
   */

  visibleOptions(cmd) {
    const visibleOptions = cmd.options.filter((option) => !option.hidden);
    // Implicit help
    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);
    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);
    if (showShortHelpFlag || showLongHelpFlag) {
      let helpOption;
      if (!showShortHelpFlag) {
        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);
      } else if (!showLongHelpFlag) {
        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);
      } else {
        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);
      }
      visibleOptions.push(helpOption);
    }
    if (this.sortOptions) {
      visibleOptions.sort(this.compareOptions);
    }
    return visibleOptions;
  }

  /**
   * Get an array of the visible global options. (Not including help.)
   *
   * @param {Command} cmd
   * @returns {Option[]}
   */

  visibleGlobalOptions(cmd) {
    if (!this.showGlobalOptions) return [];

    const globalOptions = [];
    for (let ancestorCmd = cmd.parent; ancestorCmd; ancestorCmd = ancestorCmd.parent) {
      const visibleOptions = ancestorCmd.options.filter((option) => !option.hidden);
      globalOptions.push(...visibleOptions);
    }
    if (this.sortOptions) {
      globalOptions.sort(this.compareOptions);
    }
    return globalOptions;
  }

  /**
   * Get an array of the arguments if any have a description.
   *
   * @param {Command} cmd
   * @returns {Argument[]}
   */

  visibleArguments(cmd) {
    // Side effect! Apply the legacy descriptions before the arguments are displayed.
    if (cmd._argsDescription) {
      cmd.registeredArguments.forEach(argument => {
        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';
      });
    }

    // If there are any arguments with a description then return all the arguments.
    if (cmd.registeredArguments.find(argument => argument.description)) {
      return cmd.registeredArguments;
    }
    return [];
  }

  /**
   * Get the command term to show in the list of subcommands.
   *
   * @param {Command} cmd
   * @returns {string}
   */

  subcommandTerm(cmd) {
    // Legacy. Ignores custom usage string, and nested commands.
    const args = cmd.registeredArguments.map(arg => humanReadableArgName(arg)).join(' ');
    return cmd._name +
      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +
      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option
      (args ? ' ' + args : '');
  }

  /**
   * Get the option term to show in the list of options.
   *
   * @param {Option} option
   * @returns {string}
   */

  optionTerm(option) {
    return option.flags;
  }

  /**
   * Get the argument term to show in the list of arguments.
   *
   * @param {Argument} argument
   * @returns {string}
   */

  argumentTerm(argument) {
    return argument.name();
  }

  /**
   * Get the longest command term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  longestSubcommandTermLength(cmd, helper) {
    return helper.visibleCommands(cmd).reduce((max, command) => {
      return Math.max(max, helper.subcommandTerm(command).length);
    }, 0);
  }

  /**
   * Get the longest option term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  longestOptionTermLength(cmd, helper) {
    return helper.visibleOptions(cmd).reduce((max, option) => {
      return Math.max(max, helper.optionTerm(option).length);
    }, 0);
  }

  /**
   * Get the longest global option term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  longestGlobalOptionTermLength(cmd, helper) {
    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {
      return Math.max(max, helper.optionTerm(option).length);
    }, 0);
  }

  /**
   * Get the longest argument term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  longestArgumentTermLength(cmd, helper) {
    return helper.visibleArguments(cmd).reduce((max, argument) => {
      return Math.max(max, helper.argumentTerm(argument).length);
    }, 0);
  }

  /**
   * Get the command usage to be displayed at the top of the built-in help.
   *
   * @param {Command} cmd
   * @returns {string}
   */

  commandUsage(cmd) {
    // Usage
    let cmdName = cmd._name;
    if (cmd._aliases[0]) {
      cmdName = cmdName + '|' + cmd._aliases[0];
    }
    let ancestorCmdNames = '';
    for (let ancestorCmd = cmd.parent; ancestorCmd; ancestorCmd = ancestorCmd.parent) {
      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;
    }
    return ancestorCmdNames + cmdName + ' ' + cmd.usage();
  }

  /**
   * Get the description for the command.
   *
   * @param {Command} cmd
   * @returns {string}
   */

  commandDescription(cmd) {
    // @ts-ignore: overloaded return type
    return cmd.description();
  }

  /**
   * Get the subcommand summary to show in the list of subcommands.
   * (Fallback to description for backwards compatibility.)
   *
   * @param {Command} cmd
   * @returns {string}
   */

  subcommandDescription(cmd) {
    // @ts-ignore: overloaded return type
    return cmd.summary() || cmd.description();
  }

  /**
   * Get the option description to show in the list of options.
   *
   * @param {Option} option
   * @return {string}
   */

  optionDescription(option) {
    const extraInfo = [];

    if (option.argChoices) {
      extraInfo.push(
        // use stringify to match the display of the default value
        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);
    }
    if (option.defaultValue !== undefined) {
      // default for boolean and negated more for programmer than end user,
      // but show true/false for boolean option as may be for hand-rolled env or config processing.
      const showDefault = option.required || option.optional ||
        (option.isBoolean() && typeof option.defaultValue === 'boolean');
      if (showDefault) {
        extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);
      }
    }
    // preset for boolean and negated are more for programmer than end user
    if (option.presetArg !== undefined && option.optional) {
      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);
    }
    if (option.envVar !== undefined) {
      extraInfo.push(`env: ${option.envVar}`);
    }
    if (extraInfo.length > 0) {
      return `${option.description} (${extraInfo.join(', ')})`;
    }

    return option.description;
  }

  /**
   * Get the argument description to show in the list of arguments.
   *
   * @param {Argument} argument
   * @return {string}
   */

  argumentDescription(argument) {
    const extraInfo = [];
    if (argument.argChoices) {
      extraInfo.push(
        // use stringify to match the display of the default value
        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);
    }
    if (argument.defaultValue !== undefined) {
      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);
    }
    if (extraInfo.length > 0) {
      const extraDescripton = `(${extraInfo.join(', ')})`;
      if (argument.description) {
        return `${argument.description} ${extraDescripton}`;
      }
      return extraDescripton;
    }
    return argument.description;
  }

  /**
   * Generate the built-in help text.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {string}
   */

  formatHelp(cmd, helper) {
    const termWidth = helper.padWidth(cmd, helper);
    const helpWidth = helper.helpWidth || 80;
    const itemIndentWidth = 2;
    const itemSeparatorWidth = 2; // between term and description
    function formatItem(term, description) {
      if (description) {
        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;
        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);
      }
      return term;
    }
    function formatList(textArray) {
      return textArray.join('\n').replace(/^/gm, ' '.repeat(itemIndentWidth));
    }

    // Usage
    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];

    // Description
    const commandDescription = helper.commandDescription(cmd);
    if (commandDescription.length > 0) {
      output = output.concat([helper.wrap(commandDescription, helpWidth, 0), '']);
    }

    // Arguments
    const argumentList = helper.visibleArguments(cmd).map((argument) => {
      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));
    });
    if (argumentList.length > 0) {
      output = output.concat(['Arguments:', formatList(argumentList), '']);
    }

    // Options
    const optionList = helper.visibleOptions(cmd).map((option) => {
      return formatItem(helper.optionTerm(option), helper.optionDescription(option));
    });
    if (optionList.length > 0) {
      output = output.concat(['Options:', formatList(optionList), '']);
    }

    if (this.showGlobalOptions) {
      const globalOptionList = helper.visibleGlobalOptions(cmd).map((option) => {
        return formatItem(helper.optionTerm(option), helper.optionDescription(option));
      });
      if (globalOptionList.length > 0) {
        output = output.concat(['Global Options:', formatList(globalOptionList), '']);
      }
    }

    // Commands
    const commandList = helper.visibleCommands(cmd).map((cmd) => {
      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));
    });
    if (commandList.length > 0) {
      output = output.concat(['Commands:', formatList(commandList), '']);
    }

    return output.join('\n');
  }

  /**
   * Calculate the pad width from the maximum term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  padWidth(cmd, helper) {
    return Math.max(
      helper.longestOptionTermLength(cmd, helper),
      helper.longestGlobalOptionTermLength(cmd, helper),
      helper.longestSubcommandTermLength(cmd, helper),
      helper.longestArgumentTermLength(cmd, helper)
    );
  }

  /**
   * Wrap the given string to width characters per line, with lines after the first indented.
   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.
   *
   * @param {string} str
   * @param {number} width
   * @param {number} indent
   * @param {number} [minColumnWidth=40]
   * @return {string}
   *
   */

  wrap(str, width, indent, minColumnWidth = 40) {
    // Full \s characters, minus the linefeeds.
    const indents = ' \\f\\t\\v\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff';
    // Detect manually wrapped and indented strings by searching for line break followed by spaces.
    const manualIndent = new RegExp(`[\\n][${indents}]+`);
    if (str.match(manualIndent)) return str;
    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).
    const columnWidth = width - indent;
    if (columnWidth < minColumnWidth) return str;

    const leadingStr = str.slice(0, indent);
    const columnText = str.slice(indent).replace('\r\n', '\n');
    const indentString = ' '.repeat(indent);
    const zeroWidthSpace = '\u200B';
    const breaks = `\\s${zeroWidthSpace}`;
    // Match line end (so empty lines don't collapse),
    // or as much text as will fit in column, or excess text up to first break.
    const regex = new RegExp(`\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`, 'g');
    const lines = columnText.match(regex) || [];
    return leadingStr + lines.map((line, i) => {
      if (line === '\n') return ''; // preserve empty lines
      return ((i > 0) ? indentString : '') + line.trimEnd();
    }).join('\n');
  }
}

exports.Help = Help;


/***/ }),

/***/ 5078:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const parse = __webpack_require__(9002)

const diff = (version1, version2) => {
  const v1 = parse(version1, null, true)
  const v2 = parse(version2, null, true)
  const comparison = v1.compare(v2)

  if (comparison === 0) {
    return null
  }

  const v1Higher = comparison > 0
  const highVersion = v1Higher ? v1 : v2
  const lowVersion = v1Higher ? v2 : v1
  const highHasPre = !!highVersion.prerelease.length
  const lowHasPre = !!lowVersion.prerelease.length

  if (lowHasPre && !highHasPre) {
    // Going from prerelease -> no prerelease requires some special casing

    // If the low version has only a major, then it will always be a major
    // Some examples:
    // 1.0.0-1 -> 1.0.0
    // 1.0.0-1 -> 1.1.1
    // 1.0.0-1 -> 2.0.0
    if (!lowVersion.patch && !lowVersion.minor) {
      return 'major'
    }

    // If the main part has no difference
    if (lowVersion.compareMain(highVersion) === 0) {
      if (lowVersion.minor && !lowVersion.patch) {
        return 'minor'
      }
      return 'patch'
    }
  }

  // add the `pre` prefix if we are going to a prerelease version
  const prefix = highHasPre ? 'pre' : ''

  if (v1.major !== v2.major) {
    return prefix + 'major'
  }

  if (v1.minor !== v2.minor) {
    return prefix + 'minor'
  }

  if (v1.patch !== v2.patch) {
    return prefix + 'patch'
  }

  // high and low are preleases
  return 'prerelease'
}

module.exports = diff


/***/ }),

/***/ 5093:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.endWith = void 0;
var concat_1 = __webpack_require__(1780);
var of_1 = __webpack_require__(8181);
function endWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return function (source) { return concat_1.concat(source, of_1.of.apply(void 0, __spreadArray([], __read(values)))); };
}
exports.endWith = endWith;
//# sourceMappingURL=endWith.js.map

/***/ }),

/***/ 5094:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",127],["a140","　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],["a1a1","﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",4,"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],["a240","＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",7,"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],["a2a1","╮╰╯═╞╪╡◢◣◥◤╱╲╳０",9,"Ⅰ",9,"〡",8,"十卄卅Ａ",25,"ａ",21],["a340","ｗｘｙｚΑ",16,"Σ",6,"α",16,"σ",6,"ㄅ",10],["a3a1","ㄐ",25,"˙ˉˊˇˋ"],["a3e1","€"],["a440","一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],["a4a1","丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],["a540","世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],["a5a1","央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],["a640","共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],["a6a1","式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],["a740","作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],["a7a1","均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],["a840","杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],["a8a1","芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],["a940","咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],["a9a1","屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],["aa40","昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],["aaa1","炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],["ab40","陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],["aba1","哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],["ac40","拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],["aca1","活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],["ad40","耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],["ada1","迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],["ae40","哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],["aea1","恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],["af40","浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],["afa1","砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],["b040","虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],["b0a1","陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],["b140","娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],["b1a1","情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],["b240","毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],["b2a1","瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],["b340","莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],["b3a1","部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],["b440","婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],["b4a1","插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],["b540","溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],["b5a1","窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],["b640","詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],["b6a1","間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],["b740","媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],["b7a1","楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],["b840","睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],["b8a1","腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],["b940","辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],["b9a1","飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],["ba40","愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],["baa1","滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],["bb40","罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],["bba1","說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],["bc40","劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],["bca1","慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],["bd40","瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],["bda1","翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],["be40","輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],["bea1","鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],["bf40","濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],["bfa1","縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],["c040","錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],["c0a1","嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],["c140","瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],["c1a1","薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],["c240","駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],["c2a1","癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],["c340","鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],["c3a1","獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],["c440","願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],["c4a1","纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],["c540","護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],["c5a1","禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],["c640","讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],["c940","乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],["c9a1","氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],["ca40","汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],["caa1","吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],["cb40","杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],["cba1","芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],["cc40","坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],["cca1","怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],["cd40","泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],["cda1","矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],["ce40","哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],["cea1","峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],["cf40","柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],["cfa1","洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],["d040","穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],["d0a1","苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],["d140","唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],["d1a1","恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],["d240","毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],["d2a1","牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],["d340","笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],["d3a1","荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],["d440","酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],["d4a1","唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],["d540","崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],["d5a1","捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],["d640","淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],["d6a1","痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],["d740","耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],["d7a1","蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],["d840","釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],["d8a1","堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],["d940","惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],["d9a1","晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],["da40","湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],["daa1","琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],["db40","罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],["dba1","菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],["dc40","軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],["dca1","隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],["dd40","媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],["dda1","搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],["de40","毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],["dea1","煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],["df40","稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],["dfa1","腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],["e040","觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],["e0a1","遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],["e140","凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],["e1a1","寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],["e240","榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],["e2a1","漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],["e340","禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],["e3a1","耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],["e440","裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],["e4a1","銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],["e540","噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],["e5a1","憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],["e640","澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],["e6a1","獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],["e740","膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],["e7a1","蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],["e840","踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],["e8a1","銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],["e940","噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],["e9a1","憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],["ea40","澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],["eaa1","瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],["eb40","蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],["eba1","諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],["ec40","錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],["eca1","魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],["ed40","檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],["eda1","瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],["ee40","蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],["eea1","謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],["ef40","鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],["efa1","鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],["f040","璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],["f0a1","臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],["f140","蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],["f1a1","鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],["f240","徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],["f2a1","礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],["f340","譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],["f3a1","鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],["f440","嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],["f4a1","禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],["f540","鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],["f5a1","鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],["f640","蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],["f6a1","騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],["f740","糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],["f7a1","驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],["f840","讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],["f8a1","齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],["f940","纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],["f9a1","龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]]');

/***/ }),

/***/ 5145:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.debounce = void 0;
var lift_1 = __webpack_require__(4698);
var noop_1 = __webpack_require__(8563);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
function debounce(durationSelector) {
    return lift_1.operate(function (source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        var durationSubscriber = null;
        var emit = function () {
            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
            durationSubscriber = null;
            if (hasValue) {
                hasValue = false;
                var value = lastValue;
                lastValue = null;
                subscriber.next(value);
            }
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
            hasValue = true;
            lastValue = value;
            durationSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, emit, noop_1.noop);
            innerFrom_1.innerFrom(durationSelector(value)).subscribe(durationSubscriber);
        }, function () {
            emit();
            subscriber.complete();
        }, undefined, function () {
            lastValue = durationSubscriber = null;
        }));
    });
}
exports.debounce = debounce;
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ 5153:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VirtualAction = exports.VirtualTimeScheduler = void 0;
var AsyncAction_1 = __webpack_require__(5970);
var Subscription_1 = __webpack_require__(1981);
var AsyncScheduler_1 = __webpack_require__(5031);
var VirtualTimeScheduler = (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
        if (schedulerActionCtor === void 0) { schedulerActionCtor = VirtualAction; }
        if (maxFrames === void 0) { maxFrames = Infinity; }
        var _this = _super.call(this, schedulerActionCtor, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error;
        var action;
        while ((action = actions[0]) && action.delay <= maxFrames) {
            actions.shift();
            this.frame = action.delay;
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        }
        if (error) {
            while ((action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.VirtualTimeScheduler = VirtualTimeScheduler;
var VirtualAction = (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) { index = (scheduler.index += 1); }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (Number.isFinite(delay)) {
            if (!this.id) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.active = false;
            var action = new VirtualAction(this.scheduler, this.work);
            this.add(action);
            return action.schedule(state, delay);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return 1;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction_1.AsyncAction));
exports.VirtualAction = VirtualAction;
//# sourceMappingURL=VirtualTimeScheduler.js.map

/***/ }),

/***/ 5215:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.onErrorResumeNext = exports.onErrorResumeNextWith = void 0;
var argsOrArgArray_1 = __webpack_require__(7882);
var onErrorResumeNext_1 = __webpack_require__(5657);
function onErrorResumeNextWith() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var nextSources = argsOrArgArray_1.argsOrArgArray(sources);
    return function (source) { return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, __spreadArray([source], __read(nextSources))); };
}
exports.onErrorResumeNextWith = onErrorResumeNextWith;
exports.onErrorResumeNext = onErrorResumeNextWith;
//# sourceMappingURL=onErrorResumeNextWith.js.map

/***/ }),

/***/ 5220:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const path = __webpack_require__(6928)
const fs = __webpack_require__(6903)
const { pathExists } = __webpack_require__(802)

const u = (__webpack_require__(8556).fromPromise)

/**
 * Function that returns two types of paths, one relative to symlink, and one
 * relative to the current working directory. Checks if path is absolute or
 * relative. If the path is relative, this function checks if the path is
 * relative to symlink or relative to current working directory. This is an
 * initiative to find a smarter `srcpath` to supply when building symlinks.
 * This allows you to determine which path to use out of one of three possible
 * types of source paths. The first is an absolute path. This is detected by
 * `path.isAbsolute()`. When an absolute path is provided, it is checked to
 * see if it exists. If it does it's used, if not an error is returned
 * (callback)/ thrown (sync). The other two options for `srcpath` are a
 * relative url. By default Node's `fs.symlink` works by creating a symlink
 * using `dstpath` and expects the `srcpath` to be relative to the newly
 * created symlink. If you provide a `srcpath` that does not exist on the file
 * system it results in a broken symlink. To minimize this, the function
 * checks to see if the 'relative to symlink' source file exists, and if it
 * does it will use it. If it does not, it checks if there's a file that
 * exists that is relative to the current working directory, if does its used.
 * This preserves the expectations of the original fs.symlink spec and adds
 * the ability to pass in `relative to current working direcotry` paths.
 */

async function symlinkPaths (srcpath, dstpath) {
  if (path.isAbsolute(srcpath)) {
    try {
      await fs.lstat(srcpath)
    } catch (err) {
      err.message = err.message.replace('lstat', 'ensureSymlink')
      throw err
    }

    return {
      toCwd: srcpath,
      toDst: srcpath
    }
  }

  const dstdir = path.dirname(dstpath)
  const relativeToDst = path.join(dstdir, srcpath)

  const exists = await pathExists(relativeToDst)
  if (exists) {
    return {
      toCwd: relativeToDst,
      toDst: srcpath
    }
  }

  try {
    await fs.lstat(srcpath)
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureSymlink')
    throw err
  }

  return {
    toCwd: srcpath,
    toDst: path.relative(dstdir, srcpath)
  }
}

function symlinkPathsSync (srcpath, dstpath) {
  if (path.isAbsolute(srcpath)) {
    const exists = fs.existsSync(srcpath)
    if (!exists) throw new Error('absolute srcpath does not exist')
    return {
      toCwd: srcpath,
      toDst: srcpath
    }
  }

  const dstdir = path.dirname(dstpath)
  const relativeToDst = path.join(dstdir, srcpath)
  const exists = fs.existsSync(relativeToDst)
  if (exists) {
    return {
      toCwd: relativeToDst,
      toDst: srcpath
    }
  }

  const srcExists = fs.existsSync(srcpath)
  if (!srcExists) throw new Error('relative srcpath does not exist')
  return {
    toCwd: srcpath,
    toDst: path.relative(dstdir, srcpath)
  }
}

module.exports = {
  symlinkPaths: u(symlinkPaths),
  symlinkPathsSync
}


/***/ }),

/***/ 5237:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.animationFrame = exports.animationFrameScheduler = void 0;
var AnimationFrameAction_1 = __webpack_require__(7703);
var AnimationFrameScheduler_1 = __webpack_require__(6716);
exports.animationFrameScheduler = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
exports.animationFrame = exports.animationFrameScheduler;
//# sourceMappingURL=animationFrame.js.map

/***/ }),

/***/ 5300:
/***/ ((module) => {



class LRUCache {
  constructor () {
    this.max = 1000
    this.map = new Map()
  }

  get (key) {
    const value = this.map.get(key)
    if (value === undefined) {
      return undefined
    } else {
      // Remove the key from the map and add it to the end
      this.map.delete(key)
      this.map.set(key, value)
      return value
    }
  }

  delete (key) {
    return this.map.delete(key)
  }

  set (key, value) {
    const deleted = this.delete(key)

    if (!deleted && value !== undefined) {
      // If cache is full, delete the least recently used item
      if (this.map.size >= this.max) {
        const firstKey = this.map.keys().next().value
        this.delete(firstKey)
      }

      this.map.set(key, value)
    }

    return this
  }
}

module.exports = LRUCache


/***/ }),

/***/ 5317:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("child_process");

/***/ }),

/***/ 5355:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.lastValueFrom = void 0;
var EmptyError_1 = __webpack_require__(9866);
function lastValueFrom(source, config) {
    var hasConfig = typeof config === 'object';
    return new Promise(function (resolve, reject) {
        var _hasValue = false;
        var _value;
        source.subscribe({
            next: function (value) {
                _value = value;
                _hasValue = true;
            },
            error: reject,
            complete: function () {
                if (_hasValue) {
                    resolve(_value);
                }
                else if (hasConfig) {
                    resolve(config.defaultValue);
                }
                else {
                    reject(new EmptyError_1.EmptyError());
                }
            },
        });
    });
}
exports.lastValueFrom = lastValueFrom;
//# sourceMappingURL=lastValueFrom.js.map

/***/ }),

/***/ 5367:
/***/ ((__unused_webpack_module, exports) => {

/**
 * CommanderError class
 * @class
 */
class CommanderError extends Error {
  /**
   * Constructs the CommanderError class
   * @param {number} exitCode suggested exit code which could be used with process.exit
   * @param {string} code an id string representing the error
   * @param {string} message human-readable description of the error
   * @constructor
   */
  constructor(exitCode, code, message) {
    super(message);
    // properly capture stack trace in Node.js
    Error.captureStackTrace(this, this.constructor);
    this.name = this.constructor.name;
    this.code = code;
    this.exitCode = exitCode;
    this.nestedError = undefined;
  }
}

/**
 * InvalidArgumentError class
 * @class
 */
class InvalidArgumentError extends CommanderError {
  /**
   * Constructs the InvalidArgumentError class
   * @param {string} [message] explanation of why argument is invalid
   * @constructor
   */
  constructor(message) {
    super(1, 'commander.invalidArgument', message);
    // properly capture stack trace in Node.js
    Error.captureStackTrace(this, this.constructor);
    this.name = this.constructor.name;
  }
}

exports.CommanderError = CommanderError;
exports.InvalidArgumentError = InvalidArgumentError;


/***/ }),

/***/ 5386:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const cliBoxes = __webpack_require__(7928);

module.exports = cliBoxes;
// TODO: Remove this for the next major release
module.exports["default"] = cliBoxes;


/***/ }),

/***/ 5421:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const fs = __webpack_require__(6903)
const u = (__webpack_require__(8556).fromPromise)

async function utimesMillis (path, atime, mtime) {
  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
  const fd = await fs.open(path, 'r+')

  let closeErr = null

  try {
    await fs.futimes(fd, atime, mtime)
  } finally {
    try {
      await fs.close(fd)
    } catch (e) {
      closeErr = e
    }
  }

  if (closeErr) {
    throw closeErr
  }
}

function utimesMillisSync (path, atime, mtime) {
  const fd = fs.openSync(path, 'r+')
  fs.futimesSync(fd, atime, mtime)
  return fs.closeSync(fd)
}

module.exports = {
  utimesMillis: u(utimesMillis),
  utimesMillisSync
}


/***/ }),

/***/ 5436:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindNodeCallback = void 0;
var bindCallbackInternals_1 = __webpack_require__(1864);
function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    return bindCallbackInternals_1.bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);
}
exports.bindNodeCallback = bindNodeCallback;
//# sourceMappingURL=bindNodeCallback.js.map

/***/ }),

/***/ 5449:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Ay: () => (/* binding */ ora)
});

// UNUSED EXPORTS: oraPromise, spinners

// EXTERNAL MODULE: external "node:process"
var external_node_process_ = __webpack_require__(1708);
// EXTERNAL MODULE: ./node_modules/.pnpm/chalk@5.6.0/node_modules/chalk/source/index.js + 4 modules
var source = __webpack_require__(3757);
;// ./node_modules/.pnpm/mimic-function@5.0.1/node_modules/mimic-function/index.js
const copyProperty = (to, from, property, ignoreNonConfigurable) => {
	// `Function#length` should reflect the parameters of `to` not `from` since we keep its body.
	// `Function#prototype` is non-writable and non-configurable so can never be modified.
	if (property === 'length' || property === 'prototype') {
		return;
	}

	// `Function#arguments` and `Function#caller` should not be copied. They were reported to be present in `Reflect.ownKeys` for some devices in React Native (#41), so we explicitly ignore them here.
	if (property === 'arguments' || property === 'caller') {
		return;
	}

	const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
	const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);

	if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {
		return;
	}

	Object.defineProperty(to, property, fromDescriptor);
};

// `Object.defineProperty()` throws if the property exists, is not configurable and either:
// - one its descriptors is changed
// - it is non-writable and its value is changed
const canCopyProperty = function (toDescriptor, fromDescriptor) {
	return toDescriptor === undefined || toDescriptor.configurable || (
		toDescriptor.writable === fromDescriptor.writable
		&& toDescriptor.enumerable === fromDescriptor.enumerable
		&& toDescriptor.configurable === fromDescriptor.configurable
		&& (toDescriptor.writable || toDescriptor.value === fromDescriptor.value)
	);
};

const changePrototype = (to, from) => {
	const fromPrototype = Object.getPrototypeOf(from);
	if (fromPrototype === Object.getPrototypeOf(to)) {
		return;
	}

	Object.setPrototypeOf(to, fromPrototype);
};

const wrappedToString = (withName, fromBody) => `/* Wrapped ${withName}*/\n${fromBody}`;

const toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, 'toString');
const toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, 'name');

// We call `from.toString()` early (not lazily) to ensure `from` can be garbage collected.
// We use `bind()` instead of a closure for the same reason.
// Calling `from.toString()` early also allows caching it in case `to.toString()` is called several times.
const changeToString = (to, from, name) => {
	const withName = name === '' ? '' : `with ${name.trim()}() `;
	const newToString = wrappedToString.bind(null, withName, from.toString());
	// Ensure `to.toString.toString` is non-enumerable and has the same `same`
	Object.defineProperty(newToString, 'name', toStringName);
	const {writable, enumerable, configurable} = toStringDescriptor; // We destructue to avoid a potential `get` descriptor.
	Object.defineProperty(to, 'toString', {value: newToString, writable, enumerable, configurable});
};

function mimicFunction(to, from, {ignoreNonConfigurable = false} = {}) {
	const {name} = to;

	for (const property of Reflect.ownKeys(from)) {
		copyProperty(to, from, property, ignoreNonConfigurable);
	}

	changePrototype(to, from);
	changeToString(to, from, name);

	return to;
}

;// ./node_modules/.pnpm/onetime@7.0.0/node_modules/onetime/index.js


const calledFunctions = new WeakMap();

const onetime = (function_, options = {}) => {
	if (typeof function_ !== 'function') {
		throw new TypeError('Expected a function');
	}

	let returnValue;
	let callCount = 0;
	const functionName = function_.displayName || function_.name || '<anonymous>';

	const onetime = function (...arguments_) {
		calledFunctions.set(onetime, ++callCount);

		if (callCount === 1) {
			returnValue = function_.apply(this, arguments_);
			function_ = undefined;
		} else if (options.throw === true) {
			throw new Error(`Function \`${functionName}\` can only be called once`);
		}

		return returnValue;
	};

	mimicFunction(onetime, function_);
	calledFunctions.set(onetime, callCount);

	return onetime;
};

onetime.callCount = function_ => {
	if (!calledFunctions.has(function_)) {
		throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
	}

	return calledFunctions.get(function_);
};

/* harmony default export */ const node_modules_onetime = (onetime);

;// ./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/signals.js
/**
 * This is not the set of all possible signals.
 *
 * It IS, however, the set of all signals that trigger
 * an exit on either Linux or BSD systems.  Linux is a
 * superset of the signal names supported on BSD, and
 * the unknown signals just fail to register, so we can
 * catch that easily enough.
 *
 * Windows signals are a different set, since there are
 * signals that terminate Windows processes, but don't
 * terminate (or don't even exist) on Posix systems.
 *
 * Don't bother with SIGKILL.  It's uncatchable, which
 * means that we can't fire any callbacks anyway.
 *
 * If a user does happen to register a handler on a non-
 * fatal signal like SIGWINCH or something, and then
 * exit, it'll end up firing `process.emit('exit')`, so
 * the handler will be fired anyway.
 *
 * SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
 * artificially, inherently leave the process in a
 * state from which it is not safe to try and enter JS
 * listeners.
 */
const signals = [];
signals.push('SIGHUP', 'SIGINT', 'SIGTERM');
if (process.platform !== 'win32') {
    signals.push('SIGALRM', 'SIGABRT', 'SIGVTALRM', 'SIGXCPU', 'SIGXFSZ', 'SIGUSR2', 'SIGTRAP', 'SIGSYS', 'SIGQUIT', 'SIGIOT'
    // should detect profiler and enable/disable accordingly.
    // see #21
    // 'SIGPROF'
    );
}
if (process.platform === 'linux') {
    signals.push('SIGIO', 'SIGPOLL', 'SIGPWR', 'SIGSTKFLT');
}
//# sourceMappingURL=signals.js.map
;// ./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/index.js
// Note: since nyc uses this module to output coverage, any lines
// that are in the direct sync flow of nyc's outputCoverage are
// ignored, since we can never get coverage for them.
// grab a reference to node's real process object right away


const processOk = (process) => !!process &&
    typeof process === 'object' &&
    typeof process.removeListener === 'function' &&
    typeof process.emit === 'function' &&
    typeof process.reallyExit === 'function' &&
    typeof process.listeners === 'function' &&
    typeof process.kill === 'function' &&
    typeof process.pid === 'number' &&
    typeof process.on === 'function';
const kExitEmitter = Symbol.for('signal-exit emitter');
const global = globalThis;
const ObjectDefineProperty = Object.defineProperty.bind(Object);
// teeny special purpose ee
class Emitter {
    emitted = {
        afterExit: false,
        exit: false,
    };
    listeners = {
        afterExit: [],
        exit: [],
    };
    count = 0;
    id = Math.random();
    constructor() {
        if (global[kExitEmitter]) {
            return global[kExitEmitter];
        }
        ObjectDefineProperty(global, kExitEmitter, {
            value: this,
            writable: false,
            enumerable: false,
            configurable: false,
        });
    }
    on(ev, fn) {
        this.listeners[ev].push(fn);
    }
    removeListener(ev, fn) {
        const list = this.listeners[ev];
        const i = list.indexOf(fn);
        /* c8 ignore start */
        if (i === -1) {
            return;
        }
        /* c8 ignore stop */
        if (i === 0 && list.length === 1) {
            list.length = 0;
        }
        else {
            list.splice(i, 1);
        }
    }
    emit(ev, code, signal) {
        if (this.emitted[ev]) {
            return false;
        }
        this.emitted[ev] = true;
        let ret = false;
        for (const fn of this.listeners[ev]) {
            ret = fn(code, signal) === true || ret;
        }
        if (ev === 'exit') {
            ret = this.emit('afterExit', code, signal) || ret;
        }
        return ret;
    }
}
class SignalExitBase {
}
const signalExitWrap = (handler) => {
    return {
        onExit(cb, opts) {
            return handler.onExit(cb, opts);
        },
        load() {
            return handler.load();
        },
        unload() {
            return handler.unload();
        },
    };
};
class SignalExitFallback extends SignalExitBase {
    onExit() {
        return () => { };
    }
    load() { }
    unload() { }
}
class SignalExit extends SignalExitBase {
    // "SIGHUP" throws an `ENOSYS` error on Windows,
    // so use a supported signal instead
    /* c8 ignore start */
    #hupSig = mjs_process.platform === 'win32' ? 'SIGINT' : 'SIGHUP';
    /* c8 ignore stop */
    #emitter = new Emitter();
    #process;
    #originalProcessEmit;
    #originalProcessReallyExit;
    #sigListeners = {};
    #loaded = false;
    constructor(process) {
        super();
        this.#process = process;
        // { <signal>: <listener fn>, ... }
        this.#sigListeners = {};
        for (const sig of signals) {
            this.#sigListeners[sig] = () => {
                // If there are no other listeners, an exit is coming!
                // Simplest way: remove us and then re-send the signal.
                // We know that this will kill the process, so we can
                // safely emit now.
                const listeners = this.#process.listeners(sig);
                let { count } = this.#emitter;
                // This is a workaround for the fact that signal-exit v3 and signal
                // exit v4 are not aware of each other, and each will attempt to let
                // the other handle it, so neither of them do. To correct this, we
                // detect if we're the only handler *except* for previous versions
                // of signal-exit, and increment by the count of listeners it has
                // created.
                /* c8 ignore start */
                const p = process;
                if (typeof p.__signal_exit_emitter__ === 'object' &&
                    typeof p.__signal_exit_emitter__.count === 'number') {
                    count += p.__signal_exit_emitter__.count;
                }
                /* c8 ignore stop */
                if (listeners.length === count) {
                    this.unload();
                    const ret = this.#emitter.emit('exit', null, sig);
                    /* c8 ignore start */
                    const s = sig === 'SIGHUP' ? this.#hupSig : sig;
                    if (!ret)
                        process.kill(process.pid, s);
                    /* c8 ignore stop */
                }
            };
        }
        this.#originalProcessReallyExit = process.reallyExit;
        this.#originalProcessEmit = process.emit;
    }
    onExit(cb, opts) {
        /* c8 ignore start */
        if (!processOk(this.#process)) {
            return () => { };
        }
        /* c8 ignore stop */
        if (this.#loaded === false) {
            this.load();
        }
        const ev = opts?.alwaysLast ? 'afterExit' : 'exit';
        this.#emitter.on(ev, cb);
        return () => {
            this.#emitter.removeListener(ev, cb);
            if (this.#emitter.listeners['exit'].length === 0 &&
                this.#emitter.listeners['afterExit'].length === 0) {
                this.unload();
            }
        };
    }
    load() {
        if (this.#loaded) {
            return;
        }
        this.#loaded = true;
        // This is the number of onSignalExit's that are in play.
        // It's important so that we can count the correct number of
        // listeners on signals, and don't wait for the other one to
        // handle it instead of us.
        this.#emitter.count += 1;
        for (const sig of signals) {
            try {
                const fn = this.#sigListeners[sig];
                if (fn)
                    this.#process.on(sig, fn);
            }
            catch (_) { }
        }
        this.#process.emit = (ev, ...a) => {
            return this.#processEmit(ev, ...a);
        };
        this.#process.reallyExit = (code) => {
            return this.#processReallyExit(code);
        };
    }
    unload() {
        if (!this.#loaded) {
            return;
        }
        this.#loaded = false;
        signals.forEach(sig => {
            const listener = this.#sigListeners[sig];
            /* c8 ignore start */
            if (!listener) {
                throw new Error('Listener not defined for signal: ' + sig);
            }
            /* c8 ignore stop */
            try {
                this.#process.removeListener(sig, listener);
                /* c8 ignore start */
            }
            catch (_) { }
            /* c8 ignore stop */
        });
        this.#process.emit = this.#originalProcessEmit;
        this.#process.reallyExit = this.#originalProcessReallyExit;
        this.#emitter.count -= 1;
    }
    #processReallyExit(code) {
        /* c8 ignore start */
        if (!processOk(this.#process)) {
            return 0;
        }
        this.#process.exitCode = code || 0;
        /* c8 ignore stop */
        this.#emitter.emit('exit', this.#process.exitCode, null);
        return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
    }
    #processEmit(ev, ...args) {
        const og = this.#originalProcessEmit;
        if (ev === 'exit' && processOk(this.#process)) {
            if (typeof args[0] === 'number') {
                this.#process.exitCode = args[0];
                /* c8 ignore start */
            }
            /* c8 ignore start */
            const ret = og.call(this.#process, ev, ...args);
            /* c8 ignore start */
            this.#emitter.emit('exit', this.#process.exitCode, null);
            /* c8 ignore stop */
            return ret;
        }
        else {
            return og.call(this.#process, ev, ...args);
        }
    }
}
const mjs_process = globalThis.process;
// wrap so that we call the method on the actual handler, without
// exporting it directly.
const { 
/**
 * Called when the process is exiting, whether via signal, explicit
 * exit, or running out of stuff to do.
 *
 * If the global process object is not suitable for instrumentation,
 * then this will be a no-op.
 *
 * Returns a function that may be used to unload signal-exit.
 */
onExit, 
/**
 * Load the listeners.  Likely you never need to call this, unless
 * doing a rather deep integration with signal-exit functionality.
 * Mostly exposed for the benefit of testing.
 *
 * @internal
 */
load, 
/**
 * Unload the listeners.  Likely you never need to call this, unless
 * doing a rather deep integration with signal-exit functionality.
 * Mostly exposed for the benefit of testing.
 *
 * @internal
 */
unload, } = signalExitWrap(processOk(mjs_process) ? new SignalExit(mjs_process) : new SignalExitFallback());
//# sourceMappingURL=index.js.map
;// ./node_modules/.pnpm/restore-cursor@5.1.0/node_modules/restore-cursor/index.js




const terminal = external_node_process_.stderr.isTTY
	? external_node_process_.stderr
	: (external_node_process_.stdout.isTTY ? external_node_process_.stdout : undefined);

const restoreCursor = terminal ? node_modules_onetime(() => {
	onExit(() => {
		terminal.write('\u001B[?25h');
	}, {alwaysLast: true});
}) : () => {};

/* harmony default export */ const restore_cursor = (restoreCursor);

;// ./node_modules/.pnpm/cli-cursor@5.0.0/node_modules/cli-cursor/index.js



let isHidden = false;

const cliCursor = {};

cliCursor.show = (writableStream = external_node_process_.stderr) => {
	if (!writableStream.isTTY) {
		return;
	}

	isHidden = false;
	writableStream.write('\u001B[?25h');
};

cliCursor.hide = (writableStream = external_node_process_.stderr) => {
	if (!writableStream.isTTY) {
		return;
	}

	restore_cursor();
	isHidden = true;
	writableStream.write('\u001B[?25l');
};

cliCursor.toggle = (force, writableStream) => {
	if (force !== undefined) {
		isHidden = force;
	}

	if (isHidden) {
		cliCursor.show(writableStream);
	} else {
		cliCursor.hide(writableStream);
	}
};

/* harmony default export */ const cli_cursor = (cliCursor);

// EXTERNAL MODULE: ./node_modules/.pnpm/cli-spinners@2.9.2/node_modules/cli-spinners/index.js
var cli_spinners = __webpack_require__(6762);
;// ./node_modules/.pnpm/is-unicode-supported@1.3.0/node_modules/is-unicode-supported/index.js


function isUnicodeSupported() {
	if (external_node_process_.platform !== 'win32') {
		return external_node_process_.env.TERM !== 'linux'; // Linux console (kernel)
	}

	return Boolean(external_node_process_.env.CI)
		|| Boolean(external_node_process_.env.WT_SESSION) // Windows Terminal
		|| Boolean(external_node_process_.env.TERMINUS_SUBLIME) // Terminus (<0.2.27)
		|| external_node_process_.env.ConEmuTask === '{cmd::Cmder}' // ConEmu and cmder
		|| external_node_process_.env.TERM_PROGRAM === 'Terminus-Sublime'
		|| external_node_process_.env.TERM_PROGRAM === 'vscode'
		|| external_node_process_.env.TERM === 'xterm-256color'
		|| external_node_process_.env.TERM === 'alacritty'
		|| external_node_process_.env.TERMINAL_EMULATOR === 'JetBrains-JediTerm';
}

;// ./node_modules/.pnpm/log-symbols@6.0.0/node_modules/log-symbols/index.js



const main = {
	info: source/* default */.Ay.blue('ℹ'),
	success: source/* default */.Ay.green('✔'),
	warning: source/* default */.Ay.yellow('⚠'),
	error: source/* default */.Ay.red('✖'),
};

const fallback = {
	info: source/* default */.Ay.blue('i'),
	success: source/* default */.Ay.green('√'),
	warning: source/* default */.Ay.yellow('‼'),
	error: source/* default */.Ay.red('×'),
};

const logSymbols = isUnicodeSupported() ? main : fallback;

/* harmony default export */ const log_symbols = (logSymbols);

// EXTERNAL MODULE: ./node_modules/.pnpm/strip-ansi@7.1.0/node_modules/strip-ansi/index.js + 1 modules
var strip_ansi = __webpack_require__(4729);
// EXTERNAL MODULE: ./node_modules/.pnpm/string-width@7.2.0/node_modules/string-width/index.js + 3 modules
var string_width = __webpack_require__(4414);
;// ./node_modules/.pnpm/is-interactive@2.0.0/node_modules/is-interactive/index.js
function isInteractive({stream = process.stdout} = {}) {
	return Boolean(
		stream && stream.isTTY &&
		process.env.TERM !== 'dumb' &&
		!('CI' in process.env)
	);
}

;// ./node_modules/.pnpm/is-unicode-supported@2.1.0/node_modules/is-unicode-supported/index.js


function is_unicode_supported_isUnicodeSupported() {
	const {env} = external_node_process_;
	const {TERM, TERM_PROGRAM} = env;

	if (external_node_process_.platform !== 'win32') {
		return TERM !== 'linux'; // Linux console (kernel)
	}

	return Boolean(env.WT_SESSION) // Windows Terminal
		|| Boolean(env.TERMINUS_SUBLIME) // Terminus (<0.2.27)
		|| env.ConEmuTask === '{cmd::Cmder}' // ConEmu and cmder
		|| TERM_PROGRAM === 'Terminus-Sublime'
		|| TERM_PROGRAM === 'vscode'
		|| TERM === 'xterm-256color'
		|| TERM === 'alacritty'
		|| TERM === 'rxvt-unicode'
		|| TERM === 'rxvt-unicode-256color'
		|| env.TERMINAL_EMULATOR === 'JetBrains-JediTerm';
}

;// ./node_modules/.pnpm/stdin-discarder@0.2.2/node_modules/stdin-discarder/index.js


const ASCII_ETX_CODE = 0x03; // Ctrl+C emits this code

class StdinDiscarder {
	#activeCount = 0;

	start() {
		this.#activeCount++;

		if (this.#activeCount === 1) {
			this.#realStart();
		}
	}

	stop() {
		if (this.#activeCount <= 0) {
			throw new Error('`stop` called more times than `start`');
		}

		this.#activeCount--;

		if (this.#activeCount === 0) {
			this.#realStop();
		}
	}

	#realStart() {
		// No known way to make it work reliably on Windows.
		if (external_node_process_.platform === 'win32' || !external_node_process_.stdin.isTTY) {
			return;
		}

		external_node_process_.stdin.setRawMode(true);
		external_node_process_.stdin.on('data', this.#handleInput);
		external_node_process_.stdin.resume();
	}

	#realStop() {
		if (!external_node_process_.stdin.isTTY) {
			return;
		}

		external_node_process_.stdin.off('data', this.#handleInput);
		external_node_process_.stdin.pause();
		external_node_process_.stdin.setRawMode(false);
	}

	#handleInput(chunk) {
		// Allow Ctrl+C to gracefully exit.
		if (chunk[0] === ASCII_ETX_CODE) {
			external_node_process_.emit('SIGINT');
		}
	}
}

const stdinDiscarder = new StdinDiscarder();

/* harmony default export */ const stdin_discarder = (stdinDiscarder);

;// ./node_modules/.pnpm/ora@8.2.0/node_modules/ora/index.js











class Ora {
	#linesToClear = 0;
	#isDiscardingStdin = false;
	#lineCount = 0;
	#frameIndex = -1;
	#lastSpinnerFrameTime = 0;
	#options;
	#spinner;
	#stream;
	#id;
	#initialInterval;
	#isEnabled;
	#isSilent;
	#indent;
	#text;
	#prefixText;
	#suffixText;
	color;

	constructor(options) {
		if (typeof options === 'string') {
			options = {
				text: options,
			};
		}

		this.#options = {
			color: 'cyan',
			stream: external_node_process_.stderr,
			discardStdin: true,
			hideCursor: true,
			...options,
		};

		// Public
		this.color = this.#options.color;

		// It's important that these use the public setters.
		this.spinner = this.#options.spinner;

		this.#initialInterval = this.#options.interval;
		this.#stream = this.#options.stream;
		this.#isEnabled = typeof this.#options.isEnabled === 'boolean' ? this.#options.isEnabled : isInteractive({stream: this.#stream});
		this.#isSilent = typeof this.#options.isSilent === 'boolean' ? this.#options.isSilent : false;

		// Set *after* `this.#stream`.
		// It's important that these use the public setters.
		this.text = this.#options.text;
		this.prefixText = this.#options.prefixText;
		this.suffixText = this.#options.suffixText;
		this.indent = this.#options.indent;

		if (false) // removed by dead control flow
{}
	}

	get indent() {
		return this.#indent;
	}

	set indent(indent = 0) {
		if (!(indent >= 0 && Number.isInteger(indent))) {
			throw new Error('The `indent` option must be an integer from 0 and up');
		}

		this.#indent = indent;
		this.#updateLineCount();
	}

	get interval() {
		return this.#initialInterval ?? this.#spinner.interval ?? 100;
	}

	get spinner() {
		return this.#spinner;
	}

	set spinner(spinner) {
		this.#frameIndex = -1;
		this.#initialInterval = undefined;

		if (typeof spinner === 'object') {
			if (spinner.frames === undefined) {
				throw new Error('The given spinner must have a `frames` property');
			}

			this.#spinner = spinner;
		} else if (!is_unicode_supported_isUnicodeSupported()) {
			this.#spinner = cli_spinners.line;
		} else if (spinner === undefined) {
			// Set default spinner
			this.#spinner = cli_spinners.dots;
		} else if (spinner !== 'default' && cli_spinners[spinner]) {
			this.#spinner = cli_spinners[spinner];
		} else {
			throw new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);
		}
	}

	get text() {
		return this.#text;
	}

	set text(value = '') {
		this.#text = value;
		this.#updateLineCount();
	}

	get prefixText() {
		return this.#prefixText;
	}

	set prefixText(value = '') {
		this.#prefixText = value;
		this.#updateLineCount();
	}

	get suffixText() {
		return this.#suffixText;
	}

	set suffixText(value = '') {
		this.#suffixText = value;
		this.#updateLineCount();
	}

	get isSpinning() {
		return this.#id !== undefined;
	}

	#getFullPrefixText(prefixText = this.#prefixText, postfix = ' ') {
		if (typeof prefixText === 'string' && prefixText !== '') {
			return prefixText + postfix;
		}

		if (typeof prefixText === 'function') {
			return prefixText() + postfix;
		}

		return '';
	}

	#getFullSuffixText(suffixText = this.#suffixText, prefix = ' ') {
		if (typeof suffixText === 'string' && suffixText !== '') {
			return prefix + suffixText;
		}

		if (typeof suffixText === 'function') {
			return prefix + suffixText();
		}

		return '';
	}

	#updateLineCount() {
		const columns = this.#stream.columns ?? 80;
		const fullPrefixText = this.#getFullPrefixText(this.#prefixText, '-');
		const fullSuffixText = this.#getFullSuffixText(this.#suffixText, '-');
		const fullText = ' '.repeat(this.#indent) + fullPrefixText + '--' + this.#text + '--' + fullSuffixText;

		this.#lineCount = 0;
		for (const line of (0,strip_ansi/* default */.A)(fullText).split('\n')) {
			this.#lineCount += Math.max(1, Math.ceil((0,string_width/* default */.A)(line, {countAnsiEscapeCodes: true}) / columns));
		}
	}

	get isEnabled() {
		return this.#isEnabled && !this.#isSilent;
	}

	set isEnabled(value) {
		if (typeof value !== 'boolean') {
			throw new TypeError('The `isEnabled` option must be a boolean');
		}

		this.#isEnabled = value;
	}

	get isSilent() {
		return this.#isSilent;
	}

	set isSilent(value) {
		if (typeof value !== 'boolean') {
			throw new TypeError('The `isSilent` option must be a boolean');
		}

		this.#isSilent = value;
	}

	frame() {
		// Ensure we only update the spinner frame at the wanted interval,
		// even if the render method is called more often.
		const now = Date.now();
		if (this.#frameIndex === -1 || now - this.#lastSpinnerFrameTime >= this.interval) {
			this.#frameIndex = ++this.#frameIndex % this.#spinner.frames.length;
			this.#lastSpinnerFrameTime = now;
		}

		const {frames} = this.#spinner;
		let frame = frames[this.#frameIndex];

		if (this.color) {
			frame = source/* default */.Ay[this.color](frame);
		}

		const fullPrefixText = (typeof this.#prefixText === 'string' && this.#prefixText !== '') ? this.#prefixText + ' ' : '';
		const fullText = typeof this.text === 'string' ? ' ' + this.text : '';
		const fullSuffixText = (typeof this.#suffixText === 'string' && this.#suffixText !== '') ? ' ' + this.#suffixText : '';

		return fullPrefixText + frame + fullText + fullSuffixText;
	}

	clear() {
		if (!this.#isEnabled || !this.#stream.isTTY) {
			return this;
		}

		this.#stream.cursorTo(0);

		for (let index = 0; index < this.#linesToClear; index++) {
			if (index > 0) {
				this.#stream.moveCursor(0, -1);
			}

			this.#stream.clearLine(1);
		}

		if (this.#indent || this.lastIndent !== this.#indent) {
			this.#stream.cursorTo(this.#indent);
		}

		this.lastIndent = this.#indent;
		this.#linesToClear = 0;

		return this;
	}

	render() {
		if (this.#isSilent) {
			return this;
		}

		this.clear();
		this.#stream.write(this.frame());
		this.#linesToClear = this.#lineCount;

		return this;
	}

	start(text) {
		if (text) {
			this.text = text;
		}

		if (this.#isSilent) {
			return this;
		}

		if (!this.#isEnabled) {
			if (this.text) {
				this.#stream.write(`- ${this.text}\n`);
			}

			return this;
		}

		if (this.isSpinning) {
			return this;
		}

		if (this.#options.hideCursor) {
			cli_cursor.hide(this.#stream);
		}

		if (this.#options.discardStdin && external_node_process_.stdin.isTTY) {
			this.#isDiscardingStdin = true;
			stdin_discarder.start();
		}

		this.render();
		this.#id = setInterval(this.render.bind(this), this.interval);

		return this;
	}

	stop() {
		if (!this.#isEnabled) {
			return this;
		}

		clearInterval(this.#id);
		this.#id = undefined;
		this.#frameIndex = 0;
		this.clear();
		if (this.#options.hideCursor) {
			cli_cursor.show(this.#stream);
		}

		if (this.#options.discardStdin && external_node_process_.stdin.isTTY && this.#isDiscardingStdin) {
			stdin_discarder.stop();
			this.#isDiscardingStdin = false;
		}

		return this;
	}

	succeed(text) {
		return this.stopAndPersist({symbol: log_symbols.success, text});
	}

	fail(text) {
		return this.stopAndPersist({symbol: log_symbols.error, text});
	}

	warn(text) {
		return this.stopAndPersist({symbol: log_symbols.warning, text});
	}

	info(text) {
		return this.stopAndPersist({symbol: log_symbols.info, text});
	}

	stopAndPersist(options = {}) {
		if (this.#isSilent) {
			return this;
		}

		const prefixText = options.prefixText ?? this.#prefixText;
		const fullPrefixText = this.#getFullPrefixText(prefixText, ' ');

		const symbolText = options.symbol ?? ' ';

		const text = options.text ?? this.text;
		const separatorText = symbolText ? ' ' : '';
		const fullText = (typeof text === 'string') ? separatorText + text : '';

		const suffixText = options.suffixText ?? this.#suffixText;
		const fullSuffixText = this.#getFullSuffixText(suffixText, ' ');

		const textToWrite = fullPrefixText + symbolText + fullText + fullSuffixText + '\n';

		this.stop();
		this.#stream.write(textToWrite);

		return this;
	}
}

function ora(options) {
	return new Ora(options);
}

async function oraPromise(action, options) {
	const actionIsFunction = typeof action === 'function';
	const actionIsPromise = typeof action.then === 'function';

	if (!actionIsFunction && !actionIsPromise) {
		throw new TypeError('Parameter `action` must be a Function or a Promise');
	}

	const {successText, failText} = typeof options === 'object'
		? options
		: {successText: undefined, failText: undefined};

	const spinner = ora(options).start();

	try {
		const promise = actionIsFunction ? action(spinner) : action;
		const result = await promise;

		spinner.succeed(
			successText === undefined
				? undefined
				: (typeof successText === 'string' ? successText : successText(result)),
		);

		return result;
	} catch (error) {
		spinner.fail(
			failText === undefined
				? undefined
				: (typeof failText === 'string' ? failText : failText(error)),
		);

		throw error;
	}
}




/***/ }),

/***/ 5477:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const u = (__webpack_require__(8556).fromPromise)
module.exports = {
  copy: u(__webpack_require__(6448)),
  copySync: __webpack_require__(8346)
}


/***/ }),

/***/ 5546:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const Range = __webpack_require__(9165)
const intersects = (r1, r2, options) => {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2, options)
}
module.exports = intersects


/***/ }),

/***/ 5569:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const Comparator = __webpack_require__(1994)
const { ANY } = Comparator
const Range = __webpack_require__(9165)
const satisfies = __webpack_require__(4483)
const gt = __webpack_require__(8014)
const lt = __webpack_require__(161)
const lte = __webpack_require__(9730)
const gte = __webpack_require__(9799)

const outside = (version, range, hilo, options) => {
  version = new SemVer(version, options)
  range = new Range(range, options)

  let gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisfies the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let high = null
    let low = null

    comparators.forEach((comparator) => {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

module.exports = outside


/***/ }),

/***/ 5578:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",127],["8141","갂갃갅갆갋",4,"갘갞갟갡갢갣갥",6,"갮갲갳갴"],["8161","갵갶갷갺갻갽갾갿걁",9,"걌걎",5,"걕"],["8181","걖걗걙걚걛걝",18,"걲걳걵걶걹걻",4,"겂겇겈겍겎겏겑겒겓겕",6,"겞겢",5,"겫겭겮겱",6,"겺겾겿곀곂곃곅곆곇곉곊곋곍",7,"곖곘",7,"곢곣곥곦곩곫곭곮곲곴곷",4,"곾곿괁괂괃괅괇",4,"괎괐괒괓"],["8241","괔괕괖괗괙괚괛괝괞괟괡",7,"괪괫괮",5],["8261","괶괷괹괺괻괽",6,"굆굈굊",5,"굑굒굓굕굖굗"],["8281","굙",7,"굢굤",7,"굮굯굱굲굷굸굹굺굾궀궃",4,"궊궋궍궎궏궑",10,"궞",5,"궥",17,"궸",7,"귂귃귅귆귇귉",6,"귒귔",7,"귝귞귟귡귢귣귥",18],["8341","귺귻귽귾긂",5,"긊긌긎",5,"긕",7],["8361","긝",18,"긲긳긵긶긹긻긼"],["8381","긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",4,"깞깢깣깤깦깧깪깫깭깮깯깱",6,"깺깾",5,"꺆",5,"꺍",46,"꺿껁껂껃껅",6,"껎껒",5,"껚껛껝",8],["8441","껦껧껩껪껬껮",5,"껵껶껷껹껺껻껽",8],["8461","꼆꼉꼊꼋꼌꼎꼏꼑",18],["8481","꼤",7,"꼮꼯꼱꼳꼵",6,"꼾꽀꽄꽅꽆꽇꽊",5,"꽑",10,"꽞",5,"꽦",18,"꽺",5,"꾁꾂꾃꾅꾆꾇꾉",6,"꾒꾓꾔꾖",5,"꾝",26,"꾺꾻꾽꾾"],["8541","꾿꿁",5,"꿊꿌꿏",4,"꿕",6,"꿝",4],["8561","꿢",5,"꿪",5,"꿲꿳꿵꿶꿷꿹",6,"뀂뀃"],["8581","뀅",6,"뀍뀎뀏뀑뀒뀓뀕",6,"뀞",9,"뀩",26,"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",29,"끾끿낁낂낃낅",6,"낎낐낒",5,"낛낝낞낣낤"],["8641","낥낦낧낪낰낲낶낷낹낺낻낽",6,"냆냊",5,"냒"],["8661","냓냕냖냗냙",6,"냡냢냣냤냦",10],["8681","냱",22,"넊넍넎넏넑넔넕넖넗넚넞",4,"넦넧넩넪넫넭",6,"넶넺",5,"녂녃녅녆녇녉",6,"녒녓녖녗녙녚녛녝녞녟녡",22,"녺녻녽녾녿놁놃",4,"놊놌놎놏놐놑놕놖놗놙놚놛놝"],["8741","놞",9,"놩",15],["8761","놹",18,"뇍뇎뇏뇑뇒뇓뇕"],["8781","뇖",5,"뇞뇠",7,"뇪뇫뇭뇮뇯뇱",7,"뇺뇼뇾",5,"눆눇눉눊눍",6,"눖눘눚",5,"눡",18,"눵",6,"눽",26,"뉙뉚뉛뉝뉞뉟뉡",6,"뉪",4],["8841","뉯",4,"뉶",5,"뉽",6,"늆늇늈늊",4],["8861","늏늒늓늕늖늗늛",4,"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],["8881","늸",15,"닊닋닍닎닏닑닓",4,"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",6,"댒댖",5,"댝",54,"덗덙덚덝덠덡덢덣"],["8941","덦덨덪덬덭덯덲덳덵덶덷덹",6,"뎂뎆",5,"뎍"],["8961","뎎뎏뎑뎒뎓뎕",10,"뎢",5,"뎩뎪뎫뎭"],["8981","뎮",21,"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",18,"돽",18,"됑",6,"됙됚됛됝됞됟됡",6,"됪됬",7,"됵",15],["8a41","둅",10,"둒둓둕둖둗둙",6,"둢둤둦"],["8a61","둧",4,"둭",18,"뒁뒂"],["8a81","뒃",4,"뒉",19,"뒞",5,"뒥뒦뒧뒩뒪뒫뒭",7,"뒶뒸뒺",5,"듁듂듃듅듆듇듉",6,"듑듒듓듔듖",5,"듞듟듡듢듥듧",4,"듮듰듲",5,"듹",26,"딖딗딙딚딝"],["8b41","딞",5,"딦딫",4,"딲딳딵딶딷딹",6,"땂땆"],["8b61","땇땈땉땊땎땏땑땒땓땕",6,"땞땢",8],["8b81","땫",52,"떢떣떥떦떧떩떬떭떮떯떲떶",4,"떾떿뗁뗂뗃뗅",6,"뗎뗒",5,"뗙",18,"뗭",18],["8c41","똀",15,"똒똓똕똖똗똙",4],["8c61","똞",6,"똦",5,"똭",6,"똵",5],["8c81","똻",12,"뙉",26,"뙥뙦뙧뙩",50,"뚞뚟뚡뚢뚣뚥",5,"뚭뚮뚯뚰뚲",16],["8d41","뛃",16,"뛕",8],["8d61","뛞",17,"뛱뛲뛳뛵뛶뛷뛹뛺"],["8d81","뛻",4,"뜂뜃뜄뜆",33,"뜪뜫뜭뜮뜱",6,"뜺뜼",7,"띅띆띇띉띊띋띍",6,"띖",9,"띡띢띣띥띦띧띩",6,"띲띴띶",5,"띾띿랁랂랃랅",6,"랎랓랔랕랚랛랝랞"],["8e41","랟랡",6,"랪랮",5,"랶랷랹",8],["8e61","럂",4,"럈럊",19],["8e81","럞",13,"럮럯럱럲럳럵",6,"럾렂",4,"렊렋렍렎렏렑",6,"렚렜렞",5,"렦렧렩렪렫렭",6,"렶렺",5,"롁롂롃롅",11,"롒롔",7,"롞롟롡롢롣롥",6,"롮롰롲",5,"롹롺롻롽",7],["8f41","뢅",7,"뢎",17],["8f61","뢠",7,"뢩",6,"뢱뢲뢳뢵뢶뢷뢹",4],["8f81","뢾뢿룂룄룆",5,"룍룎룏룑룒룓룕",7,"룞룠룢",5,"룪룫룭룮룯룱",6,"룺룼룾",5,"뤅",18,"뤙",6,"뤡",26,"뤾뤿륁륂륃륅",6,"륍륎륐륒",5],["9041","륚륛륝륞륟륡",6,"륪륬륮",5,"륶륷륹륺륻륽"],["9061","륾",5,"릆릈릋릌릏",15],["9081","릟",12,"릮릯릱릲릳릵",6,"릾맀맂",5,"맊맋맍맓",4,"맚맜맟맠맢맦맧맩맪맫맭",6,"맶맻",4,"먂",5,"먉",11,"먖",33,"먺먻먽먾먿멁멃멄멅멆"],["9141","멇멊멌멏멐멑멒멖멗멙멚멛멝",6,"멦멪",5],["9161","멲멳멵멶멷멹",9,"몆몈몉몊몋몍",5],["9181","몓",20,"몪몭몮몯몱몳",4,"몺몼몾",5,"뫅뫆뫇뫉",14,"뫚",33,"뫽뫾뫿묁묂묃묅",7,"묎묐묒",5,"묙묚묛묝묞묟묡",6],["9241","묨묪묬",7,"묷묹묺묿",4,"뭆뭈뭊뭋뭌뭎뭑뭒"],["9261","뭓뭕뭖뭗뭙",7,"뭢뭤",7,"뭭",4],["9281","뭲",21,"뮉뮊뮋뮍뮎뮏뮑",18,"뮥뮦뮧뮩뮪뮫뮭",6,"뮵뮶뮸",7,"믁믂믃믅믆믇믉",6,"믑믒믔",35,"믺믻믽믾밁"],["9341","밃",4,"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],["9361","밶밷밹",6,"뱂뱆뱇뱈뱊뱋뱎뱏뱑",8],["9381","뱚뱛뱜뱞",37,"벆벇벉벊벍벏",4,"벖벘벛",4,"벢벣벥벦벩",6,"벲벶",5,"벾벿볁볂볃볅",7,"볎볒볓볔볖볗볙볚볛볝",22,"볷볹볺볻볽"],["9441","볾",5,"봆봈봊",5,"봑봒봓봕",8],["9461","봞",5,"봥",6,"봭",12],["9481","봺",5,"뵁",6,"뵊뵋뵍뵎뵏뵑",6,"뵚",9,"뵥뵦뵧뵩",22,"붂붃붅붆붋",4,"붒붔붖붗붘붛붝",6,"붥",10,"붱",6,"붹",24],["9541","뷒뷓뷖뷗뷙뷚뷛뷝",11,"뷪",5,"뷱"],["9561","뷲뷳뷵뷶뷷뷹",6,"븁븂븄븆",5,"븎븏븑븒븓"],["9581","븕",6,"븞븠",35,"빆빇빉빊빋빍빏",4,"빖빘빜빝빞빟빢빣빥빦빧빩빫",4,"빲빶",4,"빾빿뺁뺂뺃뺅",6,"뺎뺒",5,"뺚",13,"뺩",14],["9641","뺸",23,"뻒뻓"],["9661","뻕뻖뻙",6,"뻡뻢뻦",5,"뻭",8],["9681","뻶",10,"뼂",5,"뼊",13,"뼚뼞",33,"뽂뽃뽅뽆뽇뽉",6,"뽒뽓뽔뽖",44],["9741","뾃",16,"뾕",8],["9761","뾞",17,"뾱",7],["9781","뾹",11,"뿆",5,"뿎뿏뿑뿒뿓뿕",6,"뿝뿞뿠뿢",89,"쀽쀾쀿"],["9841","쁀",16,"쁒",5,"쁙쁚쁛"],["9861","쁝쁞쁟쁡",6,"쁪",15],["9881","쁺",21,"삒삓삕삖삗삙",6,"삢삤삦",5,"삮삱삲삷",4,"삾샂샃샄샆샇샊샋샍샎샏샑",6,"샚샞",5,"샦샧샩샪샫샭",6,"샶샸샺",5,"섁섂섃섅섆섇섉",6,"섑섒섓섔섖",5,"섡섢섥섨섩섪섫섮"],["9941","섲섳섴섵섷섺섻섽섾섿셁",6,"셊셎",5,"셖셗"],["9961","셙셚셛셝",6,"셦셪",5,"셱셲셳셵셶셷셹셺셻"],["9981","셼",8,"솆",5,"솏솑솒솓솕솗",4,"솞솠솢솣솤솦솧솪솫솭솮솯솱",11,"솾",5,"쇅쇆쇇쇉쇊쇋쇍",6,"쇕쇖쇙",6,"쇡쇢쇣쇥쇦쇧쇩",6,"쇲쇴",7,"쇾쇿숁숂숃숅",6,"숎숐숒",5,"숚숛숝숞숡숢숣"],["9a41","숤숥숦숧숪숬숮숰숳숵",16],["9a61","쉆쉇쉉",6,"쉒쉓쉕쉖쉗쉙",6,"쉡쉢쉣쉤쉦"],["9a81","쉧",4,"쉮쉯쉱쉲쉳쉵",6,"쉾슀슂",5,"슊",5,"슑",6,"슙슚슜슞",5,"슦슧슩슪슫슮",5,"슶슸슺",33,"싞싟싡싢싥",5,"싮싰싲싳싴싵싷싺싽싾싿쌁",6,"쌊쌋쌎쌏"],["9b41","쌐쌑쌒쌖쌗쌙쌚쌛쌝",6,"쌦쌧쌪",8],["9b61","쌳",17,"썆",7],["9b81","썎",25,"썪썫썭썮썯썱썳",4,"썺썻썾",5,"쎅쎆쎇쎉쎊쎋쎍",50,"쏁",22,"쏚"],["9c41","쏛쏝쏞쏡쏣",4,"쏪쏫쏬쏮",5,"쏶쏷쏹",5],["9c61","쏿",8,"쐉",6,"쐑",9],["9c81","쐛",8,"쐥",6,"쐭쐮쐯쐱쐲쐳쐵",6,"쐾",9,"쑉",26,"쑦쑧쑩쑪쑫쑭",6,"쑶쑷쑸쑺",5,"쒁",18,"쒕",6,"쒝",12],["9d41","쒪",13,"쒹쒺쒻쒽",8],["9d61","쓆",25],["9d81","쓠",8,"쓪",5,"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",9,"씍씎씏씑씒씓씕",6,"씝",10,"씪씫씭씮씯씱",6,"씺씼씾",5,"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",6,"앲앶",5,"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],["9e41","얖얙얚얛얝얞얟얡",7,"얪",9,"얶"],["9e61","얷얺얿",4,"엋엍엏엒엓엕엖엗엙",6,"엢엤엦엧"],["9e81","엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",6,"옚옝",6,"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",6,"왒왖",5,"왞왟왡",10,"왭왮왰왲",5,"왺왻왽왾왿욁",6,"욊욌욎",5,"욖욗욙욚욛욝",6,"욦"],["9f41","욨욪",5,"욲욳욵욶욷욻",4,"웂웄웆",5,"웎"],["9f61","웏웑웒웓웕",6,"웞웟웢",5,"웪웫웭웮웯웱웲"],["9f81","웳",4,"웺웻웼웾",5,"윆윇윉윊윋윍",6,"윖윘윚",5,"윢윣윥윦윧윩",6,"윲윴윶윸윹윺윻윾윿읁읂읃읅",4,"읋읎읐읙읚읛읝읞읟읡",6,"읩읪읬",7,"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",4,"잢잧",4,"잮잯잱잲잳잵잶잷"],["a041","잸잹잺잻잾쟂",5,"쟊쟋쟍쟏쟑",6,"쟙쟚쟛쟜"],["a061","쟞",5,"쟥쟦쟧쟩쟪쟫쟭",13],["a081","쟻",4,"젂젃젅젆젇젉젋",4,"젒젔젗",4,"젞젟젡젢젣젥",6,"젮젰젲",5,"젹젺젻젽젾젿졁",6,"졊졋졎",5,"졕",26,"졲졳졵졶졷졹졻",4,"좂좄좈좉좊좎",5,"좕",7,"좞좠좢좣좤"],["a141","좥좦좧좩",18,"좾좿죀죁"],["a161","죂죃죅죆죇죉죊죋죍",6,"죖죘죚",5,"죢죣죥"],["a181","죦",14,"죶",5,"죾죿줁줂줃줇",4,"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",9,"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],["a241","줐줒",5,"줙",18],["a261","줭",6,"줵",18],["a281","쥈",7,"쥒쥓쥕쥖쥗쥙",6,"쥢쥤",7,"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],["a341","쥱쥲쥳쥵",6,"쥽",10,"즊즋즍즎즏"],["a361","즑",6,"즚즜즞",16],["a381","즯",16,"짂짃짅짆짉짋",4,"짒짔짗짘짛！",58,"￦］",32,"￣"],["a441","짞짟짡짣짥짦짨짩짪짫짮짲",5,"짺짻짽짾짿쨁쨂쨃쨄"],["a461","쨅쨆쨇쨊쨎",5,"쨕쨖쨗쨙",12],["a481","쨦쨧쨨쨪",28,"ㄱ",93],["a541","쩇",4,"쩎쩏쩑쩒쩓쩕",6,"쩞쩢",5,"쩩쩪"],["a561","쩫",17,"쩾",5,"쪅쪆"],["a581","쪇",16,"쪙",14,"ⅰ",9],["a5b0","Ⅰ",9],["a5c1","Α",16,"Σ",6],["a5e1","α",16,"σ",6],["a641","쪨",19,"쪾쪿쫁쫂쫃쫅"],["a661","쫆",5,"쫎쫐쫒쫔쫕쫖쫗쫚",5,"쫡",6],["a681","쫨쫩쫪쫫쫭",6,"쫵",18,"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",7],["a741","쬋",4,"쬑쬒쬓쬕쬖쬗쬙",6,"쬢",7],["a761","쬪",22,"쭂쭃쭄"],["a781","쭅쭆쭇쭊쭋쭍쭎쭏쭑",6,"쭚쭛쭜쭞",5,"쭥",7,"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",9,"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",9,"㎀",4,"㎺",5,"㎐",4,"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],["a841","쭭",10,"쭺",14],["a861","쮉",18,"쮝",6],["a881","쮤",19,"쮹",11,"ÆÐªĦ"],["a8a6","Ĳ"],["a8a8","ĿŁØŒºÞŦŊ"],["a8b1","㉠",27,"ⓐ",25,"①",14,"½⅓⅔¼¾⅛⅜⅝⅞"],["a941","쯅",14,"쯕",10],["a961","쯠쯡쯢쯣쯥쯦쯨쯪",18],["a981","쯽",14,"찎찏찑찒찓찕",6,"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",27,"⒜",25,"⑴",14,"¹²³⁴ⁿ₁₂₃₄"],["aa41","찥찦찪찫찭찯찱",6,"찺찿",4,"챆챇챉챊챋챍챎"],["aa61","챏",4,"챖챚",5,"챡챢챣챥챧챩",6,"챱챲"],["aa81","챳챴챶",29,"ぁ",82],["ab41","첔첕첖첗첚첛첝첞첟첡",6,"첪첮",5,"첶첷첹"],["ab61","첺첻첽",6,"쳆쳈쳊",5,"쳑쳒쳓쳕",5],["ab81","쳛",8,"쳥",6,"쳭쳮쳯쳱",12,"ァ",85],["ac41","쳾쳿촀촂",5,"촊촋촍촎촏촑",6,"촚촜촞촟촠"],["ac61","촡촢촣촥촦촧촩촪촫촭",11,"촺",4],["ac81","촿",28,"쵝쵞쵟А",5,"ЁЖ",25],["acd1","а",5,"ёж",25],["ad41","쵡쵢쵣쵥",6,"쵮쵰쵲",5,"쵹",7],["ad61","춁",6,"춉",10,"춖춗춙춚춛춝춞춟"],["ad81","춠춡춢춣춦춨춪",5,"춱",18,"췅"],["ae41","췆",5,"췍췎췏췑",16],["ae61","췢",5,"췩췪췫췭췮췯췱",6,"췺췼췾",4],["ae81","츃츅츆츇츉츊츋츍",6,"츕츖츗츘츚",5,"츢츣츥츦츧츩츪츫"],["af41","츬츭츮츯츲츴츶",19],["af61","칊",13,"칚칛칝칞칢",5,"칪칬"],["af81","칮",5,"칶칷칹칺칻칽",6,"캆캈캊",5,"캒캓캕캖캗캙"],["b041","캚",5,"캢캦",5,"캮",12],["b061","캻",5,"컂",19],["b081","컖",13,"컦컧컩컪컭",6,"컶컺",5,"가각간갇갈갉갊감",7,"같",4,"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],["b141","켂켃켅켆켇켉",6,"켒켔켖",5,"켝켞켟켡켢켣"],["b161","켥",6,"켮켲",5,"켹",11],["b181","콅",14,"콖콗콙콚콛콝",6,"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],["b241","콭콮콯콲콳콵콶콷콹",6,"쾁쾂쾃쾄쾆",5,"쾍"],["b261","쾎",18,"쾢",5,"쾩"],["b281","쾪",5,"쾱",18,"쿅",6,"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],["b341","쿌",19,"쿢쿣쿥쿦쿧쿩"],["b361","쿪",5,"쿲쿴쿶",5,"쿽쿾쿿퀁퀂퀃퀅",5],["b381","퀋",5,"퀒",5,"퀙",19,"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",4,"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],["b441","퀮",5,"퀶퀷퀹퀺퀻퀽",6,"큆큈큊",5],["b461","큑큒큓큕큖큗큙",6,"큡",10,"큮큯"],["b481","큱큲큳큵",6,"큾큿킀킂",18,"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",4,"닳담답닷",4,"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],["b541","킕",14,"킦킧킩킪킫킭",5],["b561","킳킶킸킺",5,"탂탃탅탆탇탊",5,"탒탖",4],["b581","탛탞탟탡탢탣탥",6,"탮탲",5,"탹",11,"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],["b641","턅",7,"턎",17],["b661","턠",15,"턲턳턵턶턷턹턻턼턽턾"],["b681","턿텂텆",5,"텎텏텑텒텓텕",6,"텞텠텢",5,"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],["b741","텮",13,"텽",6,"톅톆톇톉톊"],["b761","톋",20,"톢톣톥톦톧"],["b781","톩",6,"톲톴톶톷톸톹톻톽톾톿퇁",14,"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],["b841","퇐",7,"퇙",17],["b861","퇫",8,"퇵퇶퇷퇹",13],["b881","툈툊",5,"툑",24,"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",4,"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],["b941","툪툫툮툯툱툲툳툵",6,"툾퉀퉂",5,"퉉퉊퉋퉌"],["b961","퉍",14,"퉝",6,"퉥퉦퉧퉨"],["b981","퉩",22,"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",4,"받",4,"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],["ba41","튍튎튏튒튓튔튖",5,"튝튞튟튡튢튣튥",6,"튭"],["ba61","튮튯튰튲",5,"튺튻튽튾틁틃",4,"틊틌",5],["ba81","틒틓틕틖틗틙틚틛틝",6,"틦",9,"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],["bb41","틻",4,"팂팄팆",5,"팏팑팒팓팕팗",4,"팞팢팣"],["bb61","팤팦팧팪팫팭팮팯팱",6,"팺팾",5,"퍆퍇퍈퍉"],["bb81","퍊",31,"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],["bc41","퍪",17,"퍾퍿펁펂펃펅펆펇"],["bc61","펈펉펊펋펎펒",5,"펚펛펝펞펟펡",6,"펪펬펮"],["bc81","펯",4,"펵펶펷펹펺펻펽",6,"폆폇폊",5,"폑",5,"샥샨샬샴샵샷샹섀섄섈섐섕서",4,"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],["bd41","폗폙",7,"폢폤",7,"폮폯폱폲폳폵폶폷"],["bd61","폸폹폺폻폾퐀퐂",5,"퐉",13],["bd81","퐗",5,"퐞",25,"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],["be41","퐸",7,"푁푂푃푅",14],["be61","푔",7,"푝푞푟푡푢푣푥",7,"푮푰푱푲"],["be81","푳",4,"푺푻푽푾풁풃",4,"풊풌풎",5,"풕",8,"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",6,"엌엎"],["bf41","풞",10,"풪",14],["bf61","풹",18,"퓍퓎퓏퓑퓒퓓퓕"],["bf81","퓖",5,"퓝퓞퓠",7,"퓩퓪퓫퓭퓮퓯퓱",6,"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",5,"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],["c041","퓾",5,"픅픆픇픉픊픋픍",6,"픖픘",5],["c061","픞",25],["c081","픸픹픺픻픾픿핁핂핃핅",6,"핎핐핒",5,"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",7,"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],["c141","핤핦핧핪핬핮",5,"핶핷핹핺핻핽",6,"햆햊햋"],["c161","햌햍햎햏햑",19,"햦햧"],["c181","햨",31,"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],["c241","헊헋헍헎헏헑헓",4,"헚헜헞",5,"헦헧헩헪헫헭헮"],["c261","헯",4,"헶헸헺",5,"혂혃혅혆혇혉",6,"혒"],["c281","혖",5,"혝혞혟혡혢혣혥",7,"혮",9,"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],["c341","혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",4],["c361","홢",4,"홨홪",5,"홲홳홵",11],["c381","횁횂횄횆",5,"횎횏횑횒횓횕",7,"횞횠횢",5,"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],["c441","횫횭횮횯횱",7,"횺횼",7,"훆훇훉훊훋"],["c461","훍훎훏훐훒훓훕훖훘훚",5,"훡훢훣훥훦훧훩",4],["c481","훮훯훱훲훳훴훶",5,"훾훿휁휂휃휅",11,"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],["c541","휕휖휗휚휛휝휞휟휡",6,"휪휬휮",5,"휶휷휹"],["c561","휺휻휽",6,"흅흆흈흊",5,"흒흓흕흚",4],["c581","흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",6,"흾흿힀힂",5,"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],["c641","힍힎힏힑",6,"힚힜힞",5],["c6a1","퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],["c7a1","퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],["c8a1","혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],["caa1","伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],["cba1","匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],["cca1","瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],["cda1","棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],["cea1","科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],["cfa1","區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],["d0a1","鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],["d1a1","朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",5,"那樂",4,"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],["d2a1","納臘蠟衲囊娘廊",4,"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",5,"駑魯",10,"濃籠聾膿農惱牢磊腦賂雷尿壘",7,"嫩訥杻紐勒",5,"能菱陵尼泥匿溺多茶"],["d3a1","丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],["d4a1","棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],["d5a1","蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],["d6a1","煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],["d7a1","遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],["d8a1","立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],["d9a1","蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],["daa1","汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],["dba1","發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],["dca1","碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],["dda1","孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],["dea1","脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],["dfa1","傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],["e0a1","胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],["e1a1","聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],["e2a1","戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],["e3a1","嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],["e4a1","沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],["e5a1","櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],["e6a1","旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],["e7a1","簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],["e8a1","烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],["e9a1","窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],["eaa1","運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],["eba1","濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],["eca1","議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],["eda1","立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],["eea1","障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],["efa1","煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],["f0a1","靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],["f1a1","踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],["f2a1","咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],["f3a1","鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],["f4a1","責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],["f5a1","椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],["f6a1","贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],["f7a1","鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],["f8a1","阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],["f9a1","品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],["faa1","行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],["fba1","形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],["fca1","禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],["fda1","爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]]');

/***/ }),

/***/ 5606:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = __webpack_require__(4324);
var Writable = __webpack_require__(6868);
__webpack_require__(7835)(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

/***/ }),

/***/ 5657:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.onErrorResumeNext = void 0;
var Observable_1 = __webpack_require__(541);
var argsOrArgArray_1 = __webpack_require__(7882);
var OperatorSubscriber_1 = __webpack_require__(1908);
var noop_1 = __webpack_require__(8563);
var innerFrom_1 = __webpack_require__(2018);
function onErrorResumeNext() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var nextSources = argsOrArgArray_1.argsOrArgArray(sources);
    return new Observable_1.Observable(function (subscriber) {
        var sourceIndex = 0;
        var subscribeNext = function () {
            if (sourceIndex < nextSources.length) {
                var nextSource = void 0;
                try {
                    nextSource = innerFrom_1.innerFrom(nextSources[sourceIndex++]);
                }
                catch (err) {
                    subscribeNext();
                    return;
                }
                var innerSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, undefined, noop_1.noop, noop_1.noop);
                nextSource.subscribe(innerSubscriber);
                innerSubscriber.add(subscribeNext);
            }
            else {
                subscriber.complete();
            }
        };
        subscribeNext();
    });
}
exports.onErrorResumeNext = onErrorResumeNext;
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),

/***/ 5689:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mergeAll = void 0;
var mergeMap_1 = __webpack_require__(4344);
var identity_1 = __webpack_require__(8489);
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    return mergeMap_1.mergeMap(identity_1.identity, concurrent);
}
exports.mergeAll = mergeAll;
//# sourceMappingURL=mergeAll.js.map

/***/ }),

/***/ 5739:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var QRMath = __webpack_require__(6543);

function QRPolynomial(num, shift) {
	if (num.length === undefined) {
		throw new Error(num.length + "/" + shift);
	}

	var offset = 0;

	while (offset < num.length && num[offset] === 0) {
		offset++;
	}

	this.num = new Array(num.length - offset + shift);
	for (var i = 0; i < num.length - offset; i++) {
		this.num[i] = num[i + offset];
	}
}

QRPolynomial.prototype = {

	get : function(index) {
		return this.num[index];
	},
	
	getLength : function() {
		return this.num.length;
	},
	
	multiply : function(e) {
	
		var num = new Array(this.getLength() + e.getLength() - 1);
	
		for (var i = 0; i < this.getLength(); i++) {
			for (var j = 0; j < e.getLength(); j++) {
				num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i) ) + QRMath.glog(e.get(j) ) );
			}
		}
	
		return new QRPolynomial(num, 0);
	},
	
	mod : function(e) {
	
		if (this.getLength() - e.getLength() < 0) {
			return this;
		}
	
		var ratio = QRMath.glog(this.get(0) ) - QRMath.glog(e.get(0) );
	
		var num = new Array(this.getLength() );
		
		for (var i = 0; i < this.getLength(); i++) {
			num[i] = this.get(i);
		}
		
		for (var x = 0; x < e.getLength(); x++) {
			num[x] ^= QRMath.gexp(QRMath.glog(e.get(x) ) + ratio);
		}
	
		// recursive call
		return new QRPolynomial(num, 0).mod(e);
	}
};

module.exports = QRPolynomial;


/***/ }),

/***/ 5743:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = __webpack_require__(4483)
const compare = __webpack_require__(7910)
module.exports = (versions, range, options) => {
  const set = []
  let first = null
  let prev = null
  const v = versions.sort((a, b) => compare(a, b, options))
  for (const version of v) {
    const included = satisfies(version, range, options)
    if (included) {
      prev = version
      if (!first) {
        first = version
      }
    } else {
      if (prev) {
        set.push([first, prev])
      }
      prev = null
      first = null
    }
  }
  if (first) {
    set.push([first, null])
  }

  const ranges = []
  for (const [min, max] of set) {
    if (min === max) {
      ranges.push(min)
    } else if (!max && min === v[0]) {
      ranges.push('*')
    } else if (!max) {
      ranges.push(`>=${min}`)
    } else if (min === v[0]) {
      ranges.push(`<=${max}`)
    } else {
      ranges.push(`${min} - ${max}`)
    }
  }
  const simplified = ranges.join(' || ')
  const original = typeof range.raw === 'string' ? range.raw : String(range)
  return simplified.length < original.length ? simplified : range
}


/***/ }),

/***/ 5757:
/***/ ((module) => {


module.exports = function(det, rec, confidence, name, lang) {
  this.confidence = confidence;
  this.name = name || rec.name(det);
  this.lang = lang;
};


/***/ }),

/***/ 5765:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const stringWidth = __webpack_require__(3258);
const stripAnsi = __webpack_require__(7160);
const ansiStyles = __webpack_require__(3005);

const ESCAPES = new Set([
	'\u001B',
	'\u009B'
]);

const END_CODE = 39;

const wrapAnsi = code => `${ESCAPES.values().next().value}[${code}m`;

// Calculate the length of words split on ' ', ignoring
// the extra characters added by ansi escape codes
const wordLengths = string => string.split(' ').map(character => stringWidth(character));

// Wrap a long word across multiple rows
// Ansi escape codes do not count towards length
const wrapWord = (rows, word, columns) => {
	const characters = [...word];

	let isInsideEscape = false;
	let visible = stringWidth(stripAnsi(rows[rows.length - 1]));

	for (const [index, character] of characters.entries()) {
		const characterLength = stringWidth(character);

		if (visible + characterLength <= columns) {
			rows[rows.length - 1] += character;
		} else {
			rows.push(character);
			visible = 0;
		}

		if (ESCAPES.has(character)) {
			isInsideEscape = true;
		} else if (isInsideEscape && character === 'm') {
			isInsideEscape = false;
			continue;
		}

		if (isInsideEscape) {
			continue;
		}

		visible += characterLength;

		if (visible === columns && index < characters.length - 1) {
			rows.push('');
			visible = 0;
		}
	}

	// It's possible that the last row we copy over is only
	// ansi escape characters, handle this edge-case
	if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
		rows[rows.length - 2] += rows.pop();
	}
};

// Trims spaces from a string ignoring invisible sequences
const stringVisibleTrimSpacesRight = str => {
	const words = str.split(' ');
	let last = words.length;

	while (last > 0) {
		if (stringWidth(words[last - 1]) > 0) {
			break;
		}

		last--;
	}

	if (last === words.length) {
		return str;
	}

	return words.slice(0, last).join(' ') + words.slice(last).join('');
};

// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode
//
// 'hard' will never allow a string to take up more than columns characters
//
// 'soft' allows long words to expand past the column length
const exec = (string, columns, options = {}) => {
	if (options.trim !== false && string.trim() === '') {
		return '';
	}

	let pre = '';
	let ret = '';
	let escapeCode;

	const lengths = wordLengths(string);
	let rows = [''];

	for (const [index, word] of string.split(' ').entries()) {
		if (options.trim !== false) {
			rows[rows.length - 1] = rows[rows.length - 1].trimLeft();
		}

		let rowLength = stringWidth(rows[rows.length - 1]);

		if (index !== 0) {
			if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
				// If we start with a new word but the current row length equals the length of the columns, add a new row
				rows.push('');
				rowLength = 0;
			}

			if (rowLength > 0 || options.trim === false) {
				rows[rows.length - 1] += ' ';
				rowLength++;
			}
		}

		// In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'
		if (options.hard && lengths[index] > columns) {
			const remainingColumns = (columns - rowLength);
			const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
			const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
			if (breaksStartingNextLine < breaksStartingThisLine) {
				rows.push('');
			}

			wrapWord(rows, word, columns);
			continue;
		}

		if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
			if (options.wordWrap === false && rowLength < columns) {
				wrapWord(rows, word, columns);
				continue;
			}

			rows.push('');
		}

		if (rowLength + lengths[index] > columns && options.wordWrap === false) {
			wrapWord(rows, word, columns);
			continue;
		}

		rows[rows.length - 1] += word;
	}

	if (options.trim !== false) {
		rows = rows.map(stringVisibleTrimSpacesRight);
	}

	pre = rows.join('\n');

	for (const [index, character] of [...pre].entries()) {
		ret += character;

		if (ESCAPES.has(character)) {
			const code = parseFloat(/\d[^m]*/.exec(pre.slice(index, index + 4)));
			escapeCode = code === END_CODE ? null : code;
		}

		const code = ansiStyles.codes.get(Number(escapeCode));

		if (escapeCode && code) {
			if (pre[index + 1] === '\n') {
				ret += wrapAnsi(code);
			} else if (character === '\n') {
				ret += wrapAnsi(escapeCode);
			}
		}
	}

	return ret;
};

// For each newline, invoke the method separately
module.exports = (string, columns, options) => {
	return String(string)
		.normalize()
		.replace(/\r\n/g, '\n')
		.split('\n')
		.map(line => exec(line, columns, options))
		.join('\n');
};


/***/ }),

/***/ 5767:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compare = __webpack_require__(7910)
const eq = (a, b, loose) => compare(a, b, loose) === 0
module.exports = eq


/***/ }),

/***/ 5779:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnsubscriptionError = void 0;
var createErrorClass_1 = __webpack_require__(8377);
exports.UnsubscriptionError = createErrorClass_1.createErrorClass(function (_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors
            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
            : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});
//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),

/***/ 5899:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.share = void 0;
var innerFrom_1 = __webpack_require__(2018);
var Subject_1 = __webpack_require__(6118);
var Subscriber_1 = __webpack_require__(2554);
var lift_1 = __webpack_require__(4698);
function share(options) {
    if (options === void 0) { options = {}; }
    var _a = options.connector, connector = _a === void 0 ? function () { return new Subject_1.Subject(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
    return function (wrapperSource) {
        var connection;
        var resetConnection;
        var subject;
        var refCount = 0;
        var hasCompleted = false;
        var hasErrored = false;
        var cancelReset = function () {
            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
            resetConnection = undefined;
        };
        var reset = function () {
            cancelReset();
            connection = subject = undefined;
            hasCompleted = hasErrored = false;
        };
        var resetAndUnsubscribe = function () {
            var conn = connection;
            reset();
            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
        };
        return lift_1.operate(function (source, subscriber) {
            refCount++;
            if (!hasErrored && !hasCompleted) {
                cancelReset();
            }
            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
            subscriber.add(function () {
                refCount--;
                if (refCount === 0 && !hasErrored && !hasCompleted) {
                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
                }
            });
            dest.subscribe(subscriber);
            if (!connection &&
                refCount > 0) {
                connection = new Subscriber_1.SafeSubscriber({
                    next: function (value) { return dest.next(value); },
                    error: function (err) {
                        hasErrored = true;
                        cancelReset();
                        resetConnection = handleReset(reset, resetOnError, err);
                        dest.error(err);
                    },
                    complete: function () {
                        hasCompleted = true;
                        cancelReset();
                        resetConnection = handleReset(reset, resetOnComplete);
                        dest.complete();
                    },
                });
                innerFrom_1.innerFrom(source).subscribe(connection);
            }
        })(wrapperSource);
    };
}
exports.share = share;
function handleReset(reset, on) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (on === true) {
        reset();
        return;
    }
    if (on === false) {
        return;
    }
    var onSubscriber = new Subscriber_1.SafeSubscriber({
        next: function () {
            onSubscriber.unsubscribe();
            reset();
        },
    });
    return innerFrom_1.innerFrom(on.apply(void 0, __spreadArray([], __read(args)))).subscribe(onSubscriber);
}
//# sourceMappingURL=share.js.map

/***/ }),

/***/ 5910:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SequenceError = void 0;
var createErrorClass_1 = __webpack_require__(8377);
exports.SequenceError = createErrorClass_1.createErrorClass(function (_super) {
    return function SequenceErrorImpl(message) {
        _super(this);
        this.name = 'SequenceError';
        this.message = message;
    };
});
//# sourceMappingURL=SequenceError.js.map

/***/ }),

/***/ 5960:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsyncSubject = void 0;
var Subject_1 = __webpack_require__(6118);
var AsyncSubject = (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._value = null;
        _this._hasValue = false;
        _this._isComplete = false;
        return _this;
    }
    AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped || _isComplete) {
            _hasValue && subscriber.next(_value);
            subscriber.complete();
        }
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.isStopped) {
            this._value = value;
            this._hasValue = true;
        }
    };
    AsyncSubject.prototype.complete = function () {
        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
        if (!_isComplete) {
            this._isComplete = true;
            _hasValue && _super.prototype.next.call(this, _value);
            _super.prototype.complete.call(this);
        }
    };
    return AsyncSubject;
}(Subject_1.Subject));
exports.AsyncSubject = AsyncSubject;
//# sourceMappingURL=AsyncSubject.js.map

/***/ }),

/***/ 5962:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exhaust = void 0;
var exhaustAll_1 = __webpack_require__(8079);
exports.exhaust = exhaustAll_1.exhaustAll;
//# sourceMappingURL=exhaust.js.map

/***/ }),

/***/ 5964:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.animationFrameProvider = void 0;
var Subscription_1 = __webpack_require__(1981);
exports.animationFrameProvider = {
    schedule: function (callback) {
        var request = requestAnimationFrame;
        var cancel = cancelAnimationFrame;
        var delegate = exports.animationFrameProvider.delegate;
        if (delegate) {
            request = delegate.requestAnimationFrame;
            cancel = delegate.cancelAnimationFrame;
        }
        var handle = request(function (timestamp) {
            cancel = undefined;
            callback(timestamp);
        });
        return new Subscription_1.Subscription(function () { return cancel === null || cancel === void 0 ? void 0 : cancel(handle); });
    },
    requestAnimationFrame: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var delegate = exports.animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
    },
    cancelAnimationFrame: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var delegate = exports.animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
    },
    delegate: undefined,
};
//# sourceMappingURL=animationFrameProvider.js.map

/***/ }),

/***/ 5970:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsyncAction = void 0;
var Action_1 = __webpack_require__(2776);
var intervalProvider_1 = __webpack_require__(6258);
var arrRemove_1 = __webpack_require__(6864);
var AsyncAction = (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
        if (delay === void 0) { delay = 0; }
        return intervalProvider_1.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay != null && this.delay === delay && this.pending === false) {
            return id;
        }
        if (id != null) {
            intervalProvider_1.intervalProvider.clearInterval(id);
        }
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, _delay) {
        var errored = false;
        var errorValue;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = e ? e : new Error('Scheduled action threw falsy error');
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype.unsubscribe = function () {
        if (!this.closed) {
            var _a = this, id = _a.id, scheduler = _a.scheduler;
            var actions = scheduler.actions;
            this.work = this.state = this.scheduler = null;
            this.pending = false;
            arrRemove_1.arrRemove(actions, this);
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
            _super.prototype.unsubscribe.call(this);
        }
    };
    return AsyncAction;
}(Action_1.Action));
exports.AsyncAction = AsyncAction;
//# sourceMappingURL=AsyncAction.js.map

/***/ }),

/***/ 5977:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const debug = __webpack_require__(3750);
const utils = __webpack_require__(1444);
const tableLayout = __webpack_require__(2309);

class Table extends Array {
  constructor(opts) {
    super();

    const options = utils.mergeOptions(opts);
    Object.defineProperty(this, 'options', {
      value: options,
      enumerable: options.debug,
    });

    if (options.debug) {
      switch (typeof options.debug) {
        case 'boolean':
          debug.setDebugLevel(debug.WARN);
          break;
        case 'number':
          debug.setDebugLevel(options.debug);
          break;
        case 'string':
          debug.setDebugLevel(parseInt(options.debug, 10));
          break;
        default:
          debug.setDebugLevel(debug.WARN);
          debug.warn(`Debug option is expected to be boolean, number, or string. Received a ${typeof options.debug}`);
      }
      Object.defineProperty(this, 'messages', {
        get() {
          return debug.debugMessages();
        },
      });
    }
  }

  toString() {
    let array = this;
    let headersPresent = this.options.head && this.options.head.length;
    if (headersPresent) {
      array = [this.options.head];
      if (this.length) {
        array.push.apply(array, this);
      }
    } else {
      this.options.style.head = [];
    }

    let cells = tableLayout.makeTableLayout(array);

    cells.forEach(function (row) {
      row.forEach(function (cell) {
        cell.mergeTableOptions(this.options, cells);
      }, this);
    }, this);

    tableLayout.computeWidths(this.options.colWidths, cells);
    tableLayout.computeHeights(this.options.rowHeights, cells);

    cells.forEach(function (row) {
      row.forEach(function (cell) {
        cell.init(this.options);
      }, this);
    }, this);

    let result = [];

    for (let rowIndex = 0; rowIndex < cells.length; rowIndex++) {
      let row = cells[rowIndex];
      let heightOfRow = this.options.rowHeights[rowIndex];

      if (rowIndex === 0 || !this.options.style.compact || (rowIndex == 1 && headersPresent)) {
        doDraw(row, 'top', result);
      }

      for (let lineNum = 0; lineNum < heightOfRow; lineNum++) {
        doDraw(row, lineNum, result);
      }

      if (rowIndex + 1 == cells.length) {
        doDraw(row, 'bottom', result);
      }
    }

    return result.join('\n');
  }

  get width() {
    let str = this.toString().split('\n');
    return str[0].length;
  }
}

Table.reset = () => debug.reset();

function doDraw(row, lineNum, result) {
  let line = [];
  row.forEach(function (cell) {
    line.push(cell.draw(lineNum));
  });
  let str = line.join('');
  if (str.length) result.push(str);
}

module.exports = Table;


/***/ }),

/***/ 6027:
/***/ ((module) => {


const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

const ESCAPES = new Map([
	['n', '\n'],
	['r', '\r'],
	['t', '\t'],
	['b', '\b'],
	['f', '\f'],
	['v', '\v'],
	['0', '\0'],
	['\\', '\\'],
	['e', '\u001B'],
	['a', '\u0007']
]);

function unescape(c) {
	const u = c[0] === 'u';
	const bracket = c[1] === '{';

	if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
		return String.fromCharCode(parseInt(c.slice(1), 16));
	}

	if (u && bracket) {
		return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
	}

	return ESCAPES.get(c) || c;
}

function parseArguments(name, arguments_) {
	const results = [];
	const chunks = arguments_.trim().split(/\s*,\s*/g);
	let matches;

	for (const chunk of chunks) {
		const number = Number(chunk);
		if (!Number.isNaN(number)) {
			results.push(number);
		} else if ((matches = chunk.match(STRING_REGEX))) {
			results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
		} else {
			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
		}
	}

	return results;
}

function parseStyle(style) {
	STYLE_REGEX.lastIndex = 0;

	const results = [];
	let matches;

	while ((matches = STYLE_REGEX.exec(style)) !== null) {
		const name = matches[1];

		if (matches[2]) {
			const args = parseArguments(name, matches[2]);
			results.push([name].concat(args));
		} else {
			results.push([name]);
		}
	}

	return results;
}

function buildStyle(chalk, styles) {
	const enabled = {};

	for (const layer of styles) {
		for (const style of layer.styles) {
			enabled[style[0]] = layer.inverse ? null : style.slice(1);
		}
	}

	let current = chalk;
	for (const [styleName, styles] of Object.entries(enabled)) {
		if (!Array.isArray(styles)) {
			continue;
		}

		if (!(styleName in current)) {
			throw new Error(`Unknown Chalk style: ${styleName}`);
		}

		current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
	}

	return current;
}

module.exports = (chalk, temporary) => {
	const styles = [];
	const chunks = [];
	let chunk = [];

	// eslint-disable-next-line max-params
	temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
		if (escapeCharacter) {
			chunk.push(unescape(escapeCharacter));
		} else if (style) {
			const string = chunk.join('');
			chunk = [];
			chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
			styles.push({inverse, styles: parseStyle(style)});
		} else if (close) {
			if (styles.length === 0) {
				throw new Error('Found extraneous } in Chalk template literal');
			}

			chunks.push(buildStyle(chalk, styles)(chunk.join('')));
			chunk = [];
			styles.pop();
		} else {
			chunk.push(character);
		}
	});

	chunks.push(chunk.join(''));

	if (styles.length > 0) {
		const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
		throw new Error(errMessage);
	}

	return chunks.join('');
};


/***/ }),

/***/ 6035:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scheduleIterable = void 0;
var Observable_1 = __webpack_require__(541);
var iterator_1 = __webpack_require__(4789);
var isFunction_1 = __webpack_require__(8403);
var executeSchedule_1 = __webpack_require__(7725);
function scheduleIterable(input, scheduler) {
    return new Observable_1.Observable(function (subscriber) {
        var iterator;
        executeSchedule_1.executeSchedule(subscriber, scheduler, function () {
            iterator = input[iterator_1.iterator]();
            executeSchedule_1.executeSchedule(subscriber, scheduler, function () {
                var _a;
                var value;
                var done;
                try {
                    (_a = iterator.next(), value = _a.value, done = _a.done);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                }
            }, 0, true);
        });
        return function () { return isFunction_1.isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
    });
}
exports.scheduleIterable = scheduleIterable;
//# sourceMappingURL=scheduleIterable.js.map

/***/ }),

/***/ 6118:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnonymousSubject = exports.Subject = void 0;
var Observable_1 = __webpack_require__(541);
var Subscription_1 = __webpack_require__(1981);
var ObjectUnsubscribedError_1 = __webpack_require__(2625);
var arrRemove_1 = __webpack_require__(6864);
var errorContext_1 = __webpack_require__(798);
var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
    };
    Subject.prototype.next = function (value) {
        var _this = this;
        errorContext_1.errorContext(function () {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                }
                try {
                    for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    Subject.prototype.error = function (err) {
        var _this = this;
        errorContext_1.errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().error(err);
                }
            }
        });
    };
    Subject.prototype.complete = function () {
        var _this = this;
        errorContext_1.errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().complete();
                }
            }
        });
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function () {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function (subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function (subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
            return Subscription_1.EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription_1.Subscription(function () {
            _this.currentObservers = null;
            arrRemove_1.arrRemove(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped) {
            subscriber.complete();
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function (err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function () {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : Subscription_1.EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map

/***/ }),

/***/ 6140:
/***/ ((module) => {

function stringify (obj, { EOL = '\n', finalEOL = true, replacer = null, spaces } = {}) {
  const EOF = finalEOL ? EOL : ''
  const str = JSON.stringify(obj, replacer, spaces)

  return str.replace(/\n/g, EOL) + EOF
}

function stripBom (content) {
  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
  if (Buffer.isBuffer(content)) content = content.toString('utf8')
  return content.replace(/^\uFEFF/, '')
}

module.exports = { stringify, stripBom }


/***/ }),

/***/ 6192:
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ 6193:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bufferCount = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var arrRemove_1 = __webpack_require__(6864);
function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) { startBufferEvery = null; }
    startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
    return lift_1.operate(function (source, subscriber) {
        var buffers = [];
        var count = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var e_1, _a, e_2, _b;
            var toEmit = null;
            if (count++ % startBufferEvery === 0) {
                buffers.push([]);
            }
            try {
                for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
                    var buffer = buffers_1_1.value;
                    buffer.push(value);
                    if (bufferSize <= buffer.length) {
                        toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
                        toEmit.push(buffer);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (toEmit) {
                try {
                    for (var toEmit_1 = __values(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
                        var buffer = toEmit_1_1.value;
                        arrRemove_1.arrRemove(buffers, buffer);
                        subscriber.next(buffer);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }, function () {
            var e_3, _a;
            try {
                for (var buffers_2 = __values(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
                    var buffer = buffers_2_1.value;
                    subscriber.next(buffer);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
            subscriber.complete();
        }, undefined, function () {
            buffers = null;
        }));
    });
}
exports.bufferCount = bufferCount;
//# sourceMappingURL=bufferCount.js.map

/***/ }),

/***/ 6206:
/***/ ((__unused_webpack_module, exports) => {

const maxDistance = 3;

function editDistance(a, b) {
  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance
  // Calculating optimal string alignment distance, no substring is edited more than once.
  // (Simple implementation.)

  // Quick early exit, return worst case.
  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length);

  // distance between prefix substrings of a and b
  const d = [];

  // pure deletions turn a into empty string
  for (let i = 0; i <= a.length; i++) {
    d[i] = [i];
  }
  // pure insertions turn empty string into b
  for (let j = 0; j <= b.length; j++) {
    d[0][j] = j;
  }

  // fill matrix
  for (let j = 1; j <= b.length; j++) {
    for (let i = 1; i <= a.length; i++) {
      let cost = 1;
      if (a[i - 1] === b[j - 1]) {
        cost = 0;
      } else {
        cost = 1;
      }
      d[i][j] = Math.min(
        d[i - 1][j] + 1, // deletion
        d[i][j - 1] + 1, // insertion
        d[i - 1][j - 1] + cost // substitution
      );
      // transposition
      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);
      }
    }
  }

  return d[a.length][b.length];
}

/**
 * Find close matches, restricted to same number of edits.
 *
 * @param {string} word
 * @param {string[]} candidates
 * @returns {string}
 */

function suggestSimilar(word, candidates) {
  if (!candidates || candidates.length === 0) return '';
  // remove possible duplicates
  candidates = Array.from(new Set(candidates));

  const searchingOptions = word.startsWith('--');
  if (searchingOptions) {
    word = word.slice(2);
    candidates = candidates.map(candidate => candidate.slice(2));
  }

  let similar = [];
  let bestDistance = maxDistance;
  const minSimilarity = 0.4;
  candidates.forEach((candidate) => {
    if (candidate.length <= 1) return; // no one character guesses

    const distance = editDistance(word, candidate);
    const length = Math.max(word.length, candidate.length);
    const similarity = (length - distance) / length;
    if (similarity > minSimilarity) {
      if (distance < bestDistance) {
        // better edit distance, throw away previous worse matches
        bestDistance = distance;
        similar = [candidate];
      } else if (distance === bestDistance) {
        similar.push(candidate);
      }
    }
  });

  similar.sort((a, b) => a.localeCompare(b));
  if (searchingOptions) {
    similar = similar.map(candidate => `--${candidate}`);
  }

  if (similar.length > 1) {
    return `\n(Did you mean one of ${similar.join(', ')}?)`;
  }
  if (similar.length === 1) {
    return `\n(Did you mean ${similar[0]}?)`;
  }
  return '';
}

exports.suggestSimilar = suggestSimilar;


/***/ }),

/***/ 6218:
/***/ ((module) => {



module.exports = ({stream = process.stdout} = {}) => {
	return Boolean(
		stream && stream.isTTY &&
		process.env.TERM !== 'dumb' &&
		!('CI' in process.env)
	);
};


/***/ }),

/***/ 6226:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.distinct = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var noop_1 = __webpack_require__(8563);
var innerFrom_1 = __webpack_require__(2018);
function distinct(keySelector, flushes) {
    return lift_1.operate(function (source, subscriber) {
        var distinctKeys = new Set();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var key = keySelector ? keySelector(value) : value;
            if (!distinctKeys.has(key)) {
                distinctKeys.add(key);
                subscriber.next(value);
            }
        }));
        flushes && innerFrom_1.innerFrom(flushes).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () { return distinctKeys.clear(); }, noop_1.noop));
    });
}
exports.distinct = distinct;
//# sourceMappingURL=distinct.js.map

/***/ }),

/***/ 6231:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const compareBuild = (a, b, loose) => {
  const versionA = new SemVer(a, loose)
  const versionB = new SemVer(b, loose)
  return versionA.compare(versionB) || versionA.compareBuild(versionB)
}
module.exports = compareBuild


/***/ }),

/***/ 6257:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.observeOn = void 0;
var executeSchedule_1 = __webpack_require__(7725);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return lift_1.operate(function (source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) { return executeSchedule_1.executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule_1.executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule_1.executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
    });
}
exports.observeOn = observeOn;
//# sourceMappingURL=observeOn.js.map

/***/ }),

/***/ 6258:
/***/ (function(__unused_webpack_module, exports) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.intervalProvider = void 0;
exports.intervalProvider = {
    setInterval: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = exports.intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
            return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearInterval: function (handle) {
        var delegate = exports.intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=intervalProvider.js.map

/***/ }),

/***/ 6268:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.timestamp = void 0;
var dateTimestampProvider_1 = __webpack_require__(1549);
var map_1 = __webpack_require__(3982);
function timestamp(timestampProvider) {
    if (timestampProvider === void 0) { timestampProvider = dateTimestampProvider_1.dateTimestampProvider; }
    return map_1.map(function (value) { return ({ value: value, timestamp: timestampProvider.now() }); });
}
exports.timestamp = timestamp;
//# sourceMappingURL=timestamp.js.map

/***/ }),

/***/ 6273:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var QRCode = __webpack_require__(2304),
    QRErrorCorrectLevel = __webpack_require__(543),
    black = "\x1b[40m  \x1b[0m",
    white = "\x1b[47m  \x1b[0m",
    toCell = function (isBlack) {
        return isBlack ? black : white;
    },
    repeat = function (color) {
        return {
            times: function (count) {
                return new Array(count).join(color);
            }
        };
    },
    fill = function(length, value) {
        var arr = new Array(length);
        for (var i = 0; i < length; i++) {
            arr[i] = value;
        }
        return arr;
    };

module.exports = {

    error: QRErrorCorrectLevel.L,

    generate: function (input, opts, cb) {
        if (typeof opts === 'function') {
            cb = opts;
            opts = {};
        }

        var qrcode = new QRCode(-1, this.error);
        qrcode.addData(input);
        qrcode.make();

        var output = '';
        if (opts && opts.small) {
            var BLACK = true, WHITE = false;
            var moduleCount = qrcode.getModuleCount();
            var moduleData = qrcode.modules.slice();

            var oddRow = moduleCount % 2 === 1;
            if (oddRow) {
                moduleData.push(fill(moduleCount, WHITE));
            }

            var platte= {
                WHITE_ALL: '\u2588',
                WHITE_BLACK: '\u2580',
                BLACK_WHITE: '\u2584',
                BLACK_ALL: ' ',
            };

            var borderTop = repeat(platte.BLACK_WHITE).times(moduleCount + 3);
            var borderBottom = repeat(platte.WHITE_BLACK).times(moduleCount + 3);
            output += borderTop + '\n';

            for (var row = 0; row < moduleCount; row += 2) {
                output += platte.WHITE_ALL;

                for (var col = 0; col < moduleCount; col++) {
                    if (moduleData[row][col] === WHITE && moduleData[row + 1][col] === WHITE) {
                        output += platte.WHITE_ALL;
                    } else if (moduleData[row][col] === WHITE && moduleData[row + 1][col] === BLACK) {
                        output += platte.WHITE_BLACK;
                    } else if (moduleData[row][col] === BLACK && moduleData[row + 1][col] === WHITE) {
                        output += platte.BLACK_WHITE;
                    } else {
                        output += platte.BLACK_ALL;
                    }
                }

                output += platte.WHITE_ALL + '\n';
            }

            if (!oddRow) {
                output += borderBottom;
            }
        } else {
            var border = repeat(white).times(qrcode.getModuleCount() + 3);

            output += border + '\n';
            qrcode.modules.forEach(function (row) {
                output += white;
                output += row.map(toCell).join(''); 
                output += white + '\n';
            });
            output += border;
        }

        if (cb) cb(output);
        else console.log(output);
    },

    setErrorLevel: function (error) {
        this.error = QRErrorCorrectLevel[error] || this.error;
    }

};


/***/ }),

/***/ 6311:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generate = void 0;
var identity_1 = __webpack_require__(8489);
var isScheduler_1 = __webpack_require__(7242);
var defer_1 = __webpack_require__(1258);
var scheduleIterable_1 = __webpack_require__(6035);
function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
    var _a, _b;
    var resultSelector;
    var initialState;
    if (arguments.length === 1) {
        (_a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity_1.identity : _b, scheduler = _a.scheduler);
    }
    else {
        initialState = initialStateOrOptions;
        if (!resultSelectorOrScheduler || isScheduler_1.isScheduler(resultSelectorOrScheduler)) {
            resultSelector = identity_1.identity;
            scheduler = resultSelectorOrScheduler;
        }
        else {
            resultSelector = resultSelectorOrScheduler;
        }
    }
    function gen() {
        var state;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    state = initialState;
                    _a.label = 1;
                case 1:
                    if (!(!condition || condition(state))) return [3, 4];
                    return [4, resultSelector(state)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    state = iterate(state);
                    return [3, 1];
                case 4: return [2];
            }
        });
    }
    return defer_1.defer((scheduler
        ?
            function () { return scheduleIterable_1.scheduleIterable(gen(), scheduler); }
        :
            gen));
}
exports.generate = generate;
//# sourceMappingURL=generate.js.map

/***/ }),

/***/ 6448:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const fs = __webpack_require__(6903)
const path = __webpack_require__(6928)
const { mkdirs } = __webpack_require__(4544)
const { pathExists } = __webpack_require__(802)
const { utimesMillis } = __webpack_require__(5421)
const stat = __webpack_require__(1560)

async function copy (src, dest, opts = {}) {
  if (typeof opts === 'function') {
    opts = { filter: opts }
  }

  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now
  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber

  // Warn about using preserveTimestamps on 32-bit node
  if (opts.preserveTimestamps && process.arch === 'ia32') {
    process.emitWarning(
      'Using the preserveTimestamps option in 32-bit node is not recommended;\n\n' +
      '\tsee https://github.com/jprichardson/node-fs-extra/issues/269',
      'Warning', 'fs-extra-WARN0001'
    )
  }

  const { srcStat, destStat } = await stat.checkPaths(src, dest, 'copy', opts)

  await stat.checkParentPaths(src, srcStat, dest, 'copy')

  const include = await runFilter(src, dest, opts)

  if (!include) return

  // check if the parent of dest exists, and create it if it doesn't exist
  const destParent = path.dirname(dest)
  const dirExists = await pathExists(destParent)
  if (!dirExists) {
    await mkdirs(destParent)
  }

  await getStatsAndPerformCopy(destStat, src, dest, opts)
}

async function runFilter (src, dest, opts) {
  if (!opts.filter) return true
  return opts.filter(src, dest)
}

async function getStatsAndPerformCopy (destStat, src, dest, opts) {
  const statFn = opts.dereference ? fs.stat : fs.lstat
  const srcStat = await statFn(src)

  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)

  if (
    srcStat.isFile() ||
    srcStat.isCharacterDevice() ||
    srcStat.isBlockDevice()
  ) return onFile(srcStat, destStat, src, dest, opts)

  if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)
  if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)
  if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)
  throw new Error(`Unknown file: ${src}`)
}

async function onFile (srcStat, destStat, src, dest, opts) {
  if (!destStat) return copyFile(srcStat, src, dest, opts)

  if (opts.overwrite) {
    await fs.unlink(dest)
    return copyFile(srcStat, src, dest, opts)
  }
  if (opts.errorOnExist) {
    throw new Error(`'${dest}' already exists`)
  }
}

async function copyFile (srcStat, src, dest, opts) {
  await fs.copyFile(src, dest)
  if (opts.preserveTimestamps) {
    // Make sure the file is writable before setting the timestamp
    // otherwise open fails with EPERM when invoked with 'r+'
    // (through utimes call)
    if (fileIsNotWritable(srcStat.mode)) {
      await makeFileWritable(dest, srcStat.mode)
    }

    // Set timestamps and mode correspondingly

    // Note that The initial srcStat.atime cannot be trusted
    // because it is modified by the read(2) system call
    // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
    const updatedSrcStat = await fs.stat(src)
    await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime)
  }

  return fs.chmod(dest, srcStat.mode)
}

function fileIsNotWritable (srcMode) {
  return (srcMode & 0o200) === 0
}

function makeFileWritable (dest, srcMode) {
  return fs.chmod(dest, srcMode | 0o200)
}

async function onDir (srcStat, destStat, src, dest, opts) {
  // the dest directory might not exist, create it
  if (!destStat) {
    await fs.mkdir(dest)
  }

  const promises = []

  // loop through the files in the current directory to copy everything
  for await (const item of await fs.opendir(src)) {
    const srcItem = path.join(src, item.name)
    const destItem = path.join(dest, item.name)

    promises.push(
      runFilter(srcItem, destItem, opts).then(include => {
        if (include) {
          // only copy the item if it matches the filter function
          return stat.checkPaths(srcItem, destItem, 'copy', opts).then(({ destStat }) => {
            // If the item is a copyable file, `getStatsAndPerformCopy` will copy it
            // If the item is a directory, `getStatsAndPerformCopy` will call `onDir` recursively
            return getStatsAndPerformCopy(destStat, srcItem, destItem, opts)
          })
        }
      })
    )
  }

  await Promise.all(promises)

  if (!destStat) {
    await fs.chmod(dest, srcStat.mode)
  }
}

async function onLink (destStat, src, dest, opts) {
  let resolvedSrc = await fs.readlink(src)
  if (opts.dereference) {
    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)
  }
  if (!destStat) {
    return fs.symlink(resolvedSrc, dest)
  }

  let resolvedDest = null
  try {
    resolvedDest = await fs.readlink(dest)
  } catch (e) {
    // dest exists and is a regular file or directory,
    // Windows may throw UNKNOWN error. If dest already exists,
    // fs throws error anyway, so no need to guard against it here.
    if (e.code === 'EINVAL' || e.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest)
    throw e
  }
  if (opts.dereference) {
    resolvedDest = path.resolve(process.cwd(), resolvedDest)
  }
  if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
    throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)
  }

  // do not copy if src is a subdir of dest since unlinking
  // dest in this case would result in removing src contents
  // and therefore a broken symlink would be created.
  if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
    throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)
  }

  // copy the link
  await fs.unlink(dest)
  return fs.symlink(resolvedSrc, dest)
}

module.exports = copy


/***/ }),

/***/ 6463:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const parse = __webpack_require__(9002)
const valid = (version, options) => {
  const v = parse(version, options)
  return v ? v.version : null
}
module.exports = valid


/***/ }),

/***/ 6478:
/***/ ((module) => {



// Manually added data to be used by sbcs codec in addition to generated one.

module.exports = {
    // Not supported by iconv, not sure why.
    "10029": "maccenteuro",
    "maccenteuro": {
        "type": "_sbcs",
        "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
    },

    "808": "cp808",
    "ibm808": "cp808",
    "cp808": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
    },

    "mik": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },

    // Aliases of generated encodings.
    "ascii8bit": "ascii",
    "usascii": "ascii",
    "ansix34": "ascii",
    "ansix341968": "ascii",
    "ansix341986": "ascii",
    "csascii": "ascii",
    "cp367": "ascii",
    "ibm367": "ascii",
    "isoir6": "ascii",
    "iso646us": "ascii",
    "iso646irv": "ascii",
    "us": "ascii",

    "latin1": "iso88591",
    "latin2": "iso88592",
    "latin3": "iso88593",
    "latin4": "iso88594",
    "latin5": "iso88599",
    "latin6": "iso885910",
    "latin7": "iso885913",
    "latin8": "iso885914",
    "latin9": "iso885915",
    "latin10": "iso885916",

    "csisolatin1": "iso88591",
    "csisolatin2": "iso88592",
    "csisolatin3": "iso88593",
    "csisolatin4": "iso88594",
    "csisolatincyrillic": "iso88595",
    "csisolatinarabic": "iso88596",
    "csisolatingreek" : "iso88597",
    "csisolatinhebrew": "iso88598",
    "csisolatin5": "iso88599",
    "csisolatin6": "iso885910",

    "l1": "iso88591",
    "l2": "iso88592",
    "l3": "iso88593",
    "l4": "iso88594",
    "l5": "iso88599",
    "l6": "iso885910",
    "l7": "iso885913",
    "l8": "iso885914",
    "l9": "iso885915",
    "l10": "iso885916",

    "isoir14": "iso646jp",
    "isoir57": "iso646cn",
    "isoir100": "iso88591",
    "isoir101": "iso88592",
    "isoir109": "iso88593",
    "isoir110": "iso88594",
    "isoir144": "iso88595",
    "isoir127": "iso88596",
    "isoir126": "iso88597",
    "isoir138": "iso88598",
    "isoir148": "iso88599",
    "isoir157": "iso885910",
    "isoir166": "tis620",
    "isoir179": "iso885913",
    "isoir199": "iso885914",
    "isoir203": "iso885915",
    "isoir226": "iso885916",

    "cp819": "iso88591",
    "ibm819": "iso88591",

    "cyrillic": "iso88595",

    "arabic": "iso88596",
    "arabic8": "iso88596",
    "ecma114": "iso88596",
    "asmo708": "iso88596",

    "greek" : "iso88597",
    "greek8" : "iso88597",
    "ecma118" : "iso88597",
    "elot928" : "iso88597",

    "hebrew": "iso88598",
    "hebrew8": "iso88598",

    "turkish": "iso88599",
    "turkish8": "iso88599",

    "thai": "iso885911",
    "thai8": "iso885911",

    "celtic": "iso885914",
    "celtic8": "iso885914",
    "isoceltic": "iso885914",

    "tis6200": "tis620",
    "tis62025291": "tis620",
    "tis62025330": "tis620",

    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",

    "cspc8codepage437": "cp437",
    "cspc775baltic": "cp775",
    "cspc850multilingual": "cp850",
    "cspcp852": "cp852",
    "cspc862latinhebrew": "cp862",
    "cpgr": "cp869",

    "msee": "cp1250",
    "mscyrl": "cp1251",
    "msansi": "cp1252",
    "msgreek": "cp1253",
    "msturk": "cp1254",
    "mshebr": "cp1255",
    "msarab": "cp1256",
    "winbaltrim": "cp1257",

    "cp20866": "koi8r",
    "20866": "koi8r",
    "ibm878": "koi8r",
    "cskoi8r": "koi8r",

    "cp21866": "koi8u",
    "21866": "koi8u",
    "ibm1168": "koi8u",

    "strk10482002": "rk1048",

    "tcvn5712": "tcvn",
    "tcvn57121": "tcvn",

    "gb198880": "iso646cn",
    "cn": "iso646cn",

    "csiso14jisc6220ro": "iso646jp",
    "jisc62201969ro": "iso646jp",
    "jp": "iso646jp",

    "cshproman8": "hproman8",
    "r8": "hproman8",
    "roman8": "hproman8",
    "xroman8": "hproman8",
    "ibm1051": "hproman8",

    "mac": "macintosh",
    "csmacintosh": "macintosh",
};



/***/ }),

/***/ 6482:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.window = void 0;
var Subject_1 = __webpack_require__(6118);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var noop_1 = __webpack_require__(8563);
var innerFrom_1 = __webpack_require__(2018);
function window(windowBoundaries) {
    return lift_1.operate(function (source, subscriber) {
        var windowSubject = new Subject_1.Subject();
        subscriber.next(windowSubject.asObservable());
        var errorHandler = function (err) {
            windowSubject.error(err);
            subscriber.error(err);
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) { return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value); }, function () {
            windowSubject.complete();
            subscriber.complete();
        }, errorHandler));
        innerFrom_1.innerFrom(windowBoundaries).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
            windowSubject.complete();
            subscriber.next((windowSubject = new Subject_1.Subject()));
        }, noop_1.noop, errorHandler));
        return function () {
            windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
            windowSubject = null;
        };
    });
}
exports.window = window;
//# sourceMappingURL=window.js.map

/***/ }),

/***/ 6531:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const Range = __webpack_require__(9165)
const gt = __webpack_require__(8014)

const minVersion = (range, loose) => {
  range = new Range(range, loose)

  let minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let setMin = null
    comparators.forEach((comparator) => {
      // Clone to avoid manipulating the comparator's semver object.
      const compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!setMin || gt(compver, setMin)) {
            setMin = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error(`Unexpected operation: ${comparator.operator}`)
      }
    })
    if (setMin && (!minver || gt(minver, setMin))) {
      minver = setMin
    }
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}
module.exports = minVersion


/***/ }),

/***/ 6540:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.debounceTime = void 0;
var async_1 = __webpack_require__(7688);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.asyncScheduler; }
    return lift_1.operate(function (source, subscriber) {
        var activeTask = null;
        var lastValue = null;
        var lastTime = null;
        var emit = function () {
            if (activeTask) {
                activeTask.unsubscribe();
                activeTask = null;
                var value = lastValue;
                lastValue = null;
                subscriber.next(value);
            }
        };
        function emitWhenIdle() {
            var targetTime = lastTime + dueTime;
            var now = scheduler.now();
            if (now < targetTime) {
                activeTask = this.schedule(undefined, targetTime - now);
                subscriber.add(activeTask);
                return;
            }
            emit();
        }
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            lastValue = value;
            lastTime = scheduler.now();
            if (!activeTask) {
                activeTask = scheduler.schedule(emitWhenIdle, dueTime);
                subscriber.add(activeTask);
            }
        }, function () {
            emit();
            subscriber.complete();
        }, undefined, function () {
            lastValue = activeTask = null;
        }));
    });
}
exports.debounceTime = debounceTime;
//# sourceMappingURL=debounceTime.js.map

/***/ }),

/***/ 6543:
/***/ ((module) => {

var QRMath = {

	glog : function(n) {
	
		if (n < 1) {
			throw new Error("glog(" + n + ")");
		}
		
		return QRMath.LOG_TABLE[n];
	},
	
	gexp : function(n) {
	
		while (n < 0) {
			n += 255;
		}
	
		while (n >= 256) {
			n -= 255;
		}
	
		return QRMath.EXP_TABLE[n];
	},
	
	EXP_TABLE : new Array(256),
	
	LOG_TABLE : new Array(256)

};
	
for (var i = 0; i < 8; i++) {
	QRMath.EXP_TABLE[i] = 1 << i;
}
for (var i = 8; i < 256; i++) {
	QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]
		^ QRMath.EXP_TABLE[i - 5]
		^ QRMath.EXP_TABLE[i - 6]
		^ QRMath.EXP_TABLE[i - 8];
}
for (var i = 0; i < 255; i++) {
	QRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;
}

module.exports = QRMath;


/***/ }),

/***/ 6546:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArgumentOutOfRangeError = void 0;
var createErrorClass_1 = __webpack_require__(8377);
exports.ArgumentOutOfRangeError = createErrorClass_1.createErrorClass(function (_super) {
    return function ArgumentOutOfRangeErrorImpl() {
        _super(this);
        this.name = 'ArgumentOutOfRangeError';
        this.message = 'argument out of range';
    };
});
//# sourceMappingURL=ArgumentOutOfRangeError.js.map

/***/ }),

/***/ 6574:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.concatWith = void 0;
var concat_1 = __webpack_require__(6674);
function concatWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return concat_1.concat.apply(void 0, __spreadArray([], __read(otherSources)));
}
exports.concatWith = concatWith;
//# sourceMappingURL=concatWith.js.map

/***/ }),

/***/ 6603:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createInvalidObservableTypeError = void 0;
function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
exports.createInvalidObservableTypeError = createInvalidObservableTypeError;
//# sourceMappingURL=throwUnobservableError.js.map

/***/ }),

/***/ 6626:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.throwIfEmpty = void 0;
var EmptyError_1 = __webpack_require__(9866);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
    return lift_1.operate(function (source, subscriber) {
        var hasValue = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            subscriber.next(value);
        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
    });
}
exports.throwIfEmpty = throwIfEmpty;
function defaultErrorFactory() {
    return new EmptyError_1.EmptyError();
}
//# sourceMappingURL=throwIfEmpty.js.map

/***/ }),

/***/ 6656:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compare = __webpack_require__(7910)
const rcompare = (a, b, loose) => compare(b, a, loose)
module.exports = rcompare


/***/ }),

/***/ 6671:
/***/ ((module, exports, __webpack_require__) => {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(181)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ 6672:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mergeWith = void 0;
var merge_1 = __webpack_require__(808);
function mergeWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return merge_1.merge.apply(void 0, __spreadArray([], __read(otherSources)));
}
exports.mergeWith = mergeWith;
//# sourceMappingURL=mergeWith.js.map

/***/ }),

/***/ 6674:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.concat = void 0;
var lift_1 = __webpack_require__(4698);
var concatAll_1 = __webpack_require__(84);
var args_1 = __webpack_require__(3522);
var from_1 = __webpack_require__(7568);
function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_1.popScheduler(args);
    return lift_1.operate(function (source, subscriber) {
        concatAll_1.concatAll()(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
    });
}
exports.concat = concat;
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ 6716:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimationFrameScheduler = void 0;
var AsyncScheduler_1 = __webpack_require__(5031);
var AnimationFrameScheduler = (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this._active = true;
        var flushId;
        if (action) {
            flushId = action.id;
        }
        else {
            flushId = this._scheduled;
            this._scheduled = undefined;
        }
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
            while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AnimationFrameScheduler = AnimationFrameScheduler;
//# sourceMappingURL=AnimationFrameScheduler.js.map

/***/ }),

/***/ 6760:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:path");

/***/ }),

/***/ 6762:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const spinners = Object.assign({}, __webpack_require__(3877)); // eslint-disable-line import/extensions

const spinnersList = Object.keys(spinners);

Object.defineProperty(spinners, 'random', {
	get() {
		const randomIndex = Math.floor(Math.random() * spinnersList.length);
		const spinnerName = spinnersList[randomIndex];
		return spinners[spinnerName];
	}
});

module.exports = spinners;


/***/ }),

/***/ 6824:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ inquirer_lib)
});

// UNUSED EXPORTS: createPromptModule

// EXTERNAL MODULE: ./node_modules/.pnpm/ansi-escapes@4.3.2/node_modules/ansi-escapes/index.js
var ansi_escapes = __webpack_require__(1482);
// EXTERNAL MODULE: ./node_modules/.pnpm/yoctocolors-cjs@2.1.3/node_modules/yoctocolors-cjs/index.js
var yoctocolors_cjs = __webpack_require__(1980);
// EXTERNAL MODULE: external "node:process"
var external_node_process_ = __webpack_require__(1708);
;// ./node_modules/.pnpm/@inquirer+figures@1.0.13/node_modules/@inquirer/figures/dist/esm/index.js
// process.env dot-notation access prints:
// Property 'TERM' comes from an index signature, so it must be accessed with ['TERM'].ts(4111)
/* eslint dot-notation: ["off"] */

// Ported from is-unicode-supported
function isUnicodeSupported() {
    if (external_node_process_.platform !== 'win32') {
        return external_node_process_.env['TERM'] !== 'linux'; // Linux console (kernel)
    }
    return (Boolean(external_node_process_.env['WT_SESSION']) || // Windows Terminal
        Boolean(external_node_process_.env['TERMINUS_SUBLIME']) || // Terminus (<0.2.27)
        external_node_process_.env['ConEmuTask'] === '{cmd::Cmder}' || // ConEmu and cmder
        external_node_process_.env['TERM_PROGRAM'] === 'Terminus-Sublime' ||
        external_node_process_.env['TERM_PROGRAM'] === 'vscode' ||
        external_node_process_.env['TERM'] === 'xterm-256color' ||
        external_node_process_.env['TERM'] === 'alacritty' ||
        external_node_process_.env['TERMINAL_EMULATOR'] === 'JetBrains-JediTerm');
}
// Ported from figures
const common = {
    circleQuestionMark: '(?)',
    questionMarkPrefix: '(?)',
    square: '█',
    squareDarkShade: '▓',
    squareMediumShade: '▒',
    squareLightShade: '░',
    squareTop: '▀',
    squareBottom: '▄',
    squareLeft: '▌',
    squareRight: '▐',
    squareCenter: '■',
    bullet: '●',
    dot: '․',
    ellipsis: '…',
    pointerSmall: '›',
    triangleUp: '▲',
    triangleUpSmall: '▴',
    triangleDown: '▼',
    triangleDownSmall: '▾',
    triangleLeftSmall: '◂',
    triangleRightSmall: '▸',
    home: '⌂',
    heart: '♥',
    musicNote: '♪',
    musicNoteBeamed: '♫',
    arrowUp: '↑',
    arrowDown: '↓',
    arrowLeft: '←',
    arrowRight: '→',
    arrowLeftRight: '↔',
    arrowUpDown: '↕',
    almostEqual: '≈',
    notEqual: '≠',
    lessOrEqual: '≤',
    greaterOrEqual: '≥',
    identical: '≡',
    infinity: '∞',
    subscriptZero: '₀',
    subscriptOne: '₁',
    subscriptTwo: '₂',
    subscriptThree: '₃',
    subscriptFour: '₄',
    subscriptFive: '₅',
    subscriptSix: '₆',
    subscriptSeven: '₇',
    subscriptEight: '₈',
    subscriptNine: '₉',
    oneHalf: '½',
    oneThird: '⅓',
    oneQuarter: '¼',
    oneFifth: '⅕',
    oneSixth: '⅙',
    oneEighth: '⅛',
    twoThirds: '⅔',
    twoFifths: '⅖',
    threeQuarters: '¾',
    threeFifths: '⅗',
    threeEighths: '⅜',
    fourFifths: '⅘',
    fiveSixths: '⅚',
    fiveEighths: '⅝',
    sevenEighths: '⅞',
    line: '─',
    lineBold: '━',
    lineDouble: '═',
    lineDashed0: '┄',
    lineDashed1: '┅',
    lineDashed2: '┈',
    lineDashed3: '┉',
    lineDashed4: '╌',
    lineDashed5: '╍',
    lineDashed6: '╴',
    lineDashed7: '╶',
    lineDashed8: '╸',
    lineDashed9: '╺',
    lineDashed10: '╼',
    lineDashed11: '╾',
    lineDashed12: '−',
    lineDashed13: '–',
    lineDashed14: '‐',
    lineDashed15: '⁃',
    lineVertical: '│',
    lineVerticalBold: '┃',
    lineVerticalDouble: '║',
    lineVerticalDashed0: '┆',
    lineVerticalDashed1: '┇',
    lineVerticalDashed2: '┊',
    lineVerticalDashed3: '┋',
    lineVerticalDashed4: '╎',
    lineVerticalDashed5: '╏',
    lineVerticalDashed6: '╵',
    lineVerticalDashed7: '╷',
    lineVerticalDashed8: '╹',
    lineVerticalDashed9: '╻',
    lineVerticalDashed10: '╽',
    lineVerticalDashed11: '╿',
    lineDownLeft: '┐',
    lineDownLeftArc: '╮',
    lineDownBoldLeftBold: '┓',
    lineDownBoldLeft: '┒',
    lineDownLeftBold: '┑',
    lineDownDoubleLeftDouble: '╗',
    lineDownDoubleLeft: '╖',
    lineDownLeftDouble: '╕',
    lineDownRight: '┌',
    lineDownRightArc: '╭',
    lineDownBoldRightBold: '┏',
    lineDownBoldRight: '┎',
    lineDownRightBold: '┍',
    lineDownDoubleRightDouble: '╔',
    lineDownDoubleRight: '╓',
    lineDownRightDouble: '╒',
    lineUpLeft: '┘',
    lineUpLeftArc: '╯',
    lineUpBoldLeftBold: '┛',
    lineUpBoldLeft: '┚',
    lineUpLeftBold: '┙',
    lineUpDoubleLeftDouble: '╝',
    lineUpDoubleLeft: '╜',
    lineUpLeftDouble: '╛',
    lineUpRight: '└',
    lineUpRightArc: '╰',
    lineUpBoldRightBold: '┗',
    lineUpBoldRight: '┖',
    lineUpRightBold: '┕',
    lineUpDoubleRightDouble: '╚',
    lineUpDoubleRight: '╙',
    lineUpRightDouble: '╘',
    lineUpDownLeft: '┤',
    lineUpBoldDownBoldLeftBold: '┫',
    lineUpBoldDownBoldLeft: '┨',
    lineUpDownLeftBold: '┥',
    lineUpBoldDownLeftBold: '┩',
    lineUpDownBoldLeftBold: '┪',
    lineUpDownBoldLeft: '┧',
    lineUpBoldDownLeft: '┦',
    lineUpDoubleDownDoubleLeftDouble: '╣',
    lineUpDoubleDownDoubleLeft: '╢',
    lineUpDownLeftDouble: '╡',
    lineUpDownRight: '├',
    lineUpBoldDownBoldRightBold: '┣',
    lineUpBoldDownBoldRight: '┠',
    lineUpDownRightBold: '┝',
    lineUpBoldDownRightBold: '┡',
    lineUpDownBoldRightBold: '┢',
    lineUpDownBoldRight: '┟',
    lineUpBoldDownRight: '┞',
    lineUpDoubleDownDoubleRightDouble: '╠',
    lineUpDoubleDownDoubleRight: '╟',
    lineUpDownRightDouble: '╞',
    lineDownLeftRight: '┬',
    lineDownBoldLeftBoldRightBold: '┳',
    lineDownLeftBoldRightBold: '┯',
    lineDownBoldLeftRight: '┰',
    lineDownBoldLeftBoldRight: '┱',
    lineDownBoldLeftRightBold: '┲',
    lineDownLeftRightBold: '┮',
    lineDownLeftBoldRight: '┭',
    lineDownDoubleLeftDoubleRightDouble: '╦',
    lineDownDoubleLeftRight: '╥',
    lineDownLeftDoubleRightDouble: '╤',
    lineUpLeftRight: '┴',
    lineUpBoldLeftBoldRightBold: '┻',
    lineUpLeftBoldRightBold: '┷',
    lineUpBoldLeftRight: '┸',
    lineUpBoldLeftBoldRight: '┹',
    lineUpBoldLeftRightBold: '┺',
    lineUpLeftRightBold: '┶',
    lineUpLeftBoldRight: '┵',
    lineUpDoubleLeftDoubleRightDouble: '╩',
    lineUpDoubleLeftRight: '╨',
    lineUpLeftDoubleRightDouble: '╧',
    lineUpDownLeftRight: '┼',
    lineUpBoldDownBoldLeftBoldRightBold: '╋',
    lineUpDownBoldLeftBoldRightBold: '╈',
    lineUpBoldDownLeftBoldRightBold: '╇',
    lineUpBoldDownBoldLeftRightBold: '╊',
    lineUpBoldDownBoldLeftBoldRight: '╉',
    lineUpBoldDownLeftRight: '╀',
    lineUpDownBoldLeftRight: '╁',
    lineUpDownLeftBoldRight: '┽',
    lineUpDownLeftRightBold: '┾',
    lineUpBoldDownBoldLeftRight: '╂',
    lineUpDownLeftBoldRightBold: '┿',
    lineUpBoldDownLeftBoldRight: '╃',
    lineUpBoldDownLeftRightBold: '╄',
    lineUpDownBoldLeftBoldRight: '╅',
    lineUpDownBoldLeftRightBold: '╆',
    lineUpDoubleDownDoubleLeftDoubleRightDouble: '╬',
    lineUpDoubleDownDoubleLeftRight: '╫',
    lineUpDownLeftDoubleRightDouble: '╪',
    lineCross: '╳',
    lineBackslash: '╲',
    lineSlash: '╱',
};
const specialMainSymbols = {
    tick: '✔',
    info: 'ℹ',
    warning: '⚠',
    cross: '✘',
    squareSmall: '◻',
    squareSmallFilled: '◼',
    circle: '◯',
    circleFilled: '◉',
    circleDotted: '◌',
    circleDouble: '◎',
    circleCircle: 'ⓞ',
    circleCross: 'ⓧ',
    circlePipe: 'Ⓘ',
    radioOn: '◉',
    radioOff: '◯',
    checkboxOn: '☒',
    checkboxOff: '☐',
    checkboxCircleOn: 'ⓧ',
    checkboxCircleOff: 'Ⓘ',
    pointer: '❯',
    triangleUpOutline: '△',
    triangleLeft: '◀',
    triangleRight: '▶',
    lozenge: '◆',
    lozengeOutline: '◇',
    hamburger: '☰',
    smiley: '㋡',
    mustache: '෴',
    star: '★',
    play: '▶',
    nodejs: '⬢',
    oneSeventh: '⅐',
    oneNinth: '⅑',
    oneTenth: '⅒',
};
const specialFallbackSymbols = {
    tick: '√',
    info: 'i',
    warning: '‼',
    cross: '×',
    squareSmall: '□',
    squareSmallFilled: '■',
    circle: '( )',
    circleFilled: '(*)',
    circleDotted: '( )',
    circleDouble: '( )',
    circleCircle: '(○)',
    circleCross: '(×)',
    circlePipe: '(│)',
    radioOn: '(*)',
    radioOff: '( )',
    checkboxOn: '[×]',
    checkboxOff: '[ ]',
    checkboxCircleOn: '(×)',
    checkboxCircleOff: '( )',
    pointer: '>',
    triangleUpOutline: '∆',
    triangleLeft: '◄',
    triangleRight: '►',
    lozenge: '♦',
    lozengeOutline: '◊',
    hamburger: '≡',
    smiley: '☺',
    mustache: '┌─┐',
    star: '✶',
    play: '►',
    nodejs: '♦',
    oneSeventh: '1/7',
    oneNinth: '1/9',
    oneTenth: '1/10',
};
const mainSymbols = { ...common, ...specialMainSymbols };
const fallbackSymbols = {
    ...common,
    ...specialFallbackSymbols,
};
const shouldUseMain = isUnicodeSupported();
const figures = shouldUseMain ? mainSymbols : fallbackSymbols;
/* harmony default export */ const esm = (figures);
const replacements = Object.entries(specialMainSymbols);
// On terminals which do not support Unicode symbols, substitute them to other symbols
const replaceSymbols = (string, { useFallback = !shouldUseMain } = {}) => {
    if (useFallback) {
        for (const [key, mainSymbol] of replacements) {
            const fallbackSymbol = fallbackSymbols[key];
            if (!fallbackSymbol) {
                throw new Error(`Unable to find fallback for ${key}`);
            }
            string = string.replaceAll(mainSymbol, fallbackSymbol);
        }
    }
    return string;
};

// EXTERNAL MODULE: ./node_modules/.pnpm/run-async@3.0.0/node_modules/run-async/index.js
var run_async = __webpack_require__(2474);
// EXTERNAL MODULE: ./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/cjs/index.js
var cjs = __webpack_require__(1530);
;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/utils/events.js


function normalizeKeypressEvents(value, key) {
  return { value, key: key || {} };
}

function observe(rl) {
  const keypress = (0,cjs.fromEvent)(rl.input, 'keypress', normalizeKeypressEvents)
    .pipe((0,cjs.takeUntil)((0,cjs.fromEvent)(rl, 'close')))
    // Ignore `enter` key. On the readline, we only care about the `line` event.
    .pipe((0,cjs.filter)(({ key }) => key.name !== 'enter' && key.name !== 'return'));

  return {
    line: (0,cjs.fromEvent)(rl, 'line'),
    keypress,

    normalizedUpKey: keypress.pipe(
      (0,cjs.filter)(
        ({ key }) =>
          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl),
      ),
      (0,cjs.share)(),
    ),

    normalizedDownKey: keypress.pipe(
      (0,cjs.filter)(
        ({ key }) =>
          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl),
      ),
      (0,cjs.share)(),
    ),

    numberKey: keypress.pipe(
      (0,cjs.filter)((e) => e.value && '123456789'.includes(e.value)),
      (0,cjs.map)((e) => Number(e.value)),
      (0,cjs.share)(),
    ),

    spaceKey: keypress.pipe(
      (0,cjs.filter)(({ key }) => key && key.name === 'space'),
      (0,cjs.share)(),
    ),
    aKey: keypress.pipe(
      (0,cjs.filter)(({ key }) => key && key.name === 'a'),
      (0,cjs.share)(),
    ),
    iKey: keypress.pipe(
      (0,cjs.filter)(({ key }) => key && key.name === 'i'),
      (0,cjs.share)(),
    ),
  };
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/utils/paginator.js


/**
 * The paginator returns a subset of the choices if the list is too long.
 */

class Paginator {
  /**
   * @param {import("./screen-manager")} [screen]
   * @param {{isInfinite?: boolean}} [options]
   */
  constructor(screen, options = {}) {
    const { isInfinite = true } = options;
    this.lastIndex = 0;
    this.screen = screen;
    this.isInfinite = isInfinite;
  }

  paginate(output, active, pageSize) {
    pageSize ||= 7;
    let lines = output.split('\n');

    if (this.screen) {
      lines = this.screen.breakLines(lines);
      active = lines
        .map((lineParts) => lineParts.length)
        .splice(0, active)
        .reduce((a, b) => a + b, 0);
      lines = lines.flat();
    }

    // Make sure there's enough lines to paginate
    if (lines.length <= pageSize) {
      return output;
    }
    const visibleLines = this.isInfinite
      ? this.getInfiniteLines(lines, active, pageSize)
      : this.getFiniteLines(lines, active, pageSize);
    this.lastIndex = active;
    return (
      visibleLines.join('\n') +
      '\n' +
      yoctocolors_cjs.dim('(Move up and down to reveal more choices)')
    );
  }

  getInfiniteLines(lines, active, pageSize) {
    if (this.pointer === undefined) {
      this.pointer = 0;
    }
    const middleOfList = Math.floor(pageSize / 2);
    // Move the pointer only when the user go down and limit it to the middle of the list
    if (
      this.pointer < middleOfList &&
      this.lastIndex < active &&
      active - this.lastIndex < pageSize
    ) {
      this.pointer = Math.min(middleOfList, this.pointer + active - this.lastIndex);
    }

    // Duplicate the lines so it give an infinite list look
    const infinite = [lines, lines, lines].flat();
    const topIndex = Math.max(0, active + lines.length - this.pointer);

    return infinite.splice(topIndex, pageSize);
  }

  getFiniteLines(lines, active, pageSize) {
    let topIndex = active - pageSize / 2;
    if (topIndex < 0) {
      topIndex = 0;
    } else if (topIndex + pageSize > lines.length) {
      topIndex = lines.length - pageSize;
    }
    return lines.splice(topIndex, pageSize);
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/utils/incrementListIndex.js
function incrementListIndex(current, dir, opt) {
  const len = opt.choices.realLength;
  const shouldLoop = 'loop' in opt ? Boolean(opt.loop) : true;
  if (dir === 'up') {
    if (current > 0) {
      return current - 1;
    }
    return shouldLoop ? len - 1 : current;
  }
  if (dir === 'down') {
    if (current < len - 1) {
      return current + 1;
    }
    return shouldLoop ? 0 : current;
  }
  throw new Error('dir must be up or down');
}

;// external "node:assert"
const external_node_assert_namespaceObject = __WEBPACK_EXTERNAL_createRequire_require("node:assert");
;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/objects/separator.js



/**
 * Separator object
 * Used to space/separate choices group
 * @constructor
 * @param {String} line   Separation line content (facultative)
 */

class Separator {
  constructor(line) {
    this.type = 'separator';
    this.line = yoctocolors_cjs.dim(line || Array.from({ length: 15 }).join(esm.line));
  }

  /**
   * Helper function returning false if object is a separator
   * @param  {Object} obj object to test against
   * @return {Boolean}    `false` if object is a separator
   */
  static exclude(obj) {
    return obj.type !== 'separator';
  }

  /**
   * Stringify separator
   * @return {String} the separator display string
   */
  toString() {
    return this.line;
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/objects/choice.js
/**
 * Choice object
 * Normalize input as choice object
 * @constructor
 * @param {Number|String|Object} val  Choice value. If an object is passed, it should contains
 *                                    at least one of `value` or `name` property
 */

class Choice {
  constructor(val, answers) {
    // Don't process Choice and Separator object
    if (val instanceof Choice || val.type === 'separator') {
      return val;
    }

    if (typeof val === 'string' || typeof val === 'number') {
      this.name = String(val);
      this.value = val;
      this.short = String(val);
    } else {
      Object.assign(this, val, {
        name: val.name || val.value,
        value: 'value' in val ? val.value : val.name,
        short: val.short || val.name || val.value,
      });
    }

    this.disabled =
      typeof val.disabled === 'function' ? val.disabled(answers) : val.disabled;
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/objects/choices.js





/**
 * Choices collection
 * Collection of multiple `choice` object
 */
class Choices {
  /** @param {Array} choices  All `choice` to keep in the collection */
  constructor(choices, answers) {
    this.choices = choices.map((val) => {
      if (val.type === 'separator') {
        if (!(val instanceof Separator)) {
          val = new Separator(val.line);
        }

        return val;
      }

      return new Choice(val, answers);
    });

    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);

    Object.defineProperty(this, 'length', {
      get() {
        return this.choices.length;
      },
      set(val) {
        this.choices.length = val;
      },
    });

    Object.defineProperty(this, 'realLength', {
      get() {
        return this.realChoices.length;
      },
      set() {
        throw new Error('Cannot set `realLength` of a Choices collection');
      },
    });
  }

  [Symbol.iterator]() {
    const data = this.choices;
    let index = -1;

    return {
      next: () => ({ value: data[++index], done: !(index in data) }),
    };
  }

  /**
   * Get a valid choice from the collection
   * @param  {Number} selector  The selected choice index
   * @return {Choice|Undefined} Return the matched choice or undefined
   */
  getChoice(selector) {
    external_node_assert_namespaceObject(typeof selector === 'number');
    return this.realChoices[selector];
  }

  /**
   * Get a raw element from the collection
   * @param  {Number} selector  The selected index value
   * @return {Choice|Undefined} Return the matched choice or undefined
   */
  get(selector) {
    external_node_assert_namespaceObject(typeof selector === 'number');
    return this.choices[selector];
  }

  /**
   * Match the valid choices against a where clause
   * @param  {Function|Object} whereClause filter function or key-value object to match against
   * @return {Array}              Matching choices or empty array
   */
  where(whereClause) {
    let filterFn;
    if (typeof whereClause === 'function') {
      filterFn = whereClause;
    } else {
      const [key, value] = Object.entries(whereClause)[0];
      filterFn = (choice) => choice[key] === value;
    }

    return this.realChoices.filter(filterFn);
  }

  /**
   * Pluck a particular key from the choices
   * @param  {String} propertyName Property name to select
   * @return {Array}               Selected properties
   */
  pluck(propertyName) {
    return this.realChoices.map((choice) => choice[propertyName]);
  }

  // Expose usual Array methods
  indexOf(...args) {
    return this.choices.indexOf(...args);
  }

  forEach(...args) {
    return this.choices.forEach(...args);
  }

  filter(...args) {
    return this.choices.filter(...args);
  }

  reduce(...args) {
    return this.choices.reduce(...args);
  }

  find(func) {
    return this.choices.find(func);
  }

  some(func) {
    return this.choices.some(func);
  }

  push(...args) {
    const objs = args.map((val) => new Choice(val));
    this.choices.push(...objs);
    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);
    return this.choices;
  }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/cli-width@4.1.0/node_modules/cli-width/index.js
var cli_width = __webpack_require__(8834);
// EXTERNAL MODULE: ./node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js
var wrap_ansi = __webpack_require__(5765);
// EXTERNAL MODULE: ./node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js
var strip_ansi = __webpack_require__(7160);
// EXTERNAL MODULE: ./node_modules/.pnpm/string-width@4.2.3/node_modules/string-width/index.js
var string_width = __webpack_require__(3258);
// EXTERNAL MODULE: ./node_modules/.pnpm/ora@5.4.1/node_modules/ora/index.js
var ora = __webpack_require__(3577);
;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/utils/readline.js


/**
 * Move cursor left by `x`
 * @param  {Readline} rl - Readline instance
 * @param  {Number}   x  - How far to go left (default to 1)
 */

const left = function (rl, x) {
  rl.output.write(ansi_escapes.cursorBackward(x));
};

/**
 * Move cursor right by `x`
 * @param  {Readline} rl - Readline instance
 * @param  {Number}   x  - How far to go left (default to 1)
 */

const right = function (rl, x) {
  rl.output.write(ansi_escapes.cursorForward(x));
};

/**
 * Move cursor up by `x`
 * @param  {Readline} rl - Readline instance
 * @param  {Number}   x  - How far to go up (default to 1)
 */

const up = function (rl, x) {
  rl.output.write(ansi_escapes.cursorUp(x));
};

/**
 * Move cursor down by `x`
 * @param  {Readline} rl - Readline instance
 * @param  {Number}   x  - How far to go down (default to 1)
 */

const down = function (rl, x) {
  rl.output.write(ansi_escapes.cursorDown(x));
};

/**
 * Clear current line
 * @param  {Readline} rl  - Readline instance
 * @param  {Number}   len - number of line to delete
 */
const clearLine = function (rl, len) {
  rl.output.write(ansi_escapes.eraseLines(len));
};

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/utils/screen-manager.js








function height(content) {
  return content.split('\n').length;
}

/** @param {string} content */
function lastLine(content) {
  return content.split('\n').pop();
}

class ScreenManager {
  constructor(rl) {
    // These variables are keeping information to allow correct prompt re-rendering
    this.height = 0;
    this.extraLinesUnderPrompt = 0;

    this.rl = rl;
  }

  renderWithSpinner(content, bottomContent) {
    if (this.spinnerId) {
      clearInterval(this.spinnerId);
    }

    let spinner;
    let contentFunc;
    let bottomContentFunc;

    if (bottomContent) {
      spinner = ora(bottomContent);
      contentFunc = () => content;
      bottomContentFunc = () => spinner.frame();
    } else {
      spinner = ora(content);
      contentFunc = () => spinner.frame();
      bottomContentFunc = () => '';
    }

    this.spinnerId = setInterval(
      () => this.render(contentFunc(), bottomContentFunc(), true),
      spinner.interval,
    );
  }

  render(content, bottomContent, spinning = false) {
    if (this.spinnerId && !spinning) {
      clearInterval(this.spinnerId);
    }

    this.rl.output.unmute();
    this.clean(this.extraLinesUnderPrompt);

    /**
     * Write message to screen and setPrompt to control backspace
     */

    const promptLine = lastLine(content);
    const rawPromptLine = strip_ansi(promptLine);

    // Remove the rl.line from our prompt. We can't rely on the content of
    // rl.line (mainly because of the password prompt), so just rely on it's
    // length.
    let prompt = rawPromptLine;
    if (this.rl.line.length > 0) {
      prompt = prompt.slice(0, -this.rl.line.length);
    }

    this.rl.setPrompt(prompt);

    // SetPrompt will change cursor position, now we can get correct value
    const cursorPos = this.rl._getCursorPos();
    const width = this.normalizedCliWidth();

    content = this.forceLineReturn(content, width);
    bottomContent &&= this.forceLineReturn(bottomContent, width);

    // Manually insert an extra line if we're at the end of the line.
    // This prevent the cursor from appearing at the beginning of the
    // current line.
    if (rawPromptLine.length % width === 0) {
      content += '\n';
    }

    const fullContent = content + (bottomContent ? '\n' + bottomContent : '');
    this.rl.output.write(fullContent);

    /**
     * Re-adjust the cursor at the correct position.
     */

    // We need to consider parts of the prompt under the cursor as part of the bottom
    // content in order to correctly cleanup and re-render.
    const promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;
    const bottomContentHeight =
      promptLineUpDiff + (bottomContent ? height(bottomContent) : 0);
    if (bottomContentHeight > 0) {
      up(this.rl, bottomContentHeight);
    }

    // Reset cursor at the beginning of the line
    left(this.rl, string_width(lastLine(fullContent)));

    // Adjust cursor on the right
    if (cursorPos.cols > 0) {
      right(this.rl, cursorPos.cols);
    }

    /**
     * Set up state for next re-rendering
     */
    this.extraLinesUnderPrompt = bottomContentHeight;
    this.height = height(fullContent);

    this.rl.output.mute();
  }

  clean(extraLines) {
    if (extraLines > 0) {
      down(this.rl, extraLines);
    }

    clearLine(this.rl, this.height);
  }

  done() {
    this.rl.setPrompt('');
    this.rl.output.unmute();
    this.rl.output.write(`\n${ansi_escapes.cursorShow}`);
  }

  releaseCursor() {
    if (this.extraLinesUnderPrompt > 0) {
      down(this.rl, this.extraLinesUnderPrompt);
    }
  }

  normalizedCliWidth() {
    const width = cli_width({
      defaultWidth: 80,
      output: this.rl.output,
    });
    return width;
  }

  /**
   * @param {string[]} lines
   */
  breakLines(lines, width = this.normalizedCliWidth()) {
    // Break lines who're longer than the cli width so we can normalize the natural line
    // returns behavior across terminals.
    // re: trim: false; by default, `wrap-ansi` trims whitespace, which
    // is not what we want.
    // re: hard: true; by default', `wrap-ansi` does soft wrapping
    return lines.map((line) =>
      wrap_ansi(line, width, { trim: false, hard: true }).split('\n'),
    );
  }

  /**
   * @param {string} content
   */
  forceLineReturn(content, width = this.normalizedCliWidth()) {
    return this.breakLines(content.split('\n'), width).flat().join('\n');
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/base.js
/**
 * Base prompt implementation
 * Should be extended by prompt types.
 */






class Prompt {
  constructor(question, rl, answers) {
    // Setup instance defaults property
    Object.assign(this, {
      answers,
      status: 'pending',
    });

    // Set defaults prompt options
    this.opt = {
      validate: () => true,
      validatingText: '',
      filter: (val) => val,
      filteringText: '',
      when: () => true,
      suffix: '',
      prefix: yoctocolors_cjs.green('?'),
      transformer: (val) => val,
      ...question,
    };

    // Make sure name is present
    if (!this.opt.name) {
      this.throwParamError('name');
    }

    // Set default message if no message defined
    this.opt.message ||= this.opt.name + ':';

    // Normalize choices
    if (Array.isArray(this.opt.choices)) {
      this.opt.choices = new Choices(this.opt.choices, answers);
    }

    this.rl = rl;
    this.screen = new ScreenManager(this.rl);
  }

  /**
   * Start the Inquiry session and manage output value filtering
   * @return {Promise}
   */

  run() {
    return new Promise((resolve, reject) => {
      this._run(
        (value) => resolve(value),
        (error) => reject(error),
      );
    });
  }

  // Default noop (this one should be overwritten in prompts)
  _run(cb) {
    cb();
  }

  /**
   * Throw an error telling a required parameter is missing
   * @param  {String} name Name of the missing param
   * @return {Throw Error}
   */

  throwParamError(name) {
    throw new Error('You must provide a `' + name + '` parameter');
  }

  /**
   * Called when the UI closes. Override to do any specific cleanup necessary
   */
  close() {
    this.screen.releaseCursor();
  }

  /**
   * Run the provided validation method each time a submit event occur.
   * @param  {Rx.Observable} submit - submit event flow
   * @return {Object}        Object containing two observables: `success` and `error`
   */
  handleSubmitEvents(submit) {
    const validate = run_async(this.opt.validate);
    const asyncFilter = run_async(this.opt.filter);
    const validation = submit.pipe(
      (0,cjs.mergeMap)((value) => {
        this.startSpinner(value, this.opt.filteringText);
        return asyncFilter(value, this.answers).then(
          (filteredValue) => {
            this.startSpinner(filteredValue, this.opt.validatingText);
            return validate(filteredValue, this.answers).then(
              (isValid) => ({ isValid, value: filteredValue }),
              (error_) => ({ isValid: error_, value: filteredValue }),
            );
          },
          (error_) => ({ isValid: error_ }),
        );
      }),
      (0,cjs.share)(),
    );

    const success = validation.pipe(
      (0,cjs.filter)((state) => state.isValid === true),
      (0,cjs.take)(1),
    );
    const error = validation.pipe(
      (0,cjs.filter)((state) => state.isValid !== true),
      (0,cjs.takeUntil)(success),
    );

    return {
      success,
      error,
    };
  }

  startSpinner(value, bottomContent) {
    value = this.getSpinningValue(value);
    // If the question will spin, cut off the prefix (for layout purposes)
    const content = bottomContent
      ? this.getQuestion() + value
      : this.getQuestion().slice(this.opt.prefix.length + 1) + value;

    this.screen.renderWithSpinner(content, bottomContent);
  }

  /**
   * Allow override, e.g. for password prompts
   * See: https://github.com/SBoudrias/Inquirer.js/issues/1022
   *
   * @return {String} value to display while spinning
   */
  getSpinningValue(value) {
    return value;
  }

  /**
   * Generate the prompt question string
   * @return {String} prompt question string
   */
  getQuestion() {
    let message =
      (this.opt.prefix ? this.opt.prefix + ' ' : '') +
      yoctocolors_cjs.bold(this.opt.message) +
      this.opt.suffix +
      yoctocolors_cjs.reset(' ');

    // Append the default if available, and if question isn't touched/answered
    if (
      this.opt.default != null &&
      this.status !== 'touched' &&
      this.status !== 'answered'
    ) {
      // If default password is supplied, hide it
      message +=
        this.opt.type === 'password'
          ? yoctocolors_cjs.italic(yoctocolors_cjs.dim('[hidden] '))
          : yoctocolors_cjs.dim('(' + this.opt.default + ') ');
    }

    return message;
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/list.js
/**
 * `list` type prompt
 */











class ListPrompt extends Prompt {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.firstRender = true;
    this.selected = 0;

    const def = this.opt.default;

    // If def is a Number, then use as index. Otherwise, check for value.
    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {
      this.selected = def;
    } else if (typeof def !== 'number' && def != null) {
      const index = this.opt.choices.realChoices.findIndex(({ value }) => value === def);
      this.selected = Math.max(index, 0);
    }

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);
    events.normalizedUpKey.pipe((0,cjs.takeUntil)(events.line)).forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe((0,cjs.takeUntil)(events.line))
      .forEach(this.onDownKey.bind(this));
    events.numberKey.pipe((0,cjs.takeUntil)(events.line)).forEach(this.onNumberKey.bind(this));
    events.line
      .pipe(
        (0,cjs.take)(1),
        (0,cjs.map)(this.getCurrentValue.bind(this)),
        (0,cjs.flatMap)((value) =>
          run_async(this.opt.filter)(value, this.answers).catch((error) => error),
        ),
      )
      .forEach(this.onSubmit.bind(this));

    // Init the prompt
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {ListPrompt} self
   */

  render() {
    // Render question
    let message = this.getQuestion();

    if (this.firstRender) {
      message += yoctocolors_cjs.dim('(Use arrow keys)');
    }

    // Render choices or answer depending on the state
    if (this.status === 'answered') {
      message += yoctocolors_cjs.cyan(this.opt.choices.getChoice(this.selected).short);
    } else {
      const choicesStr = listRender(this.opt.choices, this.selected);
      const indexPosition = this.opt.choices.indexOf(
        this.opt.choices.getChoice(this.selected),
      );
      const realIndexPosition =
        this.opt.choices.reduce((acc, value, i) => {
          // Dont count lines past the choice we are looking at
          if (i > indexPosition) {
            return acc;
          }
          // Add line if it's a separator
          if (value.type === 'separator') {
            return acc + 1;
          }

          let l = value.name;
          // Non-strings take up one line
          if (typeof l !== 'string') {
            return acc + 1;
          }

          // Calculate lines taken up by string
          l = l.split('\n');
          return acc + l.length;
        }, 0) - 1;
      message +=
        '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
    }

    message += ansi_escapes.cursorHide;
    this.firstRender = false;

    this.screen.render(message);
  }

  /**
   * When user press `enter` key
   */

  onSubmit(value) {
    this.status = 'answered';

    // Rerender prompt
    this.render();

    this.screen.done();
    this.done(value);
  }

  getCurrentValue() {
    return this.opt.choices.getChoice(this.selected).value;
  }

  /**
   * When user press a key
   */
  onUpKey() {
    this.selected = incrementListIndex(this.selected, 'up', this.opt);
    this.render();
  }

  onDownKey() {
    this.selected = incrementListIndex(this.selected, 'down', this.opt);
    this.render();
  }

  onNumberKey(input) {
    if (input <= this.opt.choices.realLength) {
      this.selected = input - 1;
    }

    this.render();
  }
}

/**
 * Function for rendering list choices
 * @param  {Number} pointer Position of the pointer
 * @return {String}         Rendered content
 */
function listRender(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    if (choice.type === 'separator') {
      separatorOffset++;
      output += '  ' + choice + '\n';
      return;
    }

    if (choice.disabled) {
      separatorOffset++;
      output += '  - ' + choice.name;
      output += ` (${
        typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'
      })`;
      output += '\n';
      return;
    }

    const isSelected = i - separatorOffset === pointer;
    let line = (isSelected ? esm.pointer + ' ' : '  ') + choice.name;
    if (isSelected) {
      line = yoctocolors_cjs.cyan(line);
    }

    output += line + ' \n';
  });

  return output.replaceAll(/\n$/g, '');
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/input.js
/**
 * `input` type prompt
 */






class InputPrompt extends Prompt {
  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    // Once user confirm (enter key)
    const events = observe(this.rl);
    const submit = events.line.pipe((0,cjs.map)(this.filterInput.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.keypress
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {InputPrompt} self
   */

  render(error) {
    let bottomContent = '';
    let appendContent = '';
    let message = this.getQuestion();
    const { transformer } = this.opt;
    const isFinal = this.status === 'answered';

    appendContent = isFinal ? this.answer : this.rl.line;

    if (transformer) {
      message += transformer(appendContent, this.answers, { isFinal });
    } else {
      message += isFinal ? yoctocolors_cjs.cyan(appendContent) : appendContent;
    }

    if (error) {
      bottomContent = yoctocolors_cjs.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  /**
   * When user press `enter` key
   */

  filterInput(input) {
    if (!input) {
      return this.opt.default == null ? '' : this.opt.default;
    }

    return input;
  }

  onEnd(state) {
    this.answer = state.value;
    this.status = 'answered';

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError({ value = '', isValid }) {
    this.rl.line += value;
    this.rl.cursor += value.length;
    this.render(isValid);
  }

  /**
   * When user press a key
   */

  onKeypress() {
    this.status = 'touched';

    this.render();
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/number.js
/**
 * `input` type prompt
 */



/**
 * Extention of the Input prompt specifically for use with number inputs.
 */

class NumberPrompt extends InputPrompt {
  filterInput(input) {
    if (input && typeof input === 'string') {
      input = input.trim();
      // Match a number in the input
      const numberMatch = input.match(/(^-?\d+|^-?\d+\.\d*|^\d*\.\d+)(e\d+)?$/);
      // If a number is found, return that input.
      if (numberMatch) {
        return Number(numberMatch[0]);
      }
    }

    // If the input was invalid return the default value.
    return this.opt.default == null ? Number.NaN : this.opt.default;
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/confirm.js
/**
 * `confirm` type prompt
 */






class ConfirmPrompt extends Prompt {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    let rawDefault = true;

    Object.assign(this.opt, {
      filter(input) {
        if (input != null && input !== '') {
          if (/^y(es)?/i.test(input)) return true;
          if (/^n(o)?/i.test(input)) return false;
        }
        return rawDefault;
      },
    });

    if (this.opt.default != null) {
      rawDefault = Boolean(this.opt.default);
    }

    this.opt.default = rawDefault ? 'Y/n' : 'y/N';
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb   Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    // Once user confirm (enter key)
    const events = observe(this.rl);
    events.keypress.pipe((0,cjs.takeUntil)(events.line)).forEach(this.onKeypress.bind(this));

    events.line.pipe((0,cjs.take)(1)).forEach(this.onEnd.bind(this));

    // Init
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {ConfirmPrompt} self
   */

  render(answer) {
    let message = this.getQuestion();

    if (typeof answer === 'boolean') {
      message += yoctocolors_cjs.cyan(answer ? 'Yes' : 'No');
    } else if (answer) {
      message += answer;
    } else {
      message += this.rl.line;
    }

    this.screen.render(message);

    return this;
  }

  /**
   * When user press `enter` key
   */

  onEnd(input) {
    this.status = 'answered';

    let output = this.opt.filter(input);
    if (this.opt.transformer) {
      output = this.opt.transformer(output);
    }
    this.render(output);

    this.screen.done();
    this.done(output);
  }

  /**
   * When user press a key
   */

  onKeypress() {
    this.render();
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/rawlist.js
/**
 * `rawlist` type prompt
 */









class RawListPrompt extends Prompt {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    this.hiddenLine = '';
    this.lastKey = '';

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);

    this.selected = 0;
    this.rawDefault = 0;

    Object.assign(this.opt, {
      validate(val) {
        return val != null;
      },
    });

    const def = this.opt.default;
    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {
      this.selected = def;
      this.rawDefault = def;
    } else if (typeof def !== 'number' && def != null) {
      const index = this.opt.choices.realChoices.findIndex(({ value }) => value === def);
      const safeIndex = Math.max(index, 0);
      this.selected = safeIndex;
      this.rawDefault = safeIndex;
    }

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(undefined, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    // Once user confirm (enter key)
    const events = observe(this.rl);
    const submit = events.line.pipe((0,cjs.map)(this.getCurrentValue.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.normalizedUpKey
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onDownKey.bind(this));
    events.keypress
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onKeypress.bind(this));
    // Init the prompt
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {RawListPrompt} self
   */

  render(error) {
    // Render question
    let message = this.getQuestion();
    let bottomContent = '';

    if (this.status === 'answered') {
      message += yoctocolors_cjs.cyan(this.opt.choices.getChoice(this.selected).short);
    } else {
      const choicesStr = renderChoices(this.opt.choices, this.selected);
      message +=
        '\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);
      message += '\n  Answer: ';
    }
    message += this.rl.line;

    if (error) {
      bottomContent = '\n' + yoctocolors_cjs.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  /**
   * When user press `enter` key
   */

  getCurrentValue(index) {
    if (index == null) {
      index = this.rawDefault;
    } else if (index === '') {
      this.selected = this.selected === undefined ? -1 : this.selected;
      index = this.selected;
    } else {
      index -= 1;
    }

    const choice = this.opt.choices.getChoice(index);
    return choice ? choice.value : null;
  }

  onEnd(state) {
    this.status = 'answered';
    this.answer = state.value;

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError() {
    this.render('Please enter a valid index');
  }

  /**
   * When user press a key
   */

  onKeypress() {
    let index;

    if (this.lastKey === 'arrow') {
      index = this.hiddenLine.length > 0 ? Number(this.hiddenLine) - 1 : 0;
    } else {
      index = this.rl.line.length > 0 ? Number(this.rl.line) - 1 : 0;
    }
    this.lastKey = '';

    this.selected = this.opt.choices.getChoice(index) ? index : undefined;
    this.render();
  }

  /**
   * When user press up key
   */

  onUpKey() {
    this.onArrowKey('up');
  }

  /**
   * When user press down key
   */

  onDownKey() {
    this.onArrowKey('down');
  }

  /**
   * When user press up or down key
   * @param {String} type Arrow type: up or down
   */

  onArrowKey(type) {
    this.selected = incrementListIndex(this.selected, type, this.opt) || 0;
    this.hiddenLine = String(this.selected + 1);
    this.rl.line = '';
    this.lastKey = 'arrow';
  }
}

/**
 * Function for rendering list choices
 * @param  {Number} pointer Position of the pointer
 * @return {String}         Rendered content
 */

function renderChoices(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    output += output ? '\n  ' : '  ';

    if (choice.type === 'separator') {
      separatorOffset++;
      output += ' ' + choice;
      return;
    }

    const index = i - separatorOffset;
    let display = index + 1 + ') ' + choice.name;
    if (index === pointer) {
      display = yoctocolors_cjs.cyan(display);
    }

    output += display;
  });

  return output;
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/expand.js
/**
 * `rawlist` type prompt
 */








class ExpandPrompt extends Prompt {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.validateChoices(this.opt.choices);

    // Add the default `help` (/expand) option
    this.opt.choices.push({
      key: 'h',
      name: 'Help, list all options',
      value: 'help',
    });

    this.opt.validate = (choice) => {
      if (choice == null) {
        return 'Please enter a valid command';
      }

      return choice !== 'help';
    };

    // Setup the default string (capitalize the default key)
    this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);

    this.paginator = new Paginator(this.screen);
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    // Save user answer and update prompt to show selected option.
    const events = observe(this.rl);
    const validation = this.handleSubmitEvents(
      events.line.pipe((0,cjs.map)(this.getCurrentValue.bind(this))),
    );
    validation.success.forEach(this.onSubmit.bind(this));
    validation.error.forEach(this.onError.bind(this));
    this.keypressObs = events.keypress
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init the prompt
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {ExpandPrompt} self
   */

  render(error, hint) {
    let message = this.getQuestion();
    let bottomContent = '';

    if (this.status === 'answered') {
      message += yoctocolors_cjs.cyan(this.answer);
    } else if (this.status === 'expanded') {
      const choicesStr = expand_renderChoices(this.opt.choices, this.selectedKey);
      message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);
      message += '\n  Answer: ';
    }

    message += this.rl.line;

    if (error) {
      bottomContent = yoctocolors_cjs.red('>> ') + error;
    }

    if (hint) {
      bottomContent = yoctocolors_cjs.cyan('>> ') + hint;
    }

    this.screen.render(message, bottomContent);
  }

  getCurrentValue(input) {
    input ||= this.rawDefault;

    const selected = this.opt.choices.where({ key: input.toLowerCase().trim() })[0];
    if (!selected) {
      return null;
    }

    return selected.value;
  }

  /**
   * Generate the prompt choices string
   * @return {String}  Choices string
   */

  getChoices() {
    let output = '';

    this.opt.choices.forEach((choice) => {
      output += '\n  ';

      if (choice.type === 'separator') {
        output += ' ' + choice;
        return;
      }

      let choiceStr = choice.key + ') ' + choice.name;
      if (this.selectedKey === choice.key) {
        choiceStr = yoctocolors_cjs.cyan(choiceStr);
      }

      output += choiceStr;
    });

    return output;
  }

  onError(state) {
    if (state.value === 'help') {
      this.selectedKey = '';
      this.status = 'expanded';
      this.render();
      return;
    }

    this.render(state.isValid);
  }

  /**
   * When user press `enter` key
   */

  onSubmit(state) {
    this.status = 'answered';
    const choice = this.opt.choices.where({ value: state.value })[0];
    this.answer = choice.short || choice.name;

    // Re-render prompt
    this.render();
    this.screen.done();
    this.done(state.value);
  }

  /**
   * When user press a key
   */

  onKeypress() {
    this.selectedKey = this.rl.line.toLowerCase();
    const selected = this.opt.choices.where({ key: this.selectedKey })[0];
    if (this.status === 'expanded') {
      this.render();
    } else {
      this.render(null, selected ? selected.name : null);
    }
  }

  /**
   * Validate the choices
   * @param {Array} choices
   */

  validateChoices(choices) {
    let formatError;
    const errors = [];
    const keymap = {};
    choices.filter(Separator.exclude).forEach((choice) => {
      if (!choice.key || choice.key.length !== 1) {
        formatError = true;
      }

      choice.key = String(choice.key).toLowerCase();

      if (keymap[choice.key]) {
        errors.push(choice.key);
      }

      keymap[choice.key] = true;
    });

    if (formatError) {
      throw new Error(
        'Format error: `key` param must be a single letter and is required.',
      );
    }

    if (keymap.h) {
      throw new Error(
        'Reserved key error: `key` param cannot be `h` - this value is reserved.',
      );
    }

    if (errors.length > 0) {
      throw new Error(
        'Duplicate key error: `key` param must be unique. Duplicates: ' +
          [...new Set(errors)].join(','),
      );
    }
  }

  /**
   * Generate a string out of the choices keys
   * @param  {Array}  choices
   * @param  {Number|String} default - the choice index or name to capitalize
   * @return {String} The rendered choices key string
   */
  generateChoicesString(choices, defaultChoice) {
    let defIndex = choices.realLength - 1;
    if (typeof defaultChoice === 'number' && this.opt.choices.getChoice(defaultChoice)) {
      defIndex = defaultChoice;
    } else if (typeof defaultChoice === 'string') {
      const index = choices.realChoices.findIndex(({ value }) => value === defaultChoice);
      defIndex = index === -1 ? defIndex : index;
    }

    const defStr = this.opt.choices.pluck('key');
    this.rawDefault = defStr[defIndex];
    defStr[defIndex] = String(defStr[defIndex]).toUpperCase();
    return defStr.join('');
  }
}

/**
 * Function for rendering checkbox choices
 * @param  {String} pointer Selected key
 * @return {String}         Rendered content
 */

function expand_renderChoices(choices, pointer) {
  let output = '';

  choices.forEach((choice) => {
    output += '\n  ';

    if (choice.type === 'separator') {
      output += ' ' + choice;
      return;
    }

    let choiceStr = choice.key + ') ' + choice.name;
    if (pointer === choice.key) {
      choiceStr = yoctocolors_cjs.cyan(choiceStr);
    }

    output += choiceStr;
  });

  return output;
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/checkbox.js
/**
 * `list` type prompt
 */










class CheckboxPrompt extends Prompt {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    if (Array.isArray(this.opt.default)) {
      for (const choice of this.opt.choices) {
        if (this.opt.default.includes(choice.value)) {
          choice.checked = true;
        }
      }
    }

    this.pointer = 0;

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);

    const validation = this.handleSubmitEvents(
      events.line.pipe((0,cjs.map)(this.getCurrentValue.bind(this))),
    );
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.normalizedUpKey
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onDownKey.bind(this));
    events.numberKey
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onNumberKey.bind(this));
    events.spaceKey
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onSpaceKey.bind(this));
    events.aKey.pipe((0,cjs.takeUntil)(validation.success)).forEach(this.onAllKey.bind(this));
    events.iKey.pipe((0,cjs.takeUntil)(validation.success)).forEach(this.onInverseKey.bind(this));

    // Init the prompt
    this.render();
    this.firstRender = false;

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {CheckboxPrompt} self
   */

  render(error) {
    // Render question
    let message = this.getQuestion();
    let bottomContent = '';

    if (!this.dontShowHints) {
      message +=
        '(Press ' +
        yoctocolors_cjs.cyan(yoctocolors_cjs.bold('<space>')) +
        ' to select, ' +
        yoctocolors_cjs.cyan(yoctocolors_cjs.bold('<a>')) +
        ' to toggle all, ' +
        yoctocolors_cjs.cyan(yoctocolors_cjs.bold('<i>')) +
        ' to invert selection, and ' +
        yoctocolors_cjs.cyan(yoctocolors_cjs.bold('<enter>')) +
        ' to proceed)';
    }

    // Render choices or answer depending on the state
    if (this.status === 'answered') {
      message += yoctocolors_cjs.cyan(this.selection.join(', '));
    } else {
      const choicesStr = checkbox_renderChoices(this.opt.choices, this.pointer);
      const indexPosition = this.opt.choices.indexOf(
        this.opt.choices.getChoice(this.pointer),
      );
      const realIndexPosition =
        this.opt.choices.reduce((acc, value, i) => {
          // Dont count lines past the choice we are looking at
          if (i > indexPosition) {
            return acc;
          }
          // Add line if it's a separator
          if (value.type === 'separator') {
            return acc + 1;
          }

          let l = value.name;
          // Non-strings take up one line
          if (typeof l !== 'string') {
            return acc + 1;
          }

          // Calculate lines taken up by string
          l = l.split('\n');
          return acc + l.length;
        }, 0) - 1;
      message +=
        '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
    }

    if (error) {
      bottomContent = yoctocolors_cjs.red('>> ') + error;
    }

    message += ansi_escapes.cursorHide;

    this.screen.render(message, bottomContent);
  }

  /**
   * When user press `enter` key
   */

  onEnd(state) {
    this.status = 'answered';
    this.dontShowHints = true;
    // Rerender prompt (and clean subline error)
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError(state) {
    this.render(state.isValid);
  }

  getCurrentValue() {
    const choices = this.opt.choices.filter(
      (choice) => Boolean(choice.checked) && !choice.disabled,
    );

    this.selection = choices.map((choice) => choice.short);
    return choices.map((choice) => choice.value);
  }

  onUpKey() {
    this.pointer = incrementListIndex(this.pointer, 'up', this.opt);
    this.render();
  }

  onDownKey() {
    this.pointer = incrementListIndex(this.pointer, 'down', this.opt);
    this.render();
  }

  onNumberKey(input) {
    if (input <= this.opt.choices.realLength) {
      this.pointer = input - 1;
      this.toggleChoice(this.pointer);
    }

    this.render();
  }

  onSpaceKey() {
    this.toggleChoice(this.pointer);
    this.render();
  }

  onAllKey() {
    const shouldBeChecked = this.opt.choices.some(
      (choice) => choice.type !== 'separator' && !choice.checked,
    );

    this.opt.choices.forEach((choice) => {
      if (choice.type !== 'separator') {
        choice.checked = shouldBeChecked;
      }
    });

    this.render();
  }

  onInverseKey() {
    this.opt.choices.forEach((choice) => {
      if (choice.type !== 'separator') {
        choice.checked = !choice.checked;
      }
    });

    this.render();
  }

  toggleChoice(index) {
    const item = this.opt.choices.getChoice(index);
    if (item !== undefined) {
      this.opt.choices.getChoice(index).checked = !item.checked;
    }
  }
}

/**
 * Function for rendering checkbox choices
 * @param  {Number} pointer Position of the pointer
 * @return {String}         Rendered content
 */

function checkbox_renderChoices(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    if (choice.type === 'separator') {
      separatorOffset++;
      output += ' ' + choice + '\n';
      return;
    }

    if (choice.disabled) {
      separatorOffset++;
      output += ' - ' + choice.name;
      output += ` (${
        typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'
      })`;
    } else {
      const line = getCheckbox(choice.checked) + ' ' + choice.name;
      output +=
        i - separatorOffset === pointer
          ? yoctocolors_cjs.cyan(esm.pointer + line)
          : ' ' + line;
    }

    output += '\n';
  });

  return output.replaceAll(/\n$/g, '');
}

/**
 * Get the checkbox
 * @param  {Boolean} checked - add a X or not to the checkbox
 * @return {String} Composited checkbox string
 */

function getCheckbox(checked) {
  return checked ? yoctocolors_cjs.green(esm.radioOn) : esm.radioOff;
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/password.js
/**
 * `password` type prompt
 */






function mask(input, maskChar) {
  input = String(input);
  maskChar = typeof maskChar === 'string' ? maskChar : '*';
  if (input.length === 0) {
    return '';
  }

  return Array.from({ length: input.length + 1 }).join(maskChar);
}

class PasswordPrompt extends Prompt {
  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);

    // Once user confirm (enter key)
    const submit = events.line.pipe((0,cjs.map)(this.filterInput.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.keypress
      .pipe((0,cjs.takeUntil)(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {PasswordPrompt} self
   */

  render(error) {
    let message = this.getQuestion();
    let bottomContent = '';

    message +=
      this.status === 'answered'
        ? this.getMaskedValue(this.answer)
        : this.getMaskedValue(this.rl.line || '');

    if (error) {
      bottomContent = '\n' + yoctocolors_cjs.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  getMaskedValue(value) {
    if (this.status === 'answered') {
      return this.opt.mask
        ? yoctocolors_cjs.cyan(mask(value, this.opt.mask))
        : yoctocolors_cjs.italic(yoctocolors_cjs.dim('[hidden]'));
    }
    return this.opt.mask
      ? mask(value, this.opt.mask)
      : yoctocolors_cjs.italic(yoctocolors_cjs.dim('[input is hidden] '));
  }

  /**
   * Mask value during async filter/validation.
   */
  getSpinningValue(value) {
    return this.getMaskedValue(value);
  }

  /**
   * When user press `enter` key
   */

  filterInput(input) {
    if (!input) {
      return this.opt.default == null ? '' : this.opt.default;
    }

    return input;
  }

  onEnd(state) {
    this.status = 'answered';
    this.answer = state.value;

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError(state) {
    this.render(state.isValid);
  }

  onKeypress() {
    // If user press a key, just clear the default value
    this.opt.default &&= undefined;

    this.render();
  }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/external-editor@3.1.0/node_modules/external-editor/main/index.js
var main = __webpack_require__(1427);
;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/prompts/editor.js
/**
 * `editor` type prompt
 */







class EditorPrompt extends Prompt {
  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    this.editorResult = new cjs.Subject();

    // Open Editor on "line" (Enter Key)
    const events = observe(this.rl);
    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));
    const waitUserInput =
      this.opt.waitUserInput === undefined ? true : this.opt.waitUserInput;

    // Trigger Validation when editor closes
    const validation = this.handleSubmitEvents(this.editorResult);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    // Prevents default from being printed on screen (can look weird with multiple lines)
    this.currentText = this.opt.default;
    this.opt.default = null;

    // Init
    if (waitUserInput) {
      this.render();
    } else {
      this.startExternalEditor();
    }

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {EditorPrompt} self
   */

  render(error) {
    let bottomContent = '';
    let message = this.getQuestion();

    message +=
      this.status === 'answered'
        ? yoctocolors_cjs.dim('Received')
        : yoctocolors_cjs.dim('Press <enter> to launch your preferred editor.');

    if (error) {
      bottomContent = yoctocolors_cjs.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  /**
   * Launch $EDITOR on user press enter
   */

  startExternalEditor() {
    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing
    this.rl.pause();
    (0,main/* editAsync */.xV)(this.currentText, this.endExternalEditor.bind(this), {
      postfix: this.opt.postfix ?? '.txt',
    });
  }

  endExternalEditor(error, result) {
    this.rl.resume();
    if (error) {
      this.editorResult.error(error);
    } else {
      this.editorResult.next(result);
    }
  }

  onEnd(state) {
    this.editorResult.unsubscribe();
    this.lineSubscription.unsubscribe();
    this.answer = state.value;
    this.status = 'answered';
    // Re-render prompt
    this.render();
    this.screen.done();
    this.done(this.answer);
  }

  onError(state) {
    this.render(state.isValid);
  }
}

// EXTERNAL MODULE: external "node:stream"
var external_node_stream_ = __webpack_require__(7075);
;// external "node:readline"
const external_node_readline_namespaceObject = __WEBPACK_EXTERNAL_createRequire_require("node:readline");
// EXTERNAL MODULE: ./node_modules/.pnpm/mute-stream@1.0.0/node_modules/mute-stream/lib/index.js
var lib = __webpack_require__(1380);
;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/ui/baseUI.js



/**
 * Base interface class other can inherits from
 */

class UI {
  constructor(opt) {
    // Instantiate the Readline interface
    // @Note: Don't reassign if already present (allow test to override the Stream)
    this.rl ||= external_node_readline_namespaceObject.createInterface(setupReadlineOptions(opt));

    this.rl.resume();

    this.onForceClose = this.onForceClose.bind(this);

    // Make sure new prompt start on a newline when closing
    process.on('exit', this.onForceClose);

    // Terminate process on SIGINT (which will call process.on('exit') in return)
    this.rl.on('SIGINT', this.onForceClose);
  }

  /**
   * Handle the ^C exit
   * @return {null}
   */

  onForceClose() {
    this.close();
    process.kill(process.pid, 'SIGINT');
    console.log('');
  }

  /**
   * Close the interface and cleanup listeners
   */

  close() {
    // Remove events listeners
    this.rl.removeListener('SIGINT', this.onForceClose);
    process.removeListener('exit', this.onForceClose);

    this.rl.output.unmute();

    if (this.activePrompt && typeof this.activePrompt.close === 'function') {
      this.activePrompt.close();
    }

    // Close the readline
    this.rl.output.end();
    this.rl.pause();
    this.rl.close();
  }
}

function setupReadlineOptions(opt = {}) {
  // Inquirer 8.x:
  // opt.skipTTYChecks = opt.skipTTYChecks === undefined ? opt.input !== undefined : opt.skipTTYChecks;
  opt.skipTTYChecks = opt.skipTTYChecks === undefined ? true : opt.skipTTYChecks;

  // Default `input` to stdin
  const input = opt.input || process.stdin;

  // Check if prompt is being called in TTY environment
  // If it isn't return a failed promise
  if (!opt.skipTTYChecks && !input.isTTY) {
    const nonTtyError = new Error(
      'Prompts can not be meaningfully rendered in non-TTY environments',
    );
    nonTtyError.isTtyError = true;
    throw nonTtyError;
  }

  // Add mute capabilities to the output
  const ms = new lib();
  ms.pipe(opt.output || process.stdout);
  const output = ms;

  return {
    terminal: true,
    ...opt,
    input,
    output,
  };
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/ui/bottom-bar.js
/**
 * Sticky bottom bar user interface
 */





class BottomBar extends UI {
  constructor(opt = {}) {
    super(opt);

    this.log = new external_node_stream_.Writable({
      write: (chunk, encoding, cb) => {
        this.writeLog(chunk);
        cb();
      },
    });

    this.bottomBar = opt.bottomBar || '';
    this.render();
  }

  /**
   * Render the prompt to screen
   * @return {BottomBar} self
   */

  render() {
    this.write(this.bottomBar);
    return this;
  }

  clean() {
    clearLine(this.rl, this.bottomBar.split('\n').length);
    return this;
  }

  /**
   * Update the bottom bar content and rerender
   * @param  {String} bottomBar Bottom bar content
   * @return {BottomBar}           self
   */

  updateBottomBar(bottomBar) {
    clearLine(this.rl, 1);
    this.rl.output.unmute();
    this.clean();
    this.bottomBar = bottomBar;
    this.render();
    this.rl.output.mute();
    return this;
  }

  /**
   * Write out log data
   * @param {String} data - The log data to be output
   * @return {BottomBar} self
   */

  writeLog(data) {
    this.rl.output.unmute();
    this.clean();
    this.rl.output.write(this.enforceLF(data.toString()));
    this.render();
    this.rl.output.mute();
    return this;
  }

  /**
   * Make sure line end on a line feed
   * @param  {String} str Input string
   * @return {String}     The input string with a final line feed
   */

  enforceLF(str) {
    return /[\n\r]$/.test(str) ? str : str + '\n';
  }

  /**
   * Helper for writing message in Prompt
   * @param {String} message - The message to be output
   */
  write(message) {
    const msgLines = message.split(/\n/);
    this.height = msgLines.length;

    // Write message to screen and setPrompt to control backspace
    this.rl.setPrompt(msgLines.at(-1));

    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {
      /* When it's a tty through serial port there's no terminal info and the render will malfunction,
         so we need enforce the cursor to locate to the leftmost position for rendering. */
      left(this.rl, message.length + this.rl.line.length);
    }

    this.rl.output.write(message);
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/utils/utils.js



/**
 * Resolve a question property value if it is passed as a function.
 * This method will overwrite the property on the question object with the received value.
 * @param  {Object} question - Question object
 * @param  {String} prop     - Property to fetch name
 * @param  {Object} answers  - Answers object
 * @return {Rx.Observable}   - Observable emitting once value is known
 */

const fetchAsyncQuestionProperty = function (question, prop, answers) {
  if (typeof question[prop] !== 'function') {
    return (0,cjs.of)(question);
  }

  return (0,cjs.from)(
    run_async(question[prop])(answers).then((value) => {
      question[prop] = value;
      return question;
    }),
  );
};

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/ui/prompt.js
const _ = {
  set: (obj, path = '', value) => {
    let pointer = obj;
    path.split('.').forEach((key, index, arr) => {
      if (key === '__proto__' || key === 'constructor') return;

      if (index === arr.length - 1) {
        pointer[key] = value;
      } else if (!(key in pointer) || typeof pointer[key] !== 'object') {
        pointer[key] = {};
      }

      pointer = pointer[key];
    });
  },
  get: (obj, path = '', defaultValue) => {
    const travel = (regexp) =>
      String.prototype.split
        .call(path, regexp)
        .filter(Boolean)
        .reduce(
          // @ts-expect-error implicit any on res[key]
          (res, key) => (res !== null && res !== undefined ? res[key] : res),
          obj,
        );
    const result = travel(/[,[\]]+?/) || travel(/[,.[\]]+?/);
    return result === undefined || result === obj ? defaultValue : result;
  },
};






/**
 * Base interface class other can inherits from
 */
class PromptUI extends UI {
  constructor(prompts, opt) {
    super(opt);
    this.prompts = prompts;
  }

  run(questions, answers) {
    // Keep global reference to the answers
    this.answers = typeof answers === 'object' ? { ...answers } : {};

    let obs;
    if (Array.isArray(questions)) {
      obs = (0,cjs.from)(questions);
    } else if ((0,cjs.isObservable)(questions)) {
      obs = questions;
    } else if (
      Object.values(questions).every(
        (maybeQuestion) =>
          typeof maybeQuestion === 'object' &&
          !Array.isArray(maybeQuestion) &&
          maybeQuestion != null,
      )
    ) {
      // Case: Called with a set of { name: question }
      obs = (0,cjs.from)(
        Object.entries(questions).map(([name, question]) => ({
          name,
          ...question,
        })),
      );
    } else {
      // Case: Called with a single question config
      obs = (0,cjs.from)([questions]);
    }

    this.process = obs.pipe(
      (0,cjs.concatMap)(this.processQuestion.bind(this)),
      (0,cjs.publish)(), // Creates a hot Observable. It prevents duplicating prompts.
    );

    this.process.connect();

    return this.process
      .pipe(
        (0,cjs.reduce)((answersObj, answer) => {
          _.set(answersObj, answer.name, answer.answer);
          return answersObj;
        }, this.answers),
      )
      .toPromise(Promise)
      .then(this.onCompletion.bind(this), this.onError.bind(this));
  }

  /**
   * Once all prompt are over
   */
  onCompletion() {
    this.close();

    return this.answers;
  }

  onError(error) {
    this.close();
    return Promise.reject(error);
  }

  processQuestion(question) {
    question = { ...question };
    return (0,cjs.defer)(() => {
      const obs = (0,cjs.of)(question);

      return obs.pipe(
        (0,cjs.concatMap)(this.setDefaultType.bind(this)),
        (0,cjs.concatMap)(this.filterIfRunnable.bind(this)),
        (0,cjs.concatMap)(() =>
          fetchAsyncQuestionProperty(question, 'message', this.answers),
        ),
        (0,cjs.concatMap)(() =>
          fetchAsyncQuestionProperty(question, 'default', this.answers),
        ),
        (0,cjs.concatMap)(() =>
          fetchAsyncQuestionProperty(question, 'choices', this.answers),
        ),
        (0,cjs.concatMap)(this.fetchAnswer.bind(this)),
      );
    });
  }

  fetchAnswer(question) {
    const Prompt = this.prompts[question.type];
    this.activePrompt = new Prompt(question, this.rl, this.answers);
    return (0,cjs.defer)(() =>
      (0,cjs.from)(this.activePrompt.run().then((answer) => ({ name: question.name, answer }))),
    );
  }

  setDefaultType(question) {
    // Default type to input
    if (!this.prompts[question.type]) {
      question.type = 'input';
    }

    return (0,cjs.defer)(() => (0,cjs.of)(question));
  }

  filterIfRunnable(question) {
    if (
      question.askAnswered !== true &&
      _.get(this.answers, question.name) !== undefined
    ) {
      return cjs.EMPTY;
    }

    if (question.when === false) {
      return cjs.EMPTY;
    }

    if (typeof question.when !== 'function') {
      return (0,cjs.of)(question);
    }

    const { answers } = this;
    return (0,cjs.defer)(() =>
      (0,cjs.from)(
        run_async(question.when)(answers).then((shouldRun) => {
          if (shouldRun) {
            return question;
          }
        }),
      ).pipe((0,cjs.filter)((val) => val != null)),
    );
  }
}

;// ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/index.js
/**
 * Inquirer.js
 * A collection of common interactive command line user interfaces.
 */
















/**
 * Create a new self-contained prompt module.
 */
function createPromptModule(opt) {
  const promptModule = function (questions, answers) {
    let uiInstance;
    try {
      uiInstance = new PromptUI(promptModule.prompts, opt);
    } catch (error) {
      return Promise.reject(error);
    }
    const promise = uiInstance.run(questions, answers);

    // Monkey patch the UI on the promise object so
    // that it remains publicly accessible.
    promise.ui = uiInstance;

    return promise;
  };

  promptModule.prompts = {};

  /**
   * Register a prompt type
   * @param {String} name     Prompt type name
   * @param {Function} prompt Prompt constructor
   * @return {inquirer}
   */

  promptModule.registerPrompt = function (name, prompt) {
    promptModule.prompts[name] = prompt;
    return this;
  };

  /**
   * Register the defaults provider prompts
   */

  promptModule.restoreDefaultPrompts = function () {
    this.registerPrompt('list', ListPrompt);
    this.registerPrompt('input', InputPrompt);
    this.registerPrompt('number', NumberPrompt);
    this.registerPrompt('confirm', ConfirmPrompt);
    this.registerPrompt('rawlist', RawListPrompt);
    this.registerPrompt('expand', ExpandPrompt);
    this.registerPrompt('checkbox', CheckboxPrompt);
    this.registerPrompt('password', PasswordPrompt);
    this.registerPrompt('editor', EditorPrompt);
  };

  promptModule.restoreDefaultPrompts();

  return promptModule;
}

/**
 * Public CLI helper interface
 * @param  {Array|Object|Rx.Observable} questions - Questions settings array
 * @param  {Function} cb - Callback being passed the user answers
 * @return {ui.Prompt}
 */

const lib_prompt = createPromptModule();

// Expose helper functions on the top level for easiest usage by common users
function registerPrompt(name, newPrompt) {
  lib_prompt.registerPrompt(name, newPrompt);
}

function restoreDefaultPrompts() {
  lib_prompt.restoreDefaultPrompts();
}

const inquirer = {
  prompt: lib_prompt,
  ui: {
    BottomBar: BottomBar,
    Prompt: PromptUI,
  },
  createPromptModule,
  registerPrompt,
  restoreDefaultPrompts,
  Separator: Separator,
};

/* harmony default export */ const inquirer_lib = (inquirer);


/***/ }),

/***/ 6842:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const { createFile, createFileSync } = __webpack_require__(766)
const { createLink, createLinkSync } = __webpack_require__(12)
const { createSymlink, createSymlinkSync } = __webpack_require__(3477)

module.exports = {
  // file
  createFile,
  createFileSync,
  ensureFile: createFile,
  ensureFileSync: createFileSync,
  // link
  createLink,
  createLinkSync,
  ensureLink: createLink,
  ensureLinkSync: createLinkSync,
  // symlink
  createSymlink,
  createSymlinkSync,
  ensureSymlink: createSymlink,
  ensureSymlinkSync: createSymlinkSync
}


/***/ }),

/***/ 6856:
/***/ ((module) => {


var isWindows = process.platform === 'win32';
var trailingSlashRe = isWindows ? /[^:]\\$/ : /.\/$/;

// https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43
module.exports = function () {
	var path;

	if (isWindows) {
		path = process.env.TEMP ||
			process.env.TMP ||
			(process.env.SystemRoot || process.env.windir) + '\\temp';
	} else {
		path = process.env.TMPDIR ||
			process.env.TMP ||
			process.env.TEMP ||
			'/tmp';
	}

	if (trailingSlashRe.test(path)) {
		path = path.slice(0, -1);
	}

	return path;
};


/***/ }),

/***/ 6864:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.arrRemove = void 0;
function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}
exports.arrRemove = arrRemove;
//# sourceMappingURL=arrRemove.js.map

/***/ }),

/***/ 6868:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(4790)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(2680);
/*</replacement>*/

var Buffer = (__webpack_require__(181).Buffer);
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = __webpack_require__(4552);
var _require = __webpack_require__(7963),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = (__webpack_require__(3201)/* .codes */ .F),
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
__webpack_require__(7835)(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(5606);
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || __webpack_require__(5606);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};

/***/ }),

/***/ 6888:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const major = (a, loose) => new SemVer(a, loose).major
module.exports = major


/***/ }),

/***/ 6897:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isIterable = void 0;
var iterator_1 = __webpack_require__(4789);
var isFunction_1 = __webpack_require__(8403);
function isIterable(input) {
    return isFunction_1.isFunction(input === null || input === void 0 ? void 0 : input[iterator_1.iterator]);
}
exports.isIterable = isIterable;
//# sourceMappingURL=isIterable.js.map

/***/ }),

/***/ 6903:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// This is adapted from https://github.com/normalize/mz
// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors
const u = (__webpack_require__(8556).fromCallback)
const fs = __webpack_require__(2358)

const api = [
  'access',
  'appendFile',
  'chmod',
  'chown',
  'close',
  'copyFile',
  'cp',
  'fchmod',
  'fchown',
  'fdatasync',
  'fstat',
  'fsync',
  'ftruncate',
  'futimes',
  'glob',
  'lchmod',
  'lchown',
  'lutimes',
  'link',
  'lstat',
  'mkdir',
  'mkdtemp',
  'open',
  'opendir',
  'readdir',
  'readFile',
  'readlink',
  'realpath',
  'rename',
  'rm',
  'rmdir',
  'stat',
  'statfs',
  'symlink',
  'truncate',
  'unlink',
  'utimes',
  'writeFile'
].filter(key => {
  // Some commands are not available on some systems. Ex:
  // fs.cp was added in Node.js v16.7.0
  // fs.statfs was added in Node v19.6.0, v18.15.0
  // fs.glob was added in Node.js v22.0.0
  // fs.lchown is not available on at least some Linux
  return typeof fs[key] === 'function'
})

// Export cloned fs:
Object.assign(exports, fs)

// Universalify async methods:
api.forEach(method => {
  exports[method] = u(fs[method])
})

// We differ from mz/fs in that we still ship the old, broken, fs.exists()
// since we are a drop-in replacement for the native module
exports.exists = function (filename, callback) {
  if (typeof callback === 'function') {
    return fs.exists(filename, callback)
  }
  return new Promise(resolve => {
    return fs.exists(filename, resolve)
  })
}

// fs.read(), fs.write(), fs.readv(), & fs.writev() need special treatment due to multiple callback args

exports.read = function (fd, buffer, offset, length, position, callback) {
  if (typeof callback === 'function') {
    return fs.read(fd, buffer, offset, length, position, callback)
  }
  return new Promise((resolve, reject) => {
    fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) => {
      if (err) return reject(err)
      resolve({ bytesRead, buffer })
    })
  })
}

// Function signature can be
// fs.write(fd, buffer[, offset[, length[, position]]], callback)
// OR
// fs.write(fd, string[, position[, encoding]], callback)
// We need to handle both cases, so we use ...args
exports.write = function (fd, buffer, ...args) {
  if (typeof args[args.length - 1] === 'function') {
    return fs.write(fd, buffer, ...args)
  }

  return new Promise((resolve, reject) => {
    fs.write(fd, buffer, ...args, (err, bytesWritten, buffer) => {
      if (err) return reject(err)
      resolve({ bytesWritten, buffer })
    })
  })
}

// Function signature is
// s.readv(fd, buffers[, position], callback)
// We need to handle the optional arg, so we use ...args
exports.readv = function (fd, buffers, ...args) {
  if (typeof args[args.length - 1] === 'function') {
    return fs.readv(fd, buffers, ...args)
  }

  return new Promise((resolve, reject) => {
    fs.readv(fd, buffers, ...args, (err, bytesRead, buffers) => {
      if (err) return reject(err)
      resolve({ bytesRead, buffers })
    })
  })
}

// Function signature is
// s.writev(fd, buffers[, position], callback)
// We need to handle the optional arg, so we use ...args
exports.writev = function (fd, buffers, ...args) {
  if (typeof args[args.length - 1] === 'function') {
    return fs.writev(fd, buffers, ...args)
  }

  return new Promise((resolve, reject) => {
    fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers) => {
      if (err) return reject(err)
      resolve({ bytesWritten, buffers })
    })
  })
}

// fs.realpath.native sometimes not available if fs is monkey-patched
if (typeof fs.realpath.native === 'function') {
  exports.realpath.native = u(fs.realpath.native)
} else {
  process.emitWarning(
    'fs.realpath.native is not a function. Is fs being monkey-patched?',
    'Warning', 'fs-extra-WARN0003'
  )
}


/***/ }),

/***/ 6910:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.takeLast = void 0;
var empty_1 = __webpack_require__(8003);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function takeLast(count) {
    return count <= 0
        ? function () { return empty_1.EMPTY; }
        : lift_1.operate(function (source, subscriber) {
            var buffer = [];
            source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                buffer.push(value);
                count < buffer.length && buffer.shift();
            }, function () {
                var e_1, _a;
                try {
                    for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
                        var value = buffer_1_1.value;
                        subscriber.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                subscriber.complete();
            }, undefined, function () {
                buffer = null;
            }));
        });
}
exports.takeLast = takeLast;
//# sourceMappingURL=takeLast.js.map

/***/ }),

/***/ 6928:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("path");

/***/ }),

/***/ 6972:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Buffer = (__webpack_require__(181).Buffer),
    Transform = (__webpack_require__(2203).Transform);


// == Exports ==================================================================
module.exports = function(iconv) {
    
    // Additional Public API.
    iconv.encodeStream = function encodeStream(encoding, options) {
        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    }

    iconv.decodeStream = function decodeStream(encoding, options) {
        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    }

    iconv.supportsStreams = true;


    // Not published yet.
    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
    iconv._collect = IconvLiteDecoderStream.prototype.collect;
};


// == Encoder stream =======================================================
function IconvLiteEncoderStream(conv, options) {
    this.conv = conv;
    options = options || {};
    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
    Transform.call(this, options);
}

IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
    constructor: { value: IconvLiteEncoderStream }
});

IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
    if (typeof chunk != 'string')
        return done(new Error("Iconv encoding stream needs strings as its input."));
    try {
        var res = this.conv.write(chunk);
        if (res && res.length) this.push(res);
        done();
    }
    catch (e) {
        done(e);
    }
}

IconvLiteEncoderStream.prototype._flush = function(done) {
    try {
        var res = this.conv.end();
        if (res && res.length) this.push(res);
        done();
    }
    catch (e) {
        done(e);
    }
}

IconvLiteEncoderStream.prototype.collect = function(cb) {
    var chunks = [];
    this.on('error', cb);
    this.on('data', function(chunk) { chunks.push(chunk); });
    this.on('end', function() {
        cb(null, Buffer.concat(chunks));
    });
    return this;
}


// == Decoder stream =======================================================
function IconvLiteDecoderStream(conv, options) {
    this.conv = conv;
    options = options || {};
    options.encoding = this.encoding = 'utf8'; // We output strings.
    Transform.call(this, options);
}

IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
    constructor: { value: IconvLiteDecoderStream }
});

IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
    if (!Buffer.isBuffer(chunk))
        return done(new Error("Iconv decoding stream needs buffers as its input."));
    try {
        var res = this.conv.write(chunk);
        if (res && res.length) this.push(res, this.encoding);
        done();
    }
    catch (e) {
        done(e);
    }
}

IconvLiteDecoderStream.prototype._flush = function(done) {
    try {
        var res = this.conv.end();
        if (res && res.length) this.push(res, this.encoding);                
        done();
    }
    catch (e) {
        done(e);
    }
}

IconvLiteDecoderStream.prototype.collect = function(cb) {
    var res = '';
    this.on('error', cb);
    this.on('data', function(chunk) { res += chunk; });
    this.on('end', function() {
        cb(null, res);
    });
    return this;
}



/***/ }),

/***/ 6980:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/



var os = __webpack_require__(857);
var hasFlag = __webpack_require__(7254);

var env = process.env;

var forceColor = void 0;
if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
  forceColor = false;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true')
           || hasFlag('color=always')) {
  forceColor = true;
}
if ('FORCE_COLOR' in env) {
  forceColor = env.FORCE_COLOR.length === 0
    || parseInt(env.FORCE_COLOR, 10) !== 0;
}

function translateLevel(level) {
  if (level === 0) {
    return false;
  }

  return {
    level: level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3,
  };
}

function supportsColor(stream) {
  if (forceColor === false) {
    return 0;
  }

  if (hasFlag('color=16m') || hasFlag('color=full')
      || hasFlag('color=truecolor')) {
    return 3;
  }

  if (hasFlag('color=256')) {
    return 2;
  }

  if (stream && !stream.isTTY && forceColor !== true) {
    return 0;
  }

  var min = forceColor ? 1 : 0;

  if (process.platform === 'win32') {
    // Node.js 7.5.0 is the first version of Node.js to include a patch to
    // libuv that enables 256 color output on Windows. Anything earlier and it
    // won't work. However, here we target Node.js 8 at minimum as it is an LTS
    // release, and Node.js 7 is not. Windows 10 build 10586 is the first
    // Windows release that supports 256 colors. Windows 10 build 14931 is the
    // first release that supports 16m/TrueColor.
    var osRelease = os.release().split('.');
    if (Number(process.versions.node.split('.')[0]) >= 8
        && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }

    return 1;
  }

  if ('CI' in env) {
    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function(sign) {
      return sign in env;
    }) || env.CI_NAME === 'codeship') {
      return 1;
    }

    return min;
  }

  if ('TEAMCITY_VERSION' in env) {
    return (/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0
    );
  }

  if ('TERM_PROGRAM' in env) {
    var version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    switch (env.TERM_PROGRAM) {
      case 'iTerm.app':
        return version >= 3 ? 3 : 2;
      case 'Hyper':
        return 3;
      case 'Apple_Terminal':
        return 2;
      // No default
    }
  }

  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }

  if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }

  if ('COLORTERM' in env) {
    return 1;
  }

  if (env.TERM === 'dumb') {
    return min;
  }

  return min;
}

function getSupportLevel(stream) {
  var level = supportsColor(stream);
  return translateLevel(level);
}

module.exports = {
  supportsColor: getSupportLevel,
  stdout: getSupportLevel(process.stdout),
  stderr: getSupportLevel(process.stderr),
};


/***/ }),

/***/ 6982:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("crypto");

/***/ }),

/***/ 7001:
/***/ ((module) => {



module.exports = function () {
  // https://mths.be/emoji
  return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};


/***/ }),

/***/ 7007:
/***/ (function(__unused_webpack_module, exports) {


/***
 * Node External Editor
 *
 * Kevin Gravier <kevin@mrkmg.com>
 * MIT 2018
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var LaunchEditorError = /** @class */ (function (_super) {
    __extends(LaunchEditorError, _super);
    function LaunchEditorError(originalError) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, "Failed launch editor") || this;
        _this.originalError = originalError;
        var proto = _newTarget.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(_this, proto);
        }
        else {
            _this.__proto__ = _newTarget.prototype;
        }
        return _this;
    }
    return LaunchEditorError;
}(Error));
exports.LaunchEditorError = LaunchEditorError;


/***/ }),

/***/ 7016:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("url");

/***/ }),

/***/ 7019:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.publish = void 0;
var Subject_1 = __webpack_require__(6118);
var multicast_1 = __webpack_require__(7662);
var connect_1 = __webpack_require__(4566);
function publish(selector) {
    return selector ? function (source) { return connect_1.connect(selector)(source); } : function (source) { return multicast_1.multicast(new Subject_1.Subject())(source); };
}
exports.publish = publish;
//# sourceMappingURL=publish.js.map

/***/ }),

/***/ 7041:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QueueAction = void 0;
var AsyncAction_1 = __webpack_require__(5970);
var QueueAction = (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.flush(this);
        return 0;
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
exports.QueueAction = QueueAction;
//# sourceMappingURL=QueueAction.js.map

/***/ }),

/***/ 7066:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:tty");

/***/ }),

/***/ 7075:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:stream");

/***/ }),

/***/ 7110:
/***/ ((module, exports, __webpack_require__) => {

var Stream = __webpack_require__(2203);
if (process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream.Readable;
  Object.assign(module.exports, Stream);
  module.exports.Stream = Stream;
} else {
  exports = module.exports = __webpack_require__(4324);
  exports.Stream = Stream || exports;
  exports.Readable = exports;
  exports.Writable = __webpack_require__(6868);
  exports.Duplex = __webpack_require__(5606);
  exports.Transform = __webpack_require__(4914);
  exports.PassThrough = __webpack_require__(9648);
  exports.finished = __webpack_require__(2862);
  exports.pipeline = __webpack_require__(110);
}


/***/ }),

/***/ 7129:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var QRErrorCorrectLevel = __webpack_require__(543);

function QRRSBlock(totalCount, dataCount) {
	this.totalCount = totalCount;
	this.dataCount  = dataCount;
}

QRRSBlock.RS_BLOCK_TABLE = [

	// L
	// M
	// Q
	// H

	// 1
	[1, 26, 19],
	[1, 26, 16],
	[1, 26, 13],
	[1, 26, 9],
	
	// 2
	[1, 44, 34],
	[1, 44, 28],
	[1, 44, 22],
	[1, 44, 16],

	// 3
	[1, 70, 55],
	[1, 70, 44],
	[2, 35, 17],
	[2, 35, 13],

	// 4		
	[1, 100, 80],
	[2, 50, 32],
	[2, 50, 24],
	[4, 25, 9],
	
	// 5
	[1, 134, 108],
	[2, 67, 43],
	[2, 33, 15, 2, 34, 16],
	[2, 33, 11, 2, 34, 12],
	
	// 6
	[2, 86, 68],
	[4, 43, 27],
	[4, 43, 19],
	[4, 43, 15],
	
	// 7		
	[2, 98, 78],
	[4, 49, 31],
	[2, 32, 14, 4, 33, 15],
	[4, 39, 13, 1, 40, 14],
	
	// 8
	[2, 121, 97],
	[2, 60, 38, 2, 61, 39],
	[4, 40, 18, 2, 41, 19],
	[4, 40, 14, 2, 41, 15],
	
	// 9
	[2, 146, 116],
	[3, 58, 36, 2, 59, 37],
	[4, 36, 16, 4, 37, 17],
	[4, 36, 12, 4, 37, 13],
	
	// 10		
	[2, 86, 68, 2, 87, 69],
	[4, 69, 43, 1, 70, 44],
	[6, 43, 19, 2, 44, 20],
	[6, 43, 15, 2, 44, 16],

	// 11
	[4, 101, 81],
	[1, 80, 50, 4, 81, 51],
	[4, 50, 22, 4, 51, 23],
	[3, 36, 12, 8, 37, 13],

	// 12
	[2, 116, 92, 2, 117, 93],
	[6, 58, 36, 2, 59, 37],
	[4, 46, 20, 6, 47, 21],
	[7, 42, 14, 4, 43, 15],

	// 13
	[4, 133, 107],
	[8, 59, 37, 1, 60, 38],
	[8, 44, 20, 4, 45, 21],
	[12, 33, 11, 4, 34, 12],

	// 14
	[3, 145, 115, 1, 146, 116],
	[4, 64, 40, 5, 65, 41],
	[11, 36, 16, 5, 37, 17],
	[11, 36, 12, 5, 37, 13],

	// 15
	[5, 109, 87, 1, 110, 88],
	[5, 65, 41, 5, 66, 42],
	[5, 54, 24, 7, 55, 25],
	[11, 36, 12],

	// 16
	[5, 122, 98, 1, 123, 99],
	[7, 73, 45, 3, 74, 46],
	[15, 43, 19, 2, 44, 20],
	[3, 45, 15, 13, 46, 16],

	// 17
	[1, 135, 107, 5, 136, 108],
	[10, 74, 46, 1, 75, 47],
	[1, 50, 22, 15, 51, 23],
	[2, 42, 14, 17, 43, 15],

	// 18
	[5, 150, 120, 1, 151, 121],
	[9, 69, 43, 4, 70, 44],
	[17, 50, 22, 1, 51, 23],
	[2, 42, 14, 19, 43, 15],

	// 19
	[3, 141, 113, 4, 142, 114],
	[3, 70, 44, 11, 71, 45],
	[17, 47, 21, 4, 48, 22],
	[9, 39, 13, 16, 40, 14],

	// 20
	[3, 135, 107, 5, 136, 108],
	[3, 67, 41, 13, 68, 42],
	[15, 54, 24, 5, 55, 25],
	[15, 43, 15, 10, 44, 16],

	// 21
	[4, 144, 116, 4, 145, 117],
	[17, 68, 42],
	[17, 50, 22, 6, 51, 23],
	[19, 46, 16, 6, 47, 17],

	// 22
	[2, 139, 111, 7, 140, 112],
	[17, 74, 46],
	[7, 54, 24, 16, 55, 25],
	[34, 37, 13],

	// 23
	[4, 151, 121, 5, 152, 122],
	[4, 75, 47, 14, 76, 48],
	[11, 54, 24, 14, 55, 25],
	[16, 45, 15, 14, 46, 16],

	// 24
	[6, 147, 117, 4, 148, 118],
	[6, 73, 45, 14, 74, 46],
	[11, 54, 24, 16, 55, 25],
	[30, 46, 16, 2, 47, 17],

	// 25
	[8, 132, 106, 4, 133, 107],
	[8, 75, 47, 13, 76, 48],
	[7, 54, 24, 22, 55, 25],
	[22, 45, 15, 13, 46, 16],

	// 26
	[10, 142, 114, 2, 143, 115],
	[19, 74, 46, 4, 75, 47],
	[28, 50, 22, 6, 51, 23],
	[33, 46, 16, 4, 47, 17],

	// 27
	[8, 152, 122, 4, 153, 123],
	[22, 73, 45, 3, 74, 46],
	[8, 53, 23, 26, 54, 24],
	[12, 45, 15, 28, 46, 16],

	// 28
	[3, 147, 117, 10, 148, 118],
	[3, 73, 45, 23, 74, 46],
	[4, 54, 24, 31, 55, 25],
	[11, 45, 15, 31, 46, 16],

	// 29
	[7, 146, 116, 7, 147, 117],
	[21, 73, 45, 7, 74, 46],
	[1, 53, 23, 37, 54, 24],
	[19, 45, 15, 26, 46, 16],

	// 30
	[5, 145, 115, 10, 146, 116],
	[19, 75, 47, 10, 76, 48],
	[15, 54, 24, 25, 55, 25],
	[23, 45, 15, 25, 46, 16],

	// 31
	[13, 145, 115, 3, 146, 116],
	[2, 74, 46, 29, 75, 47],
	[42, 54, 24, 1, 55, 25],
	[23, 45, 15, 28, 46, 16],

	// 32
	[17, 145, 115],
	[10, 74, 46, 23, 75, 47],
	[10, 54, 24, 35, 55, 25],
	[19, 45, 15, 35, 46, 16],

	// 33
	[17, 145, 115, 1, 146, 116],
	[14, 74, 46, 21, 75, 47],
	[29, 54, 24, 19, 55, 25],
	[11, 45, 15, 46, 46, 16],

	// 34
	[13, 145, 115, 6, 146, 116],
	[14, 74, 46, 23, 75, 47],
	[44, 54, 24, 7, 55, 25],
	[59, 46, 16, 1, 47, 17],

	// 35
	[12, 151, 121, 7, 152, 122],
	[12, 75, 47, 26, 76, 48],
	[39, 54, 24, 14, 55, 25],
	[22, 45, 15, 41, 46, 16],

	// 36
	[6, 151, 121, 14, 152, 122],
	[6, 75, 47, 34, 76, 48],
	[46, 54, 24, 10, 55, 25],
	[2, 45, 15, 64, 46, 16],

	// 37
	[17, 152, 122, 4, 153, 123],
	[29, 74, 46, 14, 75, 47],
	[49, 54, 24, 10, 55, 25],
	[24, 45, 15, 46, 46, 16],

	// 38
	[4, 152, 122, 18, 153, 123],
	[13, 74, 46, 32, 75, 47],
	[48, 54, 24, 14, 55, 25],
	[42, 45, 15, 32, 46, 16],

	// 39
	[20, 147, 117, 4, 148, 118],
	[40, 75, 47, 7, 76, 48],
	[43, 54, 24, 22, 55, 25],
	[10, 45, 15, 67, 46, 16],

	// 40
	[19, 148, 118, 6, 149, 119],
	[18, 75, 47, 31, 76, 48],
	[34, 54, 24, 34, 55, 25],
	[20, 45, 15, 61, 46, 16]
];

QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
	
	var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
	
	if (rsBlock === undefined) {
		throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
	}

	var length = rsBlock.length / 3;
	
	var list = [];
	
	for (var i = 0; i < length; i++) {

		var count = rsBlock[i * 3 + 0];
		var totalCount = rsBlock[i * 3 + 1];
		var dataCount  = rsBlock[i * 3 + 2];

		for (var j = 0; j < count; j++) {
			list.push(new QRRSBlock(totalCount, dataCount) );	
		}
	}
	
	return list;
};

QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {

	switch(errorCorrectLevel) {
	case QRErrorCorrectLevel.L :
		return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
	case QRErrorCorrectLevel.M :
		return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
	case QRErrorCorrectLevel.Q :
		return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
	case QRErrorCorrectLevel.H :
		return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
	default :
		return undefined;
	}
};

module.exports = QRRSBlock;


/***/ }),

/***/ 7145:
/***/ ((module) => {

module['exports'] = function(colors) {
  return function(letter, i, exploded) {
    return i % 2 === 0 ? letter : colors.inverse(letter);
  };
};


/***/ }),

/***/ 7160:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const ansiRegex = __webpack_require__(705);

module.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;


/***/ }),

/***/ 7172:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//
// Remark: Requiring this file will use the "safe" colors API,
// which will not touch String.prototype.
//
//   var colors = require('colors/safe');
//   colors.red("foo")
//
//
var colors = __webpack_require__(525);
module['exports'] = colors;


/***/ }),

/***/ 7187:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = {
  // Export promiseified graceful-fs:
  ...__webpack_require__(6903),
  // Export extra methods:
  ...__webpack_require__(5477),
  ...__webpack_require__(5017),
  ...__webpack_require__(6842),
  ...__webpack_require__(1742),
  ...__webpack_require__(4544),
  ...__webpack_require__(4301),
  ...__webpack_require__(4074),
  ...__webpack_require__(802),
  ...__webpack_require__(136)
}


/***/ }),

/***/ 7242:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isScheduler = void 0;
var isFunction_1 = __webpack_require__(8403);
function isScheduler(value) {
    return value && isFunction_1.isFunction(value.schedule);
}
exports.isScheduler = isScheduler;
//# sourceMappingURL=isScheduler.js.map

/***/ }),

/***/ 7243:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ boxen)
});

// UNUSED EXPORTS: _borderStyles

// EXTERNAL MODULE: external "node:process"
var external_node_process_ = __webpack_require__(1708);
// EXTERNAL MODULE: ./node_modules/.pnpm/string-width@7.2.0/node_modules/string-width/index.js + 3 modules
var string_width = __webpack_require__(4414);
// EXTERNAL MODULE: ./node_modules/.pnpm/chalk@5.6.0/node_modules/chalk/source/index.js + 4 modules
var source = __webpack_require__(3757);
;// ./node_modules/.pnpm/widest-line@5.0.0/node_modules/widest-line/index.js


function widestLine(string) {
	let lineWidth = 0;

	for (const line of string.split('\n')) {
		lineWidth = Math.max(lineWidth, (0,string_width/* default */.A)(line));
	}

	return lineWidth;
}

// EXTERNAL MODULE: ./node_modules/.pnpm/cli-boxes@3.0.0/node_modules/cli-boxes/index.js
var cli_boxes = __webpack_require__(5386);
;// ./node_modules/.pnpm/camelcase@8.0.0/node_modules/camelcase/index.js
const UPPERCASE = /[\p{Lu}]/u;
const LOWERCASE = /[\p{Ll}]/u;
const LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
const IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
const SEPARATORS = /[_.\- ]+/;

const LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);
const SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');
const NUMBERS_AND_IDENTIFIER = new RegExp('\\d+' + IDENTIFIER.source, 'gu');

const preserveCamelCase = (string, toLowerCase, toUpperCase, preserveConsecutiveUppercase) => {
	let isLastCharLower = false;
	let isLastCharUpper = false;
	let isLastLastCharUpper = false;
	let isLastLastCharPreserved = false;

	for (let index = 0; index < string.length; index++) {
		const character = string[index];
		isLastLastCharPreserved = index > 2 ? string[index - 3] === '-' : true;

		if (isLastCharLower && UPPERCASE.test(character)) {
			string = string.slice(0, index) + '-' + string.slice(index);
			isLastCharLower = false;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = true;
			index++;
		} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character) && (!isLastLastCharPreserved || preserveConsecutiveUppercase)) {
			string = string.slice(0, index - 1) + '-' + string.slice(index - 1);
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = false;
			isLastCharLower = true;
		} else {
			isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
		}
	}

	return string;
};

const preserveConsecutiveUppercase = (input, toLowerCase) => {
	LEADING_CAPITAL.lastIndex = 0;

	return input.replaceAll(LEADING_CAPITAL, match => toLowerCase(match));
};

const postProcess = (input, toUpperCase) => {
	SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
	NUMBERS_AND_IDENTIFIER.lastIndex = 0;

	return input
		.replaceAll(NUMBERS_AND_IDENTIFIER, (match, pattern, offset) => ['_', '-'].includes(input.charAt(offset + match.length)) ? match : toUpperCase(match))
		.replaceAll(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier));
};

function camelCase(input, options) {
	if (!(typeof input === 'string' || Array.isArray(input))) {
		throw new TypeError('Expected the input to be `string | string[]`');
	}

	options = {
		pascalCase: false,
		preserveConsecutiveUppercase: false,
		...options,
	};

	if (Array.isArray(input)) {
		input = input.map(x => x.trim())
			.filter(x => x.length)
			.join('-');
	} else {
		input = input.trim();
	}

	if (input.length === 0) {
		return '';
	}

	const toLowerCase = options.locale === false
		? string => string.toLowerCase()
		: string => string.toLocaleLowerCase(options.locale);

	const toUpperCase = options.locale === false
		? string => string.toUpperCase()
		: string => string.toLocaleUpperCase(options.locale);

	if (input.length === 1) {
		if (SEPARATORS.test(input)) {
			return '';
		}

		return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
	}

	const hasUpperCase = input !== toLowerCase(input);

	if (hasUpperCase) {
		input = preserveCamelCase(input, toLowerCase, toUpperCase, options.preserveConsecutiveUppercase);
	}

	input = input.replace(LEADING_SEPARATORS, '');
	input = options.preserveConsecutiveUppercase ? preserveConsecutiveUppercase(input, toLowerCase) : toLowerCase(input);

	if (options.pascalCase) {
		input = toUpperCase(input.charAt(0)) + input.slice(1);
	}

	return postProcess(input, toUpperCase);
}

// EXTERNAL MODULE: ./node_modules/.pnpm/ansi-align@3.0.1/node_modules/ansi-align/index.js
var ansi_align = __webpack_require__(4487);
// EXTERNAL MODULE: ./node_modules/.pnpm/strip-ansi@7.1.0/node_modules/strip-ansi/index.js + 1 modules
var strip_ansi = __webpack_require__(4729);
;// ./node_modules/.pnpm/ansi-styles@6.2.1/node_modules/ansi-styles/index.js
const ANSI_BACKGROUND_OFFSET = 10;

const wrapAnsi16 = (offset = 0) => code => `\u001B[${code + offset}m`;

const wrapAnsi256 = (offset = 0) => code => `\u001B[${38 + offset};5;${code}m`;

const wrapAnsi16m = (offset = 0) => (red, green, blue) => `\u001B[${38 + offset};2;${red};${green};${blue}m`;

const styles = {
	modifier: {
		reset: [0, 0],
		// 21 isn't widely supported and 22 does the same thing
		bold: [1, 22],
		dim: [2, 22],
		italic: [3, 23],
		underline: [4, 24],
		overline: [53, 55],
		inverse: [7, 27],
		hidden: [8, 28],
		strikethrough: [9, 29],
	},
	color: {
		black: [30, 39],
		red: [31, 39],
		green: [32, 39],
		yellow: [33, 39],
		blue: [34, 39],
		magenta: [35, 39],
		cyan: [36, 39],
		white: [37, 39],

		// Bright color
		blackBright: [90, 39],
		gray: [90, 39], // Alias of `blackBright`
		grey: [90, 39], // Alias of `blackBright`
		redBright: [91, 39],
		greenBright: [92, 39],
		yellowBright: [93, 39],
		blueBright: [94, 39],
		magentaBright: [95, 39],
		cyanBright: [96, 39],
		whiteBright: [97, 39],
	},
	bgColor: {
		bgBlack: [40, 49],
		bgRed: [41, 49],
		bgGreen: [42, 49],
		bgYellow: [43, 49],
		bgBlue: [44, 49],
		bgMagenta: [45, 49],
		bgCyan: [46, 49],
		bgWhite: [47, 49],

		// Bright color
		bgBlackBright: [100, 49],
		bgGray: [100, 49], // Alias of `bgBlackBright`
		bgGrey: [100, 49], // Alias of `bgBlackBright`
		bgRedBright: [101, 49],
		bgGreenBright: [102, 49],
		bgYellowBright: [103, 49],
		bgBlueBright: [104, 49],
		bgMagentaBright: [105, 49],
		bgCyanBright: [106, 49],
		bgWhiteBright: [107, 49],
	},
};

const modifierNames = Object.keys(styles.modifier);
const foregroundColorNames = Object.keys(styles.color);
const backgroundColorNames = Object.keys(styles.bgColor);
const colorNames = [...foregroundColorNames, ...backgroundColorNames];

function assembleStyles() {
	const codes = new Map();

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`,
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false,
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false,
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	styles.color.ansi = wrapAnsi16();
	styles.color.ansi256 = wrapAnsi256();
	styles.color.ansi16m = wrapAnsi16m();
	styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
	styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
	styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);

	// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js
	Object.defineProperties(styles, {
		rgbToAnsi256: {
			value: (red, green, blue) => {
				// We use the extended greyscale palette here, with the exception of
				// black and white. normal palette only has 4 greyscale shades.
				if (red === green && green === blue) {
					if (red < 8) {
						return 16;
					}

					if (red > 248) {
						return 231;
					}

					return Math.round(((red - 8) / 247) * 24) + 232;
				}

				return 16
					+ (36 * Math.round(red / 255 * 5))
					+ (6 * Math.round(green / 255 * 5))
					+ Math.round(blue / 255 * 5);
			},
			enumerable: false,
		},
		hexToRgb: {
			value: hex => {
				const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
				if (!matches) {
					return [0, 0, 0];
				}

				let [colorString] = matches;

				if (colorString.length === 3) {
					colorString = [...colorString].map(character => character + character).join('');
				}

				const integer = Number.parseInt(colorString, 16);

				return [
					/* eslint-disable no-bitwise */
					(integer >> 16) & 0xFF,
					(integer >> 8) & 0xFF,
					integer & 0xFF,
					/* eslint-enable no-bitwise */
				];
			},
			enumerable: false,
		},
		hexToAnsi256: {
			value: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
			enumerable: false,
		},
		ansi256ToAnsi: {
			value: code => {
				if (code < 8) {
					return 30 + code;
				}

				if (code < 16) {
					return 90 + (code - 8);
				}

				let red;
				let green;
				let blue;

				if (code >= 232) {
					red = (((code - 232) * 10) + 8) / 255;
					green = red;
					blue = red;
				} else {
					code -= 16;

					const remainder = code % 36;

					red = Math.floor(code / 36) / 5;
					green = Math.floor(remainder / 6) / 5;
					blue = (remainder % 6) / 5;
				}

				const value = Math.max(red, green, blue) * 2;

				if (value === 0) {
					return 30;
				}

				// eslint-disable-next-line no-bitwise
				let result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));

				if (value === 2) {
					result += 60;
				}

				return result;
			},
			enumerable: false,
		},
		rgbToAnsi: {
			value: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),
			enumerable: false,
		},
		hexToAnsi: {
			value: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),
			enumerable: false,
		},
	});

	return styles;
}

const ansiStyles = assembleStyles();

/* harmony default export */ const ansi_styles = (ansiStyles);

;// ./node_modules/.pnpm/wrap-ansi@9.0.0/node_modules/wrap-ansi/index.js




const ESCAPES = new Set([
	'\u001B',
	'\u009B',
]);

const END_CODE = 39;
const ANSI_ESCAPE_BELL = '\u0007';
const ANSI_CSI = '[';
const ANSI_OSC = ']';
const ANSI_SGR_TERMINATOR = 'm';
const ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;

const wrapAnsiCode = code => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;
const wrapAnsiHyperlink = url => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${url}${ANSI_ESCAPE_BELL}`;

// Calculate the length of words split on ' ', ignoring
// the extra characters added by ansi escape codes
const wordLengths = string => string.split(' ').map(character => (0,string_width/* default */.A)(character));

// Wrap a long word across multiple rows
// Ansi escape codes do not count towards length
const wrapWord = (rows, word, columns) => {
	const characters = [...word];

	let isInsideEscape = false;
	let isInsideLinkEscape = false;
	let visible = (0,string_width/* default */.A)((0,strip_ansi/* default */.A)(rows.at(-1)));

	for (const [index, character] of characters.entries()) {
		const characterLength = (0,string_width/* default */.A)(character);

		if (visible + characterLength <= columns) {
			rows[rows.length - 1] += character;
		} else {
			rows.push(character);
			visible = 0;
		}

		if (ESCAPES.has(character)) {
			isInsideEscape = true;

			const ansiEscapeLinkCandidate = characters.slice(index + 1, index + 1 + ANSI_ESCAPE_LINK.length).join('');
			isInsideLinkEscape = ansiEscapeLinkCandidate === ANSI_ESCAPE_LINK;
		}

		if (isInsideEscape) {
			if (isInsideLinkEscape) {
				if (character === ANSI_ESCAPE_BELL) {
					isInsideEscape = false;
					isInsideLinkEscape = false;
				}
			} else if (character === ANSI_SGR_TERMINATOR) {
				isInsideEscape = false;
			}

			continue;
		}

		visible += characterLength;

		if (visible === columns && index < characters.length - 1) {
			rows.push('');
			visible = 0;
		}
	}

	// It's possible that the last row we copy over is only
	// ansi escape characters, handle this edge-case
	if (!visible && rows.at(-1).length > 0 && rows.length > 1) {
		rows[rows.length - 2] += rows.pop();
	}
};

// Trims spaces from a string ignoring invisible sequences
const stringVisibleTrimSpacesRight = string => {
	const words = string.split(' ');
	let last = words.length;

	while (last > 0) {
		if ((0,string_width/* default */.A)(words[last - 1]) > 0) {
			break;
		}

		last--;
	}

	if (last === words.length) {
		return string;
	}

	return words.slice(0, last).join(' ') + words.slice(last).join('');
};

// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode.
//
// 'hard' will never allow a string to take up more than columns characters.
//
// 'soft' allows long words to expand past the column length.
const exec = (string, columns, options = {}) => {
	if (options.trim !== false && string.trim() === '') {
		return '';
	}

	let returnValue = '';
	let escapeCode;
	let escapeUrl;

	const lengths = wordLengths(string);
	let rows = [''];

	for (const [index, word] of string.split(' ').entries()) {
		if (options.trim !== false) {
			rows[rows.length - 1] = rows.at(-1).trimStart();
		}

		let rowLength = (0,string_width/* default */.A)(rows.at(-1));

		if (index !== 0) {
			if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
				// If we start with a new word but the current row length equals the length of the columns, add a new row
				rows.push('');
				rowLength = 0;
			}

			if (rowLength > 0 || options.trim === false) {
				rows[rows.length - 1] += ' ';
				rowLength++;
			}
		}

		// In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'
		if (options.hard && lengths[index] > columns) {
			const remainingColumns = (columns - rowLength);
			const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
			const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
			if (breaksStartingNextLine < breaksStartingThisLine) {
				rows.push('');
			}

			wrapWord(rows, word, columns);
			continue;
		}

		if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
			if (options.wordWrap === false && rowLength < columns) {
				wrapWord(rows, word, columns);
				continue;
			}

			rows.push('');
		}

		if (rowLength + lengths[index] > columns && options.wordWrap === false) {
			wrapWord(rows, word, columns);
			continue;
		}

		rows[rows.length - 1] += word;
	}

	if (options.trim !== false) {
		rows = rows.map(row => stringVisibleTrimSpacesRight(row));
	}

	const preString = rows.join('\n');
	const pre = [...preString];

	// We need to keep a separate index as `String#slice()` works on Unicode code units, while `pre` is an array of codepoints.
	let preStringIndex = 0;

	for (const [index, character] of pre.entries()) {
		returnValue += character;

		if (ESCAPES.has(character)) {
			const {groups} = new RegExp(`(?:\\${ANSI_CSI}(?<code>\\d+)m|\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(preString.slice(preStringIndex)) || {groups: {}};
			if (groups.code !== undefined) {
				const code = Number.parseFloat(groups.code);
				escapeCode = code === END_CODE ? undefined : code;
			} else if (groups.uri !== undefined) {
				escapeUrl = groups.uri.length === 0 ? undefined : groups.uri;
			}
		}

		const code = ansi_styles.codes.get(Number(escapeCode));

		if (pre[index + 1] === '\n') {
			if (escapeUrl) {
				returnValue += wrapAnsiHyperlink('');
			}

			if (escapeCode && code) {
				returnValue += wrapAnsiCode(code);
			}
		} else if (character === '\n') {
			if (escapeCode && code) {
				returnValue += wrapAnsiCode(escapeCode);
			}

			if (escapeUrl) {
				returnValue += wrapAnsiHyperlink(escapeUrl);
			}
		}

		preStringIndex += character.length;
	}

	return returnValue;
};

// For each newline, invoke the method separately
function wrapAnsi(string, columns, options) {
	return String(string)
		.normalize()
		.replaceAll('\r\n', '\n')
		.split('\n')
		.map(line => exec(line, columns, options))
		.join('\n');
}

;// ./node_modules/.pnpm/boxen@8.0.1/node_modules/boxen/index.js









const NEWLINE = '\n';
const PAD = ' ';
const NONE = 'none';

const terminalColumns = () => {
	const {env, stdout, stderr} = external_node_process_;

	if (stdout?.columns) {
		return stdout.columns;
	}

	if (stderr?.columns) {
		return stderr.columns;
	}

	if (env.COLUMNS) {
		return Number.parseInt(env.COLUMNS, 10);
	}

	return 80;
};

const getObject = detail => typeof detail === 'number' ? {
	top: detail,
	right: detail * 3,
	bottom: detail,
	left: detail * 3,
} : {
	top: 0,
	right: 0,
	bottom: 0,
	left: 0,
	...detail,
};

const getBorderWidth = borderStyle => borderStyle === NONE ? 0 : 2;

const getBorderChars = borderStyle => {
	const sides = [
		'topLeft',
		'topRight',
		'bottomRight',
		'bottomLeft',
		'left',
		'right',
		'top',
		'bottom',
	];

	let characters;

	// Create empty border style
	if (borderStyle === NONE) {
		borderStyle = {};
		for (const side of sides) {
			borderStyle[side] = '';
		}
	}

	if (typeof borderStyle === 'string') {
		characters = cli_boxes[borderStyle];

		if (!characters) {
			throw new TypeError(`Invalid border style: ${borderStyle}`);
		}
	} else {
		// Ensure retro-compatibility
		if (typeof borderStyle?.vertical === 'string') {
			borderStyle.left = borderStyle.vertical;
			borderStyle.right = borderStyle.vertical;
		}

		// Ensure retro-compatibility
		if (typeof borderStyle?.horizontal === 'string') {
			borderStyle.top = borderStyle.horizontal;
			borderStyle.bottom = borderStyle.horizontal;
		}

		for (const side of sides) {
			if (borderStyle[side] === null || typeof borderStyle[side] !== 'string') {
				throw new TypeError(`Invalid border style: ${side}`);
			}
		}

		characters = borderStyle;
	}

	return characters;
};

const makeTitle = (text, horizontal, alignment) => {
	let title = '';

	const textWidth = (0,string_width/* default */.A)(text);

	switch (alignment) {
		case 'left': {
			title = text + horizontal.slice(textWidth);
			break;
		}

		case 'right': {
			title = horizontal.slice(textWidth) + text;
			break;
		}

		default: {
			horizontal = horizontal.slice(textWidth);

			if (horizontal.length % 2 === 1) { // This is needed in case the length is odd
				horizontal = horizontal.slice(Math.floor(horizontal.length / 2));
				title = horizontal.slice(1) + text + horizontal; // We reduce the left part of one character to avoid the bar to go beyond its limit
			} else {
				horizontal = horizontal.slice(horizontal.length / 2);
				title = horizontal + text + horizontal;
			}

			break;
		}
	}

	return title;
};

const makeContentText = (text, {padding, width, textAlignment, height}) => {
	text = ansi_align(text, {align: textAlignment});
	let lines = text.split(NEWLINE);
	const textWidth = widestLine(text);

	const max = width - padding.left - padding.right;

	if (textWidth > max) {
		const newLines = [];
		for (const line of lines) {
			const createdLines = wrapAnsi(line, max, {hard: true});
			const alignedLines = ansi_align(createdLines, {align: textAlignment});
			const alignedLinesArray = alignedLines.split('\n');
			const longestLength = Math.max(...alignedLinesArray.map(s => (0,string_width/* default */.A)(s)));

			for (const alignedLine of alignedLinesArray) {
				let paddedLine;
				switch (textAlignment) {
					case 'center': {
						paddedLine = PAD.repeat((max - longestLength) / 2) + alignedLine;
						break;
					}

					case 'right': {
						paddedLine = PAD.repeat(max - longestLength) + alignedLine;
						break;
					}

					default: {
						paddedLine = alignedLine;
						break;
					}
				}

				newLines.push(paddedLine);
			}
		}

		lines = newLines;
	}

	if (textAlignment === 'center' && textWidth < max) {
		lines = lines.map(line => PAD.repeat((max - textWidth) / 2) + line);
	} else if (textAlignment === 'right' && textWidth < max) {
		lines = lines.map(line => PAD.repeat(max - textWidth) + line);
	}

	const paddingLeft = PAD.repeat(padding.left);
	const paddingRight = PAD.repeat(padding.right);

	lines = lines.map(line => {
		const newLine = paddingLeft + line + paddingRight;

		return newLine + PAD.repeat(width - (0,string_width/* default */.A)(newLine));
	});

	if (padding.top > 0) {
		lines = [...Array.from({length: padding.top}).fill(PAD.repeat(width)), ...lines];
	}

	if (padding.bottom > 0) {
		lines = [...lines, ...Array.from({length: padding.bottom}).fill(PAD.repeat(width))];
	}

	if (height && lines.length > height) {
		lines = lines.slice(0, height);
	} else if (height && lines.length < height) {
		lines = [...lines, ...Array.from({length: height - lines.length}).fill(PAD.repeat(width))];
	}

	return lines.join(NEWLINE);
};

const boxContent = (content, contentWidth, options) => {
	const colorizeBorder = border => {
		const newBorder = options.borderColor ? getColorFunction(options.borderColor)(border) : border;
		return options.dimBorder ? source/* default */.Ay.dim(newBorder) : newBorder;
	};

	const colorizeContent = content => options.backgroundColor ? getBGColorFunction(options.backgroundColor)(content) : content;

	const chars = getBorderChars(options.borderStyle);
	const columns = terminalColumns();
	let marginLeft = PAD.repeat(options.margin.left);

	if (options.float === 'center') {
		const marginWidth = Math.max((columns - contentWidth - getBorderWidth(options.borderStyle)) / 2, 0);
		marginLeft = PAD.repeat(marginWidth);
	} else if (options.float === 'right') {
		const marginWidth = Math.max(columns - contentWidth - options.margin.right - getBorderWidth(options.borderStyle), 0);
		marginLeft = PAD.repeat(marginWidth);
	}

	let result = '';

	if (options.margin.top) {
		result += NEWLINE.repeat(options.margin.top);
	}

	if (options.borderStyle !== NONE || options.title) {
		result += colorizeBorder(marginLeft + chars.topLeft + (options.title ? makeTitle(options.title, chars.top.repeat(contentWidth), options.titleAlignment) : chars.top.repeat(contentWidth)) + chars.topRight) + NEWLINE;
	}

	const lines = content.split(NEWLINE);

	result += lines.map(line => marginLeft + colorizeBorder(chars.left) + colorizeContent(line) + colorizeBorder(chars.right)).join(NEWLINE);

	if (options.borderStyle !== NONE) {
		result += NEWLINE + colorizeBorder(marginLeft + chars.bottomLeft + chars.bottom.repeat(contentWidth) + chars.bottomRight);
	}

	if (options.margin.bottom) {
		result += NEWLINE.repeat(options.margin.bottom);
	}

	return result;
};

const sanitizeOptions = options => {
	// If fullscreen is enabled, max-out unspecified width/height
	if (options.fullscreen && external_node_process_?.stdout) {
		let newDimensions = [external_node_process_.stdout.columns, external_node_process_.stdout.rows];

		if (typeof options.fullscreen === 'function') {
			newDimensions = options.fullscreen(...newDimensions);
		}

		options.width ||= newDimensions[0];

		options.height ||= newDimensions[1];
	}

	// If width is provided, make sure it's not below 1
	options.width &&= Math.max(1, options.width - getBorderWidth(options.borderStyle));

	// If height is provided, make sure it's not below 1
	options.height &&= Math.max(1, options.height - getBorderWidth(options.borderStyle));

	return options;
};

const formatTitle = (title, borderStyle) => borderStyle === NONE ? title : ` ${title} `;

const determineDimensions = (text, options) => {
	options = sanitizeOptions(options);
	const widthOverride = options.width !== undefined;
	const columns = terminalColumns();
	const borderWidth = getBorderWidth(options.borderStyle);
	const maxWidth = columns - options.margin.left - options.margin.right - borderWidth;

	const widest = widestLine(wrapAnsi(text, columns - borderWidth, {hard: true, trim: false})) + options.padding.left + options.padding.right;

	// If title and width are provided, title adheres to fixed width
	if (options.title && widthOverride) {
		options.title = options.title.slice(0, Math.max(0, options.width - 2));
		options.title &&= formatTitle(options.title, options.borderStyle);
	} else if (options.title) {
		options.title = options.title.slice(0, Math.max(0, maxWidth - 2));

		// Recheck if title isn't empty now
		if (options.title) {
			options.title = formatTitle(options.title, options.borderStyle);
			// If the title is larger than content, box adheres to title width
			if ((0,string_width/* default */.A)(options.title) > widest) {
				options.width = (0,string_width/* default */.A)(options.title);
			}
		}
	}

	// If fixed width is provided, use it or content width as reference
	options.width ||= widest;

	if (!widthOverride) {
		if ((options.margin.left && options.margin.right) && options.width > maxWidth) {
			// Let's assume we have margins: left = 3, right = 5, in total = 8
			const spaceForMargins = columns - options.width - borderWidth;
			// Let's assume we have space = 4
			const multiplier = spaceForMargins / (options.margin.left + options.margin.right);
			// Here: multiplier = 4/8 = 0.5
			options.margin.left = Math.max(0, Math.floor(options.margin.left * multiplier));
			options.margin.right = Math.max(0, Math.floor(options.margin.right * multiplier));
			// Left: 3 * 0.5 = 1.5 -> 1
			// Right: 6 * 0.5 = 3
		}

		// Re-cap width considering the margins after shrinking
		options.width = Math.min(options.width, columns - borderWidth - options.margin.left - options.margin.right);
	}

	// Prevent padding overflow
	if (options.width - (options.padding.left + options.padding.right) <= 0) {
		options.padding.left = 0;
		options.padding.right = 0;
	}

	if (options.height && options.height - (options.padding.top + options.padding.bottom) <= 0) {
		options.padding.top = 0;
		options.padding.bottom = 0;
	}

	return options;
};

const isHex = color => color.match(/^#(?:[0-f]{3}){1,2}$/i);
const isColorValid = color => typeof color === 'string' && (source/* default */.Ay[color] ?? isHex(color));
const getColorFunction = color => isHex(color) ? source/* default */.Ay.hex(color) : source/* default */.Ay[color];
const getBGColorFunction = color => isHex(color) ? source/* default */.Ay.bgHex(color) : source/* default */.Ay[camelCase(['bg', color])];

function boxen(text, options) {
	options = {
		padding: 0,
		borderStyle: 'single',
		dimBorder: false,
		textAlignment: 'left',
		float: 'left',
		titleAlignment: 'left',
		...options,
	};

	// This option is deprecated
	if (options.align) {
		options.textAlignment = options.align;
	}

	if (options.borderColor && !isColorValid(options.borderColor)) {
		throw new Error(`${options.borderColor} is not a valid borderColor`);
	}

	if (options.backgroundColor && !isColorValid(options.backgroundColor)) {
		throw new Error(`${options.backgroundColor} is not a valid backgroundColor`);
	}

	options.padding = getObject(options.padding);
	options.margin = getObject(options.margin);

	options = determineDimensions(text, options);

	text = makeContentText(text, options);

	return boxContent(text, options.width, options);
}




/***/ }),

/***/ 7254:
/***/ ((module) => {

/*
MIT License

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/



module.exports = function(flag, argv) {
  argv = argv || process.argv;

  var terminatorPos = argv.indexOf('--');
  var prefix = /^-{1,2}/.test(flag) ? '' : '--';
  var pos = argv.indexOf(prefix + flag);

  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};


/***/ }),

/***/ 7256:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindCallback = void 0;
var bindCallbackInternals_1 = __webpack_require__(1864);
function bindCallback(callbackFunc, resultSelector, scheduler) {
    return bindCallbackInternals_1.bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);
}
exports.bindCallback = bindCallback;
//# sourceMappingURL=bindCallback.js.map

/***/ }),

/***/ 7284:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.buffer = void 0;
var lift_1 = __webpack_require__(4698);
var noop_1 = __webpack_require__(8563);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
function buffer(closingNotifier) {
    return lift_1.operate(function (source, subscriber) {
        var currentBuffer = [];
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) { return currentBuffer.push(value); }, function () {
            subscriber.next(currentBuffer);
            subscriber.complete();
        }));
        innerFrom_1.innerFrom(closingNotifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
            var b = currentBuffer;
            currentBuffer = [];
            subscriber.next(b);
        }, noop_1.noop));
        return function () {
            currentBuffer = null;
        };
    });
}
exports.buffer = buffer;
//# sourceMappingURL=buffer.js.map

/***/ }),

/***/ 7305:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.elementAt = void 0;
var ArgumentOutOfRangeError_1 = __webpack_require__(6546);
var filter_1 = __webpack_require__(248);
var throwIfEmpty_1 = __webpack_require__(6626);
var defaultIfEmpty_1 = __webpack_require__(4761);
var take_1 = __webpack_require__(8693);
function elementAt(index, defaultValue) {
    if (index < 0) {
        throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
    }
    var hasDefaultValue = arguments.length >= 2;
    return function (source) {
        return source.pipe(filter_1.filter(function (v, i) { return i === index; }), take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function () { return new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError(); }));
    };
}
exports.elementAt = elementAt;
//# sourceMappingURL=elementAt.js.map

/***/ }),

/***/ 7318:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const debug = __webpack_require__(7482)
const { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__(4335)
const { safeRe: re, t } = __webpack_require__(32)

const parseOptions = __webpack_require__(677)
const { compareIdentifiers } = __webpack_require__(101)
class SemVer {
  constructor (version, options) {
    options = parseOptions(options)

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose &&
        version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug('SemVer', version, options)
    this.options = options
    this.loose = !!options.loose
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease

    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version

    // these are actually numbers
    this.major = +m[1]
    this.minor = +m[2]
    this.patch = +m[3]

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = []
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      })
    }

    this.build = m[5] ? m[5].split('.') : []
    this.format()
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug('SemVer.compare', this.version, this.options, other)
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer(other, this.options)
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0
    do {
      const a = this.prerelease[i]
      const b = other.prerelease[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    let i = 0
    do {
      const a = this.build[i]
      const b = other.build[i]
      debug('build compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier, identifierBase) {
    if (release.startsWith('pre')) {
      if (!identifier && identifierBase === false) {
        throw new Error('invalid increment argument: identifier is empty')
      }
      // Avoid an invalid semver results
      if (identifier) {
        const match = `-${identifier}`.match(this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE])
        if (!match || match[1] !== identifier) {
          throw new Error(`invalid identifier: ${identifier}`)
        }
      }
    }

    switch (release) {
      case 'premajor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor = 0
        this.major++
        this.inc('pre', identifier, identifierBase)
        break
      case 'preminor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor++
        this.inc('pre', identifier, identifierBase)
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0
        this.inc('patch', identifier, identifierBase)
        this.inc('pre', identifier, identifierBase)
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier, identifierBase)
        }
        this.inc('pre', identifier, identifierBase)
        break
      case 'release':
        if (this.prerelease.length === 0) {
          throw new Error(`version ${this.raw} is not a prerelease`)
        }
        this.prerelease.length = 0
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++
        }
        this.minor = 0
        this.patch = 0
        this.prerelease = []
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++
        }
        this.patch = 0
        this.prerelease = []
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++
        }
        this.prerelease = []
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre': {
        const base = Number(identifierBase) ? 1 : 0

        if (this.prerelease.length === 0) {
          this.prerelease = [base]
        } else {
          let i = this.prerelease.length
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++
              i = -2
            }
          }
          if (i === -1) {
            // didn't increment anything
            if (identifier === this.prerelease.join('.') && identifierBase === false) {
              throw new Error('invalid increment argument: identifier already exists')
            }
            this.prerelease.push(base)
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          let prerelease = [identifier, base]
          if (identifierBase === false) {
            prerelease = [identifier]
          }
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = prerelease
            }
          } else {
            this.prerelease = prerelease
          }
        }
        break
      }
      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.raw = this.format()
    if (this.build.length) {
      this.raw += `+${this.build.join('.')}`
    }
    return this
  }
}

module.exports = SemVer


/***/ }),

/***/ 7386:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimeInterval = exports.timeInterval = void 0;
var async_1 = __webpack_require__(7688);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function timeInterval(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.asyncScheduler; }
    return lift_1.operate(function (source, subscriber) {
        var last = scheduler.now();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var now = scheduler.now();
            var interval = now - last;
            last = now;
            subscriber.next(new TimeInterval(value, interval));
        }));
    });
}
exports.timeInterval = timeInterval;
var TimeInterval = (function () {
    function TimeInterval(value, interval) {
        this.value = value;
        this.interval = interval;
    }
    return TimeInterval;
}());
exports.TimeInterval = TimeInterval;
//# sourceMappingURL=timeInterval.js.map

/***/ }),

/***/ 7394:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reportUnhandledError = void 0;
var config_1 = __webpack_require__(2454);
var timeoutProvider_1 = __webpack_require__(7826);
function reportUnhandledError(err) {
    timeoutProvider_1.timeoutProvider.setTimeout(function () {
        var onUnhandledError = config_1.config.onUnhandledError;
        if (onUnhandledError) {
            onUnhandledError(err);
        }
        else {
            throw err;
        }
    });
}
exports.reportUnhandledError = reportUnhandledError;
//# sourceMappingURL=reportUnhandledError.js.map

/***/ }),

/***/ 7450:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const DuplexStream = (__webpack_require__(7110).Duplex)
const inherits = __webpack_require__(7835)
const BufferList = __webpack_require__(930)

function BufferListStream (callback) {
  if (!(this instanceof BufferListStream)) {
    return new BufferListStream(callback)
  }

  if (typeof callback === 'function') {
    this._callback = callback

    const piper = function piper (err) {
      if (this._callback) {
        this._callback(err)
        this._callback = null
      }
    }.bind(this)

    this.on('pipe', function onPipe (src) {
      src.on('error', piper)
    })
    this.on('unpipe', function onUnpipe (src) {
      src.removeListener('error', piper)
    })

    callback = null
  }

  BufferList._init.call(this, callback)
  DuplexStream.call(this)
}

inherits(BufferListStream, DuplexStream)
Object.assign(BufferListStream.prototype, BufferList.prototype)

BufferListStream.prototype._new = function _new (callback) {
  return new BufferListStream(callback)
}

BufferListStream.prototype._write = function _write (buf, encoding, callback) {
  this._appendBuffer(buf)

  if (typeof callback === 'function') {
    callback()
  }
}

BufferListStream.prototype._read = function _read (size) {
  if (!this.length) {
    return this.push(null)
  }

  size = Math.min(size, this.length)
  this.push(this.slice(0, size))
  this.consume(size)
}

BufferListStream.prototype.end = function end (chunk) {
  DuplexStream.prototype.end.call(this, chunk)

  if (this._callback) {
    this._callback(null, this.slice())
    this._callback = null
  }
}

BufferListStream.prototype._destroy = function _destroy (err, cb) {
  this._bufs.length = 0
  this.length = 0
  cb(err)
}

BufferListStream.prototype._isBufferList = function _isBufferList (b) {
  return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b)
}

BufferListStream.isBufferList = BufferList.isBufferList

module.exports = BufferListStream
module.exports.BufferListStream = BufferListStream
module.exports.BufferList = BufferList


/***/ }),

/***/ 7451:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isInteropObservable = void 0;
var observable_1 = __webpack_require__(9498);
var isFunction_1 = __webpack_require__(8403);
function isInteropObservable(input) {
    return isFunction_1.isFunction(input[observable_1.observable]);
}
exports.isInteropObservable = isInteropObservable;
//# sourceMappingURL=isInteropObservable.js.map

/***/ }),

/***/ 7475:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable node/no-deprecated-api */



var buffer = __webpack_require__(181)
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer


/***/ }),

/***/ 7480:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const fs = __webpack_require__(6903)
const path = __webpack_require__(6928)
const { copy } = __webpack_require__(5477)
const { remove } = __webpack_require__(136)
const { mkdirp } = __webpack_require__(4544)
const { pathExists } = __webpack_require__(802)
const stat = __webpack_require__(1560)

async function move (src, dest, opts = {}) {
  const overwrite = opts.overwrite || opts.clobber || false

  const { srcStat, isChangingCase = false } = await stat.checkPaths(src, dest, 'move', opts)

  await stat.checkParentPaths(src, srcStat, dest, 'move')

  // If the parent of dest is not root, make sure it exists before proceeding
  const destParent = path.dirname(dest)
  const parsedParentPath = path.parse(destParent)
  if (parsedParentPath.root !== destParent) {
    await mkdirp(destParent)
  }

  return doRename(src, dest, overwrite, isChangingCase)
}

async function doRename (src, dest, overwrite, isChangingCase) {
  if (!isChangingCase) {
    if (overwrite) {
      await remove(dest)
    } else if (await pathExists(dest)) {
      throw new Error('dest already exists.')
    }
  }

  try {
    // Try w/ rename first, and try copy + remove if EXDEV
    await fs.rename(src, dest)
  } catch (err) {
    if (err.code !== 'EXDEV') {
      throw err
    }
    await moveAcrossDevice(src, dest, overwrite)
  }
}

async function moveAcrossDevice (src, dest, overwrite) {
  const opts = {
    overwrite,
    errorOnExist: true,
    preserveTimestamps: true
  }

  await copy(src, dest, opts)
  return remove(src)
}

module.exports = move


/***/ }),

/***/ 7482:
/***/ ((module) => {



const debug = (
  typeof process === 'object' &&
  process.env &&
  process.env.NODE_DEBUG &&
  /\bsemver\b/i.test(process.env.NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {}

module.exports = debug


/***/ }),

/***/ 7534:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.combineAll = void 0;
var combineLatestAll_1 = __webpack_require__(8187);
exports.combineAll = combineLatestAll_1.combineLatestAll;
//# sourceMappingURL=combineAll.js.map

/***/ }),

/***/ 7542:
/***/ ((module) => {



const stringReplaceAll = (string, substring, replacer) => {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

module.exports = {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
};


/***/ }),

/***/ 7568:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.from = void 0;
var scheduled_1 = __webpack_require__(3861);
var innerFrom_1 = __webpack_require__(2018);
function from(input, scheduler) {
    return scheduler ? scheduled_1.scheduled(input, scheduler) : innerFrom_1.innerFrom(input);
}
exports.from = from;
//# sourceMappingURL=from.js.map

/***/ }),

/***/ 7610:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.retryWhen = void 0;
var innerFrom_1 = __webpack_require__(2018);
var Subject_1 = __webpack_require__(6118);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function retryWhen(notifier) {
    return lift_1.operate(function (source, subscriber) {
        var innerSub;
        var syncResub = false;
        var errors$;
        var subscribeForRetryWhen = function () {
            innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
                if (!errors$) {
                    errors$ = new Subject_1.Subject();
                    innerFrom_1.innerFrom(notifier(errors$)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
                        return innerSub ? subscribeForRetryWhen() : (syncResub = true);
                    }));
                }
                if (errors$) {
                    errors$.next(err);
                }
            }));
            if (syncResub) {
                innerSub.unsubscribe();
                innerSub = null;
                syncResub = false;
                subscribeForRetryWhen();
            }
        };
        subscribeForRetryWhen();
    });
}
exports.retryWhen = retryWhen;
//# sourceMappingURL=retryWhen.js.map

/***/ }),

/***/ 7625:
/***/ ((module) => {

/*
    FIGlet.js (a FIGDriver for FIGlet fonts)
    Written by https://github.com/patorjk/figlet.js/graphs/contributors
    Originally Written For: http://patorjk.com/software/taag/
    License: MIT (with this header staying intact)

    This JavaScript code aims to fully implement the FIGlet spec.
    Full FIGlet spec: http://patorjk.com/software/taag/docs/figfont.txt

    FIGlet fonts are actually kind of complex, which is why you will see
    a lot of code about parsing and interpreting rules. The actual generation
    code is pretty simple and is done near the bottom of the code.
*/



const figlet = (() => {
  // ---------------------------------------------------------------------
  // Private static variables

  const FULL_WIDTH = 0,
    FITTING = 1,
    SMUSHING = 2,
    CONTROLLED_SMUSHING = 3;

  // ---------------------------------------------------------------------
  // Variable that will hold information about the fonts

  const figFonts = {}; // What stores all of the FIGlet font data
  const figDefaults = {
    font: "Standard",
    fontPath: "./fonts",
  };

  // ---------------------------------------------------------------------
  // Private static methods

  /*
        This method takes in the oldLayout and newLayout data from the FIGfont header file and returns
        the layout information.
    */
  function getSmushingRules(oldLayout, newLayout) {
    let rules = {};
    let val, index, len, code;
    let codes = [
      [16384, "vLayout", SMUSHING],
      [8192, "vLayout", FITTING],
      [4096, "vRule5", true],
      [2048, "vRule4", true],
      [1024, "vRule3", true],
      [512, "vRule2", true],
      [256, "vRule1", true],
      [128, "hLayout", SMUSHING],
      [64, "hLayout", FITTING],
      [32, "hRule6", true],
      [16, "hRule5", true],
      [8, "hRule4", true],
      [4, "hRule3", true],
      [2, "hRule2", true],
      [1, "hRule1", true],
    ];

    val = newLayout !== null ? newLayout : oldLayout;
    index = 0;
    len = codes.length;
    while (index < len) {
      code = codes[index];
      if (val >= code[0]) {
        val = val - code[0];
        rules[code[1]] =
          typeof rules[code[1]] === "undefined" ? code[2] : rules[code[1]];
      } else if (code[1] !== "vLayout" && code[1] !== "hLayout") {
        rules[code[1]] = false;
      }
      index++;
    }

    if (typeof rules["hLayout"] === "undefined") {
      if (oldLayout === 0) {
        rules["hLayout"] = FITTING;
      } else if (oldLayout === -1) {
        rules["hLayout"] = FULL_WIDTH;
      } else {
        if (
          rules["hRule1"] ||
          rules["hRule2"] ||
          rules["hRule3"] ||
          rules["hRule4"] ||
          rules["hRule5"] ||
          rules["hRule6"]
        ) {
          rules["hLayout"] = CONTROLLED_SMUSHING;
        } else {
          rules["hLayout"] = SMUSHING;
        }
      }
    } else if (rules["hLayout"] === SMUSHING) {
      if (
        rules["hRule1"] ||
        rules["hRule2"] ||
        rules["hRule3"] ||
        rules["hRule4"] ||
        rules["hRule5"] ||
        rules["hRule6"]
      ) {
        rules["hLayout"] = CONTROLLED_SMUSHING;
      }
    }

    if (typeof rules["vLayout"] === "undefined") {
      if (
        rules["vRule1"] ||
        rules["vRule2"] ||
        rules["vRule3"] ||
        rules["vRule4"] ||
        rules["vRule5"]
      ) {
        rules["vLayout"] = CONTROLLED_SMUSHING;
      } else {
        rules["vLayout"] = FULL_WIDTH;
      }
    } else if (rules["vLayout"] === SMUSHING) {
      if (
        rules["vRule1"] ||
        rules["vRule2"] ||
        rules["vRule3"] ||
        rules["vRule4"] ||
        rules["vRule5"]
      ) {
        rules["vLayout"] = CONTROLLED_SMUSHING;
      }
    }

    return rules;
  }

  /* The [vh]Rule[1-6]_Smush functions return the smushed character OR false if the two characters can't be smushed */

  /*
        Rule 1: EQUAL CHARACTER SMUSHING (code value 1)

            Two sub-characters are smushed into a single sub-character
            if they are the same.  This rule does not smush
            hardblanks.  (See rule 6 on hardblanks below)
    */
  function hRule1_Smush(ch1, ch2, hardBlank) {
    if (ch1 === ch2 && ch1 !== hardBlank) {
      return ch1;
    }
    return false;
  }

  /*
        Rule 2: UNDERSCORE SMUSHING (code value 2)

            An underscore ("_") will be replaced by any of: "|", "/",
            "\", "[", "]", "{", "}", "(", ")", "<" or ">".
    */
  function hRule2_Smush(ch1, ch2) {
    let rule2Str = "|/\\[]{}()<>";
    if (ch1 === "_") {
      if (rule2Str.indexOf(ch2) !== -1) {
        return ch2;
      }
    } else if (ch2 === "_") {
      if (rule2Str.indexOf(ch1) !== -1) {
        return ch1;
      }
    }
    return false;
  }

  /*
        Rule 3: HIERARCHY SMUSHING (code value 4)

            A hierarchy of six classes is used: "|", "/\", "[]", "{}",
            "()", and "<>".  When two smushing sub-characters are
            from different classes, the one from the latter class
            will be used.
    */
  function hRule3_Smush(ch1, ch2) {
    let rule3Classes = "| /\\ [] {} () <>";
    let r3_pos1 = rule3Classes.indexOf(ch1);
    let r3_pos2 = rule3Classes.indexOf(ch2);
    if (r3_pos1 !== -1 && r3_pos2 !== -1) {
      if (r3_pos1 !== r3_pos2 && Math.abs(r3_pos1 - r3_pos2) !== 1) {
        const startPos = Math.max(r3_pos1, r3_pos2);
        const endPos = startPos + 1;
        return rule3Classes.substring(startPos, endPos);
      }
    }
    return false;
  }

  /*
        Rule 4: OPPOSITE PAIR SMUSHING (code value 8)

            Smushes opposing brackets ("[]" or "]["), braces ("{}" or
            "}{") and parentheses ("()" or ")(") together, replacing
            any such pair with a vertical bar ("|").
    */
  function hRule4_Smush(ch1, ch2) {
    let rule4Str = "[] {} ()";
    let r4_pos1 = rule4Str.indexOf(ch1);
    let r4_pos2 = rule4Str.indexOf(ch2);
    if (r4_pos1 !== -1 && r4_pos2 !== -1) {
      if (Math.abs(r4_pos1 - r4_pos2) <= 1) {
        return "|";
      }
    }
    return false;
  }

  /*
        Rule 5: BIG X SMUSHING (code value 16)

            Smushes "/\" into "|", "\/" into "Y", and "><" into "X".
            Note that "<>" is not smushed in any way by this rule.
            The name "BIG X" is historical; originally all three pairs
            were smushed into "X".
    */
  function hRule5_Smush(ch1, ch2) {
    let rule5Str = "/\\ \\/ ><";
    let rule5Hash = { 0: "|", 3: "Y", 6: "X" };
    let r5_pos1 = rule5Str.indexOf(ch1);
    let r5_pos2 = rule5Str.indexOf(ch2);
    if (r5_pos1 !== -1 && r5_pos2 !== -1) {
      if (r5_pos2 - r5_pos1 === 1) {
        return rule5Hash[r5_pos1];
      }
    }
    return false;
  }

  /*
        Rule 6: HARDBLANK SMUSHING (code value 32)

            Smushes two hardblanks together, replacing them with a
            single hardblank.  (See "Hardblanks" below.)
    */
  function hRule6_Smush(ch1, ch2, hardBlank) {
    if (ch1 === hardBlank && ch2 === hardBlank) {
      return hardBlank;
    }
    return false;
  }

  /*
        Rule 1: EQUAL CHARACTER SMUSHING (code value 256)

            Same as horizontal smushing rule 1.
    */
  function vRule1_Smush(ch1, ch2) {
    if (ch1 === ch2) {
      return ch1;
    }
    return false;
  }

  /*
        Rule 2: UNDERSCORE SMUSHING (code value 512)

            Same as horizontal smushing rule 2.
    */
  function vRule2_Smush(ch1, ch2) {
    let rule2Str = "|/\\[]{}()<>";
    if (ch1 === "_") {
      if (rule2Str.indexOf(ch2) !== -1) {
        return ch2;
      }
    } else if (ch2 === "_") {
      if (rule2Str.indexOf(ch1) !== -1) {
        return ch1;
      }
    }
    return false;
  }

  /*
        Rule 3: HIERARCHY SMUSHING (code value 1024)

            Same as horizontal smushing rule 3.
    */
  function vRule3_Smush(ch1, ch2) {
    let rule3Classes = "| /\\ [] {} () <>";
    let r3_pos1 = rule3Classes.indexOf(ch1);
    let r3_pos2 = rule3Classes.indexOf(ch2);
    if (r3_pos1 !== -1 && r3_pos2 !== -1) {
      if (r3_pos1 !== r3_pos2 && Math.abs(r3_pos1 - r3_pos2) !== 1) {
        const startPos = Math.max(r3_pos1, r3_pos2);
        const endPos = startPos + 1;
        return rule3Classes.substring(startPos, endPos);
      }
    }
    return false;
  }

  /*
        Rule 4: HORIZONTAL LINE SMUSHING (code value 2048)

            Smushes stacked pairs of "-" and "_", replacing them with
            a single "=" sub-character.  It does not matter which is
            found above the other.  Note that vertical smushing rule 1
            will smush IDENTICAL pairs of horizontal lines, while this
            rule smushes horizontal lines consisting of DIFFERENT
            sub-characters.
    */
  function vRule4_Smush(ch1, ch2) {
    if ((ch1 === "-" && ch2 === "_") || (ch1 === "_" && ch2 === "-")) {
      return "=";
    }
    return false;
  }

  /*
        Rule 5: VERTICAL LINE SUPERSMUSHING (code value 4096)

            This one rule is different from all others, in that it
            "supersmushes" vertical lines consisting of several
            vertical bars ("|").  This creates the illusion that
            FIGcharacters have slid vertically against each other.
            Supersmushing continues until any sub-characters other
            than "|" would have to be smushed.  Supersmushing can
            produce impressive results, but it is seldom possible,
            since other sub-characters would usually have to be
            considered for smushing as soon as any such stacked
            vertical lines are encountered.
    */
  function vRule5_Smush(ch1, ch2) {
    if (ch1 === "|" && ch2 === "|") {
      return "|";
    }
    return false;
  }

  /*
        Universal smushing simply overrides the sub-character from the
        earlier FIGcharacter with the sub-character from the later
        FIGcharacter.  This produces an "overlapping" effect with some
        FIGfonts, wherin the latter FIGcharacter may appear to be "in
        front".
    */
  function uni_Smush(ch1, ch2, hardBlank) {
    if (ch2 === " " || ch2 === "") {
      return ch1;
    } else if (ch2 === hardBlank && ch1 !== " ") {
      return ch1;
    } else {
      return ch2;
    }
  }

  // --------------------------------------------------------------------------
  // main vertical smush routines (excluding rules)

  /*
        txt1 - A line of text
        txt2 - A line of text
        opts - FIGlet options array

        About: Takes in two lines of text and returns one of the following:
        "valid" - These lines can be smushed together given the current smushing rules
        "end" - The lines can be smushed, but we're at a stopping point
        "invalid" - The two lines cannot be smushed together
    */
  function canVerticalSmush(txt1, txt2, opts) {
    if (opts.fittingRules.vLayout === FULL_WIDTH) {
      return "invalid";
    }
    let ii,
      len = Math.min(txt1.length, txt2.length),
      ch1,
      ch2,
      endSmush = false,
      validSmush;
    if (len === 0) {
      return "invalid";
    }

    for (ii = 0; ii < len; ii++) {
      ch1 = txt1.substring(ii, ii + 1);
      ch2 = txt2.substring(ii, ii + 1);
      if (ch1 !== " " && ch2 !== " ") {
        if (opts.fittingRules.vLayout === FITTING) {
          return "invalid";
        } else if (opts.fittingRules.vLayout === SMUSHING) {
          return "end";
        } else {
          if (vRule5_Smush(ch1, ch2)) {
            endSmush = endSmush || false;
            continue;
          } // rule 5 allow for "super" smushing, but only if we're not already ending this smush
          validSmush = false;
          validSmush = opts.fittingRules.vRule1
            ? vRule1_Smush(ch1, ch2)
            : validSmush;
          validSmush =
            !validSmush && opts.fittingRules.vRule2
              ? vRule2_Smush(ch1, ch2)
              : validSmush;
          validSmush =
            !validSmush && opts.fittingRules.vRule3
              ? vRule3_Smush(ch1, ch2)
              : validSmush;
          validSmush =
            !validSmush && opts.fittingRules.vRule4
              ? vRule4_Smush(ch1, ch2)
              : validSmush;
          endSmush = true;
          if (!validSmush) {
            return "invalid";
          }
        }
      }
    }
    if (endSmush) {
      return "end";
    } else {
      return "valid";
    }
  }

  function getVerticalSmushDist(lines1, lines2, opts) {
    let maxDist = lines1.length;
    let len1 = lines1.length;
    let len2 = lines2.length;
    let subLines1, subLines2, slen;
    let curDist = 1;
    let ii, ret, result;
    while (curDist <= maxDist) {
      subLines1 = lines1.slice(Math.max(0, len1 - curDist), len1);
      subLines2 = lines2.slice(0, Math.min(maxDist, curDist));

      slen = subLines2.length; //TODO:check this
      result = "";
      for (ii = 0; ii < slen; ii++) {
        ret = canVerticalSmush(subLines1[ii], subLines2[ii], opts);
        if (ret === "end") {
          result = ret;
        } else if (ret === "invalid") {
          result = ret;
          break;
        } else {
          if (result === "") {
            result = "valid";
          }
        }
      }

      if (result === "invalid") {
        curDist--;
        break;
      }
      if (result === "end") {
        break;
      }
      if (result === "valid") {
        curDist++;
      }
    }

    return Math.min(maxDist, curDist);
  }

  function verticallySmushLines(line1, line2, opts) {
    let ii,
      len = Math.min(line1.length, line2.length);
    let ch1,
      ch2,
      result = "",
      validSmush;

    for (ii = 0; ii < len; ii++) {
      ch1 = line1.substring(ii, ii + 1);
      ch2 = line2.substring(ii, ii + 1);
      if (ch1 !== " " && ch2 !== " ") {
        if (opts.fittingRules.vLayout === FITTING) {
          result += uni_Smush(ch1, ch2);
        } else if (opts.fittingRules.vLayout === SMUSHING) {
          result += uni_Smush(ch1, ch2);
        } else {
          validSmush = false;
          validSmush = opts.fittingRules.vRule5
            ? vRule5_Smush(ch1, ch2)
            : validSmush;
          validSmush =
            !validSmush && opts.fittingRules.vRule1
              ? vRule1_Smush(ch1, ch2)
              : validSmush;
          validSmush =
            !validSmush && opts.fittingRules.vRule2
              ? vRule2_Smush(ch1, ch2)
              : validSmush;
          validSmush =
            !validSmush && opts.fittingRules.vRule3
              ? vRule3_Smush(ch1, ch2)
              : validSmush;
          validSmush =
            !validSmush && opts.fittingRules.vRule4
              ? vRule4_Smush(ch1, ch2)
              : validSmush;
          result += validSmush;
        }
      } else {
        result += uni_Smush(ch1, ch2);
      }
    }
    return result;
  }

  function verticalSmush(lines1, lines2, overlap, opts) {
    let len1 = lines1.length;
    let len2 = lines2.length;
    let piece1 = lines1.slice(0, Math.max(0, len1 - overlap));
    let piece2_1 = lines1.slice(Math.max(0, len1 - overlap), len1);
    let piece2_2 = lines2.slice(0, Math.min(overlap, len2));
    let ii,
      len,
      line,
      piece2 = [],
      piece3,
      result = [];

    len = piece2_1.length;
    for (ii = 0; ii < len; ii++) {
      if (ii >= len2) {
        line = piece2_1[ii];
      } else {
        line = verticallySmushLines(piece2_1[ii], piece2_2[ii], opts);
      }
      piece2.push(line);
    }

    piece3 = lines2.slice(Math.min(overlap, len2), len2);

    return result.concat(piece1, piece2, piece3);
  }

  function padLines(lines, numSpaces) {
    let ii,
      len = lines.length,
      padding = "";
    for (ii = 0; ii < numSpaces; ii++) {
      padding += " ";
    }
    for (ii = 0; ii < len; ii++) {
      lines[ii] += padding;
    }
  }

  function smushVerticalFigLines(output, lines, opts) {
    let len1 = output[0].length;
    let len2 = lines[0].length;
    let overlap;
    if (len1 > len2) {
      padLines(lines, len1 - len2);
    } else if (len2 > len1) {
      padLines(output, len2 - len1);
    }
    overlap = getVerticalSmushDist(output, lines, opts);
    return verticalSmush(output, lines, overlap, opts);
  }

  // -------------------------------------------------------------------------
  // Main horizontal smush routines (excluding rules)

  function getHorizontalSmushLength(txt1, txt2, opts) {
    if (opts.fittingRules.hLayout === FULL_WIDTH) {
      return 0;
    }
    let ii,
      len1 = txt1.length,
      len2 = txt2.length;
    let maxDist = len1;
    let curDist = 1;
    let breakAfter = false;
    let validSmush = false;
    let seg1, seg2, ch1, ch2;
    if (len1 === 0) {
      return 0;
    }

    distCal: while (curDist <= maxDist) {
      const seg1StartPos = len1 - curDist;
      seg1 = txt1.substring(seg1StartPos, seg1StartPos + curDist);
      seg2 = txt2.substring(0, Math.min(curDist, len2));
      for (ii = 0; ii < Math.min(curDist, len2); ii++) {
        ch1 = seg1.substring(ii, ii + 1);
        ch2 = seg2.substring(ii, ii + 1);
        if (ch1 !== " " && ch2 !== " ") {
          if (opts.fittingRules.hLayout === FITTING) {
            curDist = curDist - 1;
            break distCal;
          } else if (opts.fittingRules.hLayout === SMUSHING) {
            if (ch1 === opts.hardBlank || ch2 === opts.hardBlank) {
              curDist = curDist - 1; // universal smushing does not smush hardblanks
            }
            break distCal;
          } else {
            breakAfter = true; // we know we need to break, but we need to check if our smushing rules will allow us to smush the overlapped characters
            validSmush = false; // the below checks will let us know if we can smush these characters

            validSmush = opts.fittingRules.hRule1
              ? hRule1_Smush(ch1, ch2, opts.hardBlank)
              : validSmush;
            validSmush =
              !validSmush && opts.fittingRules.hRule2
                ? hRule2_Smush(ch1, ch2, opts.hardBlank)
                : validSmush;
            validSmush =
              !validSmush && opts.fittingRules.hRule3
                ? hRule3_Smush(ch1, ch2, opts.hardBlank)
                : validSmush;
            validSmush =
              !validSmush && opts.fittingRules.hRule4
                ? hRule4_Smush(ch1, ch2, opts.hardBlank)
                : validSmush;
            validSmush =
              !validSmush && opts.fittingRules.hRule5
                ? hRule5_Smush(ch1, ch2, opts.hardBlank)
                : validSmush;
            validSmush =
              !validSmush && opts.fittingRules.hRule6
                ? hRule6_Smush(ch1, ch2, opts.hardBlank)
                : validSmush;

            if (!validSmush) {
              curDist = curDist - 1;
              break distCal;
            }
          }
        }
      }
      if (breakAfter) {
        break;
      }
      curDist++;
    }
    return Math.min(maxDist, curDist);
  }

  function horizontalSmush(textBlock1, textBlock2, overlap, opts) {
    let ii,
      jj,
      outputFig = [],
      overlapStart,
      piece1,
      piece2,
      piece3,
      len1,
      len2,
      txt1,
      txt2;

    for (ii = 0; ii < opts.height; ii++) {
      txt1 = textBlock1[ii];
      txt2 = textBlock2[ii];
      len1 = txt1.length;
      len2 = txt2.length;
      overlapStart = len1 - overlap;
      piece1 = txt1.substr(0, Math.max(0, overlapStart));
      piece2 = "";

      // determine overlap piece
      const seg1StartPos = Math.max(0, len1 - overlap);
      var seg1 = txt1.substring(seg1StartPos, seg1StartPos + overlap);
      var seg2 = txt2.substring(0, Math.min(overlap, len2));

      for (jj = 0; jj < overlap; jj++) {
        var ch1 = jj < len1 ? seg1.substring(jj, jj + 1) : " ";
        var ch2 = jj < len2 ? seg2.substring(jj, jj + 1) : " ";

        if (ch1 !== " " && ch2 !== " ") {
          if (opts.fittingRules.hLayout === FITTING) {
            piece2 += uni_Smush(ch1, ch2, opts.hardBlank);
          } else if (opts.fittingRules.hLayout === SMUSHING) {
            piece2 += uni_Smush(ch1, ch2, opts.hardBlank);
          } else {
            // Controlled Smushing
            var nextCh = "";
            nextCh =
              !nextCh && opts.fittingRules.hRule1
                ? hRule1_Smush(ch1, ch2, opts.hardBlank)
                : nextCh;
            nextCh =
              !nextCh && opts.fittingRules.hRule2
                ? hRule2_Smush(ch1, ch2, opts.hardBlank)
                : nextCh;
            nextCh =
              !nextCh && opts.fittingRules.hRule3
                ? hRule3_Smush(ch1, ch2, opts.hardBlank)
                : nextCh;
            nextCh =
              !nextCh && opts.fittingRules.hRule4
                ? hRule4_Smush(ch1, ch2, opts.hardBlank)
                : nextCh;
            nextCh =
              !nextCh && opts.fittingRules.hRule5
                ? hRule5_Smush(ch1, ch2, opts.hardBlank)
                : nextCh;
            nextCh =
              !nextCh && opts.fittingRules.hRule6
                ? hRule6_Smush(ch1, ch2, opts.hardBlank)
                : nextCh;
            nextCh = nextCh || uni_Smush(ch1, ch2, opts.hardBlank);
            piece2 += nextCh;
          }
        } else {
          piece2 += uni_Smush(ch1, ch2, opts.hardBlank);
        }
      }

      if (overlap >= len2) {
        piece3 = "";
      } else {
        piece3 = txt2.substring(overlap, overlap + Math.max(0, len2 - overlap));
      }
      outputFig[ii] = piece1 + piece2 + piece3;
    }
    return outputFig;
  }

  /*
        Creates new empty ASCII placeholder of give len
        - len - number
    */
  function newFigChar(len) {
    let outputFigText = [],
      row;
    for (row = 0; row < len; row++) {
      outputFigText[row] = "";
    }
    return outputFigText;
  }

  /*
        Return max line of the ASCII Art
        - text is array of lines for text
        - char is next character
     */
  const figLinesWidth = function (textLines) {
    return Math.max.apply(
      Math,
      textLines.map(function (line, i) {
        return line.length;
      })
    );
  };

  /*
       join words or single characaters into single Fig line
       - array - array of ASCII words or single characters: {fig: array, overlap: number}
       - len - height of the Characters (number of rows)
       - opt - options object
    */
  function joinFigArray(array, len, opts) {
    return array.reduce(function (acc, data) {
      return horizontalSmush(acc, data.fig, data.overlap, opts);
    }, newFigChar(len));
  }

  /*
       break long word return leftover characters and line before the break
       - figChars - list of single ASCII characters in form {fig, overlap}
       - len - number of rows
       - opt - options object
    */
  function breakWord(figChars, len, opts) {
    const result = {};
    for (let i = figChars.length; --i; ) {
      let w = joinFigArray(figChars.slice(0, i), len, opts);
      if (figLinesWidth(w) <= opts.width) {
        result.outputFigText = w;
        if (i < figChars.length) {
          result.chars = figChars.slice(i);
        } else {
          result.chars = [];
        }
        break;
      }
    }
    return result;
  }

  function generateFigTextLines(txt, figChars, opts) {
    let charIndex,
      figChar,
      overlap = 0,
      row,
      outputFigText,
      len,
      height = opts.height,
      outputFigLines = [],
      maxWidth,
      nextFigChars,
      figWords = [],
      char,
      isSpace,
      textFigWord,
      textFigLine,
      tmpBreak;

    outputFigText = newFigChar(height);
    if (opts.width > 0 && opts.whitespaceBreak) {
      // list of characters is used to break in the middle of the word when word is logner
      // chars is array of characters with {fig, overlap} and overlap is for whole word
      nextFigChars = {
        chars: [],
        overlap: overlap,
      };
    }
    if (opts.printDirection === 1) {
      txt = txt.split("").reverse().join("");
    }
    len = txt.length;
    for (charIndex = 0; charIndex < len; charIndex++) {
      char = txt.substring(charIndex, charIndex + 1);
      isSpace = char.match(/\s/);
      figChar = figChars[char.charCodeAt(0)];
      textFigLine = null;
      if (figChar) {
        if (opts.fittingRules.hLayout !== FULL_WIDTH) {
          overlap = 10000; // a value too high to be the overlap
          for (row = 0; row < opts.height; row++) {
            overlap = Math.min(
              overlap,
              getHorizontalSmushLength(outputFigText[row], figChar[row], opts)
            );
          }
          overlap = overlap === 10000 ? 0 : overlap;
        }
        if (opts.width > 0) {
          if (opts.whitespaceBreak) {
            // next character in last word (figChars have same data as words)
            textFigWord = joinFigArray(
              nextFigChars.chars.concat([
                {
                  fig: figChar,
                  overlap: overlap,
                },
              ]),
              height,
              opts
            );
            textFigLine = joinFigArray(
              figWords.concat([
                {
                  fig: textFigWord,
                  overlap: nextFigChars.overlap,
                },
              ]),
              height,
              opts
            );
            maxWidth = figLinesWidth(textFigLine);
          } else {
            textFigLine = horizontalSmush(
              outputFigText,
              figChar,
              overlap,
              opts
            );
            maxWidth = figLinesWidth(textFigLine);
          }
          if (maxWidth >= opts.width && charIndex > 0) {
            if (opts.whitespaceBreak) {
              outputFigText = joinFigArray(figWords.slice(0, -1), height, opts);
              if (figWords.length > 1) {
                outputFigLines.push(outputFigText);
                outputFigText = newFigChar(height);
              }
              figWords = [];
            } else {
              outputFigLines.push(outputFigText);
              outputFigText = newFigChar(height);
            }
          }
        }
        if (opts.width > 0 && opts.whitespaceBreak) {
          if (!isSpace || charIndex === len - 1) {
            nextFigChars.chars.push({ fig: figChar, overlap: overlap });
          }
          if (isSpace || charIndex === len - 1) {
            // break long words
            tmpBreak = null;
            while (true) {
              textFigLine = joinFigArray(nextFigChars.chars, height, opts);
              maxWidth = figLinesWidth(textFigLine);
              if (maxWidth >= opts.width) {
                tmpBreak = breakWord(nextFigChars.chars, height, opts);
                nextFigChars = { chars: tmpBreak.chars };
                outputFigLines.push(tmpBreak.outputFigText);
              } else {
                break;
              }
            }
            // any leftovers
            if (maxWidth > 0) {
              if (tmpBreak) {
                figWords.push({ fig: textFigLine, overlap: 1 });
              } else {
                figWords.push({
                  fig: textFigLine,
                  overlap: nextFigChars.overlap,
                });
              }
            }
            // save space character and current overlap for smush in joinFigWords
            if (isSpace) {
              figWords.push({ fig: figChar, overlap: overlap });
              outputFigText = newFigChar(height);
            }
            if (charIndex === len - 1) {
              // last line
              outputFigText = joinFigArray(figWords, height, opts);
            }
            nextFigChars = {
              chars: [],
              overlap: overlap,
            };
            continue;
          }
        }
        outputFigText = horizontalSmush(outputFigText, figChar, overlap, opts);
      }
    }
    // special case when last line would be empty
    // this may happen if text fit exactly opt.width
    if (figLinesWidth(outputFigText) > 0) {
      outputFigLines.push(outputFigText);
    }
    // remove hardblanks
    if (opts.showHardBlanks !== true) {
      outputFigLines.forEach(function (outputFigText) {
        len = outputFigText.length;
        for (row = 0; row < len; row++) {
          outputFigText[row] = outputFigText[row].replace(
            new RegExp("\\" + opts.hardBlank, "g"),
            " "
          );
        }
      });
    }
    return outputFigLines;
  }

  // -------------------------------------------------------------------------
  // Parsing and Generation methods

  const getHorizontalFittingRules = function (layout, options) {
    let props = [
        "hLayout",
        "hRule1",
        "hRule2",
        "hRule3",
        "hRule4",
        "hRule5",
        "hRule6",
      ],
      params = {},
      ii;
    if (layout === "default") {
      for (ii = 0; ii < props.length; ii++) {
        params[props[ii]] = options.fittingRules[props[ii]];
      }
    } else if (layout === "full") {
      params = {
        hLayout: FULL_WIDTH,
        hRule1: false,
        hRule2: false,
        hRule3: false,
        hRule4: false,
        hRule5: false,
        hRule6: false,
      };
    } else if (layout === "fitted") {
      params = {
        hLayout: FITTING,
        hRule1: false,
        hRule2: false,
        hRule3: false,
        hRule4: false,
        hRule5: false,
        hRule6: false,
      };
    } else if (layout === "controlled smushing") {
      params = {
        hLayout: CONTROLLED_SMUSHING,
        hRule1: true,
        hRule2: true,
        hRule3: true,
        hRule4: true,
        hRule5: true,
        hRule6: true,
      };
    } else if (layout === "universal smushing") {
      params = {
        hLayout: SMUSHING,
        hRule1: false,
        hRule2: false,
        hRule3: false,
        hRule4: false,
        hRule5: false,
        hRule6: false,
      };
    } else {
      return;
    }
    return params;
  };

  const getVerticalFittingRules = function (layout, options) {
    let props = ["vLayout", "vRule1", "vRule2", "vRule3", "vRule4", "vRule5"],
      params = {},
      ii;
    if (layout === "default") {
      for (ii = 0; ii < props.length; ii++) {
        params[props[ii]] = options.fittingRules[props[ii]];
      }
    } else if (layout === "full") {
      params = {
        vLayout: FULL_WIDTH,
        vRule1: false,
        vRule2: false,
        vRule3: false,
        vRule4: false,
        vRule5: false,
      };
    } else if (layout === "fitted") {
      params = {
        vLayout: FITTING,
        vRule1: false,
        vRule2: false,
        vRule3: false,
        vRule4: false,
        vRule5: false,
      };
    } else if (layout === "controlled smushing") {
      params = {
        vLayout: CONTROLLED_SMUSHING,
        vRule1: true,
        vRule2: true,
        vRule3: true,
        vRule4: true,
        vRule5: true,
      };
    } else if (layout === "universal smushing") {
      params = {
        vLayout: SMUSHING,
        vRule1: false,
        vRule2: false,
        vRule3: false,
        vRule4: false,
        vRule5: false,
      };
    } else {
      return;
    }
    return params;
  };

  /*
        Generates the ASCII Art
        - fontName: Font to use
        - option: Options to override the defaults
        - txt: The text to make into ASCII Art
    */
  const generateText = function (fontName, options, txt) {
    txt = txt.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    let lines = txt.split("\n");
    let figLines = [];
    let ii, len, output;
    len = lines.length;
    for (ii = 0; ii < len; ii++) {
      figLines = figLines.concat(
        generateFigTextLines(lines[ii], figFonts[fontName], options)
      );
    }
    len = figLines.length;
    output = figLines[0];
    for (ii = 1; ii < len; ii++) {
      output = smushVerticalFigLines(output, figLines[ii], options);
    }

    return output ? output.join("\n") : "";
  };

  /*
      takes assigned options and merges them with the default options from the choosen font
     */
  function _reworkFontOpts(fontOpts, options) {
    let myOpts = JSON.parse(JSON.stringify(fontOpts)), // make a copy because we may edit this (see below)
      params,
      prop;

    /*
         If the user is chosing to use a specific type of layout (e.g., 'full', 'fitted', etc etc)
         Then we need to override the default font options.
         */
    if (typeof options.horizontalLayout !== "undefined") {
      params = getHorizontalFittingRules(options.horizontalLayout, fontOpts);
      for (prop in params) {
        if (params.hasOwnProperty(prop)) {
          myOpts.fittingRules[prop] = params[prop];
        }
      }
    }
    if (typeof options.verticalLayout !== "undefined") {
      params = getVerticalFittingRules(options.verticalLayout, fontOpts);
      for (prop in params) {
        if (params.hasOwnProperty(prop)) {
          myOpts.fittingRules[prop] = params[prop];
        }
      }
    }
    myOpts.printDirection =
      typeof options.printDirection !== "undefined"
        ? options.printDirection
        : fontOpts.printDirection;
    myOpts.showHardBlanks = options.showHardBlanks || false;
    myOpts.width = options.width || -1;
    myOpts.whitespaceBreak = options.whitespaceBreak || false;

    return myOpts;
  }

  // -------------------------------------------------------------------------
  // Public methods

  /*
        A short-cut for the figlet.text method

        Parameters:
        - txt (string): The text to make into ASCII Art
        - options (object/string - optional): Options that will override the current font's default options.
          If a string is provided instead of an object, it is assumed to be the font name.

            * font
            * horizontalLayout
            * verticalLayout
            * showHardBlanks - Wont remove hardblank characters

        - next (function): A callback function, it will contained the outputted ASCII Art.
    */
  const me = function (txt, options, next) {
    return me.text(txt, options, next);
  };
  me.text = async function (txt, options, next) {
    let fontName = "";

    // Validate inputs
    txt = txt + "";

    if (typeof arguments[1] === "function") {
      next = options;
      options = {};
      options.font = figDefaults.font; // default font
    }

    if (typeof options === "string") {
      fontName = options;
      options = {};
    } else {
      options = options || {};
      fontName = options.font || figDefaults.font;
    }

    return await new Promise((resolve, reject) => {
      /*
          Load the font. If it loads, it's data will be contained in the figFonts object.
          The callback will recieve a fontsOpts object, which contains the default
          options of the font (its fitting rules, etc etc).
      */
      me.loadFont(fontName, function (err, fontOpts) {
        if (err) {
          reject(err);
          if (next) next(err);
          return;
        }

        const generatedTxt = generateText(
          fontName,
          _reworkFontOpts(fontOpts, options),
          txt
        );

        resolve(generatedTxt);
        if (next) next(null, generatedTxt);
      });
    });
  };

  /*
        Synchronous version of figlet.text.
        Accepts the same parameters.
     */
  me.textSync = function (txt, options) {
    let fontName = "";

    // Validate inputs
    txt = txt + "";

    if (typeof options === "string") {
      fontName = options;
      options = {};
    } else {
      options = options || {};
      fontName = options.font || figDefaults.font;
    }

    var fontOpts = _reworkFontOpts(me.loadFontSync(fontName), options);
    return generateText(fontName, fontOpts, txt);
  };

  /*
        Returns metadata about a specfic FIGlet font.

        Returns:
            next(err, options, headerComment)
            - err: The error if an error occurred, otherwise null/falsey.
            - options (object): The options defined for the font.
            - headerComment (string): The font's header comment.
    */
  me.metadata = function (fontName, next) {
    fontName = fontName + "";

    /*
            Load the font. If it loads, it's data will be contained in the figFonts object.
            The callback will recieve a fontsOpts object, which contains the default
            options of the font (its fitting rules, etc etc).
        */
    return new Promise(function(resolve, reject) {
      me.loadFont(fontName, function (err, fontOpts) {
        if (err) {
          if (next) next(err);
          reject(err);
          return;
        }

        if (next) {
          next(null, fontOpts, figFonts[fontName].comment);
        }
        resolve([fontOpts, figFonts[fontName].comment]);
      });
    });
  };

  /*
        Allows you to override defaults. See the definition of the figDefaults object up above
        to see what properties can be overridden.
        Returns the options for the font.
    */
  me.defaults = function (opts) {
    if (typeof opts === "object" && opts !== null) {
      for (var prop in opts) {
        if (opts.hasOwnProperty(prop)) {
          figDefaults[prop] = opts[prop];
        }
      }
    }
    return JSON.parse(JSON.stringify(figDefaults));
  };

  /*
        Parses data from a FIGlet font file and places it into the figFonts object.
    */
  me.parseFont = function (fontName, data) {
    data = data.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    figFonts[fontName] = {};

    var lines = data.split("\n");
    var headerData = lines.splice(0, 1)[0].split(" ");
    var figFont = figFonts[fontName];
    var opts = {};

    opts.hardBlank = headerData[0].substr(5, 1);
    opts.height = parseInt(headerData[1], 10);
    opts.baseline = parseInt(headerData[2], 10);
    opts.maxLength = parseInt(headerData[3], 10);
    opts.oldLayout = parseInt(headerData[4], 10);
    opts.numCommentLines = parseInt(headerData[5], 10);
    opts.printDirection =
      headerData.length >= 6 ? parseInt(headerData[6], 10) : 0;
    opts.fullLayout =
      headerData.length >= 7 ? parseInt(headerData[7], 10) : null;
    opts.codeTagCount =
      headerData.length >= 8 ? parseInt(headerData[8], 10) : null;
    opts.fittingRules = getSmushingRules(opts.oldLayout, opts.fullLayout);

    figFont.options = opts;

    // error check
    if (
      opts.hardBlank.length !== 1 ||
      isNaN(opts.height) ||
      isNaN(opts.baseline) ||
      isNaN(opts.maxLength) ||
      isNaN(opts.oldLayout) ||
      isNaN(opts.numCommentLines)
    ) {
      throw new Error("FIGlet header contains invalid values.");
    }

    /*
            All FIGlet fonts must contain chars 32-126, 196, 214, 220, 228, 246, 252, 223
        */

    let charNums = [],
      ii;
    for (ii = 32; ii <= 126; ii++) {
      charNums.push(ii);
    }
    charNums = charNums.concat(196, 214, 220, 228, 246, 252, 223);

    // error check - validate that there are enough lines in the file
    if (lines.length < opts.numCommentLines + opts.height * charNums.length) {
      throw new Error("FIGlet file is missing data.");
    }

    /*
            Parse out the context of the file and put it into our figFont object
        */

    let cNum,
      endCharRegEx,
      parseError = false;

    figFont.comment = lines.splice(0, opts.numCommentLines).join("\n");
    figFont.numChars = 0;

    while (lines.length > 0 && figFont.numChars < charNums.length) {
      cNum = charNums[figFont.numChars];
      figFont[cNum] = lines.splice(0, opts.height);
      // remove end sub-chars
      for (ii = 0; ii < opts.height; ii++) {
        if (typeof figFont[cNum][ii] === "undefined") {
          figFont[cNum][ii] = "";
        } else {
          endCharRegEx = new RegExp(
            "\\" +
              figFont[cNum][ii].substr(figFont[cNum][ii].length - 1, 1) +
              "+$"
          );
          figFont[cNum][ii] = figFont[cNum][ii].replace(endCharRegEx, "");
        }
      }
      figFont.numChars++;
    }

    /*
            Now we check to see if any additional characters are present.
            Negative and positive char codes are allowed in hex, octal, or decimal.
        */

    while (lines.length > 0) {
      cNum = lines.splice(0, 1)[0].split(" ")[0];
      if (/^-?0[xX][0-9a-fA-F]+$/.test(cNum)) {
        cNum = parseInt(cNum, 16);
      } else if (/^-?0[0-7]+$/.test(cNum)) {
        cNum = parseInt(cNum, 8);
      } else if (/^-?[0-9]+$/.test(cNum)) {
        cNum = parseInt(cNum, 10);
      } else {
        if (cNum === "") {
          break;
        }
        // something's wrong
        console.log("Invalid data:" + cNum);
        parseError = true;
        break;
      }

      // Per Figlet specification, the character code can be in the range
      // of -2147483648 to +2147483647, but cannot be -1.
      if (cNum == -1) {
        console.log("The char code -1 is not permitted.");
        parseError = true;
        break;
      } else if (cNum < -2147483648) {
        console.log("The char code cannot be less than -2147483648.");
        parseError = true;
        break;
      } else if (cNum > 2147483647) {
        console.log("The char code cannot be greater than 2147483647.");
        parseError = true;
        break;
      }

      figFont[cNum] = lines.splice(0, opts.height);
      // remove end sub-chars
      for (ii = 0; ii < opts.height; ii++) {
        if (typeof figFont[cNum][ii] === "undefined") {
          figFont[cNum][ii] = "";
        } else {
          endCharRegEx = new RegExp(
            "\\" +
              figFont[cNum][ii].substr(figFont[cNum][ii].length - 1, 1) +
              "+$"
          );
          figFont[cNum][ii] = figFont[cNum][ii].replace(endCharRegEx, "");
        }
      }
      figFont.numChars++;
    }

    // error check
    if (parseError === true) {
      throw new Error("Error parsing data.");
    }

    return opts;
  };

  /*
        Loads a font.
    */
  me.loadFont = function (fontName, next) {
    if (figFonts[fontName]) {
      if (next) {
        next(null, figFonts[fontName].options);
      }
      return Promise.resolve();
    }

    if (typeof fetch !== "function") {
      console.error(
        "figlet.js requires the fetch API or a fetch polyfill such as https://cdnjs.com/libraries/fetch"
      );
      throw new Error("fetch is required for figlet.js to work.");
    }

    return fetch(figDefaults.fontPath + "/" + fontName + ".flf")
      .then(function (response) {
        if (response.ok) {
          return response.text();
        }

        console.log("Unexpected response", response);
        throw new Error("Network response was not ok.");
      })
      .then(function (text) {
        if (next) {
          next(null, me.parseFont(fontName, text));
        }
      })
      .catch(next);
  };

  /*
        loads a font synchronously, not implemented for the browser
     */
  me.loadFontSync = function (name) {
    if (figFonts[name]) {
      return figFonts[name].options;
    }
    throw new Error(
      "synchronous font loading is not implemented for the browser"
    );
  };

  /*
        preloads a list of fonts prior to using textSync
        - fonts: an array of font names (i.e. ["Standard","Soft"])
        - next: callback function
     */
  me.preloadFonts = function (fonts, next) {
    let fontData = [];

    return fonts
      .reduce(function (promise, name) {
        return promise.then(function () {
          return fetch(figDefaults.fontPath + "/" + name + ".flf")
            .then((response) => {
              return response.text();
            })
            .then(function (data) {
              fontData.push(data);
            });
        });
      }, Promise.resolve())
      .then(function (res) {
        for (var i in fonts) {
          if (fonts.hasOwnProperty(i)) {
            me.parseFont(fonts[i], fontData[i]);
          }
        }

        if (next) next();
      });
  };

  me.figFonts = figFonts;

  return me;
})();

// for node.js
if (true) {
  if (typeof module.exports !== "undefined") {
    module.exports = figlet;
  }
}


/***/ }),

/***/ 7656:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.schedulePromise = void 0;
var innerFrom_1 = __webpack_require__(2018);
var observeOn_1 = __webpack_require__(6257);
var subscribeOn_1 = __webpack_require__(3901);
function schedulePromise(input, scheduler) {
    return innerFrom_1.innerFrom(input).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
}
exports.schedulePromise = schedulePromise;
//# sourceMappingURL=schedulePromise.js.map

/***/ }),

/***/ 7661:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compare = __webpack_require__(7910)
const compareLoose = (a, b) => compare(a, b, true)
module.exports = compareLoose


/***/ }),

/***/ 7662:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.multicast = void 0;
var ConnectableObservable_1 = __webpack_require__(3941);
var isFunction_1 = __webpack_require__(8403);
var connect_1 = __webpack_require__(4566);
function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory = isFunction_1.isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
    if (isFunction_1.isFunction(selector)) {
        return connect_1.connect(selector, {
            connector: subjectFactory,
        });
    }
    return function (source) { return new ConnectableObservable_1.ConnectableObservable(source, subjectFactory); };
}
exports.multicast = multicast;
//# sourceMappingURL=multicast.js.map

/***/ }),

/***/ 7688:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.async = exports.asyncScheduler = void 0;
var AsyncAction_1 = __webpack_require__(5970);
var AsyncScheduler_1 = __webpack_require__(5031);
exports.asyncScheduler = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
exports.async = exports.asyncScheduler;
//# sourceMappingURL=async.js.map

/***/ }),

/***/ 7696:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const { InvalidArgumentError } = __webpack_require__(5367);

class Option {
  /**
   * Initialize a new `Option` with the given `flags` and `description`.
   *
   * @param {string} flags
   * @param {string} [description]
   */

  constructor(flags, description) {
    this.flags = flags;
    this.description = description || '';

    this.required = flags.includes('<'); // A value must be supplied when the option is specified.
    this.optional = flags.includes('['); // A value is optional when the option is specified.
    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument
    this.variadic = /\w\.\.\.[>\]]$/.test(flags); // The option can take multiple values.
    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.
    const optionFlags = splitOptionFlags(flags);
    this.short = optionFlags.shortFlag;
    this.long = optionFlags.longFlag;
    this.negate = false;
    if (this.long) {
      this.negate = this.long.startsWith('--no-');
    }
    this.defaultValue = undefined;
    this.defaultValueDescription = undefined;
    this.presetArg = undefined;
    this.envVar = undefined;
    this.parseArg = undefined;
    this.hidden = false;
    this.argChoices = undefined;
    this.conflictsWith = [];
    this.implied = undefined;
  }

  /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   *
   * @param {*} value
   * @param {string} [description]
   * @return {Option}
   */

  default(value, description) {
    this.defaultValue = value;
    this.defaultValueDescription = description;
    return this;
  }

  /**
   * Preset to use when option used without option-argument, especially optional but also boolean and negated.
   * The custom processing (parseArg) is called.
   *
   * @example
   * new Option('--color').default('GREYSCALE').preset('RGB');
   * new Option('--donate [amount]').preset('20').argParser(parseFloat);
   *
   * @param {*} arg
   * @return {Option}
   */

  preset(arg) {
    this.presetArg = arg;
    return this;
  }

  /**
   * Add option name(s) that conflict with this option.
   * An error will be displayed if conflicting options are found during parsing.
   *
   * @example
   * new Option('--rgb').conflicts('cmyk');
   * new Option('--js').conflicts(['ts', 'jsx']);
   *
   * @param {string | string[]} names
   * @return {Option}
   */

  conflicts(names) {
    this.conflictsWith = this.conflictsWith.concat(names);
    return this;
  }

  /**
   * Specify implied option values for when this option is set and the implied options are not.
   *
   * The custom processing (parseArg) is not called on the implied values.
   *
   * @example
   * program
   *   .addOption(new Option('--log', 'write logging information to file'))
   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));
   *
   * @param {Object} impliedOptionValues
   * @return {Option}
   */
  implies(impliedOptionValues) {
    let newImplied = impliedOptionValues;
    if (typeof impliedOptionValues === 'string') {
      // string is not documented, but easy mistake and we can do what user probably intended.
      newImplied = { [impliedOptionValues]: true };
    }
    this.implied = Object.assign(this.implied || {}, newImplied);
    return this;
  }

  /**
   * Set environment variable to check for option value.
   *
   * An environment variable is only used if when processed the current option value is
   * undefined, or the source of the current value is 'default' or 'config' or 'env'.
   *
   * @param {string} name
   * @return {Option}
   */

  env(name) {
    this.envVar = name;
    return this;
  }

  /**
   * Set the custom handler for processing CLI option arguments into option values.
   *
   * @param {Function} [fn]
   * @return {Option}
   */

  argParser(fn) {
    this.parseArg = fn;
    return this;
  }

  /**
   * Whether the option is mandatory and must have a value after parsing.
   *
   * @param {boolean} [mandatory=true]
   * @return {Option}
   */

  makeOptionMandatory(mandatory = true) {
    this.mandatory = !!mandatory;
    return this;
  }

  /**
   * Hide option in help.
   *
   * @param {boolean} [hide=true]
   * @return {Option}
   */

  hideHelp(hide = true) {
    this.hidden = !!hide;
    return this;
  }

  /**
   * @api private
   */

  _concatValue(value, previous) {
    if (previous === this.defaultValue || !Array.isArray(previous)) {
      return [value];
    }

    return previous.concat(value);
  }

  /**
   * Only allow option value to be one of choices.
   *
   * @param {string[]} values
   * @return {Option}
   */

  choices(values) {
    this.argChoices = values.slice();
    this.parseArg = (arg, previous) => {
      if (!this.argChoices.includes(arg)) {
        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);
      }
      if (this.variadic) {
        return this._concatValue(arg, previous);
      }
      return arg;
    };
    return this;
  }

  /**
   * Return option name.
   *
   * @return {string}
   */

  name() {
    if (this.long) {
      return this.long.replace(/^--/, '');
    }
    return this.short.replace(/^-/, '');
  }

  /**
   * Return option name, in a camelcase format that can be used
   * as a object attribute key.
   *
   * @return {string}
   * @api private
   */

  attributeName() {
    return camelcase(this.name().replace(/^no-/, ''));
  }

  /**
   * Check if `arg` matches the short or long flag.
   *
   * @param {string} arg
   * @return {boolean}
   * @api private
   */

  is(arg) {
    return this.short === arg || this.long === arg;
  }

  /**
   * Return whether a boolean option.
   *
   * Options are one of boolean, negated, required argument, or optional argument.
   *
   * @return {boolean}
   * @api private
   */

  isBoolean() {
    return !this.required && !this.optional && !this.negate;
  }
}

/**
 * This class is to make it easier to work with dual options, without changing the existing
 * implementation. We support separate dual options for separate positive and negative options,
 * like `--build` and `--no-build`, which share a single option value. This works nicely for some
 * use cases, but is tricky for others where we want separate behaviours despite
 * the single shared option value.
 */
class DualOptions {
  /**
   * @param {Option[]} options
   */
  constructor(options) {
    this.positiveOptions = new Map();
    this.negativeOptions = new Map();
    this.dualOptions = new Set();
    options.forEach(option => {
      if (option.negate) {
        this.negativeOptions.set(option.attributeName(), option);
      } else {
        this.positiveOptions.set(option.attributeName(), option);
      }
    });
    this.negativeOptions.forEach((value, key) => {
      if (this.positiveOptions.has(key)) {
        this.dualOptions.add(key);
      }
    });
  }

  /**
   * Did the value come from the option, and not from possible matching dual option?
   *
   * @param {*} value
   * @param {Option} option
   * @returns {boolean}
   */
  valueFromOption(value, option) {
    const optionKey = option.attributeName();
    if (!this.dualOptions.has(optionKey)) return true;

    // Use the value to deduce if (probably) came from the option.
    const preset = this.negativeOptions.get(optionKey).presetArg;
    const negativeValue = (preset !== undefined) ? preset : false;
    return option.negate === (negativeValue === value);
  }
}

/**
 * Convert string from kebab-case to camelCase.
 *
 * @param {string} str
 * @return {string}
 * @api private
 */

function camelcase(str) {
  return str.split('-').reduce((str, word) => {
    return str + word[0].toUpperCase() + word.slice(1);
  });
}

/**
 * Split the short and long flag out of something like '-m,--mixed <value>'
 *
 * @api private
 */

function splitOptionFlags(flags) {
  let shortFlag;
  let longFlag;
  // Use original very loose parsing to maintain backwards compatibility for now,
  // which allowed for example unintended `-sw, --short-word` [sic].
  const flagParts = flags.split(/[ |,]+/);
  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();
  longFlag = flagParts.shift();
  // Add support for lone short flag without significantly changing parsing!
  if (!shortFlag && /^-[^-]$/.test(longFlag)) {
    shortFlag = longFlag;
    longFlag = undefined;
  }
  return { shortFlag, longFlag };
}

exports.Option = Option;
exports.splitOptionFlags = splitOptionFlags;
exports.DualOptions = DualOptions;


/***/ }),

/***/ 7703:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimationFrameAction = void 0;
var AsyncAction_1 = __webpack_require__(5970);
var animationFrameProvider_1 = __webpack_require__(5964);
var AnimationFrameAction = (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider_1.animationFrameProvider.requestAnimationFrame(function () { return scheduler.flush(undefined); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (delay != null ? delay > 0 : this.delay > 0) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        var actions = scheduler.actions;
        if (id != null && id === scheduler._scheduled && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
            animationFrameProvider_1.animationFrameProvider.cancelAnimationFrame(id);
            scheduler._scheduled = undefined;
        }
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction_1.AsyncAction));
exports.AnimationFrameAction = AnimationFrameAction;
//# sourceMappingURL=AnimationFrameAction.js.map

/***/ }),

/***/ 7725:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.executeSchedule = void 0;
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) { delay = 0; }
    if (repeat === void 0) { repeat = false; }
    var scheduleSubscription = scheduler.schedule(function () {
        work();
        if (repeat) {
            parentSubscription.add(this.schedule(null, delay));
        }
        else {
            this.unsubscribe();
        }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
        return scheduleSubscription;
    }
}
exports.executeSchedule = executeSchedule;
//# sourceMappingURL=executeSchedule.js.map

/***/ }),

/***/ 7735:
/***/ ((__unused_webpack_module, exports) => {

/**
 * @otplib/core
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 12.0.1
 * @license: MIT
 **/


Object.defineProperty(exports, "__esModule", ({ value: true }));

function objectValues(value) {
  return Object.keys(value).map(key => value[key]);
}
(function (HashAlgorithms) {
  HashAlgorithms["SHA1"] = "sha1";
  HashAlgorithms["SHA256"] = "sha256";
  HashAlgorithms["SHA512"] = "sha512";
})(exports.HashAlgorithms || (exports.HashAlgorithms = {}));
const HASH_ALGORITHMS = objectValues(exports.HashAlgorithms);
(function (KeyEncodings) {
  KeyEncodings["ASCII"] = "ascii";
  KeyEncodings["BASE64"] = "base64";
  KeyEncodings["HEX"] = "hex";
  KeyEncodings["LATIN1"] = "latin1";
  KeyEncodings["UTF8"] = "utf8";
})(exports.KeyEncodings || (exports.KeyEncodings = {}));
const KEY_ENCODINGS = objectValues(exports.KeyEncodings);
(function (Strategy) {
  Strategy["HOTP"] = "hotp";
  Strategy["TOTP"] = "totp";
})(exports.Strategy || (exports.Strategy = {}));
const STRATEGY = objectValues(exports.Strategy);
const createDigestPlaceholder = () => {
  throw new Error('Please provide an options.createDigest implementation.');
};
function isTokenValid(value) {
  return /^(\d+)$/.test(value);
}
function padStart(value, maxLength, fillString) {
  if (value.length >= maxLength) {
    return value;
  }
  const padding = Array(maxLength + 1).join(fillString);
  return `${padding}${value}`.slice(-1 * maxLength);
}
function keyuri(options) {
  const tmpl = `otpauth://${options.type}/{labelPrefix}:{accountName}?secret={secret}{query}`;
  const params = [];
  if (STRATEGY.indexOf(options.type) < 0) {
    throw new Error(`Expecting options.type to be one of ${STRATEGY.join(', ')}. Received ${options.type}.`);
  }
  if (options.type === 'hotp') {
    if (options.counter == null || typeof options.counter !== 'number') {
      throw new Error('Expecting options.counter to be a number when options.type is "hotp".');
    }
    params.push(`&counter=${options.counter}`);
  }
  if (options.type === 'totp' && options.step) {
    params.push(`&period=${options.step}`);
  }
  if (options.digits) {
    params.push(`&digits=${options.digits}`);
  }
  if (options.algorithm) {
    params.push(`&algorithm=${options.algorithm.toUpperCase()}`);
  }
  if (options.issuer) {
    params.push(`&issuer=${encodeURIComponent(options.issuer)}`);
  }
  return tmpl.replace('{labelPrefix}', encodeURIComponent(options.issuer || options.accountName)).replace('{accountName}', encodeURIComponent(options.accountName)).replace('{secret}', options.secret).replace('{query}', params.join(''));
}
class OTP {
  constructor(defaultOptions = {}) {
    this._defaultOptions = Object.freeze({ ...defaultOptions
    });
    this._options = Object.freeze({});
  }
  create(defaultOptions = {}) {
    return new OTP(defaultOptions);
  }
  clone(defaultOptions = {}) {
    const instance = this.create({ ...this._defaultOptions,
      ...defaultOptions
    });
    instance.options = this._options;
    return instance;
  }
  get options() {
    return Object.freeze({ ...this._defaultOptions,
      ...this._options
    });
  }
  set options(options) {
    this._options = Object.freeze({ ...this._options,
      ...options
    });
  }
  allOptions() {
    return this.options;
  }
  resetOptions() {
    this._options = Object.freeze({});
  }
}

function hotpOptionsValidator(options) {
  if (typeof options.createDigest !== 'function') {
    throw new Error('Expecting options.createDigest to be a function.');
  }
  if (typeof options.createHmacKey !== 'function') {
    throw new Error('Expecting options.createHmacKey to be a function.');
  }
  if (typeof options.digits !== 'number') {
    throw new Error('Expecting options.digits to be a number.');
  }
  if (!options.algorithm || HASH_ALGORITHMS.indexOf(options.algorithm) < 0) {
    throw new Error(`Expecting options.algorithm to be one of ${HASH_ALGORITHMS.join(', ')}. Received ${options.algorithm}.`);
  }
  if (!options.encoding || KEY_ENCODINGS.indexOf(options.encoding) < 0) {
    throw new Error(`Expecting options.encoding to be one of ${KEY_ENCODINGS.join(', ')}. Received ${options.encoding}.`);
  }
}
const hotpCreateHmacKey = (algorithm, secret, encoding) => {
  return Buffer.from(secret, encoding).toString('hex');
};
function hotpDefaultOptions() {
  const options = {
    algorithm: exports.HashAlgorithms.SHA1,
    createHmacKey: hotpCreateHmacKey,
    createDigest: createDigestPlaceholder,
    digits: 6,
    encoding: exports.KeyEncodings.ASCII
  };
  return options;
}
function hotpOptions(opt) {
  const options = { ...hotpDefaultOptions(),
    ...opt
  };
  hotpOptionsValidator(options);
  return Object.freeze(options);
}
function hotpCounter(counter) {
  const hexCounter = counter.toString(16);
  return padStart(hexCounter, 16, '0');
}
function hotpDigestToToken(hexDigest, digits) {
  const digest = Buffer.from(hexDigest, 'hex');
  const offset = digest[digest.length - 1] & 0xf;
  const binary = (digest[offset] & 0x7f) << 24 | (digest[offset + 1] & 0xff) << 16 | (digest[offset + 2] & 0xff) << 8 | digest[offset + 3] & 0xff;
  const token = binary % Math.pow(10, digits);
  return padStart(String(token), digits, '0');
}
function hotpDigest(secret, counter, options) {
  const hexCounter = hotpCounter(counter);
  const hmacKey = options.createHmacKey(options.algorithm, secret, options.encoding);
  return options.createDigest(options.algorithm, hmacKey, hexCounter);
}
function hotpToken(secret, counter, options) {
  const hexDigest = options.digest || hotpDigest(secret, counter, options);
  return hotpDigestToToken(hexDigest, options.digits);
}
function hotpCheck(token, secret, counter, options) {
  if (!isTokenValid(token)) {
    return false;
  }
  const systemToken = hotpToken(secret, counter, options);
  return token === systemToken;
}
function hotpKeyuri(accountName, issuer, secret, counter, options) {
  return keyuri({
    algorithm: options.algorithm,
    digits: options.digits,
    type: exports.Strategy.HOTP,
    accountName,
    counter,
    issuer,
    secret
  });
}
class HOTP extends OTP {
  create(defaultOptions = {}) {
    return new HOTP(defaultOptions);
  }
  allOptions() {
    return hotpOptions(this.options);
  }
  generate(secret, counter) {
    return hotpToken(secret, counter, this.allOptions());
  }
  check(token, secret, counter) {
    return hotpCheck(token, secret, counter, this.allOptions());
  }
  verify(opts) {
    if (typeof opts !== 'object') {
      throw new Error('Expecting argument 0 of verify to be an object');
    }
    return this.check(opts.token, opts.secret, opts.counter);
  }
  keyuri(accountName, issuer, secret, counter) {
    return hotpKeyuri(accountName, issuer, secret, counter, this.allOptions());
  }
}

function parseWindowBounds(win) {
  if (typeof win === 'number') {
    return [Math.abs(win), Math.abs(win)];
  }
  if (Array.isArray(win)) {
    const [past, future] = win;
    if (typeof past === 'number' && typeof future === 'number') {
      return [Math.abs(past), Math.abs(future)];
    }
  }
  throw new Error('Expecting options.window to be an number or [number, number].');
}
function totpOptionsValidator(options) {
  hotpOptionsValidator(options);
  parseWindowBounds(options.window);
  if (typeof options.epoch !== 'number') {
    throw new Error('Expecting options.epoch to be a number.');
  }
  if (typeof options.step !== 'number') {
    throw new Error('Expecting options.step to be a number.');
  }
}
const totpPadSecret = (secret, encoding, minLength) => {
  const currentLength = secret.length;
  const hexSecret = Buffer.from(secret, encoding).toString('hex');
  if (currentLength < minLength) {
    const newSecret = new Array(minLength - currentLength + 1).join(hexSecret);
    return Buffer.from(newSecret, 'hex').slice(0, minLength).toString('hex');
  }
  return hexSecret;
};
const totpCreateHmacKey = (algorithm, secret, encoding) => {
  switch (algorithm) {
    case exports.HashAlgorithms.SHA1:
      return totpPadSecret(secret, encoding, 20);
    case exports.HashAlgorithms.SHA256:
      return totpPadSecret(secret, encoding, 32);
    case exports.HashAlgorithms.SHA512:
      return totpPadSecret(secret, encoding, 64);
    default:
      throw new Error(`Expecting algorithm to be one of ${HASH_ALGORITHMS.join(', ')}. Received ${algorithm}.`);
  }
};
function totpDefaultOptions() {
  const options = {
    algorithm: exports.HashAlgorithms.SHA1,
    createDigest: createDigestPlaceholder,
    createHmacKey: totpCreateHmacKey,
    digits: 6,
    encoding: exports.KeyEncodings.ASCII,
    epoch: Date.now(),
    step: 30,
    window: 0
  };
  return options;
}
function totpOptions(opt) {
  const options = { ...totpDefaultOptions(),
    ...opt
  };
  totpOptionsValidator(options);
  return Object.freeze(options);
}
function totpCounter(epoch, step) {
  return Math.floor(epoch / step / 1000);
}
function totpToken(secret, options) {
  const counter = totpCounter(options.epoch, options.step);
  return hotpToken(secret, counter, options);
}
function totpEpochsInWindow(epoch, direction, deltaPerEpoch, numOfEpoches) {
  const result = [];
  if (numOfEpoches === 0) {
    return result;
  }
  for (let i = 1; i <= numOfEpoches; i++) {
    const delta = direction * i * deltaPerEpoch;
    result.push(epoch + delta);
  }
  return result;
}
function totpEpochAvailable(epoch, step, win) {
  const bounds = parseWindowBounds(win);
  const delta = step * 1000;
  return {
    current: epoch,
    past: totpEpochsInWindow(epoch, -1, delta, bounds[0]),
    future: totpEpochsInWindow(epoch, 1, delta, bounds[1])
  };
}
function totpCheck(token, secret, options) {
  if (!isTokenValid(token)) {
    return false;
  }
  const systemToken = totpToken(secret, options);
  return token === systemToken;
}
function totpCheckByEpoch(epochs, token, secret, options) {
  let position = null;
  epochs.some((epoch, idx) => {
    if (totpCheck(token, secret, { ...options,
      epoch
    })) {
      position = idx + 1;
      return true;
    }
    return false;
  });
  return position;
}
function totpCheckWithWindow(token, secret, options) {
  if (totpCheck(token, secret, options)) {
    return 0;
  }
  const epochs = totpEpochAvailable(options.epoch, options.step, options.window);
  const backward = totpCheckByEpoch(epochs.past, token, secret, options);
  if (backward !== null) {
    return backward * -1;
  }
  return totpCheckByEpoch(epochs.future, token, secret, options);
}
function totpTimeUsed(epoch, step) {
  return Math.floor(epoch / 1000) % step;
}
function totpTimeRemaining(epoch, step) {
  return step - totpTimeUsed(epoch, step);
}
function totpKeyuri(accountName, issuer, secret, options) {
  return keyuri({
    algorithm: options.algorithm,
    digits: options.digits,
    step: options.step,
    type: exports.Strategy.TOTP,
    accountName,
    issuer,
    secret
  });
}
class TOTP extends HOTP {
  create(defaultOptions = {}) {
    return new TOTP(defaultOptions);
  }
  allOptions() {
    return totpOptions(this.options);
  }
  generate(secret) {
    return totpToken(secret, this.allOptions());
  }
  checkDelta(token, secret) {
    return totpCheckWithWindow(token, secret, this.allOptions());
  }
  check(token, secret) {
    const delta = this.checkDelta(token, secret);
    return typeof delta === 'number';
  }
  verify(opts) {
    if (typeof opts !== 'object') {
      throw new Error('Expecting argument 0 of verify to be an object');
    }
    return this.check(opts.token, opts.secret);
  }
  timeRemaining() {
    const options = this.allOptions();
    return totpTimeRemaining(options.epoch, options.step);
  }
  timeUsed() {
    const options = this.allOptions();
    return totpTimeUsed(options.epoch, options.step);
  }
  keyuri(accountName, issuer, secret) {
    return totpKeyuri(accountName, issuer, secret, this.allOptions());
  }
}

function authenticatorOptionValidator(options) {
  totpOptionsValidator(options);
  if (typeof options.keyDecoder !== 'function') {
    throw new Error('Expecting options.keyDecoder to be a function.');
  }
  if (options.keyEncoder && typeof options.keyEncoder !== 'function') {
    throw new Error('Expecting options.keyEncoder to be a function.');
  }
}
function authenticatorDefaultOptions() {
  const options = {
    algorithm: exports.HashAlgorithms.SHA1,
    createDigest: createDigestPlaceholder,
    createHmacKey: totpCreateHmacKey,
    digits: 6,
    encoding: exports.KeyEncodings.HEX,
    epoch: Date.now(),
    step: 30,
    window: 0
  };
  return options;
}
function authenticatorOptions(opt) {
  const options = { ...authenticatorDefaultOptions(),
    ...opt
  };
  authenticatorOptionValidator(options);
  return Object.freeze(options);
}
function authenticatorEncoder(secret, options) {
  return options.keyEncoder(secret, options.encoding);
}
function authenticatorDecoder(secret, options) {
  return options.keyDecoder(secret, options.encoding);
}
function authenticatorGenerateSecret(numberOfBytes, options) {
  const key = options.createRandomBytes(numberOfBytes, options.encoding);
  return authenticatorEncoder(key, options);
}
function authenticatorToken(secret, options) {
  return totpToken(authenticatorDecoder(secret, options), options);
}
function authenticatorCheckWithWindow(token, secret, options) {
  return totpCheckWithWindow(token, authenticatorDecoder(secret, options), options);
}
class Authenticator extends TOTP {
  create(defaultOptions = {}) {
    return new Authenticator(defaultOptions);
  }
  allOptions() {
    return authenticatorOptions(this.options);
  }
  generate(secret) {
    return authenticatorToken(secret, this.allOptions());
  }
  checkDelta(token, secret) {
    return authenticatorCheckWithWindow(token, secret, this.allOptions());
  }
  encode(secret) {
    return authenticatorEncoder(secret, this.allOptions());
  }
  decode(secret) {
    return authenticatorDecoder(secret, this.allOptions());
  }
  generateSecret(numberOfBytes = 10) {
    return authenticatorGenerateSecret(numberOfBytes, this.allOptions());
  }
}

exports.Authenticator = Authenticator;
exports.HASH_ALGORITHMS = HASH_ALGORITHMS;
exports.HOTP = HOTP;
exports.KEY_ENCODINGS = KEY_ENCODINGS;
exports.OTP = OTP;
exports.STRATEGY = STRATEGY;
exports.TOTP = TOTP;
exports.authenticatorCheckWithWindow = authenticatorCheckWithWindow;
exports.authenticatorDecoder = authenticatorDecoder;
exports.authenticatorDefaultOptions = authenticatorDefaultOptions;
exports.authenticatorEncoder = authenticatorEncoder;
exports.authenticatorGenerateSecret = authenticatorGenerateSecret;
exports.authenticatorOptionValidator = authenticatorOptionValidator;
exports.authenticatorOptions = authenticatorOptions;
exports.authenticatorToken = authenticatorToken;
exports.createDigestPlaceholder = createDigestPlaceholder;
exports.hotpCheck = hotpCheck;
exports.hotpCounter = hotpCounter;
exports.hotpCreateHmacKey = hotpCreateHmacKey;
exports.hotpDefaultOptions = hotpDefaultOptions;
exports.hotpDigestToToken = hotpDigestToToken;
exports.hotpKeyuri = hotpKeyuri;
exports.hotpOptions = hotpOptions;
exports.hotpOptionsValidator = hotpOptionsValidator;
exports.hotpToken = hotpToken;
exports.isTokenValid = isTokenValid;
exports.keyuri = keyuri;
exports.objectValues = objectValues;
exports.padStart = padStart;
exports.totpCheck = totpCheck;
exports.totpCheckByEpoch = totpCheckByEpoch;
exports.totpCheckWithWindow = totpCheckWithWindow;
exports.totpCounter = totpCounter;
exports.totpCreateHmacKey = totpCreateHmacKey;
exports.totpDefaultOptions = totpDefaultOptions;
exports.totpEpochAvailable = totpEpochAvailable;
exports.totpKeyuri = totpKeyuri;
exports.totpOptions = totpOptions;
exports.totpOptionsValidator = totpOptionsValidator;
exports.totpPadSecret = totpPadSecret;
exports.totpTimeRemaining = totpTimeRemaining;
exports.totpTimeUsed = totpTimeUsed;
exports.totpToken = totpToken;


/***/ }),

/***/ 7739:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.delay = void 0;
var async_1 = __webpack_require__(7688);
var delayWhen_1 = __webpack_require__(4947);
var timer_1 = __webpack_require__(3051);
function delay(due, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.asyncScheduler; }
    var duration = timer_1.timer(due, scheduler);
    return delayWhen_1.delayWhen(function () { return duration; });
}
exports.delay = delay;
//# sourceMappingURL=delay.js.map

/***/ }),

/***/ 7785:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ignoreElements = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var noop_1 = __webpack_require__(8563);
function ignoreElements() {
    return lift_1.operate(function (source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, noop_1.noop));
    });
}
exports.ignoreElements = ignoreElements;
//# sourceMappingURL=ignoreElements.js.map

/***/ }),

/***/ 7791:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scheduleAsyncIterable = void 0;
var Observable_1 = __webpack_require__(541);
var executeSchedule_1 = __webpack_require__(7725);
function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new Observable_1.Observable(function (subscriber) {
        executeSchedule_1.executeSchedule(subscriber, scheduler, function () {
            var iterator = input[Symbol.asyncIterator]();
            executeSchedule_1.executeSchedule(subscriber, scheduler, function () {
                iterator.next().then(function (result) {
                    if (result.done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(result.value);
                    }
                });
            }, 0, true);
        });
    });
}
exports.scheduleAsyncIterable = scheduleAsyncIterable;
//# sourceMappingURL=scheduleAsyncIterable.js.map

/***/ }),

/***/ 7817:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var Match = __webpack_require__ (5757);

/**
 * Charset recognizer for UTF-8
 */
module.exports = function() {
  this.name = function() {
    return 'UTF-8';
  };
  this.match = function(det) {

    var hasBOM = false,
      numValid = 0,
      numInvalid = 0,
      input = det.fRawInput,
      trailBytes = 0,
      confidence;

    if (det.fRawLength >= 3 &&
      (input[0] & 0xff) == 0xef && (input[1] & 0xff) == 0xbb && (input[2] & 0xff) == 0xbf) {
      hasBOM = true;
    }

    // Scan for multi-byte sequences
    for (var i = 0; i < det.fRawLength; i++) {
      var b = input[i];
      if ((b & 0x80) == 0)
        continue; // ASCII

      // Hi bit on char found.  Figure out how long the sequence should be
      if ((b & 0x0e0) == 0x0c0) {
        trailBytes = 1;
      } else if ((b & 0x0f0) == 0x0e0) {
        trailBytes = 2;
      } else if ((b & 0x0f8) == 0xf0) {
        trailBytes = 3;
      } else {
        numInvalid++;
        if (numInvalid > 5)
          break;
        trailBytes = 0;
      }

      // Verify that we've got the right number of trail bytes in the sequence
      for (;;) {
        i++;
        if (i >= det.fRawLength)
          break;

        if ((input[i] & 0xc0) != 0x080) {
          numInvalid++;
          break;
        }
        if (--trailBytes == 0) {
          numValid++;
          break;
        }
      }
    }

    // Cook up some sort of confidence score, based on presense of a BOM
    //    and the existence of valid and/or invalid multi-byte sequences.
    confidence = 0;
    if (hasBOM && numInvalid == 0)
      confidence = 100;
    else if (hasBOM && numValid > numInvalid * 10)
      confidence = 80;
    else if (numValid > 3 && numInvalid == 0)
      confidence = 100;
    else if (numValid > 0 && numInvalid == 0)
      confidence = 80;
    else if (numValid == 0 && numInvalid == 0)
      // Plain ASCII.
      confidence = 10;
    else if (numValid > numInvalid * 10)
      // Probably corruput utf-8 data.  Valid sequences aren't likely by chance.
      confidence = 25;
    else
      return null

    return new Match(det, this, confidence);
  };
};


/***/ }),

/***/ 7826:
/***/ (function(__unused_webpack_module, exports) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.timeoutProvider = void 0;
exports.timeoutProvider = {
    setTimeout: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = exports.timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function (handle) {
        var delegate = exports.timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=timeoutProvider.js.map

/***/ }),

/***/ 7835:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

try {
  var util = __webpack_require__(9023);
  /* istanbul ignore next */
  if (typeof util.inherits !== 'function') throw '';
  module.exports = util.inherits;
} catch (e) {
  /* istanbul ignore next */
  module.exports = __webpack_require__(6192);
}


/***/ }),

/***/ 7865:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const mimicFn = __webpack_require__(564);

const calledFunctions = new WeakMap();

const onetime = (function_, options = {}) => {
	if (typeof function_ !== 'function') {
		throw new TypeError('Expected a function');
	}

	let returnValue;
	let callCount = 0;
	const functionName = function_.displayName || function_.name || '<anonymous>';

	const onetime = function (...arguments_) {
		calledFunctions.set(onetime, ++callCount);

		if (callCount === 1) {
			returnValue = function_.apply(this, arguments_);
			function_ = null;
		} else if (options.throw === true) {
			throw new Error(`Function \`${functionName}\` can only be called once`);
		}

		return returnValue;
	};

	mimicFn(onetime, function_);
	calledFunctions.set(onetime, callCount);

	return onetime;
};

module.exports = onetime;
// TODO: Remove this for the next major release
module.exports["default"] = onetime;

module.exports.callCount = function_ => {
	if (!calledFunctions.has(function_)) {
		throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
	}

	return calledFunctions.get(function_);
};


/***/ }),

/***/ 7882:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.argsOrArgArray = void 0;
var isArray = Array.isArray;
function argsOrArgArray(args) {
    return args.length === 1 && isArray(args[0]) ? args[0] : args;
}
exports.argsOrArgArray = argsOrArgArray;
//# sourceMappingURL=argsOrArgArray.js.map

/***/ }),

/***/ 7910:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const compare = (a, b, loose) =>
  new SemVer(a, loose).compare(new SemVer(b, loose))

module.exports = compare


/***/ }),

/***/ 7928:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"single":{"topLeft":"┌","top":"─","topRight":"┐","right":"│","bottomRight":"┘","bottom":"─","bottomLeft":"└","left":"│"},"double":{"topLeft":"╔","top":"═","topRight":"╗","right":"║","bottomRight":"╝","bottom":"═","bottomLeft":"╚","left":"║"},"round":{"topLeft":"╭","top":"─","topRight":"╮","right":"│","bottomRight":"╯","bottom":"─","bottomLeft":"╰","left":"│"},"bold":{"topLeft":"┏","top":"━","topRight":"┓","right":"┃","bottomRight":"┛","bottom":"━","bottomLeft":"┗","left":"┃"},"singleDouble":{"topLeft":"╓","top":"─","topRight":"╖","right":"║","bottomRight":"╜","bottom":"─","bottomLeft":"╙","left":"║"},"doubleSingle":{"topLeft":"╒","top":"═","topRight":"╕","right":"│","bottomRight":"╛","bottom":"═","bottomLeft":"╘","left":"│"},"classic":{"topLeft":"+","top":"-","topRight":"+","right":"|","bottomRight":"+","bottom":"-","bottomLeft":"+","left":"|"},"arrow":{"topLeft":"↘","top":"↓","topRight":"↙","right":"←","bottomRight":"↖","bottom":"↑","bottomLeft":"↗","left":"→"}}');

/***/ }),

/***/ 7930:
/***/ ((module) => {

module['exports'] = function runTheTrap(text, options) {
  var result = '';
  text = text || 'Run the trap, drop the bass';
  text = text.split('');
  var trap = {
    a: ['\u0040', '\u0104', '\u023a', '\u0245', '\u0394', '\u039b', '\u0414'],
    b: ['\u00df', '\u0181', '\u0243', '\u026e', '\u03b2', '\u0e3f'],
    c: ['\u00a9', '\u023b', '\u03fe'],
    d: ['\u00d0', '\u018a', '\u0500', '\u0501', '\u0502', '\u0503'],
    e: ['\u00cb', '\u0115', '\u018e', '\u0258', '\u03a3', '\u03be', '\u04bc',
      '\u0a6c'],
    f: ['\u04fa'],
    g: ['\u0262'],
    h: ['\u0126', '\u0195', '\u04a2', '\u04ba', '\u04c7', '\u050a'],
    i: ['\u0f0f'],
    j: ['\u0134'],
    k: ['\u0138', '\u04a0', '\u04c3', '\u051e'],
    l: ['\u0139'],
    m: ['\u028d', '\u04cd', '\u04ce', '\u0520', '\u0521', '\u0d69'],
    n: ['\u00d1', '\u014b', '\u019d', '\u0376', '\u03a0', '\u048a'],
    o: ['\u00d8', '\u00f5', '\u00f8', '\u01fe', '\u0298', '\u047a', '\u05dd',
      '\u06dd', '\u0e4f'],
    p: ['\u01f7', '\u048e'],
    q: ['\u09cd'],
    r: ['\u00ae', '\u01a6', '\u0210', '\u024c', '\u0280', '\u042f'],
    s: ['\u00a7', '\u03de', '\u03df', '\u03e8'],
    t: ['\u0141', '\u0166', '\u0373'],
    u: ['\u01b1', '\u054d'],
    v: ['\u05d8'],
    w: ['\u0428', '\u0460', '\u047c', '\u0d70'],
    x: ['\u04b2', '\u04fe', '\u04fc', '\u04fd'],
    y: ['\u00a5', '\u04b0', '\u04cb'],
    z: ['\u01b5', '\u0240'],
  };
  text.forEach(function(c) {
    c = c.toLowerCase();
    var chars = trap[c] || [' '];
    var rand = Math.floor(Math.random() * chars.length);
    if (typeof trap[c] !== 'undefined') {
      result += trap[c][rand];
    } else {
      result += c;
    }
  });
  return result;
};


/***/ }),

/***/ 7934:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.first = void 0;
var EmptyError_1 = __webpack_require__(9866);
var filter_1 = __webpack_require__(248);
var take_1 = __webpack_require__(8693);
var defaultIfEmpty_1 = __webpack_require__(4761);
var throwIfEmpty_1 = __webpack_require__(6626);
var identity_1 = __webpack_require__(8489);
function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) {
        return source.pipe(predicate ? filter_1.filter(function (v, i) { return predicate(v, i, source); }) : identity_1.identity, take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function () { return new EmptyError_1.EmptyError(); }));
    };
}
exports.first = first;
//# sourceMappingURL=first.js.map

/***/ }),

/***/ 7952:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.combineLatestInit = exports.combineLatest = void 0;
var Observable_1 = __webpack_require__(541);
var argsArgArrayOrObject_1 = __webpack_require__(9197);
var from_1 = __webpack_require__(7568);
var identity_1 = __webpack_require__(8489);
var mapOneOrManyArgs_1 = __webpack_require__(4078);
var args_1 = __webpack_require__(3522);
var createObject_1 = __webpack_require__(2460);
var OperatorSubscriber_1 = __webpack_require__(1908);
var executeSchedule_1 = __webpack_require__(7725);
function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_1.popScheduler(args);
    var resultSelector = args_1.popResultSelector(args);
    var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
    if (observables.length === 0) {
        return from_1.from([], scheduler);
    }
    var result = new Observable_1.Observable(combineLatestInit(observables, scheduler, keys
        ?
            function (values) { return createObject_1.createObject(keys, values); }
        :
            identity_1.identity));
    return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;
}
exports.combineLatest = combineLatest;
function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) { valueTransform = identity_1.identity; }
    return function (subscriber) {
        maybeSchedule(scheduler, function () {
            var length = observables.length;
            var values = new Array(length);
            var active = length;
            var remainingFirstValues = length;
            var _loop_1 = function (i) {
                maybeSchedule(scheduler, function () {
                    var source = from_1.from(observables[i], scheduler);
                    var hasFirstValue = false;
                    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                        values[i] = value;
                        if (!hasFirstValue) {
                            hasFirstValue = true;
                            remainingFirstValues--;
                        }
                        if (!remainingFirstValues) {
                            subscriber.next(valueTransform(values.slice()));
                        }
                    }, function () {
                        if (!--active) {
                            subscriber.complete();
                        }
                    }));
                }, subscriber);
            };
            for (var i = 0; i < length; i++) {
                _loop_1(i);
            }
        }, subscriber);
    };
}
exports.combineLatestInit = combineLatestInit;
function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
        executeSchedule_1.executeSchedule(subscription, scheduler, execute);
    }
    else {
        execute();
    }
}
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ 7963:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var ERR_INVALID_OPT_VALUE = (__webpack_require__(3201)/* .codes */ .F).ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),

/***/ 7976:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.min = void 0;
var reduce_1 = __webpack_require__(1848);
var isFunction_1 = __webpack_require__(8403);
function min(comparer) {
    return reduce_1.reduce(isFunction_1.isFunction(comparer) ? function (x, y) { return (comparer(x, y) < 0 ? x : y); } : function (x, y) { return (x < y ? x : y); });
}
exports.min = min;
//# sourceMappingURL=min.js.map

/***/ }),

/***/ 8003:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.empty = exports.EMPTY = void 0;
var Observable_1 = __webpack_require__(541);
exports.EMPTY = new Observable_1.Observable(function (subscriber) { return subscriber.complete(); });
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
}
exports.empty = empty;
function emptyScheduled(scheduler) {
    return new Observable_1.Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map

/***/ }),

/***/ 8014:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compare = __webpack_require__(7910)
const gt = (a, b, loose) => compare(a, b, loose) > 0
module.exports = gt


/***/ }),

/***/ 8037:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.skipLast = void 0;
var identity_1 = __webpack_require__(8489);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function skipLast(skipCount) {
    return skipCount <= 0
        ?
            identity_1.identity
        : lift_1.operate(function (source, subscriber) {
            var ring = new Array(skipCount);
            var seen = 0;
            source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                var valueIndex = seen++;
                if (valueIndex < skipCount) {
                    ring[valueIndex] = value;
                }
                else {
                    var index = valueIndex % skipCount;
                    var oldValue = ring[index];
                    ring[index] = value;
                    subscriber.next(oldValue);
                }
            }));
            return function () {
                ring = null;
            };
        });
}
exports.skipLast = skipLast;
//# sourceMappingURL=skipLast.js.map

/***/ }),

/***/ 8079:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exhaustAll = void 0;
var exhaustMap_1 = __webpack_require__(654);
var identity_1 = __webpack_require__(8489);
function exhaustAll() {
    return exhaustMap_1.exhaustMap(identity_1.identity);
}
exports.exhaustAll = exhaustAll;
//# sourceMappingURL=exhaustAll.js.map

/***/ }),

/***/ 8095:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @otplib/preset-default
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 12.0.1
 * @license: MIT
 **/


Object.defineProperty(exports, "__esModule", ({ value: true }));

var pluginCrypto = __webpack_require__(279);
var pluginThirtyTwo = __webpack_require__(3523);
var core = __webpack_require__(7735);

const hotp = new core.HOTP({
  createDigest: pluginCrypto.createDigest
});
const totp = new core.TOTP({
  createDigest: pluginCrypto.createDigest
});
const authenticator = new core.Authenticator({
  createDigest: pluginCrypto.createDigest,
  createRandomBytes: pluginCrypto.createRandomBytes,
  keyDecoder: pluginThirtyTwo.keyDecoder,
  keyEncoder: pluginThirtyTwo.keyEncoder
});

exports.authenticator = authenticator;
exports.hotp = hotp;
exports.totp = totp;


/***/ }),

/***/ 8109:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



// Some environments don't have global Buffer (e.g. React Native).
// Solution would be installing npm modules "buffer" and "stream" explicitly.
var Buffer = (__webpack_require__(7475).Buffer);

var bomHandling = __webpack_require__(1449),
    iconv = module.exports;

// All codecs and aliases are kept here, keyed by encoding name/alias.
// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
iconv.encodings = null;

// Characters emitted in case of error.
iconv.defaultCharUnicode = '�';
iconv.defaultCharSingleByte = '?';

// Public API.
iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || ""); // Ensure string.

    var encoder = iconv.getEncoder(encoding, options);

    var res = encoder.write(str);
    var trail = encoder.end();
    
    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
}

iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === 'string') {
        if (!iconv.skipDecodeWarning) {
            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
            iconv.skipDecodeWarning = true;
        }

        buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
    }

    var decoder = iconv.getDecoder(encoding, options);

    var res = decoder.write(buf);
    var trail = decoder.end();

    return trail ? (res + trail) : res;
}

iconv.encodingExists = function encodingExists(enc) {
    try {
        iconv.getCodec(enc);
        return true;
    } catch (e) {
        return false;
    }
}

// Legacy aliases to convert functions
iconv.toEncoding = iconv.encode;
iconv.fromEncoding = iconv.decode;

// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
iconv._codecDataCache = {};
iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings)
        iconv.encodings = __webpack_require__(4396); // Lazy load all encoding definitions.
    
    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    var enc = iconv._canonicalizeEncoding(encoding);

    // Traverse iconv.encodings to find actual codec.
    var codecOptions = {};
    while (true) {
        var codec = iconv._codecDataCache[enc];
        if (codec)
            return codec;

        var codecDef = iconv.encodings[enc];

        switch (typeof codecDef) {
            case "string": // Direct alias to other encoding.
                enc = codecDef;
                break;

            case "object": // Alias with options. Can be layered.
                for (var key in codecDef)
                    codecOptions[key] = codecDef[key];

                if (!codecOptions.encodingName)
                    codecOptions.encodingName = enc;
                
                enc = codecDef.type;
                break;

            case "function": // Codec itself.
                if (!codecOptions.encodingName)
                    codecOptions.encodingName = enc;

                // The codec function must load all tables and return object with .encoder and .decoder methods.
                // It'll be called only once (for each different options object).
                codec = new codecDef(codecOptions, iconv);

                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                return codec;

            default:
                throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
        }
    }
}

iconv._canonicalizeEncoding = function(encoding) {
    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
}

iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
        encoder = new codec.encoder(options, codec);

    if (codec.bomAware && options && options.addBOM)
        encoder = new bomHandling.PrependBOM(encoder, options);

    return encoder;
}

iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
        decoder = new codec.decoder(options, codec);

    if (codec.bomAware && !(options && options.stripBOM === false))
        decoder = new bomHandling.StripBOM(decoder, options);

    return decoder;
}


// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
if (nodeVer) {

    // Load streaming support in Node v0.10+
    var nodeVerArr = nodeVer.split(".").map(Number);
    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
        __webpack_require__(6972)(iconv);
    }

    // Load Node primitive extensions.
    __webpack_require__(1542)(iconv);
}

if (false) // removed by dead control flow
{}


/***/ }),

/***/ 8114:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.switchMap = void 0;
var innerFrom_1 = __webpack_require__(2018);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function switchMap(project, resultSelector) {
    return lift_1.operate(function (source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
            var innerIndex = 0;
            var outerIndex = index++;
            innerFrom_1.innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                innerSubscriber = null;
                checkComplete();
            })));
        }, function () {
            isComplete = true;
            checkComplete();
        }));
    });
}
exports.switchMap = switchMap;
//# sourceMappingURL=switchMap.js.map

/***/ }),

/***/ 8123:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.switchAll = void 0;
var switchMap_1 = __webpack_require__(8114);
var identity_1 = __webpack_require__(8489);
function switchAll() {
    return switchMap_1.switchMap(identity_1.identity);
}
exports.switchAll = switchAll;
//# sourceMappingURL=switchAll.js.map

/***/ }),

/***/ 8174:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[["a140","",62],["a180","",32],["a240","",62],["a280","",32],["a2ab","",5],["a2e3","€"],["a2ef",""],["a2fd",""],["a340","",62],["a380","",31,"　"],["a440","",62],["a480","",32],["a4f4","",10],["a540","",62],["a580","",32],["a5f7","",7],["a640","",62],["a680","",32],["a6b9","",7],["a6d9","",6],["a6ec",""],["a6f3",""],["a6f6","",8],["a740","",62],["a780","",32],["a7c2","",14],["a7f2","",12],["a896","",10],["a8bc",""],["a8bf","ǹ"],["a8c1",""],["a8ea","",20],["a958",""],["a95b",""],["a95d",""],["a989","〾⿰",11],["a997","",12],["a9f0","",14],["aaa1","",93],["aba1","",93],["aca1","",93],["ada1","",93],["aea1","",93],["afa1","",93],["d7fa","",4],["f8a1","",93],["f9a1","",93],["faa1","",93],["fba1","",93],["fca1","",93],["fda1","",93],["fe50","⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],["fe80","䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",6,"䶮",93]]');

/***/ }),

/***/ 8181:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.of = void 0;
var args_1 = __webpack_require__(3522);
var from_1 = __webpack_require__(7568);
function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_1.popScheduler(args);
    return from_1.from(args, scheduler);
}
exports.of = of;
//# sourceMappingURL=of.js.map

/***/ }),

/***/ 8187:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.combineLatestAll = void 0;
var combineLatest_1 = __webpack_require__(7952);
var joinAllInternals_1 = __webpack_require__(8805);
function combineLatestAll(project) {
    return joinAllInternals_1.joinAllInternals(combineLatest_1.combineLatest, project);
}
exports.combineLatestAll = combineLatestAll;
//# sourceMappingURL=combineLatestAll.js.map

/***/ }),

/***/ 8197:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sampleTime = void 0;
var async_1 = __webpack_require__(7688);
var sample_1 = __webpack_require__(8584);
var interval_1 = __webpack_require__(9233);
function sampleTime(period, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.asyncScheduler; }
    return sample_1.sample(interval_1.interval(period, scheduler));
}
exports.sampleTime = sampleTime;
//# sourceMappingURL=sampleTime.js.map

/***/ }),

/***/ 8216:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scheduleObservable = void 0;
var innerFrom_1 = __webpack_require__(2018);
var observeOn_1 = __webpack_require__(6257);
var subscribeOn_1 = __webpack_require__(3901);
function scheduleObservable(input, scheduler) {
    return innerFrom_1.innerFrom(input).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
}
exports.scheduleObservable = scheduleObservable;
//# sourceMappingURL=scheduleObservable.js.map

/***/ }),

/***/ 8236:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotFoundError = void 0;
var createErrorClass_1 = __webpack_require__(8377);
exports.NotFoundError = createErrorClass_1.createErrorClass(function (_super) {
    return function NotFoundErrorImpl(message) {
        _super(this);
        this.name = 'NotFoundError';
        this.message = message;
    };
});
//# sourceMappingURL=NotFoundError.js.map

/***/ }),

/***/ 8277:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.takeUntil = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
var noop_1 = __webpack_require__(8563);
function takeUntil(notifier) {
    return lift_1.operate(function (source, subscriber) {
        innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () { return subscriber.complete(); }, noop_1.noop));
        !subscriber.closed && source.subscribe(subscriber);
    });
}
exports.takeUntil = takeUntil;
//# sourceMappingURL=takeUntil.js.map

/***/ }),

/***/ 8287:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



// just pre-load all the stuff that index.js lazily exports
const internalRe = __webpack_require__(32)
const constants = __webpack_require__(4335)
const SemVer = __webpack_require__(7318)
const identifiers = __webpack_require__(101)
const parse = __webpack_require__(9002)
const valid = __webpack_require__(6463)
const clean = __webpack_require__(4688)
const inc = __webpack_require__(3185)
const diff = __webpack_require__(5078)
const major = __webpack_require__(6888)
const minor = __webpack_require__(8724)
const patch = __webpack_require__(1979)
const prerelease = __webpack_require__(1947)
const compare = __webpack_require__(7910)
const rcompare = __webpack_require__(6656)
const compareLoose = __webpack_require__(7661)
const compareBuild = __webpack_require__(6231)
const sort = __webpack_require__(825)
const rsort = __webpack_require__(4071)
const gt = __webpack_require__(8014)
const lt = __webpack_require__(161)
const eq = __webpack_require__(5767)
const neq = __webpack_require__(3221)
const gte = __webpack_require__(9799)
const lte = __webpack_require__(9730)
const cmp = __webpack_require__(9917)
const coerce = __webpack_require__(8320)
const Comparator = __webpack_require__(1994)
const Range = __webpack_require__(9165)
const satisfies = __webpack_require__(4483)
const toComparators = __webpack_require__(4813)
const maxSatisfying = __webpack_require__(1714)
const minSatisfying = __webpack_require__(3704)
const minVersion = __webpack_require__(6531)
const validRange = __webpack_require__(9460)
const outside = __webpack_require__(5569)
const gtr = __webpack_require__(57)
const ltr = __webpack_require__(8528)
const intersects = __webpack_require__(5546)
const simplifyRange = __webpack_require__(5743)
const subset = __webpack_require__(2766)
module.exports = {
  parse,
  valid,
  clean,
  inc,
  diff,
  major,
  minor,
  patch,
  prerelease,
  compare,
  rcompare,
  compareLoose,
  compareBuild,
  sort,
  rsort,
  gt,
  lt,
  eq,
  neq,
  gte,
  lte,
  cmp,
  coerce,
  Comparator,
  Range,
  satisfies,
  toComparators,
  maxSatisfying,
  minSatisfying,
  minVersion,
  validRange,
  outside,
  gtr,
  ltr,
  intersects,
  simplifyRange,
  subset,
  SemVer,
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
  RELEASE_TYPES: constants.RELEASE_TYPES,
  compareIdentifiers: identifiers.compareIdentifiers,
  rcompareIdentifiers: identifiers.rcompareIdentifiers,
}


/***/ }),

/***/ 8320:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const parse = __webpack_require__(9002)
const { safeRe: re, t } = __webpack_require__(32)

const coerce = (version, options) => {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version === 'number') {
    version = String(version)
  }

  if (typeof version !== 'string') {
    return null
  }

  options = options || {}

  let match = null
  if (!options.rtl) {
    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]
    let next
    while ((next = coerceRtlRegex.exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
    ) {
      if (!match ||
            next.index + next[0].length !== match.index + match[0].length) {
        match = next
      }
      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length
    }
    // leave it in a clean state
    coerceRtlRegex.lastIndex = -1
  }

  if (match === null) {
    return null
  }

  const major = match[2]
  const minor = match[3] || '0'
  const patch = match[4] || '0'
  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''
  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''

  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)
}
module.exports = coerce


/***/ }),

/***/ 8345:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tap = void 0;
var isFunction_1 = __webpack_require__(8403);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var identity_1 = __webpack_require__(8489);
function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction_1.isFunction(observerOrNext) || error || complete
        ?
            { next: observerOrNext, error: error, complete: complete }
        : observerOrNext;
    return tapObserver
        ? lift_1.operate(function (source, subscriber) {
            var _a;
            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
            var isUnsub = true;
            source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                var _a;
                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                subscriber.next(value);
            }, function () {
                var _a;
                isUnsub = false;
                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                subscriber.complete();
            }, function (err) {
                var _a;
                isUnsub = false;
                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                subscriber.error(err);
            }, function () {
                var _a, _b;
                if (isUnsub) {
                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                }
                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
            }));
        })
        :
            identity_1.identity;
}
exports.tap = tap;
//# sourceMappingURL=tap.js.map

/***/ }),

/***/ 8346:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const fs = __webpack_require__(2358)
const path = __webpack_require__(6928)
const mkdirsSync = (__webpack_require__(4544).mkdirsSync)
const utimesMillisSync = (__webpack_require__(5421).utimesMillisSync)
const stat = __webpack_require__(1560)

function copySync (src, dest, opts) {
  if (typeof opts === 'function') {
    opts = { filter: opts }
  }

  opts = opts || {}
  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now
  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber

  // Warn about using preserveTimestamps on 32-bit node
  if (opts.preserveTimestamps && process.arch === 'ia32') {
    process.emitWarning(
      'Using the preserveTimestamps option in 32-bit node is not recommended;\n\n' +
      '\tsee https://github.com/jprichardson/node-fs-extra/issues/269',
      'Warning', 'fs-extra-WARN0002'
    )
  }

  const { srcStat, destStat } = stat.checkPathsSync(src, dest, 'copy', opts)
  stat.checkParentPathsSync(src, srcStat, dest, 'copy')
  if (opts.filter && !opts.filter(src, dest)) return
  const destParent = path.dirname(dest)
  if (!fs.existsSync(destParent)) mkdirsSync(destParent)
  return getStats(destStat, src, dest, opts)
}

function getStats (destStat, src, dest, opts) {
  const statSync = opts.dereference ? fs.statSync : fs.lstatSync
  const srcStat = statSync(src)

  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)
  else if (srcStat.isFile() ||
           srcStat.isCharacterDevice() ||
           srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts)
  else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)
  else if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)
  else if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)
  throw new Error(`Unknown file: ${src}`)
}

function onFile (srcStat, destStat, src, dest, opts) {
  if (!destStat) return copyFile(srcStat, src, dest, opts)
  return mayCopyFile(srcStat, src, dest, opts)
}

function mayCopyFile (srcStat, src, dest, opts) {
  if (opts.overwrite) {
    fs.unlinkSync(dest)
    return copyFile(srcStat, src, dest, opts)
  } else if (opts.errorOnExist) {
    throw new Error(`'${dest}' already exists`)
  }
}

function copyFile (srcStat, src, dest, opts) {
  fs.copyFileSync(src, dest)
  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest)
  return setDestMode(dest, srcStat.mode)
}

function handleTimestamps (srcMode, src, dest) {
  // Make sure the file is writable before setting the timestamp
  // otherwise open fails with EPERM when invoked with 'r+'
  // (through utimes call)
  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode)
  return setDestTimestamps(src, dest)
}

function fileIsNotWritable (srcMode) {
  return (srcMode & 0o200) === 0
}

function makeFileWritable (dest, srcMode) {
  return setDestMode(dest, srcMode | 0o200)
}

function setDestMode (dest, srcMode) {
  return fs.chmodSync(dest, srcMode)
}

function setDestTimestamps (src, dest) {
  // The initial srcStat.atime cannot be trusted
  // because it is modified by the read(2) system call
  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
  const updatedSrcStat = fs.statSync(src)
  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime)
}

function onDir (srcStat, destStat, src, dest, opts) {
  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts)
  return copyDir(src, dest, opts)
}

function mkDirAndCopy (srcMode, src, dest, opts) {
  fs.mkdirSync(dest)
  copyDir(src, dest, opts)
  return setDestMode(dest, srcMode)
}

function copyDir (src, dest, opts) {
  const dir = fs.opendirSync(src)

  try {
    let dirent

    while ((dirent = dir.readSync()) !== null) {
      copyDirItem(dirent.name, src, dest, opts)
    }
  } finally {
    dir.closeSync()
  }
}

function copyDirItem (item, src, dest, opts) {
  const srcItem = path.join(src, item)
  const destItem = path.join(dest, item)
  if (opts.filter && !opts.filter(srcItem, destItem)) return
  const { destStat } = stat.checkPathsSync(srcItem, destItem, 'copy', opts)
  return getStats(destStat, srcItem, destItem, opts)
}

function onLink (destStat, src, dest, opts) {
  let resolvedSrc = fs.readlinkSync(src)
  if (opts.dereference) {
    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)
  }

  if (!destStat) {
    return fs.symlinkSync(resolvedSrc, dest)
  } else {
    let resolvedDest
    try {
      resolvedDest = fs.readlinkSync(dest)
    } catch (err) {
      // dest exists and is a regular file or directory,
      // Windows may throw UNKNOWN error. If dest already exists,
      // fs throws error anyway, so no need to guard against it here.
      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest)
      throw err
    }
    if (opts.dereference) {
      resolvedDest = path.resolve(process.cwd(), resolvedDest)
    }
    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)
    }

    // prevent copy if src is a subdir of dest since unlinking
    // dest in this case would result in removing src contents
    // and therefore a broken symlink would be created.
    if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)
    }
    return copyLink(resolvedSrc, dest)
  }
}

function copyLink (resolvedSrc, dest) {
  fs.unlinkSync(dest)
  return fs.symlinkSync(resolvedSrc, dest)
}

module.exports = copySync


/***/ }),

/***/ 8377:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createErrorClass = void 0;
function createErrorClass(createImpl) {
    var _super = function (instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}
exports.createErrorClass = createErrorClass;
//# sourceMappingURL=createErrorClass.js.map

/***/ }),

/***/ 8393:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mergeMapTo = void 0;
var mergeMap_1 = __webpack_require__(4344);
var isFunction_1 = __webpack_require__(8403);
function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    if (isFunction_1.isFunction(resultSelector)) {
        return mergeMap_1.mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
    }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return mergeMap_1.mergeMap(function () { return innerObservable; }, concurrent);
}
exports.mergeMapTo = mergeMapTo;
//# sourceMappingURL=mergeMapTo.js.map

/***/ }),

/***/ 8403:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isFunction = void 0;
function isFunction(value) {
    return typeof value === 'function';
}
exports.isFunction = isFunction;
//# sourceMappingURL=isFunction.js.map

/***/ }),

/***/ 8408:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mergeInternals = void 0;
var innerFrom_1 = __webpack_require__(2018);
var executeSchedule_1 = __webpack_require__(7725);
var OperatorSubscriber_1 = __webpack_require__(1908);
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function () {
        if (isComplete && !buffer.length && !active) {
            subscriber.complete();
        }
    };
    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
    var doInnerSub = function (value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        innerFrom_1.innerFrom(project(value, index++)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (innerValue) {
            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
            if (expand) {
                outerNext(innerValue);
            }
            else {
                subscriber.next(innerValue);
            }
        }, function () {
            innerComplete = true;
        }, undefined, function () {
            if (innerComplete) {
                try {
                    active--;
                    var _loop_1 = function () {
                        var bufferedValue = buffer.shift();
                        if (innerSubScheduler) {
                            executeSchedule_1.executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                        }
                        else {
                            doInnerSub(bufferedValue);
                        }
                    };
                    while (buffer.length && active < concurrent) {
                        _loop_1();
                    }
                    checkComplete();
                }
                catch (err) {
                    subscriber.error(err);
                }
            }
        }));
    };
    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, outerNext, function () {
        isComplete = true;
        checkComplete();
    }));
    return function () {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
}
exports.mergeInternals = mergeInternals;
//# sourceMappingURL=mergeInternals.js.map

/***/ }),

/***/ 8474:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:events");

/***/ }),

/***/ 8489:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.identity = void 0;
function identity(x) {
    return x;
}
exports.identity = identity;
//# sourceMappingURL=identity.js.map

/***/ }),

/***/ 8499:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapTo = void 0;
var map_1 = __webpack_require__(3982);
function mapTo(value) {
    return map_1.map(function () { return value; });
}
exports.mapTo = mapTo;
//# sourceMappingURL=mapTo.js.map

/***/ }),

/***/ 8528:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const outside = __webpack_require__(5569)
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options) => outside(version, range, '<', options)
module.exports = ltr


/***/ }),

/***/ 8538:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.combineLatestWith = void 0;
var combineLatest_1 = __webpack_require__(9662);
function combineLatestWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return combineLatest_1.combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));
}
exports.combineLatestWith = combineLatestWith;
//# sourceMappingURL=combineLatestWith.js.map

/***/ }),

/***/ 8556:
/***/ ((__unused_webpack_module, exports) => {



exports.fromCallback = function (fn) {
  return Object.defineProperty(function (...args) {
    if (typeof args[args.length - 1] === 'function') fn.apply(this, args)
    else {
      return new Promise((resolve, reject) => {
        args.push((err, res) => (err != null) ? reject(err) : resolve(res))
        fn.apply(this, args)
      })
    }
  }, 'name', { value: fn.name })
}

exports.fromPromise = function (fn) {
  return Object.defineProperty(function (...args) {
    const cb = args[args.length - 1]
    if (typeof cb !== 'function') return fn.apply(this, args)
    else {
      args.pop()
      fn.apply(this, args).then(r => cb(null, r), cb)
    }
  }, 'name', { value: fn.name })
}


/***/ }),

/***/ 8563:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.noop = void 0;
function noop() { }
exports.noop = noop;
//# sourceMappingURL=noop.js.map

/***/ }),

/***/ 8574:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("node:string_decoder");

/***/ }),

/***/ 8584:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sample = void 0;
var innerFrom_1 = __webpack_require__(2018);
var lift_1 = __webpack_require__(4698);
var noop_1 = __webpack_require__(8563);
var OperatorSubscriber_1 = __webpack_require__(1908);
function sample(notifier) {
    return lift_1.operate(function (source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            lastValue = value;
        }));
        innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
            if (hasValue) {
                hasValue = false;
                var value = lastValue;
                lastValue = null;
                subscriber.next(value);
            }
        }, noop_1.noop));
    });
}
exports.sample = sample;
//# sourceMappingURL=sample.js.map

/***/ }),

/***/ 8613:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var defaults = __webpack_require__(3106)
var combining = __webpack_require__(4867)

var DEFAULTS = {
  nul: 0,
  control: 0
}

module.exports = function wcwidth(str) {
  return wcswidth(str, DEFAULTS)
}

module.exports.config = function(opts) {
  opts = defaults(opts || {}, DEFAULTS)
  return function wcwidth(str) {
    return wcswidth(str, opts)
  }
}

/*
 *  The following functions define the column width of an ISO 10646
 *  character as follows:
 *  - The null character (U+0000) has a column width of 0.
 *  - Other C0/C1 control characters and DEL will lead to a return value
 *    of -1.
 *  - Non-spacing and enclosing combining characters (general category
 *    code Mn or Me in the
 *    Unicode database) have a column width of 0.
 *  - SOFT HYPHEN (U+00AD) has a column width of 1.
 *  - Other format characters (general category code Cf in the Unicode
 *    database) and ZERO WIDTH
 *    SPACE (U+200B) have a column width of 0.
 *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
 *    have a column width of 0.
 *  - Spacing characters in the East Asian Wide (W) or East Asian
 *    Full-width (F) category as
 *    defined in Unicode Technical Report #11 have a column width of 2.
 *  - All remaining characters (including all printable ISO 8859-1 and
 *    WGL4 characters, Unicode control characters, etc.) have a column
 *    width of 1.
 *  This implementation assumes that characters are encoded in ISO 10646.
*/

function wcswidth(str, opts) {
  if (typeof str !== 'string') return wcwidth(str, opts)

  var s = 0
  for (var i = 0; i < str.length; i++) {
    var n = wcwidth(str.charCodeAt(i), opts)
    if (n < 0) return -1
    s += n
  }

  return s
}

function wcwidth(ucs, opts) {
  // test for 8-bit control characters
  if (ucs === 0) return opts.nul
  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) return opts.control

  // binary search in table of non-spacing characters
  if (bisearch(ucs)) return 0

  // if we arrive here, ucs is not a combining or C0/C1 control character
  return 1 +
      (ucs >= 0x1100 &&
       (ucs <= 0x115f ||                       // Hangul Jamo init. consonants
        ucs == 0x2329 || ucs == 0x232a ||
        (ucs >= 0x2e80 && ucs <= 0xa4cf &&
         ucs != 0x303f) ||                     // CJK ... Yi
        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables
        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compatibility Ideographs
        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms
        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compatibility Forms
        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms
        (ucs >= 0xffe0 && ucs <= 0xffe6) ||
        (ucs >= 0x20000 && ucs <= 0x2fffd) ||
        (ucs >= 0x30000 && ucs <= 0x3fffd)));
}

function bisearch(ucs) {
  var min = 0
  var max = combining.length - 1
  var mid

  if (ucs < combining[0][0] || ucs > combining[max][1]) return false

  while (max >= min) {
    mid = Math.floor((min + max) / 2)
    if (ucs > combining[mid][1]) min = mid + 1
    else if (ucs < combining[mid][0]) max = mid - 1
    else return true
  }

  return false
}


/***/ }),

/***/ 8641:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.skipUntil = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
var noop_1 = __webpack_require__(8563);
function skipUntil(notifier) {
    return lift_1.operate(function (source, subscriber) {
        var taking = false;
        var skipSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
            skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
            taking = true;
        }, noop_1.noop);
        innerFrom_1.innerFrom(notifier).subscribe(skipSubscriber);
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) { return taking && subscriber.next(value); }));
    });
}
exports.skipUntil = skipUntil;
//# sourceMappingURL=skipUntil.js.map

/***/ }),

/***/ 8653:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isAsyncIterable = void 0;
var isFunction_1 = __webpack_require__(8403);
function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction_1.isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
exports.isAsyncIterable = isAsyncIterable;
//# sourceMappingURL=isAsyncIterable.js.map

/***/ }),

/***/ 8693:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.take = void 0;
var empty_1 = __webpack_require__(8003);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function take(count) {
    return count <= 0
        ?
            function () { return empty_1.EMPTY; }
        : lift_1.operate(function (source, subscriber) {
            var seen = 0;
            source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
                if (++seen <= count) {
                    subscriber.next(value);
                    if (count <= seen) {
                        subscriber.complete();
                    }
                }
            }));
        });
}
exports.take = take;
//# sourceMappingURL=take.js.map

/***/ }),

/***/ 8724:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const minor = (a, loose) => new SemVer(a, loose).minor
module.exports = minor


/***/ }),

/***/ 8727:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.throttleTime = void 0;
var async_1 = __webpack_require__(7688);
var throttle_1 = __webpack_require__(2818);
var timer_1 = __webpack_require__(3051);
function throttleTime(duration, scheduler, config) {
    if (scheduler === void 0) { scheduler = async_1.asyncScheduler; }
    var duration$ = timer_1.timer(duration, scheduler);
    return throttle_1.throttle(function () { return duration$; }, config);
}
exports.throttleTime = throttleTime;
//# sourceMappingURL=throttleTime.js.map

/***/ }),

/***/ 8805:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.joinAllInternals = void 0;
var identity_1 = __webpack_require__(8489);
var mapOneOrManyArgs_1 = __webpack_require__(4078);
var pipe_1 = __webpack_require__(1943);
var mergeMap_1 = __webpack_require__(4344);
var toArray_1 = __webpack_require__(3862);
function joinAllInternals(joinFn, project) {
    return pipe_1.pipe(toArray_1.toArray(), mergeMap_1.mergeMap(function (sources) { return joinFn(sources); }), project ? mapOneOrManyArgs_1.mapOneOrManyArgs(project) : identity_1.identity);
}
exports.joinAllInternals = joinAllInternals;
//# sourceMappingURL=joinAllInternals.js.map

/***/ }),

/***/ 8811:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var util = __webpack_require__(9023),
  Match = __webpack_require__ (5757);


/**
 * This is a superclass for the individual detectors for
 * each of the detectable members of the ISO 2022 family
 * of encodings.
 */

function ISO_2022() {}

ISO_2022.prototype.match = function(det) {

  /**
   * Matching function shared among the 2022 detectors JP, CN and KR
   * Counts up the number of legal an unrecognized escape sequences in
   * the sample of text, and computes a score based on the total number &
   * the proportion that fit the encoding.
   *
   *
   * @param text the byte buffer containing text to analyse
   * @param textLen  the size of the text in the byte.
   * @param escapeSequences the byte escape sequences to test for.
   * @return match quality, in the range of 0-100.
   */

  var i, j;
  var escN;
  var hits   = 0;
  var misses = 0;
  var shifts = 0;
  var quality;

  // TODO: refactor me
  var text = det.fInputBytes;
  var textLen = det.fInputLen;

  scanInput:
    for (i = 0; i < textLen; i++) {
      if (text[i] == 0x1b) {
        checkEscapes:
          for (escN = 0; escN < this.escapeSequences.length; escN++) {
            var seq = this.escapeSequences[escN];

            if ((textLen - i) < seq.length)
              continue checkEscapes;

            for (j = 1; j < seq.length; j++)
              if (seq[j] != text[i + j])
                continue checkEscapes;


            hits++;
            i += seq.length - 1;
            continue scanInput;
          }

          misses++;
      }

      // Shift in/out
      if (text[i] == 0x0e || text[i] == 0x0f)
        shifts++;

    }

  if (hits == 0)
    return null;

  //
  // Initial quality is based on relative proportion of recongized vs.
  //   unrecognized escape sequences.
  //   All good:  quality = 100;
  //   half or less good: quality = 0;
  //   linear inbetween.
  quality = (100 * hits - 100 * misses) / (hits + misses);

  // Back off quality if there were too few escape sequences seen.
  //   Include shifts in this computation, so that KR does not get penalized
  //   for having only a single Escape sequence, but many shifts.
  if (hits + shifts < 5)
    quality -= (5 - (hits + shifts)) * 10;

  return quality <= 0 ? null : new Match(det, this, quality);
};

module.exports.ISO_2022_JP = function() {
  this.name = function() {
    return 'ISO-2022-JP';
  };
  this.escapeSequences = [
    [ 0x1b, 0x24, 0x28, 0x43 ],   // KS X 1001:1992
    [ 0x1b, 0x24, 0x28, 0x44 ],   // JIS X 212-1990
    [ 0x1b, 0x24, 0x40 ],         // JIS C 6226-1978
    [ 0x1b, 0x24, 0x41 ],         // GB 2312-80
    [ 0x1b, 0x24, 0x42 ],         // JIS X 208-1983
    [ 0x1b, 0x26, 0x40 ],         // JIS X 208 1990, 1997
    [ 0x1b, 0x28, 0x42 ],         // ASCII
    [ 0x1b, 0x28, 0x48 ],         // JIS-Roman
    [ 0x1b, 0x28, 0x49 ],         // Half-width katakana
    [ 0x1b, 0x28, 0x4a ],         // JIS-Roman
    [ 0x1b, 0x2e, 0x41 ],         // ISO 8859-1
    [ 0x1b, 0x2e, 0x46 ]          // ISO 8859-7
  ];
};
util.inherits(module.exports.ISO_2022_JP, ISO_2022);



module.exports.ISO_2022_KR = function() {
  this.name = function() {
    return 'ISO-2022-KR';
  };
  this.escapeSequences = [
    [ 0x1b, 0x24, 0x29, 0x43 ]
  ];
};
util.inherits(module.exports.ISO_2022_KR, ISO_2022);



module.exports.ISO_2022_CN = function() {
  this.name = function() {
    return 'ISO-2022-CN';
  };
  this.escapeSequences = [
    [ 0x1b, 0x24, 0x29, 0x41 ],   // GB 2312-80
    [ 0x1b, 0x24, 0x29, 0x47 ],   // CNS 11643-1992 Plane 1
    [ 0x1b, 0x24, 0x2A, 0x48 ],   // CNS 11643-1992 Plane 2
    [ 0x1b, 0x24, 0x29, 0x45 ],   // ISO-IR-165
    [ 0x1b, 0x24, 0x2B, 0x49 ],   // CNS 11643-1992 Plane 3
    [ 0x1b, 0x24, 0x2B, 0x4A ],   // CNS 11643-1992 Plane 4
    [ 0x1b, 0x24, 0x2B, 0x4B ],   // CNS 11643-1992 Plane 5
    [ 0x1b, 0x24, 0x2B, 0x4C ],   // CNS 11643-1992 Plane 6
    [ 0x1b, 0x24, 0x2B, 0x4D ],   // CNS 11643-1992 Plane 7
    [ 0x1b, 0x4e ],               // SS2
    [ 0x1b, 0x4f ]                // SS3
  ];
};
util.inherits(module.exports.ISO_2022_CN, ISO_2022);


/***/ }),

/***/ 8834:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = cliWidth;

function normalizeOpts(options) {
  const defaultOpts = {
    defaultWidth: 0,
    output: process.stdout,
    tty: __webpack_require__(9637),
  };

  if (!options) {
    return defaultOpts;
  }

  Object.keys(defaultOpts).forEach(function (key) {
    if (!options[key]) {
      options[key] = defaultOpts[key];
    }
  });

  return options;
}

function cliWidth(options) {
  const opts = normalizeOpts(options);

  if (opts.output.getWindowSize) {
    return opts.output.getWindowSize()[0] || opts.defaultWidth;
  }

  if (opts.tty.getWindowSize) {
    return opts.tty.getWindowSize()[1] || opts.defaultWidth;
  }

  if (opts.output.columns) {
    return opts.output.columns;
  }

  if (process.env.CLI_WIDTH) {
    const width = parseInt(process.env.CLI_WIDTH, 10);

    if (!isNaN(width) && width !== 0) {
      return width;
    }
  }

  return opts.defaultWidth;
}


/***/ }),

/***/ 8910:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isPromise = void 0;
var isFunction_1 = __webpack_require__(8403);
function isPromise(value) {
    return isFunction_1.isFunction(value === null || value === void 0 ? void 0 : value.then);
}
exports.isPromise = isPromise;
//# sourceMappingURL=isPromise.js.map

/***/ }),

/***/ 8984:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.range = void 0;
var Observable_1 = __webpack_require__(541);
var empty_1 = __webpack_require__(8003);
function range(start, count, scheduler) {
    if (count == null) {
        count = start;
        start = 0;
    }
    if (count <= 0) {
        return empty_1.EMPTY;
    }
    var end = count + start;
    return new Observable_1.Observable(scheduler
        ?
            function (subscriber) {
                var n = start;
                return scheduler.schedule(function () {
                    if (n < end) {
                        subscriber.next(n++);
                        this.schedule();
                    }
                    else {
                        subscriber.complete();
                    }
                });
            }
        :
            function (subscriber) {
                var n = start;
                while (n < end && !subscriber.closed) {
                    subscriber.next(n++);
                }
                subscriber.complete();
            });
}
exports.range = range;
//# sourceMappingURL=range.js.map

/***/ }),

/***/ 9000:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BehaviorSubject = void 0;
var Subject_1 = __webpack_require__(6118);
var BehaviorSubject = (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
            throw thrownError;
        }
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, (this._value = value));
    };
    return BehaviorSubject;
}(Subject_1.Subject));
exports.BehaviorSubject = BehaviorSubject;
//# sourceMappingURL=BehaviorSubject.js.map

/***/ }),

/***/ 9002:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SemVer = __webpack_require__(7318)
const parse = (version, options, throwErrors = false) => {
  if (version instanceof SemVer) {
    return version
  }
  try {
    return new SemVer(version, options)
  } catch (er) {
    if (!throwErrors) {
      return null
    }
    throw er
  }
}

module.exports = parse


/***/ }),

/***/ 9023:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("util");

/***/ }),

/***/ 9035:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _Object$setPrototypeO;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var finished = __webpack_require__(2862);
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;

/***/ }),

/***/ 9047:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.windowCount = void 0;
var Subject_1 = __webpack_require__(6118);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function windowCount(windowSize, startWindowEvery) {
    if (startWindowEvery === void 0) { startWindowEvery = 0; }
    var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
    return lift_1.operate(function (source, subscriber) {
        var windows = [new Subject_1.Subject()];
        var starts = [];
        var count = 0;
        subscriber.next(windows[0].asObservable());
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var e_1, _a;
            try {
                for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
                    var window_1 = windows_1_1.value;
                    window_1.next(value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var c = count - windowSize + 1;
            if (c >= 0 && c % startEvery === 0) {
                windows.shift().complete();
            }
            if (++count % startEvery === 0) {
                var window_2 = new Subject_1.Subject();
                windows.push(window_2);
                subscriber.next(window_2.asObservable());
            }
        }, function () {
            while (windows.length > 0) {
                windows.shift().complete();
            }
            subscriber.complete();
        }, function (err) {
            while (windows.length > 0) {
                windows.shift().error(err);
            }
            subscriber.error(err);
        }, function () {
            starts = null;
            windows = null;
        }));
    });
}
exports.windowCount = windowCount;
//# sourceMappingURL=windowCount.js.map

/***/ }),

/***/ 9109:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isArrayLike = void 0;
exports.isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map

/***/ }),

/***/ 9140:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("constants");

/***/ }),

/***/ 9160:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.never = exports.NEVER = void 0;
var Observable_1 = __webpack_require__(541);
var noop_1 = __webpack_require__(8563);
exports.NEVER = new Observable_1.Observable(noop_1.noop);
function never() {
    return exports.NEVER;
}
exports.never = never;
//# sourceMappingURL=never.js.map

/***/ }),

/***/ 9165:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const SPACE_CHARACTERS = /\s+/g

// hoisted class for cyclic dependency
class Range {
  constructor (range, options) {
    options = parseOptions(options)

    if (range instanceof Range) {
      if (
        range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease
      ) {
        return range
      } else {
        return new Range(range.raw, options)
      }
    }

    if (range instanceof Comparator) {
      // just put it in the set and return
      this.raw = range.value
      this.set = [[range]]
      this.formatted = undefined
      return this
    }

    this.options = options
    this.loose = !!options.loose
    this.includePrerelease = !!options.includePrerelease

    // First reduce all whitespace as much as possible so we do not have to rely
    // on potentially slow regexes like \s*. This is then stored and used for
    // future error messages as well.
    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')

    // First, split on ||
    this.set = this.raw
      .split('||')
      // map the range to a 2d array of comparators
      .map(r => this.parseRange(r.trim()))
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(c => c.length)

    if (!this.set.length) {
      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
    }

    // if we have any that are not the null set, throw out null sets.
    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      const first = this.set[0]
      this.set = this.set.filter(c => !isNullSet(c[0]))
      if (this.set.length === 0) {
        this.set = [first]
      } else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        for (const c of this.set) {
          if (c.length === 1 && isAny(c[0])) {
            this.set = [c]
            break
          }
        }
      }
    }

    this.formatted = undefined
  }

  get range () {
    if (this.formatted === undefined) {
      this.formatted = ''
      for (let i = 0; i < this.set.length; i++) {
        if (i > 0) {
          this.formatted += '||'
        }
        const comps = this.set[i]
        for (let k = 0; k < comps.length; k++) {
          if (k > 0) {
            this.formatted += ' '
          }
          this.formatted += comps[k].toString().trim()
        }
      }
    }
    return this.formatted
  }

  format () {
    return this.range
  }

  toString () {
    return this.range
  }

  parseRange (range) {
    // memoize range parsing for performance.
    // this is a very hot path, and fully deterministic.
    const memoOpts =
      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
      (this.options.loose && FLAG_LOOSE)
    const memoKey = memoOpts + ':' + range
    const cached = cache.get(memoKey)
    if (cached) {
      return cached
    }

    const loose = this.options.loose
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
    debug('hyphen replace', range)

    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
    debug('comparator trim', range)

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)
    debug('tilde trim', range)

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[t.CARETTRIM], caretTrimReplace)
    debug('caret trim', range)

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    let rangeList = range
      .split(' ')
      .map(comp => parseComparator(comp, this.options))
      .join(' ')
      .split(/\s+/)
      // >=0.0.0 is equivalent to *
      .map(comp => replaceGTE0(comp, this.options))

    if (loose) {
      // in loose mode, throw out any that are not valid comparators
      rangeList = rangeList.filter(comp => {
        debug('loose invalid filter', comp, this.options)
        return !!comp.match(re[t.COMPARATORLOOSE])
      })
    }
    debug('range list', rangeList)

    // if any comparators are the null set, then replace with JUST null set
    // if more than one comparator, remove any * comparators
    // also, don't include the same comparator more than once
    const rangeMap = new Map()
    const comparators = rangeList.map(comp => new Comparator(comp, this.options))
    for (const comp of comparators) {
      if (isNullSet(comp)) {
        return [comp]
      }
      rangeMap.set(comp.value, comp)
    }
    if (rangeMap.size > 1 && rangeMap.has('')) {
      rangeMap.delete('')
    }

    const result = [...rangeMap.values()]
    cache.set(memoKey, result)
    return result
  }

  intersects (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required')
    }

    return this.set.some((thisComparators) => {
      return (
        isSatisfiable(thisComparators, options) &&
        range.set.some((rangeComparators) => {
          return (
            isSatisfiable(rangeComparators, options) &&
            thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options)
              })
            })
          )
        })
      )
    })
  }

  // if ANY of the sets match ALL of its comparators, then pass
  test (version) {
    if (!version) {
      return false
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    for (let i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true
      }
    }
    return false
  }
}

module.exports = Range

const LRU = __webpack_require__(5300)
const cache = new LRU()

const parseOptions = __webpack_require__(677)
const Comparator = __webpack_require__(1994)
const debug = __webpack_require__(7482)
const SemVer = __webpack_require__(7318)
const {
  safeRe: re,
  t,
  comparatorTrimReplace,
  tildeTrimReplace,
  caretTrimReplace,
} = __webpack_require__(32)
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __webpack_require__(4335)

const isNullSet = c => c.value === '<0.0.0-0'
const isAny = c => c.value === ''

// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options) => {
  let result = true
  const remainingComparators = comparators.slice()
  let testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every((otherComparator) => {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }

  return result
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options) => {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceTilde(c, options))
    .join(' ')
}

const replaceTilde = (comp, options) => {
  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('tilde', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceCaret(c, options))
    .join(' ')
}

const replaceCaret = (comp, options) => {
  debug('caret', comp, options)
  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
  const z = options.includePrerelease ? '-0' : ''
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('caret', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      if (M === '0') {
        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
      } else {
        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`
      }
    }

    debug('caret return', ret)
    return ret
  })
}

const replaceXRanges = (comp, options) => {
  debug('replaceXRanges', comp, options)
  return comp
    .split(/\s+/)
    .map((c) => replaceXRange(c, options))
    .join(' ')
}

const replaceXRange = (comp, options) => {
  comp = comp.trim()
  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    const xM = isX(M)
    const xm = xM || isX(m)
    const xp = xm || isX(p)
    const anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : ''

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      if (gtlt === '<') {
        pr = '-0'
      }

      ret = `${gtlt + M}.${m}.${p}${pr}`
    } else if (xm) {
      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
    } else if (xp) {
      ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options) => {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp
    .trim()
    .replace(re[t.STAR], '')
}

const replaceGTE0 = (comp, options) => {
  debug('replaceGTE0', comp, options)
  return comp
    .trim()
    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
}

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
// TODO build?
const hyphenReplace = incPr => ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr) => {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = `>=${fM}.0.0${incPr ? '-0' : ''}`
  } else if (isX(fp)) {
    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
  } else if (fpr) {
    from = `>=${from}`
  } else {
    from = `>=${from}${incPr ? '-0' : ''}`
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = `<${+tM + 1}.0.0-0`
  } else if (isX(tp)) {
    to = `<${tM}.${+tm + 1}.0-0`
  } else if (tpr) {
    to = `<=${tM}.${tm}.${tp}-${tpr}`
  } else if (incPr) {
    to = `<${tM}.${tm}.${+tp + 1}-0`
  } else {
    to = `<=${to}`
  }

  return `${from} ${to}`.trim()
}

const testSet = (set, version, options) => {
  for (let i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (let i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === Comparator.ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        const allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}


/***/ }),

/***/ 9197:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.argsArgArrayOrObject = void 0;
var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
function argsArgArrayOrObject(args) {
    if (args.length === 1) {
        var first_1 = args[0];
        if (isArray(first_1)) {
            return { args: first_1, keys: null };
        }
        if (isPOJO(first_1)) {
            var keys = getKeys(first_1);
            return {
                args: keys.map(function (key) { return first_1[key]; }),
                keys: keys,
            };
        }
    }
    return { args: args, keys: null };
}
exports.argsArgArrayOrObject = argsArgArrayOrObject;
function isPOJO(obj) {
    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
}
//# sourceMappingURL=argsArgArrayOrObject.js.map

/***/ }),

/***/ 9207:
/***/ ((module) => {

module.exports = {
	PATTERN000 : 0,
	PATTERN001 : 1,
	PATTERN010 : 2,
	PATTERN011 : 3,
	PATTERN100 : 4,
	PATTERN101 : 5,
	PATTERN110 : 6,
	PATTERN111 : 7
};


/***/ }),

/***/ 9232:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.immediateProvider = void 0;
var Immediate_1 = __webpack_require__(9786);
var setImmediate = Immediate_1.Immediate.setImmediate, clearImmediate = Immediate_1.Immediate.clearImmediate;
exports.immediateProvider = {
    setImmediate: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var delegate = exports.immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
    },
    clearImmediate: function (handle) {
        var delegate = exports.immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=immediateProvider.js.map

/***/ }),

/***/ 9233:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.interval = void 0;
var async_1 = __webpack_require__(7688);
var timer_1 = __webpack_require__(3051);
function interval(period, scheduler) {
    if (period === void 0) { period = 0; }
    if (scheduler === void 0) { scheduler = async_1.asyncScheduler; }
    if (period < 0) {
        period = 0;
    }
    return timer_1.timer(period, period, scheduler);
}
exports.interval = interval;
//# sourceMappingURL=interval.js.map

/***/ }),

/***/ 9242:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.using = void 0;
var Observable_1 = __webpack_require__(541);
var innerFrom_1 = __webpack_require__(2018);
var empty_1 = __webpack_require__(8003);
function using(resourceFactory, observableFactory) {
    return new Observable_1.Observable(function (subscriber) {
        var resource = resourceFactory();
        var result = observableFactory(resource);
        var source = result ? innerFrom_1.innerFrom(result) : empty_1.EMPTY;
        source.subscribe(subscriber);
        return function () {
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
exports.using = using;
//# sourceMappingURL=using.js.map

/***/ }),

/***/ 9297:
/***/ ((module) => {

module['exports'] = function(colors) {
  return function(letter, i, exploded) {
    if (letter === ' ') return letter;
    switch (i%3) {
      case 0: return colors.red(letter);
      case 1: return colors.white(letter);
      case 2: return colors.blue(letter);
    }
  };
};


/***/ }),

/***/ 9372:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	Node plugin for figlet.js
*/

const figlet = __webpack_require__(7625),
  fs = __webpack_require__(9896),
  path = __webpack_require__(6928),
  fontDir = path.join(path.dirname(fileURLToPath(import.meta.url)), "/../fonts/");

/*
    Loads a font into the figlet object.

    Parameters:
    - name (string): Name of the font to load.
    - next (function): Callback function.
*/
figlet.loadFont = function (name, next) {
  return new Promise(function(resolve, reject) {
    if (figlet.figFonts[name]) {
      next && next(null, figlet.figFonts[name].options);
      resolve(figlet.figFonts[name].options);
      return;
    }

    fs.readFile(
      path.join(fontDir, name + ".flf"),
      { encoding: "utf-8" },
      function (err, fontData) {
        if (err) {
          next && next(err);
          reject(err);
          return;
        }

        fontData = fontData + "";
        try {
          var font = figlet.parseFont(name, fontData);
          next && next(null, font);
          resolve(font);
        } catch (error) {
          next && next(error);
          reject(error);
        }
      }
    );
  });
};

/*
 Loads a font synchronously into the figlet object.

 Parameters:
 - name (string): Name of the font to load.
 */
figlet.loadFontSync = function (name) {
  if (figlet.figFonts[name]) {
    return figlet.figFonts[name].options;
  }

  var fontData = fs.readFileSync(path.join(fontDir, name + ".flf"), {
    encoding: "utf-8",
  });

  fontData = fontData + "";
  return figlet.parseFont(name, fontData);
};

/*
    Returns an array containing all of the font names
*/
figlet.fonts = function (next) {
  return new Promise(function(resolve, reject) {
    var fontList = [];
    fs.readdir(fontDir, function (err, files) {
      // '/' denotes the root folder
      if (err) {
        next && next(err);
        reject(err);
        return;
      }

      files.forEach(function (file) {
        if (/\.flf$/.test(file)) {
          fontList.push(file.replace(/\.flf$/, ""));
        }
      });

      next && next(null, fontList);
      resolve(fontList);
    });
  });
};

figlet.fontsSync = function () {
  var fontList = [];
  fs.readdirSync(fontDir).forEach(function (file) {
    if (/\.flf$/.test(file)) {
      fontList.push(file.replace(/\.flf$/, ""));
    }
  });

  return fontList;
};

module.exports = figlet;


/***/ }),

/***/ 9431:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R5: () => (/* binding */ getAllConfigFiles),
/* harmony export */   Z9: () => (/* binding */ getPreferredPackageManager),
/* harmony export */   gi: () => (/* binding */ ENHANCED_LANGUAGE_CONFIGS),
/* harmony export */   lr: () => (/* binding */ getLanguageConfig),
/* harmony export */   qX: () => (/* binding */ getSupportedLanguages),
/* harmony export */   v0: () => (/* binding */ detectLanguageFromFiles)
/* harmony export */ });
/* unused harmony exports detectPackageManager, getLanguagesByCategory, getPopularFrameworks, getCompatibleCloudProviders, validateLanguageSupport, getLanguageIcon, getLanguageMaturityStatus, LANGUAGE_CONFIGS */
/**
 * Enhanced Language Configuration for Package Installer CLI v3.2.0
 * Comprehensive language support with modern tooling and advanced features
 */
// Enhanced comprehensive language configurations
const ENHANCED_LANGUAGE_CONFIGS = {
    javascript: {
        name: 'javascript',
        displayName: 'JavaScript',
        description: 'The language of the web, versatile and dynamic',
        icon: '🟨',
        category: 'web',
        maturity: 'stable',
        packageManagers: [
            {
                name: 'pnpm',
                displayName: 'pnpm',
                description: 'Fast, disk space efficient package manager',
                installCommand: 'pnpm install',
                updateCommand: 'pnpm update',
                addCommand: 'pnpm add',
                removeCommand: 'pnpm remove',
                listCommand: 'pnpm list',
                searchCommand: 'pnpm search',
                lockFiles: ['pnpm-lock.yaml'],
                configFiles: ['pnpm-workspace.yaml', '.pnpmrc'],
                detectCommand: 'pnpm --version',
                versionCommand: 'pnpm --version',
                priority: 1,
                globalFlag: '-g',
                features: [
                    { name: 'Workspace support', description: 'Monorepo and workspace management', supported: true },
                    { name: 'Content-addressed storage', description: 'Efficient disk space usage', supported: true },
                    { name: 'Strict peer dependencies', description: 'Better dependency resolution', supported: true }
                ],
                performance: {
                    installSpeed: 'fast',
                    diskUsage: 'low',
                    networkEfficiency: 'excellent',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    auditCommand: 'pnpm audit',
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            },
            {
                name: 'npm',
                displayName: 'npm',
                description: 'Node.js package manager',
                installCommand: 'npm install',
                updateCommand: 'npm update',
                addCommand: 'npm install',
                removeCommand: 'npm uninstall',
                listCommand: 'npm list',
                searchCommand: 'npm search',
                lockFiles: ['package-lock.json'],
                configFiles: ['.npmrc'],
                detectCommand: 'npm --version',
                versionCommand: 'npm --version',
                priority: 2,
                globalFlag: '-g',
                features: [
                    { name: 'Package scripts', description: 'Custom script execution', supported: true },
                    { name: 'Version management', description: 'Semantic versioning support', supported: true },
                    { name: 'Workspaces', description: 'Monorepo support', supported: true }
                ],
                performance: {
                    installSpeed: 'medium',
                    diskUsage: 'high',
                    networkEfficiency: 'good',
                    caching: 'local'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    auditCommand: 'npm audit',
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            },
            {
                name: 'yarn',
                displayName: 'Yarn',
                description: 'Reliable, secure, fast package manager',
                installCommand: 'yarn install',
                updateCommand: 'yarn upgrade',
                addCommand: 'yarn add',
                removeCommand: 'yarn remove',
                listCommand: 'yarn list',
                lockFiles: ['yarn.lock'],
                configFiles: ['.yarnrc.yml', '.yarnrc'],
                detectCommand: 'yarn --version',
                versionCommand: 'yarn --version',
                priority: 3,
                globalFlag: 'global',
                features: [
                    { name: 'Zero-installs', description: 'Offline installation support', supported: true },
                    { name: 'Plug\'n\'Play', description: 'Fast module resolution', supported: true },
                    { name: 'Workspaces', description: 'Monorepo management', supported: true }
                ],
                performance: {
                    installSpeed: 'fast',
                    diskUsage: 'medium',
                    networkEfficiency: 'good',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    auditCommand: 'yarn npm audit',
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            },
            {
                name: 'bun',
                displayName: 'Bun',
                description: 'Fast all-in-one JavaScript runtime & toolkit',
                installCommand: 'bun install',
                updateCommand: 'bun update',
                addCommand: 'bun add',
                removeCommand: 'bun remove',
                listCommand: 'bun pm ls',
                lockFiles: ['bun.lockb'],
                configFiles: ['bunfig.toml'],
                detectCommand: 'bun --version',
                versionCommand: 'bun --version',
                priority: 4,
                features: [
                    { name: 'Native bundling', description: 'Built-in bundler and transpiler', supported: true },
                    { name: 'TypeScript support', description: 'Native TypeScript execution', supported: true },
                    { name: 'JSX support', description: 'Native JSX transpilation', supported: true },
                    { name: 'Hot reloading', description: 'Development server with hot reload', supported: true }
                ],
                performance: {
                    installSpeed: 'fast',
                    diskUsage: 'low',
                    networkEfficiency: 'excellent',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: true,
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            }
        ],
        configFiles: [
            {
                filename: 'package.json',
                description: 'Main package configuration',
                required: true,
                type: 'dependency',
                parser: 'json',
                schema: 'https://json.schemastore.org/package.json',
                validation: [
                    { field: 'name', rule: 'required', message: 'Package name is required' },
                    { field: 'version', rule: 'required', message: 'Package version is required' }
                ]
            },
            {
                filename: 'tsconfig.json',
                description: 'TypeScript configuration',
                required: false,
                type: 'config',
                parser: 'json',
                schema: 'https://json.schemastore.org/tsconfig.json'
            },
            {
                filename: '.eslintrc.json',
                description: 'ESLint configuration',
                required: false,
                type: 'config',
                parser: 'json'
            },
            {
                filename: 'jest.config.js',
                description: 'Jest testing configuration',
                required: false,
                type: 'testing'
            },
            {
                filename: '.gitignore',
                description: 'Git ignore patterns',
                required: false,
                type: 'workflow'
            }
        ],
        buildFiles: ['dist', 'build', '.next', '.nuxt', 'out', 'coverage'],
        sourceFileExtensions: ['.js', '.jsx', '.mjs', '.cjs'],
        frameworkDetection: [
            {
                framework: 'nextjs',
                displayName: 'Next.js',
                patterns: ['next.config.*', 'pages/**', 'app/**'],
                dependencies: ['next'],
                popularity: 95,
                category: 'fullstack'
            },
            {
                framework: 'reactjs',
                displayName: 'React',
                patterns: ['src/App.jsx', 'src/components/**'],
                dependencies: ['react'],
                popularity: 98,
                category: 'frontend'
            },
            {
                framework: 'vuejs',
                displayName: 'Vue.js',
                patterns: ['vue.config.*', 'src/App.vue'],
                dependencies: ['vue'],
                popularity: 85,
                category: 'frontend'
            },
            {
                framework: 'express',
                displayName: 'Express.js',
                patterns: ['app.js', 'server.js'],
                dependencies: ['express'],
                popularity: 90,
                category: 'backend'
            }
        ],
        toolchain: {
            interpreter: { name: 'Node.js', command: 'node', optional: false, description: 'JavaScript runtime' },
            linter: [
                { name: 'ESLint', command: 'eslint', optional: true, description: 'JavaScript linter' },
                { name: 'JSHint', command: 'jshint', optional: true, description: 'JavaScript code quality tool' }
            ],
            formatter: [
                { name: 'Prettier', command: 'prettier', optional: true, description: 'Code formatter' }
            ],
            tester: [
                { name: 'Jest', command: 'jest', optional: true, description: 'JavaScript testing framework' },
                { name: 'Mocha', command: 'mocha', optional: true, description: 'Feature-rich JavaScript test framework' }
            ],
            bundler: [
                { name: 'Webpack', command: 'webpack', optional: true, description: 'Module bundler' },
                { name: 'Vite', command: 'vite', optional: true, description: 'Fast build tool' },
                { name: 'Rollup', command: 'rollup', optional: true, description: 'Module bundler for libraries' }
            ]
        },
        ecosystem: {
            registry: {
                name: 'npm Registry',
                url: 'https://npmjs.com',
                searchUrl: 'https://npmjs.com/search?q=',
                packageCount: 2500000,
                averageQuality: 85
            },
            community: {
                github: { repos: 19500000, stars: 890000000 },
                stackoverflow: { questions: 2100000, activity: 'high' },
                reddit: 'r/javascript',
                discord: 'https://discord.gg/javascript'
            },
            learning: [
                {
                    type: 'documentation',
                    title: 'MDN Web Docs',
                    url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript',
                    difficulty: 'beginner',
                    free: true
                },
                {
                    type: 'tutorial',
                    title: 'JavaScript.info',
                    url: 'https://javascript.info',
                    difficulty: 'intermediate',
                    free: true
                }
            ],
            trends: {
                githubStars: 890000000,
                npmDownloads: 25000000000,
                stackoverflowQuestions: 2100000,
                jobPostings: 185000,
                trendDirection: 'stable'
            }
        },
        compatibility: {
            nodeVersions: ['14+', '16+', '18+', '20+'],
            operatingSystems: ['windows', 'macos', 'linux'],
            architectures: ['x64', 'arm64'],
            containers: true,
            cloud: [
                { name: 'AWS', supported: true, deployment: ['Lambda', 'EC2', 'ECS'] },
                { name: 'Vercel', supported: true, deployment: ['Serverless'] },
                { name: 'Netlify', supported: true, deployment: ['Static', 'Functions'] }
            ]
        }
    },
    typescript: {
        name: 'typescript',
        displayName: 'TypeScript',
        description: 'JavaScript with syntax for types',
        icon: '🔷',
        category: 'web',
        maturity: 'stable',
        packageManagers: [
            // Inherits from JavaScript with same priority order: pnpm > npm > yarn > bun
            {
                name: 'pnpm',
                displayName: 'pnpm',
                description: 'Fast, disk space efficient package manager',
                installCommand: 'pnpm install',
                updateCommand: 'pnpm update',
                addCommand: 'pnpm add',
                removeCommand: 'pnpm remove',
                listCommand: 'pnpm list',
                searchCommand: 'pnpm search',
                lockFiles: ['pnpm-lock.yaml'],
                configFiles: ['pnpm-workspace.yaml', '.pnpmrc'],
                detectCommand: 'pnpm --version',
                versionCommand: 'pnpm --version',
                priority: 1,
                globalFlag: '-g',
                features: [
                    { name: 'TypeScript support', description: 'Excellent TypeScript integration', supported: true },
                    { name: 'Workspace support', description: 'Monorepo and workspace management', supported: true },
                    { name: 'Content-addressed storage', description: 'Efficient disk space usage', supported: true }
                ],
                performance: {
                    installSpeed: 'fast',
                    diskUsage: 'low',
                    networkEfficiency: 'excellent',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    auditCommand: 'pnpm audit',
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            },
            {
                name: 'npm',
                displayName: 'npm',
                description: 'Node.js package manager with TypeScript support',
                installCommand: 'npm install',
                updateCommand: 'npm update',
                addCommand: 'npm install',
                removeCommand: 'npm uninstall',
                listCommand: 'npm list',
                searchCommand: 'npm search',
                lockFiles: ['package-lock.json'],
                configFiles: ['.npmrc'],
                detectCommand: 'npm --version',
                versionCommand: 'npm --version',
                priority: 2,
                globalFlag: '-g',
                features: [
                    { name: 'TypeScript support', description: 'Official TypeScript support', supported: true },
                    { name: 'Package scripts', description: 'Custom script execution', supported: true },
                    { name: 'Version management', description: 'Semantic versioning support', supported: true }
                ],
                performance: {
                    installSpeed: 'medium',
                    diskUsage: 'high',
                    networkEfficiency: 'good',
                    caching: 'local'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    auditCommand: 'npm audit',
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            },
            {
                name: 'yarn',
                displayName: 'Yarn',
                description: 'Reliable, secure, fast package manager with TypeScript support',
                installCommand: 'yarn install',
                updateCommand: 'yarn upgrade',
                addCommand: 'yarn add',
                removeCommand: 'yarn remove',
                listCommand: 'yarn list',
                lockFiles: ['yarn.lock'],
                configFiles: ['.yarnrc.yml', '.yarnrc'],
                detectCommand: 'yarn --version',
                versionCommand: 'yarn --version',
                priority: 3,
                globalFlag: 'global',
                features: [
                    { name: 'TypeScript support', description: 'Excellent TypeScript integration', supported: true },
                    { name: 'Zero-installs', description: 'Offline installation support', supported: true },
                    { name: 'Plug\'n\'Play', description: 'Fast module resolution', supported: true }
                ],
                performance: {
                    installSpeed: 'fast',
                    diskUsage: 'medium',
                    networkEfficiency: 'good',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    auditCommand: 'yarn npm audit',
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            },
            {
                name: 'bun',
                displayName: 'Bun',
                description: 'Fast TypeScript runtime with native support',
                installCommand: 'bun install',
                updateCommand: 'bun update',
                addCommand: 'bun add',
                removeCommand: 'bun remove',
                listCommand: 'bun pm ls',
                lockFiles: ['bun.lockb'],
                configFiles: ['bunfig.toml'],
                detectCommand: 'bun --version',
                versionCommand: 'bun --version',
                priority: 4,
                features: [
                    { name: 'Native TypeScript', description: 'No transpilation needed', supported: true },
                    { name: 'Type checking', description: 'Built-in type checking', supported: true },
                    { name: 'Hot reloading', description: 'Development server with hot reload', supported: true }
                ],
                performance: {
                    installSpeed: 'fast',
                    diskUsage: 'low',
                    networkEfficiency: 'excellent',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: true,
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            }
        ],
        configFiles: [
            {
                filename: 'tsconfig.json',
                description: 'TypeScript compiler configuration',
                required: true,
                type: 'config',
                parser: 'json',
                schema: 'https://json.schemastore.org/tsconfig.json',
                validation: [
                    { field: 'compilerOptions', rule: 'required' }
                ]
            },
            {
                filename: 'tsconfig.build.json',
                description: 'Production build configuration',
                required: false,
                type: 'build',
                parser: 'json'
            }
        ],
        buildFiles: ['dist', 'build', 'lib', 'types'],
        sourceFileExtensions: ['.ts', '.tsx', '.d.ts'],
        frameworkDetection: [
            {
                framework: 'nextjs',
                displayName: 'Next.js with TypeScript',
                patterns: ['next.config.ts', 'pages/**/*.ts', 'app/**/*.tsx'],
                dependencies: ['next', 'typescript'],
                devDependencies: ['@types/react', '@types/node'],
                popularity: 97,
                category: 'fullstack'
            },
            {
                framework: 'angular',
                displayName: 'Angular',
                patterns: ['angular.json', 'src/app/**/*.ts'],
                dependencies: ['@angular/core'],
                popularity: 80,
                category: 'frontend'
            }
        ],
        toolchain: {
            compiler: { name: 'TypeScript Compiler', command: 'tsc', optional: false, description: 'TypeScript to JavaScript compiler' },
            interpreter: { name: 'Node.js', command: 'node', optional: false, description: 'JavaScript runtime' },
            linter: [
                { name: 'ESLint', command: 'eslint', optional: true, description: 'TypeScript linter' },
                { name: 'TSLint', command: 'tslint', optional: true, description: 'TypeScript-specific linter (deprecated)' }
            ]
        },
        ecosystem: {
            registry: {
                name: 'npm Registry (with types)',
                url: 'https://npmjs.com',
                packageCount: 500000,
                averageQuality: 90
            },
            community: {
                github: { repos: 5200000, stars: 180000000 },
                stackoverflow: { questions: 350000, activity: 'high' }
            },
            learning: [
                {
                    type: 'documentation',
                    title: 'TypeScript Handbook',
                    url: 'https://www.typescriptlang.org/docs/',
                    difficulty: 'intermediate',
                    free: true
                }
            ],
            trends: {
                githubStars: 180000000,
                npmDownloads: 45000000,
                stackoverflowQuestions: 350000,
                jobPostings: 95000,
                trendDirection: 'rising'
            }
        },
        compatibility: {
            nodeVersions: ['14+', '16+', '18+', '20+'],
            operatingSystems: ['windows', 'macos', 'linux'],
            architectures: ['x64', 'arm64'],
            containers: true,
            cloud: [
                { name: 'AWS', supported: true, deployment: ['Lambda', 'EC2'] },
                { name: 'Azure', supported: true, deployment: ['Functions', 'App Service'] }
            ]
        }
    },
    rust: {
        name: 'rust',
        displayName: 'Rust',
        description: 'Fast, safe, systems programming language',
        icon: '🦀',
        category: 'systems',
        maturity: 'stable',
        packageManagers: [
            {
                name: 'cargo',
                displayName: 'Cargo',
                description: 'Rust package manager and build system',
                installCommand: 'cargo build',
                updateCommand: 'cargo update',
                addCommand: 'cargo add',
                removeCommand: 'cargo remove',
                listCommand: 'cargo tree',
                searchCommand: 'cargo search',
                lockFiles: ['Cargo.lock'],
                configFiles: ['.cargo/config.toml', 'Cargo.toml'],
                detectCommand: 'cargo --version',
                versionCommand: 'cargo --version',
                priority: 1,
                features: [
                    { name: 'Integrated testing', description: 'Built-in test runner', supported: true },
                    { name: 'Documentation generation', description: 'cargo doc', supported: true },
                    { name: 'Benchmarking', description: 'Performance testing', supported: true }
                ],
                performance: {
                    installSpeed: 'medium',
                    diskUsage: 'medium',
                    networkEfficiency: 'good',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: true,
                    auditCommand: 'cargo audit',
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            }
        ],
        configFiles: [
            {
                filename: 'Cargo.toml',
                description: 'Rust package manifest',
                required: true,
                type: 'dependency',
                parser: 'toml',
                validation: [
                    { field: 'package.name', rule: 'required' },
                    { field: 'package.version', rule: 'required' }
                ]
            },
            {
                filename: 'Cargo.lock',
                description: 'Dependency lock file',
                required: false,
                type: 'lock',
                parser: 'toml'
            },
            {
                filename: 'rust-toolchain.toml',
                description: 'Rust toolchain configuration',
                required: false,
                type: 'config',
                parser: 'toml'
            }
        ],
        buildFiles: ['target', 'Cargo.lock'],
        sourceFileExtensions: ['.rs'],
        frameworkDetection: [
            {
                framework: 'actix-web',
                displayName: 'Actix Web',
                patterns: [],
                dependencies: ['actix-web'],
                popularity: 85,
                category: 'backend'
            },
            {
                framework: 'rocket',
                displayName: 'Rocket',
                patterns: [],
                dependencies: ['rocket'],
                popularity: 70,
                category: 'backend'
            },
            {
                framework: 'warp',
                displayName: 'Warp',
                patterns: [],
                dependencies: ['warp'],
                popularity: 65,
                category: 'backend'
            },
            {
                framework: 'axum',
                displayName: 'Axum',
                patterns: [],
                dependencies: ['axum'],
                popularity: 80,
                category: 'backend'
            }
        ],
        toolchain: {
            compiler: { name: 'rustc', command: 'rustc', optional: false, description: 'Rust compiler' },
            linter: [
                { name: 'Clippy', command: 'cargo clippy', optional: true, description: 'Rust linter' }
            ],
            formatter: [
                { name: 'rustfmt', command: 'cargo fmt', optional: true, description: 'Rust code formatter' }
            ],
            tester: [
                { name: 'Cargo Test', command: 'cargo test', optional: false, description: 'Built-in test runner' }
            ]
        },
        ecosystem: {
            registry: {
                name: 'crates.io',
                url: 'https://crates.io',
                searchUrl: 'https://crates.io/search?q=',
                packageCount: 120000,
                averageQuality: 92
            },
            community: {
                github: { repos: 380000, stars: 12000000 },
                stackoverflow: { questions: 45000, activity: 'high' },
                reddit: 'r/rust',
                discord: 'https://discord.gg/rust-lang'
            },
            learning: [
                {
                    type: 'book',
                    title: 'The Rust Programming Language',
                    url: 'https://doc.rust-lang.org/book/',
                    difficulty: 'beginner',
                    free: true
                }
            ],
            trends: {
                githubStars: 12000000,
                stackoverflowQuestions: 45000,
                jobPostings: 15000,
                trendDirection: 'rising'
            }
        },
        compatibility: {
            operatingSystems: ['windows', 'macos', 'linux'],
            architectures: ['x64', 'arm64'],
            containers: true,
            cloud: [
                { name: 'AWS', supported: true, deployment: ['EC2', 'Lambda'] },
                { name: 'Docker', supported: true }
            ]
        }
    },
    python: {
        name: 'python',
        displayName: 'Python',
        description: 'Versatile, readable, powerful programming language',
        icon: '🐍',
        category: 'data',
        maturity: 'stable',
        packageManagers: [
            {
                name: 'pip',
                displayName: 'pip',
                description: 'Python package installer',
                installCommand: 'pip install -r requirements.txt',
                updateCommand: 'pip install --upgrade -r requirements.txt',
                addCommand: 'pip install',
                removeCommand: 'pip uninstall',
                listCommand: 'pip list',
                searchCommand: 'pip search',
                lockFiles: ['requirements.txt'],
                configFiles: ['pip.conf', 'pip.ini'],
                detectCommand: 'pip --version',
                versionCommand: 'pip --version',
                priority: 3,
                features: [
                    { name: 'Virtual environments', description: 'Isolated package environments', supported: true },
                    { name: 'Wheel packages', description: 'Pre-compiled packages', supported: true }
                ],
                performance: {
                    installSpeed: 'medium',
                    diskUsage: 'medium',
                    networkEfficiency: 'good',
                    caching: 'local'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    vulnerabilityScanning: false,
                    lockFileValidation: false
                }
            },
            {
                name: 'poetry',
                displayName: 'Poetry',
                description: 'Dependency management and packaging made easy',
                installCommand: 'poetry install',
                updateCommand: 'poetry update',
                addCommand: 'poetry add',
                removeCommand: 'poetry remove',
                listCommand: 'poetry show',
                lockFiles: ['poetry.lock'],
                configFiles: ['pyproject.toml'],
                detectCommand: 'poetry --version',
                versionCommand: 'poetry --version',
                priority: 1,
                features: [
                    { name: 'Virtual environments', description: 'Automatic venv management', supported: true },
                    { name: 'Build system', description: 'Modern Python packaging', supported: true },
                    { name: 'Dependency resolution', description: 'Smart dependency solving', supported: true }
                ],
                performance: {
                    installSpeed: 'fast',
                    diskUsage: 'low',
                    networkEfficiency: 'excellent',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            }
        ],
        configFiles: [
            {
                filename: 'pyproject.toml',
                description: 'Modern Python project configuration',
                required: false,
                type: 'dependency',
                parser: 'toml',
                schema: 'https://json.schemastore.org/pyproject.json'
            },
            {
                filename: 'requirements.txt',
                description: 'pip requirements file',
                required: false,
                type: 'dependency'
            },
            {
                filename: 'setup.py',
                description: 'Legacy Python setup script',
                required: false,
                type: 'build'
            },
            {
                filename: 'environment.yml',
                description: 'Conda environment specification',
                required: false,
                type: 'dependency',
                parser: 'yaml'
            }
        ],
        buildFiles: ['__pycache__', 'build', 'dist', '*.egg-info', '.pytest_cache'],
        sourceFileExtensions: ['.py', '.pyx', '.pyi', '.pyw'],
        frameworkDetection: [
            {
                framework: 'django',
                displayName: 'Django',
                patterns: ['manage.py', 'django_project/**'],
                dependencies: ['Django'],
                popularity: 90,
                category: 'backend'
            },
            {
                framework: 'flask',
                displayName: 'Flask',
                patterns: ['app.py'],
                dependencies: ['Flask'],
                popularity: 85,
                category: 'backend'
            },
            {
                framework: 'fastapi',
                displayName: 'FastAPI',
                patterns: ['main.py'],
                dependencies: ['fastapi'],
                popularity: 88,
                category: 'backend'
            }
        ],
        toolchain: {
            interpreter: { name: 'Python', command: 'python', optional: false, description: 'Python interpreter' },
            linter: [
                { name: 'pylint', command: 'pylint', optional: true, description: 'Python code analysis' },
                { name: 'flake8', command: 'flake8', optional: true, description: 'Style guide enforcement' }
            ],
            formatter: [
                { name: 'black', command: 'black', optional: true, description: 'The uncompromising code formatter' },
                { name: 'autopep8', command: 'autopep8', optional: true, description: 'PEP 8 formatter' }
            ],
            tester: [
                { name: 'pytest', command: 'pytest', optional: true, description: 'Testing framework' },
                { name: 'unittest', command: 'python -m unittest', optional: false, description: 'Built-in testing' }
            ]
        },
        ecosystem: {
            registry: {
                name: 'PyPI',
                url: 'https://pypi.org',
                searchUrl: 'https://pypi.org/search/?q=',
                packageCount: 450000,
                averageQuality: 87
            },
            community: {
                github: { repos: 1800000, stars: 95000000 },
                stackoverflow: { questions: 1950000, activity: 'high' },
                reddit: 'r/python'
            },
            learning: [
                {
                    type: 'documentation',
                    title: 'Python.org Tutorial',
                    url: 'https://docs.python.org/3/tutorial/',
                    difficulty: 'beginner',
                    free: true
                }
            ],
            trends: {
                githubStars: 95000000,
                stackoverflowQuestions: 1950000,
                jobPostings: 125000,
                trendDirection: 'stable'
            }
        },
        compatibility: {
            operatingSystems: ['windows', 'macos', 'linux'],
            architectures: ['x64', 'arm64'],
            containers: true,
            cloud: [
                { name: 'AWS', supported: true, deployment: ['Lambda', 'EC2', 'Elastic Beanstalk'] },
                { name: 'Google Cloud', supported: true, deployment: ['Functions', 'App Engine'] }
            ]
        }
    },
    go: {
        name: 'go',
        displayName: 'Go',
        description: 'Fast, reliable, efficient programming language',
        icon: '🐹',
        category: 'systems',
        maturity: 'stable',
        packageManagers: [
            {
                name: 'go',
                displayName: 'Go Modules',
                description: 'Official Go dependency management',
                installCommand: 'go mod download && go mod tidy',
                updateCommand: 'go get -u ./... && go mod tidy',
                addCommand: 'go get',
                removeCommand: 'go mod edit -droprequire',
                listCommand: 'go list -m all',
                lockFiles: ['go.sum'],
                configFiles: ['go.mod'],
                detectCommand: 'go version',
                versionCommand: 'go version',
                priority: 1,
                features: [
                    { name: 'Module versioning', description: 'Semantic import versioning', supported: true },
                    { name: 'Proxy support', description: 'Module proxy for faster downloads', supported: true }
                ],
                performance: {
                    installSpeed: 'fast',
                    diskUsage: 'low',
                    networkEfficiency: 'excellent',
                    caching: 'global'
                },
                security: {
                    checksums: true,
                    signatures: true,
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            }
        ],
        configFiles: [
            {
                filename: 'go.mod',
                description: 'Go module definition',
                required: true,
                type: 'dependency',
                parser: 'custom'
            },
            {
                filename: 'go.sum',
                description: 'Go module checksums',
                required: false,
                type: 'lock'
            }
        ],
        buildFiles: ['bin', 'pkg'],
        sourceFileExtensions: ['.go'],
        frameworkDetection: [
            {
                framework: 'gin',
                displayName: 'Gin',
                patterns: ['main.go'],
                dependencies: ['github.com/gin-gonic/gin'],
                popularity: 85,
                category: 'backend'
            }
        ],
        toolchain: {
            interpreter: { name: 'Go', command: 'go', optional: false, description: 'Go compiler and runtime' }
        },
        ecosystem: {
            registry: { name: 'Go Packages', url: 'pkg.go.dev' },
            community: { github: { repos: 500000, stars: 2000000 }, stackoverflow: { questions: 150000, activity: 'high' } },
            learning: [],
            trends: { githubStars: 2000000, stackoverflowQuestions: 150000, jobPostings: 80000, trendDirection: 'rising' }
        },
        compatibility: {
            operatingSystems: ['windows', 'macos', 'linux'],
            architectures: ['x64', 'arm64'],
            containers: true,
            cloud: [
                { name: 'Google Cloud', supported: true, deployment: ['Cloud Run', 'App Engine'] },
                { name: 'AWS', supported: true, deployment: ['Lambda', 'ECS'] }
            ]
        }
    },
    ruby: {
        name: 'ruby',
        displayName: 'Ruby',
        description: 'Dynamic, programmer-friendly programming language',
        icon: '💎',
        category: 'web',
        maturity: 'stable',
        packageManagers: [
            {
                name: 'bundler',
                displayName: 'Bundler',
                description: 'Ruby dependency management',
                installCommand: 'bundle install',
                updateCommand: 'bundle update',
                addCommand: 'bundle add',
                removeCommand: 'bundle remove',
                listCommand: 'bundle list',
                lockFiles: ['Gemfile.lock'],
                configFiles: ['Gemfile'],
                detectCommand: 'bundle --version',
                versionCommand: 'bundle --version',
                priority: 1,
                features: [
                    { name: 'Version locking', description: 'Precise version management', supported: true },
                    { name: 'Platform support', description: 'Cross-platform gem support', supported: true }
                ],
                performance: {
                    installSpeed: 'medium',
                    diskUsage: 'medium',
                    networkEfficiency: 'good',
                    caching: 'local'
                },
                security: {
                    checksums: true,
                    signatures: false,
                    vulnerabilityScanning: true,
                    lockFileValidation: true
                }
            }
        ],
        configFiles: [
            {
                filename: 'Gemfile',
                description: 'Ruby dependency specification',
                required: true,
                type: 'dependency'
            }
        ],
        buildFiles: ['vendor/bundle'],
        sourceFileExtensions: ['.rb'],
        frameworkDetection: [
            {
                framework: 'rails',
                displayName: 'Ruby on Rails',
                patterns: ['config/application.rb'],
                dependencies: ['rails'],
                popularity: 85,
                category: 'backend'
            }
        ],
        toolchain: {
            interpreter: { name: 'Ruby', command: 'ruby', optional: false, description: 'Ruby interpreter' }
        },
        ecosystem: {
            registry: { name: 'RubyGems', url: 'rubygems.org' },
            community: { github: { repos: 200000, stars: 500000 }, stackoverflow: { questions: 200000, activity: 'medium' } },
            learning: [],
            trends: { githubStars: 500000, stackoverflowQuestions: 200000, jobPostings: 50000, trendDirection: 'stable' }
        },
        compatibility: {
            operatingSystems: ['windows', 'macos', 'linux'],
            architectures: ['x64', 'arm64'],
            containers: true,
            cloud: [
                { name: 'Heroku', supported: true }
            ]
        }
    }
    // Additional languages would be added here with full configuration...
    // For brevity, I'm showing the structure with key languages implemented
};
/**
 * Enhanced utility functions for v3.2.0
 */
function getSupportedLanguages() {
    return Object.keys(ENHANCED_LANGUAGE_CONFIGS);
}
function getLanguageConfig(language) {
    return ENHANCED_LANGUAGE_CONFIGS[language] || null;
}
function detectLanguageFromFiles(files) {
    const results = [];
    const fileSet = new Set(files.map(f => f.split('/').pop() || f));
    for (const [language, config] of Object.entries(ENHANCED_LANGUAGE_CONFIGS)) {
        let confidence = 0;
        const indicators = [];
        // Check for required config files (high confidence)
        const requiredFiles = config.configFiles.filter(cf => cf.required);
        const hasRequiredFile = requiredFiles.some(cf => {
            if (cf.filename.includes('*')) {
                const pattern = new RegExp(cf.filename.replace('*', '.*'));
                return Array.from(fileSet).some(file => pattern.test(file));
            }
            return fileSet.has(cf.filename);
        });
        if (hasRequiredFile) {
            confidence += 80;
            indicators.push('Required config file found');
        }
        // Check for optional config files (medium confidence)
        const optionalMatches = config.configFiles.filter(cf => !cf.required && fileSet.has(cf.filename));
        confidence += optionalMatches.length * 15;
        // Check for lock files (medium confidence)
        const lockFileMatches = config.packageManagers.flatMap(pm => pm.lockFiles).filter(lf => fileSet.has(lf));
        confidence += lockFileMatches.length * 20;
        // Check for source files (low confidence)
        const sourceFiles = files.filter(f => config.sourceFileExtensions.some(ext => f.endsWith(ext)));
        confidence += Math.min(sourceFiles.length * 5, 30);
        if (confidence > 20) {
            results.push({
                language: language,
                confidence: Math.min(confidence, 100),
                indicators,
                configFiles: optionalMatches.concat(requiredFiles.filter(rf => fileSet.has(rf.filename))),
                sourceFiles: sourceFiles.slice(0, 5) // Limit for readability
            });
        }
    }
    return results.sort((a, b) => b.confidence - a.confidence);
}
function detectPackageManager(language, files) {
    const config = ENHANCED_LANGUAGE_CONFIGS[language];
    if (!config)
        return [];
    const results = [];
    const fileSet = new Set(files);
    for (const pm of config.packageManagers) {
        let confidence = 0;
        // Check for lock files (high confidence)
        const lockFileMatches = pm.lockFiles.filter(lf => fileSet.has(lf));
        confidence += lockFileMatches.length * 60;
        // Check for config files (medium confidence)
        const configMatches = pm.configFiles.filter(cf => fileSet.has(cf));
        confidence += configMatches.length * 30;
        if (confidence > 0) {
            results.push({
                packageManager: pm.name,
                confidence: Math.min(confidence, 100),
                lockFiles: lockFileMatches,
                configFiles: configMatches,
                recommended: pm.priority === 1
            });
        }
    }
    return results.sort((a, b) => b.confidence - a.confidence);
}
function getPreferredPackageManager(language) {
    const config = ENHANCED_LANGUAGE_CONFIGS[language];
    if (!config || config.packageManagers.length === 0)
        return null;
    return config.packageManagers.sort((a, b) => a.priority - b.priority)[0];
}
function getLanguagesByCategory(category) {
    return Object.entries(ENHANCED_LANGUAGE_CONFIGS)
        .filter(([_, config]) => config.category === category)
        .map(([lang, _]) => lang);
}
function getPopularFrameworks(language, limit = 5) {
    const config = ENHANCED_LANGUAGE_CONFIGS[language];
    if (!config)
        return [];
    return config.frameworkDetection
        .sort((a, b) => b.popularity - a.popularity)
        .slice(0, limit);
}
function getCompatibleCloudProviders(language) {
    const config = ENHANCED_LANGUAGE_CONFIGS[language];
    return config?.compatibility?.cloud || [];
}
function validateLanguageSupport(language) {
    return language in ENHANCED_LANGUAGE_CONFIGS;
}
function getLanguageIcon(language) {
    const config = ENHANCED_LANGUAGE_CONFIGS[language];
    return config?.icon || '📄';
}
function getLanguageMaturityStatus(language) {
    const config = ENHANCED_LANGUAGE_CONFIGS[language];
    return config?.maturity || 'unknown';
}
function getAllConfigFiles() {
    const allConfigFiles = new Set();
    // Add config files from all languages
    Object.values(ENHANCED_LANGUAGE_CONFIGS).forEach(config => {
        config.configFiles.forEach(cf => {
            allConfigFiles.add(cf.filename);
        });
        // Add package manager config files
        config.packageManagers.forEach(pm => {
            if (pm.configFiles) {
                pm.configFiles.forEach(cf => allConfigFiles.add(cf));
            }
        });
    });
    return Array.from(allConfigFiles);
}
// Export alias for backward compatibility
const LANGUAGE_CONFIGS = (/* unused pure expression or super */ null && (ENHANCED_LANGUAGE_CONFIGS));


/***/ }),

/***/ 9457:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pluck = void 0;
var map_1 = __webpack_require__(3982);
function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i] = arguments[_i];
    }
    var length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return map_1.map(function (x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
            var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    });
}
exports.pluck = pluck;
//# sourceMappingURL=pluck.js.map

/***/ }),

/***/ 9460:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const Range = __webpack_require__(9165)
const validRange = (range, options) => {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}
module.exports = validRange


/***/ }),

/***/ 9470:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.not = void 0;
function not(pred, thisArg) {
    return function (value, index) { return !pred.call(thisArg, value, index); };
}
exports.not = not;
//# sourceMappingURL=not.js.map

/***/ }),

/***/ 9478:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const os = __webpack_require__(857);
const tty = __webpack_require__(9637);
const hasFlag = __webpack_require__(1533);

const {env} = process;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false') ||
	hasFlag('color=never')) {
	forceColor = 0;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = 1;
}

if ('FORCE_COLOR' in env) {
	if (env.FORCE_COLOR === 'true') {
		forceColor = 1;
	} else if (env.FORCE_COLOR === 'false') {
		forceColor = 0;
	} else {
		forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(haveStream, streamIsTTY) {
	if (forceColor === 0) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (process.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream, stream && stream.isTTY);
	return translateLevel(level);
}

module.exports = {
	supportsColor: getSupportLevel,
	stdout: translateLevel(supportsColor(true, tty.isatty(1))),
	stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};


/***/ }),

/***/ 9498:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.observable = void 0;
exports.observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();
//# sourceMappingURL=observable.js.map

/***/ }),

/***/ 9505:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.repeat = void 0;
var empty_1 = __webpack_require__(8003);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var innerFrom_1 = __webpack_require__(2018);
var timer_1 = __webpack_require__(3051);
function repeat(countOrConfig) {
    var _a;
    var count = Infinity;
    var delay;
    if (countOrConfig != null) {
        if (typeof countOrConfig === 'object') {
            (_a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay);
        }
        else {
            count = countOrConfig;
        }
    }
    return count <= 0
        ? function () { return empty_1.EMPTY; }
        : lift_1.operate(function (source, subscriber) {
            var soFar = 0;
            var sourceSub;
            var resubscribe = function () {
                sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();
                sourceSub = null;
                if (delay != null) {
                    var notifier = typeof delay === 'number' ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(soFar));
                    var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {
                        notifierSubscriber_1.unsubscribe();
                        subscribeToSource();
                    });
                    notifier.subscribe(notifierSubscriber_1);
                }
                else {
                    subscribeToSource();
                }
            };
            var subscribeToSource = function () {
                var syncUnsub = false;
                sourceSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, function () {
                    if (++soFar < count) {
                        if (sourceSub) {
                            resubscribe();
                        }
                        else {
                            syncUnsub = true;
                        }
                    }
                    else {
                        subscriber.complete();
                    }
                }));
                if (syncUnsub) {
                    resubscribe();
                }
            };
            subscribeToSource();
        });
}
exports.repeat = repeat;
//# sourceMappingURL=repeat.js.map

/***/ }),

/***/ 9546:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RB: () => (/* binding */ getPackageVersion)
/* harmony export */ });
/* unused harmony exports capitalize, camelCase, kebabCase, snakeCase, titleCase, normalizePath, resolveAbsolutePath, getRelativePath, ensureDirectoryExists, getFrameworkTheme, getLanguageIcon, getFrameworkIcon, validateProjectName, frameworkSupportsDatabase, getAvailableDatabases, getAvailableOrms, isCombinationTemplate, getFrameworkDirectoryName, extractTemplateMetadata, validateFeatureConfig, mergeFeatureFiles, copyFileWithBackup, generateFileHash, isDirectoryEmpty, checkSystemRequirements, detectPackageManager, getProjectName, safeJsonParse, formatFileSize, generateId, deepMerge, retry */
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6928);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9896);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6982);
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9023);
/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5317);
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7016);
/* harmony import */ var _pathResolver_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3294);
/**
 * Enhanced utility functions for Package Installer CLI v3.2.0
 * Comprehensive utilities for project management, validation, and operations
 */








const execAsync = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(child_process__WEBPACK_IMPORTED_MODULE_4__.exec);
const __filename = (0,url__WEBPACK_IMPORTED_MODULE_5__.fileURLToPath)("file:///home/sharique/desktop/shariq-projects/package-installer-cli/dist/utils/utils.js");
const __dirname = path__WEBPACK_IMPORTED_MODULE_0__.dirname(__filename);
/**
 * Get the current version from package.json
 */
function getPackageVersion() {
    try {
        // Try multiple paths to find package.json
        const possiblePaths = [
            (0,_pathResolver_js__WEBPACK_IMPORTED_MODULE_6__/* .getPackageJsonPath */ .wD)(),
            path__WEBPACK_IMPORTED_MODULE_0__.resolve(process.cwd(), 'package.json'),
            path__WEBPACK_IMPORTED_MODULE_0__.resolve(__dirname, '../../package.json'),
            path__WEBPACK_IMPORTED_MODULE_0__.resolve(__dirname, '../../../package.json')
        ];
        for (const packagePath of possiblePaths) {
            if (fs__WEBPACK_IMPORTED_MODULE_1__.existsSync(packagePath)) {
                const packageJsonContent = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(packagePath, 'utf-8');
                const packageJson = JSON.parse(packageJsonContent);
                if (packageJson.version) {
                    return packageJson.version;
                }
            }
        }
        // Fallback to hardcoded version as last resort
        console.warn('Warning: Could not read version from package.json, using fallback version');
        return '3.6.0';
    }
    catch (error) {
        console.warn('Warning: Could not read version from package.json, using fallback version');
        return '3.6.0';
    }
}
/**
 * Enhanced string utilities
 */
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
function camelCase(str) {
    return str.replace(/[-_\s]+(.)?/g, (_, char) => char ? char.toUpperCase() : '');
}
function kebabCase(str) {
    return str
        .replace(/([a-z])([A-Z])/g, '$1-$2')
        .replace(/[\s_]+/g, '-')
        .toLowerCase();
}
function snakeCase(str) {
    return str
        .replace(/([a-z])([A-Z])/g, '$1_$2')
        .replace(/[-\s]+/g, '_')
        .toLowerCase();
}
function titleCase(str) {
    return str.replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());
}
/**
 * Enhanced path utilities with cross-platform support
 */
function normalizePath(inputPath) {
    return path.normalize(inputPath).replace(/\\/g, '/');
}
function resolveAbsolutePath(inputPath, basePath) {
    if (path.isAbsolute(inputPath)) {
        return normalizePath(inputPath);
    }
    const base = basePath || process.cwd();
    return normalizePath(path.resolve(base, inputPath));
}
function getRelativePath(from, to) {
    return normalizePath(path.relative(from, to));
}
function ensureDirectoryExists(dirPath) {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
    }
}
/**
 * Enhanced framework theme utilities with more styling options
 */
function getFrameworkTheme(framework) {
    const themes = {
        react: chalk.cyanBright,
        reactjs: chalk.cyanBright,
        nextjs: chalk.whiteBright.bgBlack,
        vue: chalk.greenBright,
        vuejs: chalk.greenBright,
        angular: chalk.redBright,
        angularjs: chalk.redBright,
        express: chalk.greenBright,
        expressjs: chalk.greenBright,
        remix: chalk.blueBright,
        remixjs: chalk.blueBright,
        nestjs: chalk.magentaBright,
        rust: chalk.yellowBright,
        svelte: chalk.hex('#ff6600'),
        sveltekit: chalk.hex('#ff6600'),
        solid: chalk.blue,
        solidjs: chalk.blue,
        qwik: chalk.magenta,
        astro: chalk.magenta,
        default: chalk.blueBright
    };
    return themes[framework.toLowerCase()] || themes.default;
}
function getLanguageIcon(language) {
    const icons = {
        javascript: '🟨',
        typescript: '🔷',
        python: '🐍',
        rust: '🦀',
        go: '🐹',
        java: '☕',
        csharp: '💜',
        php: '🐘',
        ruby: '💎',
        swift: '🍎',
        dart: '🎯'
    };
    return icons[language.toLowerCase()] || '📄';
}
function getFrameworkIcon(framework) {
    const icons = {
        react: '⚛️',
        reactjs: '⚛️',
        nextjs: '▲',
        vue: '💚',
        vuejs: '💚',
        angular: '🅰️',
        angularjs: '🅰️',
        express: '🚂',
        expressjs: '🚂',
        nestjs: '🏗️',
        rust: '🦀',
        svelte: '🔥',
        sveltekit: '🔥',
        solid: '🧊',
        solidjs: '🧊',
        qwik: '⚡',
        astro: '🚀'
    };
    return icons[framework.toLowerCase()] || '📦';
}
/**
 * Enhanced project name validation with comprehensive checks
 */
function validateProjectName(name) {
    const errors = [];
    const warnings = [];
    // Basic validation
    if (!name || name.trim().length === 0) {
        errors.push('Project name cannot be empty');
        return { isValid: false, errors, warnings };
    }
    const trimmedName = name.trim();
    // Length validation
    if (trimmedName.length < 2) {
        errors.push('Project name must be at least 2 characters long');
    }
    if (trimmedName.length > 214) {
        errors.push('Project name cannot exceed 214 characters (npm package name limit)');
    }
    // Character validation
    const validNameRegex = /^[a-zA-Z0-9._-]+$/;
    if (!validNameRegex.test(trimmedName)) {
        errors.push('Project name may only include letters, numbers, underscores, dashes, and dots');
    }
    // Cannot start with dot or hyphen
    if (trimmedName.startsWith('.') || trimmedName.startsWith('-')) {
        errors.push('Project name cannot start with a dot or hyphen');
    }
    // Cannot end with dot
    if (trimmedName.endsWith('.')) {
        errors.push('Project name cannot end with a dot');
    }
    // Reserved names validation
    const reservedNames = [
        'node_modules', 'package.json', 'package-lock.json', 'pnpm-lock.yaml',
        'yarn.lock', 'readme', 'license', 'changelog', 'src', 'dist', 'build',
        'public', 'static', 'assets', 'components', 'pages', 'api', 'lib',
        'utils', 'types', 'config', 'docs', 'test', 'tests', '__tests__'
    ];
    if (reservedNames.includes(trimmedName.toLowerCase())) {
        errors.push(`"${trimmedName}" is a reserved name and cannot be used`);
    }
    // Scoped package names (starting with @)
    if (trimmedName.startsWith('@')) {
        warnings.push('Scoped package names require proper npm configuration');
    }
    // Common naming conventions warnings
    if (trimmedName.includes(' ')) {
        warnings.push('Consider using hyphens or underscores instead of spaces');
    }
    if (/[A-Z]/.test(trimmedName)) {
        warnings.push('Consider using lowercase for better compatibility');
    }
    return {
        isValid: errors.length === 0,
        errors,
        warnings,
        value: trimmedName
    };
}
/**
 * Enhanced framework and template utilities
 */
function frameworkSupportsDatabase(frameworkConfig) {
    return frameworkConfig &&
        frameworkConfig.databases &&
        Object.keys(frameworkConfig.databases).length > 0;
}
function getAvailableDatabases(frameworkConfig) {
    if (!frameworkSupportsDatabase(frameworkConfig)) {
        return [];
    }
    return Object.keys(frameworkConfig.databases || {});
}
function getAvailableOrms(frameworkConfig, database, language) {
    if (!frameworkSupportsDatabase(frameworkConfig)) {
        return [];
    }
    const databaseConfig = frameworkConfig.databases?.[database];
    if (!databaseConfig || !databaseConfig[language]) {
        return [];
    }
    return databaseConfig[language].orms || [];
}
function isCombinationTemplate(framework) {
    return framework.includes('+');
}
function getFrameworkDirectoryName(framework) {
    return framework.replace(/\+/g, '-');
}
/**
 * Enhanced template metadata utilities
 */
function extractTemplateMetadata(templatePath) {
    try {
        const packageJsonPath = path.join(templatePath, 'package.json');
        const readmePath = path.join(templatePath, 'README.md');
        let packageJson = {};
        let readmeContent = '';
        if (fs.existsSync(packageJsonPath)) {
            packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
        }
        if (fs.existsSync(readmePath)) {
            readmeContent = fs.readFileSync(readmePath, 'utf-8');
        }
        return {
            name: packageJson.name || path.basename(templatePath),
            framework: detectFrameworks(packageJson.dependencies || {})[0] || 'unknown',
            language: detectLanguages(templatePath)[0] || 'javascript',
            bundler: packageJson.bundler || undefined,
            ui: packageJson.ui || undefined,
            features: packageJson.keywords || [],
            hasSrc: fs.existsSync(path.join(templatePath, 'src')),
            hasTailwind: Boolean(packageJson.dependencies?.tailwindcss || packageJson.devDependencies?.tailwindcss),
            createdAt: new Date().toISOString(),
            size: 0 // Could calculate actual directory size if needed
        };
    }
    catch (error) {
        console.warn(`Failed to extract template metadata from ${templatePath}:`, error);
        return null;
    }
}
function extractDescriptionFromReadme(readmeContent) {
    const lines = readmeContent.split('\n');
    for (const line of lines) {
        if (line.trim() && !line.startsWith('#') && !line.startsWith('!')) {
            return line.trim().slice(0, 100);
        }
    }
    return 'No description available';
}
function detectFrameworks(dependencies) {
    const frameworks = [];
    const frameworkDetection = {
        'react': ['react'],
        'nextjs': ['next'],
        'vue': ['vue'],
        'angular': ['@angular/core'],
        'express': ['express'],
        'nestjs': ['@nestjs/core'],
        'svelte': ['svelte'],
        'solid-js': ['solid-js'],
        'qwik': ['@builder.io/qwik'],
        'astro': ['astro']
    };
    for (const [framework, deps] of Object.entries(frameworkDetection)) {
        if (deps.some(dep => dependencies[dep])) {
            frameworks.push(framework);
        }
    }
    return frameworks;
}
function detectLanguages(templatePath) {
    const languages = new Set();
    try {
        // Check for TypeScript
        if (fs.existsSync(path.join(templatePath, 'tsconfig.json')) ||
            fs.existsSync(path.join(templatePath, 'tsconfig.app.json'))) {
            languages.add('typescript');
        }
        // Check for JavaScript (default if no TS)
        if (languages.size === 0 ||
            fs.existsSync(path.join(templatePath, 'jsconfig.json'))) {
            languages.add('javascript');
        }
        // Check for Rust
        if (fs.existsSync(path.join(templatePath, 'Cargo.toml'))) {
            languages.add('rust');
        }
        // Check for Python
        if (fs.existsSync(path.join(templatePath, 'requirements.txt')) ||
            fs.existsSync(path.join(templatePath, 'pyproject.toml'))) {
            languages.add('python');
        }
        // Check for Go
        if (fs.existsSync(path.join(templatePath, 'go.mod'))) {
            languages.add('go');
        }
    }
    catch (error) {
        console.warn('Error detecting languages:', error);
    }
    return Array.from(languages);
}
/**
 * Feature management utilities
 */
function validateFeatureConfig(feature) {
    const errors = [];
    const warnings = [];
    if (!feature.description || feature.description.trim().length === 0) {
        errors.push('Feature description is required');
    }
    if (!feature.supportedFrameworks || !Array.isArray(feature.supportedFrameworks) || feature.supportedFrameworks.length === 0) {
        errors.push('Feature must support at least one framework');
    }
    if (!feature.supportedLanguages || !Array.isArray(feature.supportedLanguages) || feature.supportedLanguages.length === 0) {
        errors.push('Feature must support at least one language');
    }
    // Validate files structure
    if (!feature.files || typeof feature.files !== 'object') {
        errors.push('Feature must have a files configuration object');
    }
    else {
        // Validate the nested structure of files
        Object.keys(feature.files).forEach(provider => {
            const providerFiles = feature.files[provider];
            if (!providerFiles || typeof providerFiles !== 'object') {
                errors.push(`Provider ${provider} must have a valid files configuration`);
            }
        });
    }
    return {
        isValid: errors.length === 0,
        errors,
        warnings,
        value: feature
    };
}
function mergeFeatureFiles(baseFiles, featureFiles) {
    const merged = new Set([...baseFiles]);
    featureFiles.forEach(file => merged.add(file));
    return Array.from(merged);
}
/**
 * File system utilities
 */
async function copyFileWithBackup(source, destination) {
    if (fs.existsSync(destination)) {
        const backup = `${destination}.backup.${Date.now()}`;
        fs.copyFileSync(destination, backup);
    }
    fs.copyFileSync(source, destination);
}
function generateFileHash(filePath) {
    const content = fs.readFileSync(filePath);
    return crypto.createHash('md5').update(content).digest('hex');
}
async function isDirectoryEmpty(dirPath) {
    if (!fs.existsSync(dirPath)) {
        return true;
    }
    const files = fs.readdirSync(dirPath);
    return files.length === 0 || files.every(file => file.startsWith('.'));
}
/**
 * System utilities
 */
async function checkSystemRequirements() {
    const checks = {
        node: false,
        npm: false,
        pnpm: false,
        yarn: false,
        git: false,
        rust: false,
        python: false
    };
    const commands = {
        node: 'node --version',
        npm: 'npm --version',
        pnpm: 'pnpm --version',
        yarn: 'yarn --version',
        git: 'git --version',
        rust: 'rustc --version',
        python: 'python --version'
    };
    for (const [tool, command] of Object.entries(commands)) {
        try {
            await execAsync(command);
            checks[tool] = true;
        }
        catch {
            checks[tool] = false;
        }
    }
    return checks;
}
async function detectPackageManager(projectPath) {
    const lockFiles = {
        'pnpm-lock.yaml': 'pnpm',
        'yarn.lock': 'yarn',
        'package-lock.json': 'npm'
    };
    for (const [lockFile, manager] of Object.entries(lockFiles)) {
        if (fs.existsSync(path.join(projectPath, lockFile))) {
            return manager;
        }
    }
    // Check if pnpm is available globally
    try {
        await execAsync('pnpm --version');
        return 'pnpm';
    }
    catch {
        // Fall back to npm
        return 'npm';
    }
}
/**
 * Enhanced project name utilities
 */
async function getProjectName(providedName) {
    if (providedName) {
        const validation = validateProjectName(providedName);
        if (!validation.isValid) {
            throw new Error(`Invalid project name: ${validation.errors.join(', ')}`);
        }
        return validation.value;
    }
    const { default: inquirer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6824));
    let projectName = '';
    let isValid = false;
    while (!isValid) {
        const { name } = await inquirer.prompt([
            {
                type: 'input',
                name: 'name',
                message: 'What is your project name?',
                default: 'my-awesome-app',
                validate: (input) => {
                    const validation = validateProjectName(input);
                    if (!validation.isValid) {
                        return validation.errors[0];
                    }
                    if (validation.warnings.length > 0) {
                        console.log(chalk.yellow('⚠️  ' + validation.warnings.join(', ')));
                    }
                    return true;
                }
            }
        ]);
        const validation = validateProjectName(name);
        if (validation.isValid) {
            projectName = validation.value;
            isValid = true;
        }
    }
    return projectName;
}
/**
 * Utility for safe JSON parsing
 */
function safeJsonParse(jsonString, fallback) {
    try {
        return JSON.parse(jsonString);
    }
    catch {
        return fallback;
    }
}
/**
 * Utility for formatting file sizes
 */
function formatFileSize(bytes) {
    const units = ['B', 'KB', 'MB', 'GB'];
    let size = bytes;
    let unitIndex = 0;
    while (size >= 1024 && unitIndex < units.length - 1) {
        size /= 1024;
        unitIndex++;
    }
    return `${size.toFixed(1)} ${units[unitIndex]}`;
}
/**
 * Utility for generating random IDs
 */
function generateId(length = 8) {
    return crypto.randomBytes(length).toString('hex').slice(0, length);
}
/**
 * Utility for deep merging objects
 */
function deepMerge(target, source) {
    const result = { ...target };
    for (const key in source) {
        if (source[key] && typeof source[key] === 'object' && target[key] && typeof target[key] === 'object') {
            result[key] = deepMerge(target[key], source[key]);
        }
        else if (source[key] !== undefined) {
            result[key] = source[key];
        }
    }
    return result;
}
/**
 * Utility for retry logic
 */
async function retry(fn, maxAttempts = 3, delay = 1000) {
    let lastError;
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
            return await fn();
        }
        catch (error) {
            lastError = error;
            if (attempt === maxAttempts) {
                throw lastError;
            }
            await new Promise(resolve => setTimeout(resolve, delay * attempt));
        }
    }
    throw lastError;
}


/***/ }),

/***/ 9558:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pairwise = void 0;
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
function pairwise() {
    return lift_1.operate(function (source, subscriber) {
        var prev;
        var hasPrev = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var p = prev;
            prev = value;
            hasPrev && subscriber.next([p, value]);
            hasPrev = true;
        }));
    });
}
exports.pairwise = pairwise;
//# sourceMappingURL=pairwise.js.map

/***/ }),

/***/ 9567:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flatMap = void 0;
var mergeMap_1 = __webpack_require__(4344);
exports.flatMap = mergeMap_1.mergeMap;
//# sourceMappingURL=flatMap.js.map

/***/ }),

/***/ 9594:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[["0","\\u0000",127],["8ea1","｡",62],["a1a1","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],["a2a1","◆□■△▲▽▼※〒→←↑↓〓"],["a2ba","∈∋⊆⊇⊂⊃∪∩"],["a2ca","∧∨￢⇒⇔∀∃"],["a2dc","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["a2f2","Å‰♯♭♪†‡¶"],["a2fe","◯"],["a3b0","０",9],["a3c1","Ａ",25],["a3e1","ａ",25],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a8a1","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["ada1","①",19,"Ⅰ",9],["adc0","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["addf","㍻〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["b0a1","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["b1a1","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],["b2a1","押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["b3a1","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],["b4a1","粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["b5a1","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],["b6a1","供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["b7a1","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],["b8a1","検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["b9a1","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],["baa1","此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["bba1","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],["bca1","次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["bda1","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],["bea1","勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["bfa1","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],["c0a1","澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["c1a1","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],["c2a1","臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["c3a1","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],["c4a1","帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["c5a1","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],["c6a1","董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["c7a1","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],["c8a1","函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["c9a1","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],["caa1","福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["cba1","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],["cca1","漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["cda1","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],["cea1","痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["cfa1","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["d0a1","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["d1a1","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],["d2a1","辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["d3a1","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],["d4a1","圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["d5a1","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],["d6a1","屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["d7a1","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],["d8a1","悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["d9a1","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],["daa1","據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["dba1","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],["dca1","棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["dda1","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],["dea1","沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["dfa1","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],["e0a1","燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e1a1","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],["e2a1","癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e3a1","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],["e4a1","筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e5a1","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],["e6a1","罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e7a1","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],["e8a1","茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e9a1","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],["eaa1","蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["eba1","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],["eca1","譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["eda1","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],["eea1","遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["efa1","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],["f0a1","陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["f1a1","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],["f2a1","髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["f3a1","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],["f4a1","堯槇遙瑤凜熙"],["f9a1","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],["faa1","忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["fba1","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],["fca1","釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["fcf1","ⅰ",9,"￢￤＇＂"],["8fa2af","˘ˇ¸˙˝¯˛˚～΄΅"],["8fa2c2","¡¦¿"],["8fa2eb","ºª©®™¤№"],["8fa6e1","ΆΈΉΊΪ"],["8fa6e7","Ό"],["8fa6e9","ΎΫ"],["8fa6ec","Ώ"],["8fa6f1","άέήίϊΐόςύϋΰώ"],["8fa7c2","Ђ",10,"ЎЏ"],["8fa7f2","ђ",10,"ўџ"],["8fa9a1","ÆĐ"],["8fa9a4","Ħ"],["8fa9a6","Ĳ"],["8fa9a8","ŁĿ"],["8fa9ab","ŊØŒ"],["8fa9af","ŦÞ"],["8fa9c1","æđðħıĳĸłŀŉŋøœßŧþ"],["8faaa1","ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],["8faaba","ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],["8faba1","áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],["8fabbd","ġĥíìïîǐ"],["8fabc5","īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],["8fb0a1","丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],["8fb1a1","侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],["8fb2a1","傒傓傔傖傛傜傞",4,"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],["8fb3a1","凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],["8fb4a1","匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],["8fb5a1","咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],["8fb6a1","嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",5,"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",4,"囱囫园"],["8fb7a1","囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",4,"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],["8fb8a1","堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],["8fb9a1","奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],["8fbaa1","嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",4,"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],["8fbba1","屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],["8fbca1","巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",4,"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],["8fbda1","彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",4,"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],["8fbea1","悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",4,"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],["8fbfa1","懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],["8fc0a1","捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],["8fc1a1","擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],["8fc2a1","昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],["8fc3a1","杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",4,"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],["8fc4a1","棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],["8fc5a1","樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],["8fc6a1","歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],["8fc7a1","泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],["8fc8a1","湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],["8fc9a1","濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",4,"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",4,"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],["8fcaa1","煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],["8fcba1","狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],["8fcca1","珿琀琁琄琇琊琑琚琛琤琦琨",9,"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],["8fcda1","甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",5,"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],["8fcea1","瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",6,"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],["8fcfa1","睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],["8fd0a1","碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],["8fd1a1","秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],["8fd2a1","笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",5],["8fd3a1","籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],["8fd4a1","綞綦綧綪綳綶綷綹緂",4,"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],["8fd5a1","罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],["8fd6a1","胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],["8fd7a1","艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],["8fd8a1","荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],["8fd9a1","蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",4,"蕖蕙蕜",6,"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],["8fdaa1","藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",4,"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],["8fdba1","蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",6,"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],["8fdca1","蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",4,"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],["8fdda1","襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",4,"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],["8fdea1","誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",4,"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],["8fdfa1","貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],["8fe0a1","踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],["8fe1a1","轃轇轏轑",4,"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],["8fe2a1","郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],["8fe3a1","釂釃釅釓釔釗釙釚釞釤釥釩釪釬",5,"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",4,"鉻鉼鉽鉿銈銉銊銍銎銒銗"],["8fe4a1","銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",4,"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],["8fe5a1","鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",4,"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],["8fe6a1","镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],["8fe7a1","霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],["8fe8a1","頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",4,"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],["8fe9a1","馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",4],["8feaa1","鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",4,"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],["8feba1","鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",4,"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],["8feca1","鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],["8feda1","黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",4,"齓齕齖齗齘齚齝齞齨齩齭",4,"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]]');

/***/ }),

/***/ 9597:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scanInternals = void 0;
var OperatorSubscriber_1 = __webpack_require__(1908);
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function (source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var i = index++;
            state = hasState
                ?
                    accumulator(state, value, i)
                :
                    ((hasState = true), value);
            emitOnNext && subscriber.next(state);
        }, emitBeforeComplete &&
            (function () {
                hasState && subscriber.next(state);
                subscriber.complete();
            })));
    };
}
exports.scanInternals = scanInternals;
//# sourceMappingURL=scanInternals.js.map

/***/ }),

/***/ 9637:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("tty");

/***/ }),

/***/ 9646:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.auditTime = void 0;
var async_1 = __webpack_require__(7688);
var audit_1 = __webpack_require__(2027);
var timer_1 = __webpack_require__(3051);
function auditTime(duration, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.asyncScheduler; }
    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });
}
exports.auditTime = auditTime;
//# sourceMappingURL=auditTime.js.map

/***/ }),

/***/ 9648:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;
var Transform = __webpack_require__(4914);
__webpack_require__(7835)(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ 9662:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.combineLatest = void 0;
var combineLatest_1 = __webpack_require__(7952);
var lift_1 = __webpack_require__(4698);
var argsOrArgArray_1 = __webpack_require__(7882);
var mapOneOrManyArgs_1 = __webpack_require__(4078);
var pipe_1 = __webpack_require__(1943);
var args_1 = __webpack_require__(3522);
function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var resultSelector = args_1.popResultSelector(args);
    return resultSelector
        ? pipe_1.pipe(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector))
        : lift_1.operate(function (source, subscriber) {
            combineLatest_1.combineLatestInit(__spreadArray([source], __read(argsOrArgArray_1.argsOrArgArray(args))))(subscriber);
        });
}
exports.combineLatest = combineLatest;
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ 9690:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const { stringify } = __webpack_require__(6140)
const { outputFileSync } = __webpack_require__(4074)

function outputJsonSync (file, data, options) {
  const str = stringify(data, options)

  outputFileSync(file, str, options)
}

module.exports = outputJsonSync


/***/ }),

/***/ 9696:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bufferToggle = void 0;
var Subscription_1 = __webpack_require__(1981);
var lift_1 = __webpack_require__(4698);
var innerFrom_1 = __webpack_require__(2018);
var OperatorSubscriber_1 = __webpack_require__(1908);
var noop_1 = __webpack_require__(8563);
var arrRemove_1 = __webpack_require__(6864);
function bufferToggle(openings, closingSelector) {
    return lift_1.operate(function (source, subscriber) {
        var buffers = [];
        innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (openValue) {
            var buffer = [];
            buffers.push(buffer);
            var closingSubscription = new Subscription_1.Subscription();
            var emitBuffer = function () {
                arrRemove_1.arrRemove(buffers, buffer);
                subscriber.next(buffer);
                closingSubscription.unsubscribe();
            };
            closingSubscription.add(innerFrom_1.innerFrom(closingSelector(openValue)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, emitBuffer, noop_1.noop)));
        }, noop_1.noop));
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var e_1, _a;
            try {
                for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
                    var buffer = buffers_1_1.value;
                    buffer.push(value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }, function () {
            while (buffers.length > 0) {
                subscriber.next(buffers.shift());
            }
            subscriber.complete();
        }));
    });
}
exports.bufferToggle = bufferToggle;
//# sourceMappingURL=bufferToggle.js.map

/***/ }),

/***/ 9704:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Tmp
 *
 * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>
 *
 * MIT Licensed
 */

/*
 * Module dependencies.
 */
const fs = __webpack_require__(9896);
const path = __webpack_require__(6928);
const crypto = __webpack_require__(6982);
const osTmpDir = __webpack_require__(6856);
const _c = process.binding('constants');

/*
 * The working inner variables.
 */
const
  /**
   * The temporary directory.
   * @type {string}
   */
  tmpDir = osTmpDir(),

  // the random characters to choose from
  RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',

  TEMPLATE_PATTERN = /XXXXXX/,

  DEFAULT_TRIES = 3,

  CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),

  EBADF = _c.EBADF || _c.os.errno.EBADF,
  ENOENT = _c.ENOENT || _c.os.errno.ENOENT,

  DIR_MODE = 448 /* 0o700 */,
  FILE_MODE = 384 /* 0o600 */,

  // this will hold the objects need to be removed on exit
  _removeObjects = [];

var
  _gracefulCleanup = false,
  _uncaughtException = false;

/**
 * Random name generator based on crypto.
 * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript
 *
 * @param {number} howMany
 * @returns {string} the generated random name
 * @private
 */
function _randomChars(howMany) {
  var
    value = [],
    rnd = null;

  // make sure that we do not fail because we ran out of entropy
  try {
    rnd = crypto.randomBytes(howMany);
  } catch (e) {
    rnd = crypto.pseudoRandomBytes(howMany);
  }

  for (var i = 0; i < howMany; i++) {
    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);
  }

  return value.join('');
}

/**
 * Checks whether the `obj` parameter is defined or not.
 *
 * @param {Object} obj
 * @returns {boolean} true if the object is undefined
 * @private
 */
function _isUndefined(obj) {
  return typeof obj === 'undefined';
}

/**
 * Parses the function arguments.
 *
 * This function helps to have optional arguments.
 *
 * @param {(Options|Function)} options
 * @param {Function} callback
 * @returns {Array} parsed arguments
 * @private
 */
function _parseArguments(options, callback) {
  if (typeof options == 'function') {
    return [callback || {}, options];
  }

  if (_isUndefined(options)) {
    return [{}, callback];
  }

  return [options, callback];
}

/**
 * Generates a new temporary name.
 *
 * @param {Object} opts
 * @returns {string} the new random name according to opts
 * @private
 */
function _generateTmpName(opts) {
  if (opts.name) {
    return path.join(opts.dir || tmpDir, opts.name);
  }

  // mkstemps like template
  if (opts.template) {
    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));
  }

  // prefix and postfix
  const name = [
    opts.prefix || 'tmp-',
    process.pid,
    _randomChars(12),
    opts.postfix || ''
  ].join('');

  return path.join(opts.dir || tmpDir, name);
}

/**
 * Gets a temporary file name.
 *
 * @param {(Options|tmpNameCallback)} options options or callback
 * @param {?tmpNameCallback} callback the callback function
 */
function tmpName(options, callback) {
  var
    args = _parseArguments(options, callback),
    opts = args[0],
    cb = args[1],
    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;

  if (isNaN(tries) || tries < 0)
    return cb(new Error('Invalid tries'));

  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))
    return cb(new Error('Invalid template provided'));

  (function _getUniqueName() {
    const name = _generateTmpName(opts);

    // check whether the path exists then retry if needed
    fs.stat(name, function (err) {
      if (!err) {
        if (tries-- > 0) return _getUniqueName();

        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));
      }

      cb(null, name);
    });
  }());
}

/**
 * Synchronous version of tmpName.
 *
 * @param {Object} options
 * @returns {string} the generated random name
 * @throws {Error} if the options are invalid or could not generate a filename
 */
function tmpNameSync(options) {
  var
    args = _parseArguments(options),
    opts = args[0],
    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;

  if (isNaN(tries) || tries < 0)
    throw new Error('Invalid tries');

  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))
    throw new Error('Invalid template provided');

  do {
    const name = _generateTmpName(opts);
    try {
      fs.statSync(name);
    } catch (e) {
      return name;
    }
  } while (tries-- > 0);

  throw new Error('Could not get a unique tmp filename, max tries reached');
}

/**
 * Creates and opens a temporary file.
 *
 * @param {(Options|fileCallback)} options the config options or the callback function
 * @param {?fileCallback} callback
 */
function file(options, callback) {
  var
    args = _parseArguments(options, callback),
    opts = args[0],
    cb = args[1];

  opts.postfix = (_isUndefined(opts.postfix)) ? '.tmp' : opts.postfix;

  // gets a temporary filename
  tmpName(opts, function _tmpNameCreated(err, name) {
    if (err) return cb(err);

    // create and open the file
    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {
      if (err) return cb(err);

      if (opts.discardDescriptor) {
        return fs.close(fd, function _discardCallback(err) {
          if (err) {
            // Low probability, and the file exists, so this could be
            // ignored.  If it isn't we certainly need to unlink the
            // file, and if that fails too its error is more
            // important.
            try {
              fs.unlinkSync(name);
            } catch (e) {
              if (!isENOENT(e)) {
                err = e;
              }
            }
            return cb(err);
          }
          cb(null, name, undefined, _prepareTmpFileRemoveCallback(name, -1, opts));
        });
      }
      if (opts.detachDescriptor) {
        return cb(null, name, fd, _prepareTmpFileRemoveCallback(name, -1, opts));
      }
      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));
    });
  });
}

/**
 * Synchronous version of file.
 *
 * @param {Options} options
 * @returns {FileSyncObject} object consists of name, fd and removeCallback
 * @throws {Error} if cannot create a file
 */
function fileSync(options) {
  var
    args = _parseArguments(options),
    opts = args[0];

  opts.postfix = opts.postfix || '.tmp';

  const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;
  const name = tmpNameSync(opts);
  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);
  if (opts.discardDescriptor) {
    fs.closeSync(fd); 
    fd = undefined;
  }

  return {
    name: name,
    fd: fd,
    removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts)
  };
}

/**
 * Removes files and folders in a directory recursively.
 *
 * @param {string} root
 * @private
 */
function _rmdirRecursiveSync(root) {
  const dirs = [root];

  do {
    var
      dir = dirs.pop(),
      deferred = false,
      files = fs.readdirSync(dir);

    for (var i = 0, length = files.length; i < length; i++) {
      var
        file = path.join(dir, files[i]),
        stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories

      if (stat.isDirectory()) {
        if (!deferred) {
          deferred = true;
          dirs.push(dir);
        }
        dirs.push(file);
      } else {
        fs.unlinkSync(file);
      }
    }

    if (!deferred) {
      fs.rmdirSync(dir);
    }
  } while (dirs.length !== 0);
}

/**
 * Creates a temporary directory.
 *
 * @param {(Options|dirCallback)} options the options or the callback function
 * @param {?dirCallback} callback
 */
function dir(options, callback) {
  var
    args = _parseArguments(options, callback),
    opts = args[0],
    cb = args[1];

  // gets a temporary filename
  tmpName(opts, function _tmpNameCreated(err, name) {
    if (err) return cb(err);

    // create the directory
    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {
      if (err) return cb(err);

      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));
    });
  });
}

/**
 * Synchronous version of dir.
 *
 * @param {Options} options
 * @returns {DirSyncObject} object consists of name and removeCallback
 * @throws {Error} if it cannot create a directory
 */
function dirSync(options) {
  var
    args = _parseArguments(options),
    opts = args[0];

  const name = tmpNameSync(opts);
  fs.mkdirSync(name, opts.mode || DIR_MODE);

  return {
    name: name,
    removeCallback: _prepareTmpDirRemoveCallback(name, opts)
  };
}

/**
 * Prepares the callback for removal of the temporary file.
 *
 * @param {string} name the path of the file
 * @param {number} fd file descriptor
 * @param {Object} opts
 * @returns {fileCallback}
 * @private
 */
function _prepareTmpFileRemoveCallback(name, fd, opts) {
  const removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {
    try {
      if (0 <= fdPath[0]) {
        fs.closeSync(fdPath[0]);
      }
    }
    catch (e) {
      // under some node/windows related circumstances, a temporary file
      // may have not be created as expected or the file was already closed
      // by the user, in which case we will simply ignore the error
      if (!isEBADF(e) && !isENOENT(e)) {
        // reraise any unanticipated error
        throw e;
      }
    }
    try {
      fs.unlinkSync(fdPath[1]);
    }
    catch (e) {
      if (!isENOENT(e)) {
        // reraise any unanticipated error
        throw e;
      }
    }
  }, [fd, name]);

  if (!opts.keep) {
    _removeObjects.unshift(removeCallback);
  }

  return removeCallback;
}

/**
 * Prepares the callback for removal of the temporary directory.
 *
 * @param {string} name
 * @param {Object} opts
 * @returns {Function} the callback
 * @private
 */
function _prepareTmpDirRemoveCallback(name, opts) {
  const removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);
  const removeCallback = _prepareRemoveCallback(removeFunction, name);

  if (!opts.keep) {
    _removeObjects.unshift(removeCallback);
  }

  return removeCallback;
}

/**
 * Creates a guarded function wrapping the removeFunction call.
 *
 * @param {Function} removeFunction
 * @param {Object} arg
 * @returns {Function}
 * @private
 */
function _prepareRemoveCallback(removeFunction, arg) {
  var called = false;

  return function _cleanupCallback(next) {
    if (!called) {
      const index = _removeObjects.indexOf(_cleanupCallback);
      if (index >= 0) {
        _removeObjects.splice(index, 1);
      }

      called = true;
      removeFunction(arg);
    }

    if (next) next(null);
  };
}

/**
 * The garbage collector.
 *
 * @private
 */
function _garbageCollector() {
  if (_uncaughtException && !_gracefulCleanup) {
    return;
  }

  // the function being called removes itself from _removeObjects,
  // loop until _removeObjects is empty
  while (_removeObjects.length) {
    try {
      _removeObjects[0].call(null);
    } catch (e) {
      // already removed?
    }
  }
}

/**
 * Helper for testing against EBADF to compensate changes made to Node 7.x under Windows.
 */
function isEBADF(error) {
  return isExpectedError(error, -EBADF, 'EBADF');
}

/**
 * Helper for testing against ENOENT to compensate changes made to Node 7.x under Windows.
 */
function isENOENT(error) {
  return isExpectedError(error, -ENOENT, 'ENOENT');
}

/**
 * Helper to determine whether the expected error code matches the actual code and errno,
 * which will differ between the supported node versions.
 *
 * - Node >= 7.0:
 *   error.code {String}
 *   error.errno {String|Number} any numerical value will be negated
 *
 * - Node >= 6.0 < 7.0:
 *   error.code {String}
 *   error.errno {Number} negated
 *
 * - Node >= 4.0 < 6.0: introduces SystemError
 *   error.code {String}
 *   error.errno {Number} negated
 *
 * - Node >= 0.10 < 4.0:
 *   error.code {Number} negated
 *   error.errno n/a
 */
function isExpectedError(error, code, errno) {
  return error.code == code || error.code == errno;
}

/**
 * Sets the graceful cleanup.
 *
 * Also removes the created files and directories when an uncaught exception occurs.
 */
function setGracefulCleanup() {
  _gracefulCleanup = true;
}

const version = process.versions.node.split('.').map(function (value) {
  return parseInt(value, 10);
});

if (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {
  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {
    _uncaughtException = true;
    _garbageCollector();

    throw err;
  });
}

process.addListener('exit', function _exit(code) {
  if (code) _uncaughtException = true;
  _garbageCollector();
});

/**
 * Configuration options.
 *
 * @typedef {Object} Options
 * @property {?number} tries the number of tries before give up the name generation
 * @property {?string} template the "mkstemp" like filename template
 * @property {?string} name fix name
 * @property {?string} dir the tmp directory to use
 * @property {?string} prefix prefix for the generated name
 * @property {?string} postfix postfix for the generated name
 */

/**
 * @typedef {Object} FileSyncObject
 * @property {string} name the name of the file
 * @property {string} fd the file descriptor
 * @property {fileCallback} removeCallback the callback function to remove the file
 */

/**
 * @typedef {Object} DirSyncObject
 * @property {string} name the name of the directory
 * @property {fileCallback} removeCallback the callback function to remove the directory
 */

/**
 * @callback tmpNameCallback
 * @param {?Error} err the error object if anything goes wrong
 * @param {string} name the temporary file name
 */

/**
 * @callback fileCallback
 * @param {?Error} err the error object if anything goes wrong
 * @param {string} name the temporary file name
 * @param {number} fd the file descriptor
 * @param {cleanupCallback} fn the cleanup callback function
 */

/**
 * @callback dirCallback
 * @param {?Error} err the error object if anything goes wrong
 * @param {string} name the temporary file name
 * @param {cleanupCallback} fn the cleanup callback function
 */

/**
 * Removes the temporary created file or directory.
 *
 * @callback cleanupCallback
 * @param {simpleCallback} [next] function to call after entry was removed
 */

/**
 * Callback function for function composition.
 * @see {@link https://github.com/raszi/node-tmp/issues/57|raszi/node-tmp#57}
 *
 * @callback simpleCallback
 */

// exporting all the needed methods
module.exports.tmpdir = tmpDir;

module.exports.dir = dir;
module.exports.dirSync = dirSync;

module.exports.file = file;
module.exports.fileSync = fileSync;

module.exports.tmpName = tmpName;
module.exports.tmpNameSync = tmpNameSync;

module.exports.setGracefulCleanup = setGracefulCleanup;


/***/ }),

/***/ 9730:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compare = __webpack_require__(7910)
const lte = (a, b, loose) => compare(a, b, loose) <= 0
module.exports = lte


/***/ }),

/***/ 9736:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const chalk = __webpack_require__(2404);
const isUnicodeSupported = __webpack_require__(70);

const main = {
	info: chalk.blue('ℹ'),
	success: chalk.green('✔'),
	warning: chalk.yellow('⚠'),
	error: chalk.red('✖')
};

const fallback = {
	info: chalk.blue('i'),
	success: chalk.green('√'),
	warning: chalk.yellow('‼'),
	error: chalk.red('×')
};

module.exports = isUnicodeSupported() ? main : fallback;


/***/ }),

/***/ 9786:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestTools = exports.Immediate = void 0;
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
exports.Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
            resolved = Promise.resolve();
        }
        resolved.then(function () { return findAndClearHandle(handle) && cb(); });
        return handle;
    },
    clearImmediate: function (handle) {
        findAndClearHandle(handle);
    },
};
exports.TestTools = {
    pending: function () {
        return Object.keys(activeHandles).length;
    }
};
//# sourceMappingURL=Immediate.js.map

/***/ }),

/***/ 9798:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.iif = void 0;
var defer_1 = __webpack_require__(1258);
function iif(condition, trueResult, falseResult) {
    return defer_1.defer(function () { return (condition() ? trueResult : falseResult); });
}
exports.iif = iif;
//# sourceMappingURL=iif.js.map

/***/ }),

/***/ 9799:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const compare = __webpack_require__(7910)
const gte = (a, b, loose) => compare(a, b, loose) >= 0
module.exports = gte


/***/ }),

/***/ 9801:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bufferTime = void 0;
var Subscription_1 = __webpack_require__(1981);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var arrRemove_1 = __webpack_require__(6864);
var async_1 = __webpack_require__(7688);
var args_1 = __webpack_require__(3522);
var executeSchedule_1 = __webpack_require__(7725);
function bufferTime(bufferTimeSpan) {
    var _a, _b;
    var otherArgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        otherArgs[_i - 1] = arguments[_i];
    }
    var scheduler = (_a = args_1.popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : async_1.asyncScheduler;
    var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
    var maxBufferSize = otherArgs[1] || Infinity;
    return lift_1.operate(function (source, subscriber) {
        var bufferRecords = [];
        var restartOnEmit = false;
        var emit = function (record) {
            var buffer = record.buffer, subs = record.subs;
            subs.unsubscribe();
            arrRemove_1.arrRemove(bufferRecords, record);
            subscriber.next(buffer);
            restartOnEmit && startBuffer();
        };
        var startBuffer = function () {
            if (bufferRecords) {
                var subs = new Subscription_1.Subscription();
                subscriber.add(subs);
                var buffer = [];
                var record_1 = {
                    buffer: buffer,
                    subs: subs,
                };
                bufferRecords.push(record_1);
                executeSchedule_1.executeSchedule(subs, scheduler, function () { return emit(record_1); }, bufferTimeSpan);
            }
        };
        if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
            executeSchedule_1.executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
        }
        else {
            restartOnEmit = true;
        }
        startBuffer();
        var bufferTimeSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            var e_1, _a;
            var recordsCopy = bufferRecords.slice();
            try {
                for (var recordsCopy_1 = __values(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
                    var record = recordsCopy_1_1.value;
                    var buffer = record.buffer;
                    buffer.push(value);
                    maxBufferSize <= buffer.length && emit(record);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a = recordsCopy_1.return)) _a.call(recordsCopy_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }, function () {
            while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
                subscriber.next(bufferRecords.shift().buffer);
            }
            bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
            subscriber.complete();
            subscriber.unsubscribe();
        }, undefined, function () { return (bufferRecords = null); });
        source.subscribe(bufferTimeSubscriber);
    });
}
exports.bufferTime = bufferTime;
//# sourceMappingURL=bufferTime.js.map

/***/ }),

/***/ 9802:
/***/ ((module) => {

module.exports = {
    MODE_NUMBER :       1 << 0,
    MODE_ALPHA_NUM :    1 << 1,
    MODE_8BIT_BYTE :    1 << 2,
    MODE_KANJI :        1 << 3
};


/***/ }),

/***/ 9815:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.windowTime = void 0;
var Subject_1 = __webpack_require__(6118);
var async_1 = __webpack_require__(7688);
var Subscription_1 = __webpack_require__(1981);
var lift_1 = __webpack_require__(4698);
var OperatorSubscriber_1 = __webpack_require__(1908);
var arrRemove_1 = __webpack_require__(6864);
var args_1 = __webpack_require__(3522);
var executeSchedule_1 = __webpack_require__(7725);
function windowTime(windowTimeSpan) {
    var _a, _b;
    var otherArgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        otherArgs[_i - 1] = arguments[_i];
    }
    var scheduler = (_a = args_1.popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : async_1.asyncScheduler;
    var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
    var maxWindowSize = otherArgs[1] || Infinity;
    return lift_1.operate(function (source, subscriber) {
        var windowRecords = [];
        var restartOnClose = false;
        var closeWindow = function (record) {
            var window = record.window, subs = record.subs;
            window.complete();
            subs.unsubscribe();
            arrRemove_1.arrRemove(windowRecords, record);
            restartOnClose && startWindow();
        };
        var startWindow = function () {
            if (windowRecords) {
                var subs = new Subscription_1.Subscription();
                subscriber.add(subs);
                var window_1 = new Subject_1.Subject();
                var record_1 = {
                    window: window_1,
                    subs: subs,
                    seen: 0,
                };
                windowRecords.push(record_1);
                subscriber.next(window_1.asObservable());
                executeSchedule_1.executeSchedule(subs, scheduler, function () { return closeWindow(record_1); }, windowTimeSpan);
            }
        };
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            executeSchedule_1.executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);
        }
        else {
            restartOnClose = true;
        }
        startWindow();
        var loop = function (cb) { return windowRecords.slice().forEach(cb); };
        var terminate = function (cb) {
            loop(function (_a) {
                var window = _a.window;
                return cb(window);
            });
            cb(subscriber);
            subscriber.unsubscribe();
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            loop(function (record) {
                record.window.next(value);
                maxWindowSize <= ++record.seen && closeWindow(record);
            });
        }, function () { return terminate(function (consumer) { return consumer.complete(); }); }, function (err) { return terminate(function (consumer) { return consumer.error(err); }); }));
        return function () {
            windowRecords = null;
        };
    });
}
exports.windowTime = windowTime;
//# sourceMappingURL=windowTime.js.map

/***/ }),

/***/ 9819:
/***/ (function(__unused_webpack_module, exports) {


/***
 * Node External Editor
 *
 * Kevin Gravier <kevin@mrkmg.com>
 * MIT 2018
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ReadFileError = /** @class */ (function (_super) {
    __extends(ReadFileError, _super);
    function ReadFileError(originalError) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, "Failed to read temporary file") || this;
        _this.originalError = originalError;
        var proto = _newTarget.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(_this, proto);
        }
        else {
            _this.__proto__ = _newTarget.prototype;
        }
        return _this;
    }
    return ReadFileError;
}(Error));
exports.ReadFileError = ReadFileError;


/***/ }),

/***/ 9822:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.throwError = void 0;
var Observable_1 = __webpack_require__(541);
var isFunction_1 = __webpack_require__(8403);
function throwError(errorOrErrorFactory, scheduler) {
    var errorFactory = isFunction_1.isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function () { return errorOrErrorFactory; };
    var init = function (subscriber) { return subscriber.error(errorFactory()); };
    return new Observable_1.Observable(scheduler ? function (subscriber) { return scheduler.schedule(init, 0, subscriber); } : init);
}
exports.throwError = throwError;
//# sourceMappingURL=throwError.js.map

/***/ }),

/***/ 9823:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var constants = __webpack_require__(9140)

var origCwd = process.cwd
var cwd = null

var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform

process.cwd = function() {
  if (!cwd)
    cwd = origCwd.call(process)
  return cwd
}
try {
  process.cwd()
} catch (er) {}

// This check is needed until node.js 12 is required
if (typeof process.chdir === 'function') {
  var chdir = process.chdir
  process.chdir = function (d) {
    cwd = null
    chdir.call(process, d)
  }
  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir)
}

module.exports = patch

function patch (fs) {
  // (re-)implement some things that are known busted or missing.

  // lchmod, broken prior to 0.6.2
  // back-port the fix here.
  if (constants.hasOwnProperty('O_SYMLINK') &&
      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs)
  }

  // lutimes implementation, or no-op
  if (!fs.lutimes) {
    patchLutimes(fs)
  }

  // https://github.com/isaacs/node-graceful-fs/issues/4
  // Chown should not fail on einval or eperm if non-root.
  // It should not fail on enosys ever, as this just indicates
  // that a fs doesn't support the intended operation.

  fs.chown = chownFix(fs.chown)
  fs.fchown = chownFix(fs.fchown)
  fs.lchown = chownFix(fs.lchown)

  fs.chmod = chmodFix(fs.chmod)
  fs.fchmod = chmodFix(fs.fchmod)
  fs.lchmod = chmodFix(fs.lchmod)

  fs.chownSync = chownFixSync(fs.chownSync)
  fs.fchownSync = chownFixSync(fs.fchownSync)
  fs.lchownSync = chownFixSync(fs.lchownSync)

  fs.chmodSync = chmodFixSync(fs.chmodSync)
  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
  fs.lchmodSync = chmodFixSync(fs.lchmodSync)

  fs.stat = statFix(fs.stat)
  fs.fstat = statFix(fs.fstat)
  fs.lstat = statFix(fs.lstat)

  fs.statSync = statFixSync(fs.statSync)
  fs.fstatSync = statFixSync(fs.fstatSync)
  fs.lstatSync = statFixSync(fs.lstatSync)

  // if lchmod/lchown do not exist, then make them no-ops
  if (fs.chmod && !fs.lchmod) {
    fs.lchmod = function (path, mode, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchmodSync = function () {}
  }
  if (fs.chown && !fs.lchown) {
    fs.lchown = function (path, uid, gid, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchownSync = function () {}
  }

  // on Windows, A/V software can lock the directory, causing this
  // to fail with an EACCES or EPERM if the directory contains newly
  // created files.  Try again on failure, for up to 60 seconds.

  // Set the timeout this long because some Windows Anti-Virus, such as Parity
  // bit9, may lock files for up to a minute, causing npm package install
  // failures. Also, take care to yield the scheduler. Windows scheduling gives
  // CPU to a busy looping process, which can cause the program causing the lock
  // contention to be starved of CPU by node, so the contention doesn't resolve.
  if (platform === "win32") {
    fs.rename = typeof fs.rename !== 'function' ? fs.rename
    : (function (fs$rename) {
      function rename (from, to, cb) {
        var start = Date.now()
        var backoff = 0;
        fs$rename(from, to, function CB (er) {
          if (er
              && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY")
              && Date.now() - start < 60000) {
            setTimeout(function() {
              fs.stat(to, function (stater, st) {
                if (stater && stater.code === "ENOENT")
                  fs$rename(from, to, CB);
                else
                  cb(er)
              })
            }, backoff)
            if (backoff < 100)
              backoff += 10;
            return;
          }
          if (cb) cb(er)
        })
      }
      if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename)
      return rename
    })(fs.rename)
  }

  // if read() returns EAGAIN, then just try it again.
  fs.read = typeof fs.read !== 'function' ? fs.read
  : (function (fs$read) {
    function read (fd, buffer, offset, length, position, callback_) {
      var callback
      if (callback_ && typeof callback_ === 'function') {
        var eagCounter = 0
        callback = function (er, _, __) {
          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter ++
            return fs$read.call(fs, fd, buffer, offset, length, position, callback)
          }
          callback_.apply(this, arguments)
        }
      }
      return fs$read.call(fs, fd, buffer, offset, length, position, callback)
    }

    // This ensures `util.promisify` works as it does for native `fs.read`.
    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read)
    return read
  })(fs.read)

  fs.readSync = typeof fs.readSync !== 'function' ? fs.readSync
  : (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
    var eagCounter = 0
    while (true) {
      try {
        return fs$readSync.call(fs, fd, buffer, offset, length, position)
      } catch (er) {
        if (er.code === 'EAGAIN' && eagCounter < 10) {
          eagCounter ++
          continue
        }
        throw er
      }
    }
  }})(fs.readSync)

  function patchLchmod (fs) {
    fs.lchmod = function (path, mode, callback) {
      fs.open( path
             , constants.O_WRONLY | constants.O_SYMLINK
             , mode
             , function (err, fd) {
        if (err) {
          if (callback) callback(err)
          return
        }
        // prefer to return the chmod error, if one occurs,
        // but still try to close, and report closing errors if they occur.
        fs.fchmod(fd, mode, function (err) {
          fs.close(fd, function(err2) {
            if (callback) callback(err || err2)
          })
        })
      })
    }

    fs.lchmodSync = function (path, mode) {
      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)

      // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.
      var threw = true
      var ret
      try {
        ret = fs.fchmodSync(fd, mode)
        threw = false
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd)
          } catch (er) {}
        } else {
          fs.closeSync(fd)
        }
      }
      return ret
    }
  }

  function patchLutimes (fs) {
    if (constants.hasOwnProperty("O_SYMLINK") && fs.futimes) {
      fs.lutimes = function (path, at, mt, cb) {
        fs.open(path, constants.O_SYMLINK, function (er, fd) {
          if (er) {
            if (cb) cb(er)
            return
          }
          fs.futimes(fd, at, mt, function (er) {
            fs.close(fd, function (er2) {
              if (cb) cb(er || er2)
            })
          })
        })
      }

      fs.lutimesSync = function (path, at, mt) {
        var fd = fs.openSync(path, constants.O_SYMLINK)
        var ret
        var threw = true
        try {
          ret = fs.futimesSync(fd, at, mt)
          threw = false
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd)
            } catch (er) {}
          } else {
            fs.closeSync(fd)
          }
        }
        return ret
      }

    } else if (fs.futimes) {
      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }
      fs.lutimesSync = function () {}
    }
  }

  function chmodFix (orig) {
    if (!orig) return orig
    return function (target, mode, cb) {
      return orig.call(fs, target, mode, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chmodFixSync (orig) {
    if (!orig) return orig
    return function (target, mode) {
      try {
        return orig.call(fs, target, mode)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }


  function chownFix (orig) {
    if (!orig) return orig
    return function (target, uid, gid, cb) {
      return orig.call(fs, target, uid, gid, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chownFixSync (orig) {
    if (!orig) return orig
    return function (target, uid, gid) {
      try {
        return orig.call(fs, target, uid, gid)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }

  function statFix (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options, cb) {
      if (typeof options === 'function') {
        cb = options
        options = null
      }
      function callback (er, stats) {
        if (stats) {
          if (stats.uid < 0) stats.uid += 0x100000000
          if (stats.gid < 0) stats.gid += 0x100000000
        }
        if (cb) cb.apply(this, arguments)
      }
      return options ? orig.call(fs, target, options, callback)
        : orig.call(fs, target, callback)
    }
  }

  function statFixSync (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options) {
      var stats = options ? orig.call(fs, target, options)
        : orig.call(fs, target)
      if (stats) {
        if (stats.uid < 0) stats.uid += 0x100000000
        if (stats.gid < 0) stats.gid += 0x100000000
      }
      return stats;
    }
  }

  // ENOSYS means that the fs doesn't support the op. Just ignore
  // that, because it doesn't matter.
  //
  // if there's no getuid, or if getuid() is something other
  // than 0, and the error is EINVAL or EPERM, then just ignore
  // it.
  //
  // This specific case is a silent failure in cp, install, tar,
  // and most other unix tools that manage permissions.
  //
  // When running as root, or if other types of errors are
  // encountered, then it's strict.
  function chownErOk (er) {
    if (!er)
      return true

    if (er.code === "ENOSYS")
      return true

    var nonroot = !process.getuid || process.getuid() !== 0
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true
    }

    return false
  }
}


/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.timeout = exports.TimeoutError = void 0;
var async_1 = __webpack_require__(7688);
var isDate_1 = __webpack_require__(4615);
var lift_1 = __webpack_require__(4698);
var innerFrom_1 = __webpack_require__(2018);
var createErrorClass_1 = __webpack_require__(8377);
var OperatorSubscriber_1 = __webpack_require__(1908);
var executeSchedule_1 = __webpack_require__(7725);
exports.TimeoutError = createErrorClass_1.createErrorClass(function (_super) {
    return function TimeoutErrorImpl(info) {
        if (info === void 0) { info = null; }
        _super(this);
        this.message = 'Timeout has occurred';
        this.name = 'TimeoutError';
        this.info = info;
    };
});
function timeout(config, schedulerArg) {
    var _a = (isDate_1.isValidDate(config) ? { first: config } : typeof config === 'number' ? { each: config } : config), first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : async_1.asyncScheduler : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
    if (first == null && each == null) {
        throw new TypeError('No timeout provided.');
    }
    return lift_1.operate(function (source, subscriber) {
        var originalSourceSubscription;
        var timerSubscription;
        var lastValue = null;
        var seen = 0;
        var startTimer = function (delay) {
            timerSubscription = executeSchedule_1.executeSchedule(subscriber, scheduler, function () {
                try {
                    originalSourceSubscription.unsubscribe();
                    innerFrom_1.innerFrom(_with({
                        meta: meta,
                        lastValue: lastValue,
                        seen: seen,
                    })).subscribe(subscriber);
                }
                catch (err) {
                    subscriber.error(err);
                }
            }, delay);
        };
        originalSourceSubscription = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {
            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
            seen++;
            subscriber.next((lastValue = value));
            each > 0 && startTimer(each);
        }, undefined, undefined, function () {
            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
            }
            lastValue = null;
        }));
        !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);
    });
}
exports.timeout = timeout;
function timeoutErrorFactory(info) {
    throw new exports.TimeoutError(info);
}
//# sourceMappingURL=timeout.js.map

/***/ }),

/***/ 9856:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isReadableStreamLike = exports.readableStreamLikeToAsyncGenerator = void 0;
var isFunction_1 = __webpack_require__(8403);
function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, , 9, 10]);
                    _b.label = 2;
                case 2:
                    if (false) // removed by dead control flow
{}
                    return [4, __await(reader.read())];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [3, 5];
                    return [4, __await(void 0)];
                case 4: return [2, _b.sent()];
                case 5: return [4, __await(value)];
                case 6: return [4, _b.sent()];
                case 7:
                    _b.sent();
                    return [3, 2];
                case 8: return [3, 10];
                case 9:
                    reader.releaseLock();
                    return [7];
                case 10: return [2];
            }
        });
    });
}
exports.readableStreamLikeToAsyncGenerator = readableStreamLikeToAsyncGenerator;
function isReadableStreamLike(obj) {
    return isFunction_1.isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
exports.isReadableStreamLike = isReadableStreamLike;
//# sourceMappingURL=isReadableStreamLike.js.map

/***/ }),

/***/ 9865:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _require = __webpack_require__(181),
  Buffer = _require.Buffer;
var _require2 = __webpack_require__(9023),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();

/***/ }),

/***/ 9866:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EmptyError = void 0;
var createErrorClass_1 = __webpack_require__(8377);
exports.EmptyError = createErrorClass_1.createErrorClass(function (_super) {
    return function EmptyErrorImpl() {
        _super(this);
        this.name = 'EmptyError';
        this.message = 'no elements in sequence';
    };
});
//# sourceMappingURL=EmptyError.js.map

/***/ }),

/***/ 9896:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire_require("fs");

/***/ }),

/***/ 9917:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const eq = __webpack_require__(5767)
const neq = __webpack_require__(3221)
const gt = __webpack_require__(8014)
const gte = __webpack_require__(9799)
const lt = __webpack_require__(161)
const lte = __webpack_require__(9730)

const cmp = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a === b

    case '!==':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
}
module.exports = cmp


/***/ }),

/***/ 9922:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fromEvent = void 0;
var innerFrom_1 = __webpack_require__(2018);
var Observable_1 = __webpack_require__(541);
var mergeMap_1 = __webpack_require__(4344);
var isArrayLike_1 = __webpack_require__(9109);
var isFunction_1 = __webpack_require__(8403);
var mapOneOrManyArgs_1 = __webpack_require__(4078);
var nodeEventEmitterMethods = ['addListener', 'removeListener'];
var eventTargetMethods = ['addEventListener', 'removeEventListener'];
var jqueryMethods = ['on', 'off'];
function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction_1.isFunction(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
    }
    var _a = __read(isEventTarget(target)
        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
        :
            isNodeStyleEventEmitter(target)
                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))
                : isJQueryStyleEventEmitter(target)
                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))
                    : [], 2), add = _a[0], remove = _a[1];
    if (!add) {
        if (isArrayLike_1.isArrayLike(target)) {
            return mergeMap_1.mergeMap(function (subTarget) { return fromEvent(subTarget, eventName, options); })(innerFrom_1.innerFrom(target));
        }
    }
    if (!add) {
        throw new TypeError('Invalid event target');
    }
    return new Observable_1.Observable(function (subscriber) {
        var handler = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return subscriber.next(1 < args.length ? args : args[0]);
        };
        add(handler);
        return function () { return remove(handler); };
    });
}
exports.fromEvent = fromEvent;
function toCommonHandlerRegistry(target, eventName) {
    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
}
function isNodeStyleEventEmitter(target) {
    return isFunction_1.isFunction(target.addListener) && isFunction_1.isFunction(target.removeListener);
}
function isJQueryStyleEventEmitter(target) {
    return isFunction_1.isFunction(target.on) && isFunction_1.isFunction(target.off);
}
function isEventTarget(target) {
    return isFunction_1.isFunction(target.addEventListener) && isFunction_1.isFunction(target.removeEventListener);
}
//# sourceMappingURL=fromEvent.js.map

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		id: moduleId,
/******/ 		loaded: false,
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Flag the module as loaded
/******/ 	module.loaded = true;
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/******/ // expose the modules object (__webpack_modules__)
/******/ __webpack_require__.m = __webpack_modules__;
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/create fake namespace object */
/******/ (() => {
/******/ 	var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 	var leafPrototypes;
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 16: return value when it's Promise-like
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = this(value);
/******/ 		if(mode & 8) return value;
/******/ 		if(typeof value === 'object' && value) {
/******/ 			if((mode & 4) && value.__esModule) return value;
/******/ 			if((mode & 16) && typeof value.then === 'function') return value;
/******/ 		}
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		var def = {};
/******/ 		leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 		for(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 			Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 		}
/******/ 		def['default'] = () => (value);
/******/ 		__webpack_require__.d(ns, def);
/******/ 		return ns;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/ensure chunk */
/******/ (() => {
/******/ 	__webpack_require__.f = {};
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = (chunkId) => {
/******/ 		return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 			__webpack_require__.f[key](chunkId, promises);
/******/ 			return promises;
/******/ 		}, []));
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/get javascript chunk filename */
/******/ (() => {
/******/ 	// This function allow to reference async chunks
/******/ 	__webpack_require__.u = (chunkId) => {
/******/ 		// return url for filenames based on template
/******/ 		return "" + chunkId + ".cli-with-packages.js";
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/node module decorator */
/******/ (() => {
/******/ 	__webpack_require__.nmd = (module) => {
/******/ 		module.paths = [];
/******/ 		if (!module.children) module.children = [];
/******/ 		return module;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/import chunk loading */
/******/ (() => {
/******/ 	// no baseURI
/******/ 	
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// [resolve, Promise] = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		792: 0
/******/ 	};
/******/ 	
/******/ 	var installChunk = (data) => {
/******/ 		var {__webpack_esm_ids__, __webpack_esm_modules__, __webpack_esm_runtime__} = data;
/******/ 		// add "modules" to the modules object,
/******/ 		// then flag all "ids" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0;
/******/ 		for(moduleId in __webpack_esm_modules__) {
/******/ 			if(__webpack_require__.o(__webpack_esm_modules__, moduleId)) {
/******/ 				__webpack_require__.m[moduleId] = __webpack_esm_modules__[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(__webpack_esm_runtime__) __webpack_esm_runtime__(__webpack_require__);
/******/ 		for(;i < __webpack_esm_ids__.length; i++) {
/******/ 			chunkId = __webpack_esm_ids__[i];
/******/ 			if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				installedChunks[chunkId][0]();
/******/ 			}
/******/ 			installedChunks[__webpack_esm_ids__[i]] = 0;
/******/ 		}
/******/ 	
/******/ 	}
/******/ 	
/******/ 	__webpack_require__.f.j = (chunkId, promises) => {
/******/ 			// import() chunk loading for javascript
/******/ 			var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 	
/******/ 				// a Promise means "currently loading".
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[1]);
/******/ 				} else {
/******/ 					if(true) { // all chunks have JS
/******/ 						// setup Promise in chunk cache
/******/ 						var promise = import("./" + __webpack_require__.u(chunkId)).then(installChunk, (e) => {
/******/ 							if(installedChunks[chunkId] !== 0) installedChunks[chunkId] = undefined;
/******/ 							throw e;
/******/ 						});
/******/ 						var promise = Promise.race([promise, new Promise((resolve) => (installedChunkData = installedChunks[chunkId] = [resolve]))])
/******/ 						promises.push(installedChunkData[1] = promise);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 	};
/******/ 	
/******/ 	// no prefetching
/******/ 	
/******/ 	// no preloaded
/******/ 	
/******/ 	// no external install chunk
/******/ 	
/******/ 	// no on chunks loaded
/******/ 	// no HMR
/******/ 	
/******/ 	// no HMR manifest
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};

// EXTERNAL MODULE: external "url"
var external_url_ = __webpack_require__(7016);
// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(6928);
// EXTERNAL MODULE: ./node_modules/.pnpm/commander@11.1.0/node_modules/commander/index.js
var commander = __webpack_require__(3045);
;// ./node_modules/.pnpm/commander@11.1.0/node_modules/commander/esm.mjs


// wrapper to provide named exports for ESM.
const {
  program,
  createCommand,
  createArgument,
  createOption,
  CommanderError,
  InvalidArgumentError,
  InvalidOptionArgumentError, // deprecated old name
  Command,
  Argument,
  Option,
  Help
} = commander;

// EXTERNAL MODULE: ./node_modules/.pnpm/chalk@5.6.0/node_modules/chalk/source/index.js + 4 modules
var source = __webpack_require__(3757);
// EXTERNAL MODULE: ./node_modules/.pnpm/gradient-string@3.0.0/node_modules/gradient-string/dist/index.js
var dist = __webpack_require__(4112);
// EXTERNAL MODULE: ./node_modules/.pnpm/boxen@8.0.1/node_modules/boxen/index.js + 4 modules
var node_modules_boxen = __webpack_require__(7243);
// EXTERNAL MODULE: external "fs"
var external_fs_ = __webpack_require__(9896);
// EXTERNAL MODULE: ./dist/utils/helpFormatter.js
var helpFormatter = __webpack_require__(4120);
// EXTERNAL MODULE: ./dist/utils/banner.js
var banner = __webpack_require__(229);
// EXTERNAL MODULE: ./node_modules/.pnpm/inquirer@9.3.7/node_modules/inquirer/lib/index.js + 25 modules
var lib = __webpack_require__(6824);
// EXTERNAL MODULE: ./node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/index.js
var fs_extra_lib = __webpack_require__(7187);
// EXTERNAL MODULE: ./dist/utils/pathResolver.js
var pathResolver = __webpack_require__(3294);
;// ./dist/utils/prompts.js
/**
 * User interaction prompts for Package Installer CLI v3.2.0
 * Handles framework selection and template configuration based on template.json
 */





// Helper functions to read template.json
function getTemplateConfig() {
    const cliDir = (0,pathResolver/* getCliRootPath */.mw)();
    const templatePath = external_path_.join(cliDir, 'template.json');
    if (!fs_extra_lib.existsSync(templatePath)) {
        throw new Error(`template.json not found at: ${templatePath}`);
    }
    return JSON.parse(fs_extra_lib.readFileSync(templatePath, 'utf-8'));
}
function getAvailableFrameworks() {
    const config = getTemplateConfig();
    return Object.keys(config.frameworks);
}
function getFrameworkConfig(framework) {
    const config = getTemplateConfig();
    return config.frameworks[framework];
}
function getFrameworkDescription(framework) {
    const config = getFrameworkConfig(framework);
    return config?.description || 'Modern framework';
}
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
/**
 * Project name prompt with enhanced styling
 */
async function promptProjectName() {
    console.log(source/* default */.Ay.hex('#00d2d3')('\n📝 Project Setup\n'));
    const { projectName } = await lib["default"].prompt([
        {
            type: 'input',
            name: 'projectName',
            message: `${source/* default */.Ay.blue('❯')} Enter your project name:`,
            default: 'my-app',
            validate: (input) => {
                // Allow empty input (will use default)
                if (!input.trim()) {
                    return true;
                }
                if (!/^[a-zA-Z0-9-_\.]+$/.test(input)) {
                    return source/* default */.Ay.red('Project name can only contain letters, numbers, hyphens, underscores, and dots');
                }
                return true;
            },
            transformer: (input) => {
                if (!input.trim()) {
                    return source/* default */.Ay.gray('my-app');
                }
                return source/* default */.Ay.cyan(input);
            }
        }
    ]);
    return projectName.trim();
}
/**
 * Framework selection prompt with enhanced styling
 */
async function promptFrameworkSelection() {
    const frameworks = getAvailableFrameworks();
    console.log(source/* default */.Ay.hex('#00d2d3')('\n🚀 Framework Selection\n'));
    const { framework } = await lib["default"].prompt([
        {
            type: 'list',
            name: 'framework',
            message: `${source/* default */.Ay.blue('❯')} Choose your framework:`,
            choices: frameworks.map(fw => ({
                name: `${source/* default */.Ay.green('●')} ${source/* default */.Ay.bold(capitalize(fw))} ${source/* default */.Ay.gray('- ' + getFrameworkDescription(fw))}`,
                value: fw,
                short: capitalize(fw)
            })),
            pageSize: 12
        }
    ]);
    return framework;
}
/**
 * Language selection prompt - framework specific from template.json
 */
async function promptLanguageSelection(framework) {
    const config = getFrameworkConfig(framework);
    if (!config.languages || config.languages.length <= 1) {
        const defaultLang = config.languages?.[0] || 'javascript';
        console.log(source/* default */.Ay.cyan(`💻 Using ${source/* default */.Ay.bold(defaultLang)} as default language`));
        return defaultLang;
    }
    console.log(source/* default */.Ay.hex('#00d2d3')('\n💻 Language Selection\n'));
    const languageEmojis = {
        javascript: '📜',
        typescript: '🔷',
        python: '🐍',
        rust: '🦀',
        go: '🐹'
    };
    const { language } = await lib["default"].prompt([
        {
            name: 'language',
            type: 'list',
            message: `${source/* default */.Ay.blue('❯')} Choose your language for ${source/* default */.Ay.bold(framework)}:`,
            choices: config.languages.map((lang) => ({
                name: `${languageEmojis[lang] || '📄'} ${source/* default */.Ay.bold(capitalize(lang))}`,
                value: lang,
                short: lang
            })),
            pageSize: 6
        },
    ]);
    return language;
}
/**
 * Template selection with enhanced styling
 */
async function promptTemplateSelection(framework) {
    const config = getFrameworkConfig(framework);
    if (!config || !config.templates) {
        return '';
    }
    if (config.templates.length === 1) {
        console.log(source/* default */.Ay.cyan(`📋 Using ${source/* default */.Ay.bold(config.templates[0])} template`));
        return config.templates[0];
    }
    console.log(source/* default */.Ay.hex('#00d2d3')('\n📋 Template Selection\n'));
    const { template } = await lib["default"].prompt([
        {
            type: 'list',
            name: 'template',
            message: `${source/* default */.Ay.blue('❯')} Choose a template for ${source/* default */.Ay.bold(framework)}:`,
            choices: config.templates.map((template) => ({
                name: `${source/* default */.Ay.green('▸')} ${template.replace(/-/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase())}`,
                value: template,
                short: template
            })),
            pageSize: 8
        }
    ]);
    return template;
}
/**
 * Framework options prompt - handles UI, bundlers, and other options
 */
async function promptFrameworkOptions(framework) {
    const config = getFrameworkConfig(framework);
    if (!config || (!config.ui && !config.options && !config.bundlers)) {
        return {};
    }
    console.log(source/* default */.Ay.hex('#00d2d3')(`\n⚙️  ${capitalize(framework)} Configuration\n`));
    const options = {};
    // 1. UI Library selection (if available) - ALWAYS ASK if UI options exist
    if (config.ui && config.ui.length > 0) {
        const { ui } = await lib["default"].prompt([
            {
                type: 'list',
                name: 'ui',
                message: `${source/* default */.Ay.blue('❯')} Choose a UI library:`,
                choices: [
                    {
                        name: `${source/* default */.Ay.gray('◯')} None - Build your own UI`,
                        value: 'none'
                    },
                    ...config.ui.map((uiLib) => ({
                        name: `${source/* default */.Ay.green('●')} ${capitalize(uiLib)}`,
                        value: uiLib
                    }))
                ],
                pageSize: 8
            }
        ]);
        options.ui = ui === 'none' ? undefined : ui;
    }
    // 2. Tailwind CSS (if available in options) - ALWAYS ASK if tailwind option exists
    if (config.options?.includes('tailwind')) {
        const { tailwind } = await lib["default"].prompt([
            {
                type: 'confirm',
                name: 'tailwind',
                message: `${source/* default */.Ay.blue('❯')} Add ${source/* default */.Ay.blue('Tailwind CSS')} for styling?`,
                default: true
            }
        ]);
        options.tailwind = tailwind;
    }
    // 3. Src directory (only for Next.js) - ALWAYS ASK if src option exists for nextjs
    if (framework === 'nextjs' && config.options?.includes('src')) {
        const { src } = await lib["default"].prompt([
            {
                type: 'confirm',
                name: 'src',
                message: `${source/* default */.Ay.blue('❯')} Use ${source/* default */.Ay.yellow('src/')} directory structure?`,
                default: true
            }
        ]);
        options.src = src;
    }
    // 4. Bundler selection (only for React-based frameworks) - ALWAYS ASK if bundlers exist
    if (config.bundlers && config.bundlers.length > 0) {
        const { bundler } = await lib["default"].prompt([
            {
                type: 'list',
                name: 'bundler',
                message: `${source/* default */.Ay.blue('❯')} Choose a bundler:`,
                choices: config.bundlers.map((bundler) => ({
                    name: `${source/* default */.Ay.blue('▸')} ${capitalize(bundler)}`,
                    value: bundler
                })),
                pageSize: 6
            }
        ]);
        options.bundler = bundler;
    }
    return options;
}
/**
 * Template creation confirmation
 */
async function promptTemplateConfirmation(framework, language, templateName, options) {
    console.log(source/* default */.Ay.hex('#00d2d3')('\n✅ Project Summary\n'));
    console.log(source/* default */.Ay.white('📦 Project Configuration:'));
    console.log(`   Framework: ${source/* default */.Ay.green(framework)}`);
    console.log(`   Language: ${source/* default */.Ay.blue(language)}`);
    if (templateName) {
        console.log(`   Template: ${source/* default */.Ay.yellow(templateName)}`);
    }
    if (options.ui) {
        console.log(`   UI Library: ${source/* default */.Ay.magenta(options.ui)}`);
    }
    if (options.tailwind) {
        console.log(`   Styling: ${source/* default */.Ay.cyan('Tailwind CSS')}`);
    }
    if (options.src) {
        console.log(`   Structure: ${source/* default */.Ay.yellow('src/ directory')}`);
    }
    if (options.bundler) {
        console.log(`   Bundler: ${source/* default */.Ay.blue(options.bundler)}`);
    }
    const { confirm } = await lib["default"].prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: `${source/* default */.Ay.blue('❯')} Create project with these settings?`,
            default: true
        }
    ]);
    return confirm;
}
/**
 * Features selection prompt for post-creation
 */
async function promptFeatureSelection() {
    console.log(source/* default */.Ay.hex('#00d2d3')('\n🚀 Feature Enhancement\n'));
    const { addFeatures } = await lib["default"].prompt([
        {
            type: 'confirm',
            name: 'addFeatures',
            message: `${source/* default */.Ay.blue('❯')} Would you like to add features to your project?`,
            default: true
        }
    ]);
    if (!addFeatures) {
        return [];
    }
    // Get available feature categories from features.json
    const featuresPath = (0,pathResolver/* getFeaturesJsonPath */.zl)();
    if (!fs_extra_lib.existsSync(featuresPath)) {
        console.log(source/* default */.Ay.yellow('⚠️  Features configuration not found'));
        return [];
    }
    const featuresConfig = JSON.parse(fs_extra_lib.readFileSync(featuresPath, 'utf-8'));
    const categories = Object.keys(featuresConfig);
    const { selectedCategories } = await lib["default"].prompt([
        {
            type: 'checkbox',
            name: 'selectedCategories',
            message: `${source/* default */.Ay.blue('❯')} Select feature categories to add:`,
            choices: categories.map(category => ({
                name: `${source/* default */.Ay.green('□')} ${capitalize(category)}`,
                value: category,
                checked: false
            })),
            pageSize: 10
        }
    ]);
    return selectedCategories;
}
/**
 * Specific feature provider selection
 */
async function promptFeatureProvider(category, framework) {
    const featuresPath = getFeaturesJsonPath();
    const featuresConfig = JSON.parse(fs.readFileSync(featuresPath, 'utf-8'));
    if (!featuresConfig[category]) {
        return null;
    }
    const providers = Object.keys(featuresConfig[category]);
    if (providers.length === 0) {
        console.log(chalk.yellow(`⚠️  No providers found for ${category}`));
        return null;
    }
    if (providers.length === 1) {
        console.log(chalk.cyan(`🔧 Using ${chalk.bold(providers[0])} for ${category}`));
        return providers[0];
    }
    const { provider } = await inquirer.prompt([
        {
            type: 'list',
            name: 'provider',
            message: `${chalk.blue('❯')} Choose a ${category} provider:`,
            choices: providers.map(provider => ({
                name: `${chalk.green('▸')} ${capitalize(provider)}`,
                value: provider,
                short: provider
            })),
            pageSize: 8
        }
    ]);
    return provider;
}
/**
 * Helper functions to check framework capabilities
 */
function hasFrameworkOptions(framework) {
    const config = getFrameworkConfig(framework);
    return !!(config?.options && config.options.length > 0);
}
function hasUIOptions(framework) {
    const config = getFrameworkConfig(framework);
    return !!(config?.ui && config.ui.length > 0);
}
function hasBundlerOptions(framework) {
    const config = getFrameworkConfig(framework);
    return !!(config?.bundlers && config.bundlers.length > 0);
}
function hasTemplateSelection(framework) {
    const config = getFrameworkConfig(framework);
    return !!(config?.templates && config.templates.length > 0);
}
function shouldShowTemplates(framework) {
    const config = getFrameworkConfig(framework);
    // Show templates ONLY for frameworks that have templates but NO options/ui/bundlers
    // Frameworks WITH options should generate template names based on user choices
    const hasOptions = !!(config?.options || config?.ui || config?.bundlers);
    const hasTemplates = !!(config?.templates && config.templates.length > 0);
    return hasTemplates && !hasOptions;
}

;// ./dist/utils/templateResolver.js
/**
 * Template path resolution utilities for Package Installer CLI v3.2.0
 * Handles template name generation and path resolution based on template.json
 */



// Helper functions to read template.json
function templateResolver_getTemplateConfig() {
    const cliDir = (0,pathResolver/* getCliRootPath */.mw)();
    const templatePath = external_path_.join(cliDir, 'template.json');
    if (!fs_extra_lib.existsSync(templatePath)) {
        throw new Error(`template.json not found at: ${templatePath}`);
    }
    return JSON.parse(fs_extra_lib.readFileSync(templatePath, 'utf-8'));
}
function templateResolver_getFrameworkConfig(framework) {
    const config = templateResolver_getTemplateConfig();
    return config.frameworks[framework];
}
// Export for use in other modules

/**
 * Generate template name based on framework options - use exact template names from template.json
 * Only generates for frameworks that HAVE options
 */
function generateTemplateName(framework, options) {
    const config = templateResolver_getFrameworkConfig(framework);
    // Only generate template names for frameworks that have options
    if (!config?.options && !config?.ui && !config?.bundlers) {
        return '';
    }
    // If framework has predefined templates, select the matching one based on options
    if (config.templates && config.templates.length > 0) {
        // Build template name based on selected options
        const parts = [];
        // Handle src option (only for nextjs and reactjs)
        if ((framework === 'nextjs' || framework === 'reactjs') && config.options?.includes('src')) {
            if (options.src) {
                parts.push('src');
            }
            else {
                parts.push('no-src');
            }
        }
        // Handle UI library - only add if actually selected (not "none")
        // When UI is "none", templates simply omit the UI part from their names
        if (config.ui && config.ui.length > 0) {
            if (options.ui && options.ui !== 'none') {
                parts.push(options.ui);
            }
            // For "none" selection, don't add any UI part to the template name
        }
        // Handle tailwind option
        if (config.options?.includes('tailwind')) {
            if (options.tailwind) {
                parts.push('tailwind');
            }
            else {
                parts.push('no-tailwind');
            }
        }
        const generatedName = parts.join('-') + '-template';
        // Find exact match in templates array
        const exactMatch = config.templates.find((template) => template === generatedName);
        if (exactMatch) {
            return exactMatch;
        }
        // If no exact match, return the first template as fallback
        return config.templates[0];
    }
    return '';
}
/**
 * Resolve template directory path based on framework and template name
 */
function resolveTemplatePath(projectInfo) {
    const { framework, language, templateName } = projectInfo;
    const templatesRoot = (0,pathResolver/* getTemplatesPath */.vD)();
    // Handle combination templates (like reactjs+expressjs+shadcn)
    if (framework.includes('+')) {
        const frameworkDir = framework.replace(/\+/g, '-');
        const combinationPath = external_path_.join(templatesRoot, frameworkDir);
        if (fs_extra_lib.existsSync(combinationPath)) {
            // Check for language subdirectory
            if (language) {
                const langPath = external_path_.join(combinationPath, language);
                if (fs_extra_lib.existsSync(langPath)) {
                    // Check for specific template
                    if (templateName) {
                        const templatePath = external_path_.join(langPath, templateName);
                        if (fs_extra_lib.existsSync(templatePath)) {
                            return templatePath;
                        }
                    }
                    return langPath;
                }
            }
            return combinationPath;
        }
    }
    // For frameworks with specific template names
    if (templateName) {
        // Check if language subdirectory exists and is required
        const languageSubdirPath = external_path_.join(templatesRoot, framework, language || 'typescript');
        if (fs_extra_lib.existsSync(languageSubdirPath)) {
            const templatePath = external_path_.join(languageSubdirPath, templateName);
            if (fs_extra_lib.existsSync(templatePath)) {
                return templatePath;
            }
        }
        // Otherwise, use direct framework directory with template name
        const directTemplatePath = external_path_.join(templatesRoot, framework, templateName);
        if (fs_extra_lib.existsSync(directTemplatePath)) {
            return directTemplatePath;
        }
    }
    // For frameworks with options but no specific template name, use language subdirectory if available
    if (language) {
        const languageSubdirPath = external_path_.join(templatesRoot, framework, language);
        if (fs_extra_lib.existsSync(languageSubdirPath)) {
            return languageSubdirPath;
        }
    }
    // Default: use the framework directory directly
    return external_path_.join(templatesRoot, framework);
}
/**
 * Check if template directory exists
 */
function templateExists(templatePath) {
    return fs_extra_lib.existsSync(templatePath) && fs_extra_lib.statSync(templatePath).isDirectory();
}
/**
 * Get all available templates for a framework
 */
function getFrameworkTemplates(framework) {
    const templatesRoot = getTemplatesPath();
    const frameworkPath = path.join(templatesRoot, framework);
    if (!fs.existsSync(frameworkPath)) {
        return [];
    }
    return fs.readdirSync(frameworkPath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name);
}

// EXTERNAL MODULE: external "child_process"
var external_child_process_ = __webpack_require__(5317);
// EXTERNAL MODULE: external "util"
var external_util_ = __webpack_require__(9023);
// EXTERNAL MODULE: ./node_modules/.pnpm/ora@8.2.0/node_modules/ora/index.js + 11 modules
var node_modules_ora = __webpack_require__(5449);
;// ./dist/utils/templateCreator.js
/**
 * Template creation utilities for Package Installer CLI v3.2.0
 * Enhanced with features integration support
 */






const execAsync = (0,external_util_.promisify)(external_child_process_.exec);
/**
 * Create a project from a template with progress indicators and error handling
 */
async function createProjectFromTemplate(options) {
    const { projectName, templatePath } = options;
    const spinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#10ac84')('Creating project structure...')).start();
    try {
        // Handle "." as project name - create in current directory
        let projectPath;
        let actualProjectName;
        if (projectName === '.') {
            projectPath = process.cwd();
            actualProjectName = external_path_.basename(process.cwd());
            // Check if current directory is empty
            const currentDirContents = await fs_extra_lib.readdir(projectPath);
            if (currentDirContents.length > 0) {
                const hasImportantFiles = currentDirContents.some(file => !file.startsWith('.') && file !== 'node_modules');
                if (hasImportantFiles) {
                    spinner.fail(source/* default */.Ay.red('Current directory is not empty'));
                    throw new Error('Current directory is not empty. Please use an empty directory or specify a different project name.');
                }
            }
        }
        else {
            projectPath = external_path_.resolve(process.cwd(), projectName);
            actualProjectName = projectName;
            // Check if directory already exists
            if (await fs_extra_lib.pathExists(projectPath)) {
                spinner.fail(source/* default */.Ay.red(`Directory ${projectName} already exists`));
                throw new Error(`Directory ${projectName} already exists`);
            }
        }
        // Validate template path
        if (!await fs_extra_lib.pathExists(templatePath)) {
            spinner.fail(source/* default */.Ay.red(`Template not found at: ${templatePath}`));
            throw new Error(`Template not found at: ${templatePath}`);
        }
        // Check template contents
        const templateContents = await fs_extra_lib.readdir(templatePath);
        if (templateContents.length === 0) {
            spinner.fail(source/* default */.Ay.red('Template directory is empty'));
            throw new Error('Template directory is empty');
        }
        // Copy template files with filtering
        spinner.text = source/* default */.Ay.hex('#00d2d3')('Copying template files...');
        if (projectName === '.') {
            // Copy files directly to current directory
            await copyTemplateFilesToCurrentDir(templatePath, projectPath);
        }
        else {
            // Create directory and copy files
            await fs_extra_lib.ensureDir(projectPath);
            await copyTemplateFiles(templatePath, projectPath);
        }
        spinner.succeed(source/* default */.Ay.green('✅ Project structure created'));
        // Process template files (replace placeholders, etc.)
        await processTemplateFiles(projectPath, actualProjectName);
        // Install dependencies if any configuration files exist
        await installDependenciesForCreate(projectPath);
        return projectPath;
    }
    catch (error) {
        spinner.fail(source/* default */.Ay.red('❌ Failed to create project'));
        throw error;
    }
}
/**
 * Copy template files with intelligent filtering and flattening
 */
async function copyTemplateFiles(templatePath, projectPath) {
    // Check if template has a single subdirectory that should be flattened
    const templateContents = await fs_extra_lib.readdir(templatePath);
    const nonSystemFiles = templateContents.filter(item => !item.startsWith('.') &&
        item !== 'node_modules' &&
        item !== 'dist' &&
        item !== 'build');
    // If template has only one directory, copy its contents instead of the directory itself
    if (nonSystemFiles.length === 1) {
        const singleItem = nonSystemFiles[0];
        const singleItemPath = external_path_.join(templatePath, singleItem);
        const stats = await fs_extra_lib.stat(singleItemPath);
        if (stats.isDirectory()) {
            // Copy contents of the single directory
            await fs_extra_lib.copy(singleItemPath, projectPath, {
                filter: (src, dest) => {
                    const relativePath = external_path_.relative(singleItemPath, src);
                    // Skip common directories that shouldn't be copied
                    if (relativePath.includes('node_modules') ||
                        relativePath.includes('.git') ||
                        relativePath.includes('dist') ||
                        relativePath.includes('build') ||
                        relativePath.includes('.next')) {
                        return false;
                    }
                    // Skip system files
                    const fileName = external_path_.basename(src);
                    if (fileName === '.DS_Store' ||
                        fileName === 'Thumbs.db' ||
                        fileName === '.gitkeep') {
                        return false;
                    }
                    return true;
                }
            });
            return;
        }
    }
    // Default behavior: copy entire template directory
    await fs_extra_lib.copy(templatePath, projectPath, {
        filter: (src, dest) => {
            const relativePath = external_path_.relative(templatePath, src);
            // Skip common directories that shouldn't be copied
            if (relativePath.includes('node_modules') ||
                relativePath.includes('.git') ||
                relativePath.includes('dist') ||
                relativePath.includes('build') ||
                relativePath.includes('.next')) {
                return false;
            }
            // Skip system files
            const fileName = external_path_.basename(src);
            if (fileName === '.DS_Store' ||
                fileName === 'Thumbs.db' ||
                fileName === '.gitkeep') {
                return false;
            }
            return true;
        }
    });
}
/**
 * Copy template files to current directory (for "." project name)
 */
async function copyTemplateFilesToCurrentDir(templatePath, projectPath) {
    const templateContents = await fs_extra_lib.readdir(templatePath);
    for (const item of templateContents) {
        const sourcePath = external_path_.join(templatePath, item);
        const destPath = external_path_.join(projectPath, item);
        const stats = await fs_extra_lib.stat(sourcePath);
        if (stats.isDirectory()) {
            // Skip common directories that shouldn't be copied
            if (item === 'node_modules' || item === '.git' ||
                item === 'dist' || item === 'build' || item === '.next') {
                continue;
            }
            await fs_extra_lib.copy(sourcePath, destPath, {
                filter: (src) => {
                    const fileName = external_path_.basename(src);
                    return fileName !== '.DS_Store' && fileName !== 'Thumbs.db' && fileName !== '.gitkeep';
                }
            });
        }
        else {
            // Skip system files
            if (item === '.DS_Store' || item === 'Thumbs.db' || item === '.gitkeep') {
                continue;
            }
            await fs_extra_lib.copy(sourcePath, destPath);
        }
    }
}
/**
 * Process template files to replace placeholders and customize content
 */
async function processTemplateFiles(projectPath, projectName) {
    try {
        // Process package.json if it exists
        const packageJsonPath = external_path_.join(projectPath, 'package.json');
        if (await fs_extra_lib.pathExists(packageJsonPath)) {
            const packageJson = await fs_extra_lib.readJson(packageJsonPath);
            // Update project name
            packageJson.name = projectName;
            // Update description if it's generic
            if (packageJson.description === 'Template project' ||
                packageJson.description === 'Generated from template') {
                packageJson.description = `${projectName} - Generated by Package Installer CLI`;
            }
            await fs_extra_lib.writeJson(packageJsonPath, packageJson, { spaces: 2 });
        }
        // Process README.md if it exists
        const readmePath = external_path_.join(projectPath, 'README.md');
        if (await fs_extra_lib.pathExists(readmePath)) {
            let readmeContent = await fs_extra_lib.readFile(readmePath, 'utf-8');
            // Replace common placeholders
            readmeContent = readmeContent
                .replace(/{{PROJECT_NAME}}/g, projectName)
                .replace(/{{project-name}}/g, projectName.toLowerCase())
                .replace(/Template Project/g, projectName)
                .replace(/template-project/g, projectName.toLowerCase().replace(/\s+/g, '-'));
            await fs_extra_lib.writeFile(readmePath, readmeContent, 'utf-8');
        }
        // Process other configuration files
        await processConfigurationFiles(projectPath, projectName);
    }
    catch (error) {
        console.warn(source/* default */.Ay.yellow('⚠️  Could not process some template files'));
    }
}
/**
 * Process various configuration files
 */
async function processConfigurationFiles(projectPath, projectName) {
    // Process docker-compose.yml
    const dockerComposePath = external_path_.join(projectPath, 'docker-compose.yml');
    if (await fs_extra_lib.pathExists(dockerComposePath)) {
        let content = await fs_extra_lib.readFile(dockerComposePath, 'utf-8');
        content = content
            .replace(/template-project/g, projectName.toLowerCase().replace(/\s+/g, '-'))
            .replace(/{{PROJECT_NAME}}/g, projectName);
        await fs_extra_lib.writeFile(dockerComposePath, content, 'utf-8');
    }
    // Process .env.example
    const envExamplePath = external_path_.join(projectPath, '.env.example');
    const envExampleAltPath = external_path_.join(projectPath, 'env.example');
    const envExampleFile = await fs_extra_lib.pathExists(envExamplePath) ? envExamplePath :
        await fs_extra_lib.pathExists(envExampleAltPath) ? envExampleAltPath : null;
    if (envExampleFile) {
        let content = await fs_extra_lib.readFile(envExampleFile, 'utf-8');
        content = content
            .replace(/{{PROJECT_NAME}}/g, projectName)
            .replace(/template-project/g, projectName.toLowerCase().replace(/\s+/g, '-'));
        await fs_extra_lib.writeFile(envExampleFile, content, 'utf-8');
        // Create .env file from .env.example
        const envPath = external_path_.join(projectPath, '.env');
        if (!await fs_extra_lib.pathExists(envPath)) {
            await fs_extra_lib.copy(envExampleFile, envPath);
        }
    }
}
/**
 * Install project dependencies with progress indicators
 * Enhanced with better error handling and fallback options
 */
async function installDependenciesForCreate(projectPath) {
    try {
        // Check if this is a Node.js project
        const packageJsonPath = external_path_.join(projectPath, 'package.json');
        const hasPackageJson = await fs_extra_lib.pathExists(packageJsonPath);
        if (hasPackageJson) {
            console.log(source/* default */.Ay.hex('#10ac84')('📦 Installing dependencies...'));
            const { installProjectDependencies } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2820));
            const projectName = external_path_.basename(projectPath);
            await installProjectDependencies(projectPath, projectName, false); // Don't install MCP server for basic projects
            console.log(source/* default */.Ay.green('✅ Dependencies installed successfully'));
        }
        else {
            console.log(source/* default */.Ay.hex('#95afc0')('📦 No package.json found, skipping dependency installation'));
        }
        // Initialize git repository after dependencies are installed
        await initializeGitRepositoryForCreate(projectPath);
    }
    catch (installError) {
        console.log(source/* default */.Ay.yellow(`⚠️  Auto-installation failed: ${installError.message}`));
        console.log(source/* default */.Ay.yellow('You can install dependencies manually:'));
        try {
            const packageJsonPath = external_path_.join(projectPath, 'package.json');
            if (await fs_extra_lib.pathExists(packageJsonPath)) {
                console.log(source/* default */.Ay.hex('#00d2d3')(`  cd ${external_path_.basename(projectPath)}`));
                console.log(source/* default */.Ay.hex('#00d2d3')('  pnpm install'));
                console.log(source/* default */.Ay.hex('#95afc0')('  (or npm install / yarn install)'));
            }
            // Check for other dependency files
            const cargoPath = external_path_.join(projectPath, 'Cargo.toml');
            if (await fs_extra_lib.pathExists(cargoPath)) {
                console.log(source/* default */.Ay.hex('#ff6b6b')(`  cd ${external_path_.basename(projectPath)}`));
                console.log(source/* default */.Ay.hex('#ff6b6b')('  cargo build'));
            }
            const requirementsPath = external_path_.join(projectPath, 'requirements.txt');
            if (await fs_extra_lib.pathExists(requirementsPath)) {
                console.log(source/* default */.Ay.hex('#9c88ff')(`  cd ${external_path_.basename(projectPath)}`));
                console.log(source/* default */.Ay.hex('#9c88ff')('  pip install -r requirements.txt'));
            }
        }
        catch (error) {
            console.log(source/* default */.Ay.gray('💡 Install dependencies manually:'));
            console.log(source/* default */.Ay.gray(`   cd ${external_path_.basename(projectPath)}`));
            console.log(source/* default */.Ay.gray('   npm install (or pnpm install/yarn)'));
        }
        // Try to initialize git even if dependencies failed
        try {
            await initializeGitRepositoryForCreate(projectPath);
        }
        catch (gitError) {
            console.log(source/* default */.Ay.yellow('⚠️  Could not initialize git repository'));
        }
    }
}
/**
 * Initialize git repository with fallback commands and better error handling
 */
async function initializeGitRepositoryForCreate(projectPath) {
    const gitSpinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#00d2d3')('🔧 Initializing git repository...')).start();
    try {
        // Check if git is already initialized
        const gitDir = external_path_.join(projectPath, '.git');
        if (await fs_extra_lib.pathExists(gitDir)) {
            gitSpinner.info(source/* default */.Ay.hex('#95afc0')('Git repository already initialized'));
            return;
        }
        // Try to initialize git repository using MCP server commands first
        try {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Initializing git with ginit...');
            await execAsync('ginit', { cwd: projectPath });
        }
        catch {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Initializing git with git init...');
            await execAsync('git init', { cwd: projectPath });
        }
        // Add all files to git
        try {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Adding files with gadd...');
            await execAsync('gadd', { cwd: projectPath });
        }
        catch {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Adding files with git add...');
            await execAsync('git add .', { cwd: projectPath });
        }
        // Make initial commit
        try {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Creating initial commit with gcommit...');
            await execAsync('gcommit "Initial commit from Package Installer CLI v3.2.0"', { cwd: projectPath });
        }
        catch {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Creating initial commit with git commit...');
            await execAsync('git commit -m "Initial commit from Package Installer CLI v3.2.0"', { cwd: projectPath });
        }
        gitSpinner.succeed(source/* default */.Ay.green('✅ Git repository initialized with initial commit'));
    }
    catch (error) {
        gitSpinner.warn(source/* default */.Ay.yellow('⚠️  Could not initialize git repository automatically'));
        console.log(source/* default */.Ay.hex('#95afc0')('💡 You can initialize git manually:'));
        console.log(source/* default */.Ay.hex('#95afc0')(`   cd ${external_path_.basename(projectPath)}`));
        console.log(source/* default */.Ay.hex('#95afc0')('   git init'));
        console.log(source/* default */.Ay.hex('#95afc0')('   git add .'));
        console.log(source/* default */.Ay.hex('#95afc0')('   git commit -m "Initial commit"'));
    }
}
/**
 * Validate template structure before creation
 */
async function validateTemplate(templatePath) {
    const issues = [];
    const suggestions = [];
    try {
        // Check if template directory exists
        if (!await fs.pathExists(templatePath)) {
            issues.push('Template directory does not exist');
            return { isValid: false, issues, suggestions };
        }
        // Check if template has content
        const items = await fs.readdir(templatePath);
        if (items.length === 0) {
            issues.push('Template directory is empty');
        }
        // Check for common files
        const packageJsonPath = path.join(templatePath, 'package.json');
        const readmePath = path.join(templatePath, 'README.md');
        const gitignorePath = path.join(templatePath, '.gitignore');
        if (await fs.pathExists(packageJsonPath)) {
            suggestions.push('Template includes package.json - dependencies will be installed');
        }
        if (await fs.pathExists(readmePath)) {
            suggestions.push('Template includes README.md - will be customized for your project');
        }
        if (!await fs.pathExists(gitignorePath)) {
            suggestions.push('Consider adding a .gitignore file to the template');
        }
        // Check for node_modules or other unwanted directories
        const unwantedDirs = ['node_modules', '.git', 'dist', 'build'];
        for (const dir of unwantedDirs) {
            const dirPath = path.join(templatePath, dir);
            if (await fs.pathExists(dirPath)) {
                issues.push(`Template contains unwanted directory: ${dir}`);
            }
        }
        return {
            isValid: issues.length === 0,
            issues,
            suggestions
        };
    }
    catch (error) {
        issues.push(`Error validating template: ${error}`);
        return { isValid: false, issues, suggestions };
    }
}
/**
 * Get template size and file count for caching decisions
 */
async function getTemplateStats(templatePath) {
    let fileCount = 0;
    let totalSize = 0;
    const directories = [];
    async function scanDirectory(dirPath) {
        try {
            const items = await fs.readdir(dirPath, { withFileTypes: true });
            for (const item of items) {
                const fullPath = path.join(dirPath, item.name);
                if (item.isDirectory()) {
                    // Skip unwanted directories
                    if (!['node_modules', '.git', 'dist', 'build'].includes(item.name)) {
                        directories.push(path.relative(templatePath, fullPath));
                        await scanDirectory(fullPath);
                    }
                }
                else if (item.isFile()) {
                    fileCount++;
                    try {
                        const stats = await fs.stat(fullPath);
                        totalSize += stats.size;
                    }
                    catch (error) {
                        // Skip files that can't be read
                    }
                }
            }
        }
        catch (error) {
            // Skip directories that can't be read
        }
    }
    await scanDirectory(templatePath);
    return {
        fileCount,
        totalSize,
        directories: [...new Set(directories)].sort()
    };
}

// EXTERNAL MODULE: ./dist/utils/cacheManager.js
var utils_cacheManager = __webpack_require__(342);
// EXTERNAL MODULE: ./dist/utils/cacheUtils.js + 1 modules
var cacheUtils = __webpack_require__(3172);
;// ./dist/commands/create.js
/**
 * Create command - Creates a new project from templates with comprehensive prompts
 */









/**
 * Display help for create command
 */
function showCreateHelp() {
    const helpConfig = {
        commandName: 'Create',
        emoji: '🚀',
        description: 'Create a new project from our curated collection of modern templates.\nChoose from React, Next.js, Express, Nest.js, Rust, and more!',
        usage: [
            'create [project-name] [options]',
            'create [options]'
        ],
        options: [
            { flag: '--show-cache', description: 'Show cached preferences' },
            { flag: '--clear-cache', description: 'Clear cached preferences' }
        ],
        examples: [
            { command: 'create my-awesome-app', description: 'Create with specific name' },
            { command: 'create', description: 'Interactive mode - will prompt for name' },
            { command: 'create --show-cache', description: 'Show cached preferences' },
            { command: 'create --clear-cache', description: 'Clear cached preferences' }
        ],
        additionalSections: [
            {
                title: 'Smart Caching',
                items: [
                    'Remembers your preferences from previous sessions',
                    'Suggests framework-specific project names',
                    'Shows project count and usage statistics'
                ]
            },
            {
                title: 'Available Templates',
                items: [
                    'React (Vite) - JavaScript/TypeScript variants',
                    'Next.js - App Router with multiple configurations',
                    'Express - RESTful APIs with authentication',
                    'Nest.js - Enterprise-grade Node.js framework',
                    'Angular - Modern Angular applications',
                    'Vue.js - Progressive Vue.js applications',
                    'Rust - Systems programming templates',
                    'Django - Python web framework',
                    'Flask - Lightweight Python web apps',
                    'Go - Fast and efficient web services',
                    'React-Native - Mobile apps for iOS and Android',
                    'Combination Templates - reactjs+express+shadcn,reactjs=nestjs+shadcn'
                ]
            }
        ],
        tips: [
            'Use interactive mode for guided project creation',
            'Templates include best practices and modern tooling',
            'All templates support both JavaScript and TypeScript'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
/**
 * Main create project function with comprehensive prompt system
 */
async function createProject(providedName, options) {
    const startTime = Date.now();
    const cacheManager = new cacheUtils/* CacheManager */.Go();
    // Check for special flags
    if (providedName === '--help' || providedName === '-h' || options?.help || options?.['--help'] || options?.['-h']) {
        showCreateHelp();
        return;
    }
    try {
        // Display command banner
        (0,banner/* displayCommandBanner */.kn)('Create', 'Create stunning web applications with integrated templates and features');
        console.log('\n' + source/* default */.Ay.hex('#10ac84')('🚀 Welcome to Package Installer CLI!'));
        console.log(source/* default */.Ay.hex('#95afc0')('Let\'s create something amazing together...'));
        // Step 1: Get project name (prompt if not provided)
        let projectName = providedName ? providedName.trim() : '';
        if (!projectName) {
            projectName = await promptProjectName();
            if (projectName === '.') {
                projectName = external_path_.basename(process.cwd());
                console.log(source/* default */.Ay.cyan(`\n✅ Using current directory name: ${source/* default */.Ay.bold(projectName)}`));
            }
            else {
                console.log(source/* default */.Ay.cyan(`\n✅ Using project name: ${source/* default */.Ay.bold(projectName)}`));
            }
        }
        else if (projectName === '.') {
            projectName = external_path_.basename(process.cwd());
            console.log(source/* default */.Ay.cyan(`\n✅ Using current directory name: ${source/* default */.Ay.bold(projectName)}`));
        }
        // Step 2: Framework selection
        const selectedFramework = await promptFrameworkSelection();
        console.log(`\n${source/* default */.Ay.green('✨ Great choice!')} Let's configure your ${source/* default */.Ay.bold(selectedFramework)} project...`);
        // Step 3: Language selection (framework-specific from template.json)
        const selectedLanguage = await promptLanguageSelection(selectedFramework);
        // Step 4: Framework-specific options (UI, Tailwind, bundlers, etc.)
        let options = {};
        if (hasFrameworkOptions(selectedFramework) || hasUIOptions(selectedFramework) || hasBundlerOptions(selectedFramework)) {
            options = await promptFrameworkOptions(selectedFramework);
        }
        // Step 5: Template selection and generation
        let templateName = '';
        if (shouldShowTemplates(selectedFramework)) {
            // For frameworks WITHOUT options - show template selection list
            templateName = await promptTemplateSelection(selectedFramework);
        }
        else if (hasFrameworkOptions(selectedFramework) || hasUIOptions(selectedFramework) || hasBundlerOptions(selectedFramework)) {
            // For frameworks WITH options - generate template name from user choices
            templateName = generateTemplateName(selectedFramework, options);
            if (!templateName) {
                console.log(source/* default */.Ay.yellow(`⚠️  Could not generate template name for ${selectedFramework}`));
                // Fallback to first available template
                const config = templateResolver_getFrameworkConfig(selectedFramework);
                if (config?.templates && config.templates.length > 0) {
                    templateName = config.templates[0];
                }
            }
        }
        // Step 6: Confirmation before creating project
        const confirmed = await promptTemplateConfirmation(selectedFramework, selectedLanguage, templateName, options);
        if (!confirmed) {
            console.log(source/* default */.Ay.yellow('\n❌ Project creation cancelled.'));
            return;
        }
        // Step 7: Prepare project info
        const projectInfo = {
            framework: selectedFramework,
            language: selectedLanguage,
            templateName,
            options
        };
        // Step 8: Resolve template path
        const templatePath = resolveTemplatePath(projectInfo);
        console.log(source/* default */.Ay.hex('#00d2d3')(`\n🔨 Creating your project...\n`));
        console.log(source/* default */.Ay.blue(`📁 Using template: ${templatePath}`));
        // Step 9: Check if template exists
        if (!templateExists(templatePath)) {
            console.log(source/* default */.Ay.red(`❌ Template not found at: ${templatePath}`));
            console.log(source/* default */.Ay.yellow('📋 Please check your template configuration'));
            return;
        }
        // Step 10: Create project from template
        const projectPath = await createProjectFromTemplate({
            projectName,
            framework: selectedFramework,
            language: selectedLanguage,
            templateName,
            templatePath,
            options
        });
        // Step 11: Install dependencies
        await installDependenciesForCreate(projectPath);
        // Step 11.5: Cache template usage and project data
        try {
            await (0,utils_cacheManager/* updateTemplateUsage */.T9)(templateName || selectedFramework, selectedFramework, selectedLanguage);
            const templateFiles = await (0,utils_cacheManager/* getCachedTemplateFiles */.e$)(templateName || selectedFramework);
            await (0,utils_cacheManager/* cacheTemplateFiles */.mp)(templateName || selectedFramework, templatePath, templateFiles || {});
            await (0,utils_cacheManager/* cacheProjectData */.aF)(projectPath, projectName, selectedLanguage);
        }
        catch (error) {
            console.warn(source/* default */.Ay.yellow('⚠️  Could not cache project data'));
        }
        // Step 12: Add features if requested
        const selectedFeatures = await promptFeatureSelection();
        if (selectedFeatures.length > 0) {
            console.log(source/* default */.Ay.hex('#00d2d3')('\n🚀 Adding Features...\n'));
            // Import the add command dynamically to avoid circular imports
            const { addCommand } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2191));
            for (const category of selectedFeatures) {
                try {
                    console.log(source/* default */.Ay.cyan(`🔧 Adding ${category} feature...`));
                    // Use the add command directly with the detected framework
                    await addCommand(category, undefined, {
                        framework: selectedFramework,
                        projectPath: projectPath,
                        list: false,
                        verbose: false
                    });
                    console.log(source/* default */.Ay.green(`✅ Successfully added ${category} feature`));
                }
                catch (error) {
                    console.log(source/* default */.Ay.yellow(`⚠️  Failed to add ${category} feature, skipping...`));
                }
            }
        }
        // Step 13: Update cache and history
        await cacheManager.addProjectToHistory({
            name: projectName,
            path: projectPath,
            framework: selectedFramework,
            language: selectedLanguage,
            features: selectedFeatures,
            createdAt: new Date().toISOString()
        });
        // Track command completion
        const duration = Date.now() - startTime;
        await cacheManager.addCommandToHistory({
            command: 'create',
            args: [projectName, selectedFramework, selectedLanguage],
            projectPath: projectPath,
            success: true,
            duration
        });
        // Success message
        console.log(source/* default */.Ay.hex('#00d2d3')('\n🎉 Project created successfully!\n'));
        console.log(source/* default */.Ay.white('📦 Project Details:'));
        console.log(`   ${source/* default */.Ay.gray('Path:')} ${source/* default */.Ay.cyan(projectPath)}`);
        console.log(`   ${source/* default */.Ay.gray('Framework:')} ${source/* default */.Ay.green(selectedFramework)}`);
        console.log(`   ${source/* default */.Ay.gray('Language:')} ${source/* default */.Ay.blue(selectedLanguage)}`);
        if (templateName) {
            console.log(`   ${source/* default */.Ay.gray('Template:')} ${source/* default */.Ay.yellow(templateName)}`);
        }
        if (selectedFeatures.length > 0) {
            console.log(`   ${source/* default */.Ay.gray('Features:')} ${source/* default */.Ay.magenta(selectedFeatures.join(', '))}`);
        }
        console.log(`\n${source/* default */.Ay.hex('#95afc0')('Navigate to your project:')} ${source/* default */.Ay.bold(providedName === '.' ? 'Already in project directory!' : `cd ${projectName}`)}`);
    }
    catch (error) {
        // Track command failure
        const duration = Date.now() - startTime;
        await cacheManager.addCommandToHistory({
            command: 'create',
            args: providedName ? [providedName] : [],
            projectPath: process.cwd(),
            success: false,
            duration
        });
        console.log(source/* default */.Ay.red('\n❌ Error creating project:'));
        console.log(source/* default */.Ay.red(error instanceof Error ? error.message : String(error)));
        process.exit(1);
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/semver@7.7.2/node_modules/semver/index.js
var node_modules_semver = __webpack_require__(8287);
;// external "https"
const external_https_namespaceObject = __WEBPACK_EXTERNAL_createRequire_require("https");
// EXTERNAL MODULE: ./dist/utils/languageConfig.js
var languageConfig = __webpack_require__(9431);
;// ./dist/commands/check.js











const check_execAsync = (0,external_util_.promisify)(external_child_process_.exec);
// Generate PROJECT_TYPES from shared language configuration with enhanced registry support
const PROJECT_TYPES = (0,languageConfig/* getSupportedLanguages */.qX)().map(lang => {
    const config = (0,languageConfig/* getLanguageConfig */.lr)(lang);
    const primaryPackageManager = config.packageManagers[0];
    // Define registry URLs and package info URLs for different languages
    let registryUrl;
    let packageInfoUrl;
    switch (lang) {
        case 'javascript':
        case 'typescript':
            registryUrl = 'https://registry.npmjs.org';
            packageInfoUrl = (packageName) => `https://registry.npmjs.org/${packageName}`;
            break;
        case 'rust':
            registryUrl = 'https://crates.io';
            packageInfoUrl = (packageName) => `https://crates.io/api/v1/crates/${packageName}`;
            break;
        case 'python':
            registryUrl = 'https://pypi.org';
            packageInfoUrl = (packageName) => `https://pypi.org/pypi/${packageName}/json`;
            break;
        case 'ruby':
            registryUrl = 'https://rubygems.org';
            packageInfoUrl = (packageName) => `https://rubygems.org/api/v1/gems/${packageName}.json`;
            break;
        case 'go':
            registryUrl = 'https://proxy.golang.org';
            packageInfoUrl = (packageName) => `https://proxy.golang.org/${packageName}/@v/list`;
            break;
        default:
            // For unsupported languages, we'll try npm registry as fallback
            registryUrl = 'https://registry.npmjs.org';
            packageInfoUrl = (packageName) => `https://registry.npmjs.org/${packageName}`;
            break;
    }
    return {
        name: config.displayName,
        files: config.configFiles.filter(cf => cf.required || cf.type === 'dependency').map(cf => cf.filename),
        packageManager: config.packageManagers.map(pm => pm.name).join('/'),
        registryUrl,
        packageInfoUrl,
        getDependencies: (content, filename) => {
            const deps = {};
            // Language-specific dependency parsing
            switch (lang) {
                case 'javascript':
                case 'typescript':
                    if (filename === 'package.json' || filename === 'package-lock.json' || filename === 'pnpm-lock.yml') {
                        return {
                            ...content.dependencies,
                            ...content.devDependencies
                        };
                    }
                    break;
                case 'rust':
                    if (filename === 'Cargo.toml') {
                        if (content.dependencies) {
                            Object.entries(content.dependencies).forEach(([key, value]) => {
                                if (typeof value === 'string') {
                                    deps[key] = value;
                                }
                                else if (value && value.version) {
                                    deps[key] = value.version;
                                }
                            });
                        }
                        if (content['dev-dependencies']) {
                            Object.entries(content['dev-dependencies']).forEach(([key, value]) => {
                                if (typeof value === 'string') {
                                    deps[key] = value;
                                }
                                else if (value && value.version) {
                                    deps[key] = value.version;
                                }
                            });
                        }
                    }
                    break;
                case 'python':
                    if (filename === 'requirements.txt') {
                        const lines = content.toString().split('\n');
                        lines.forEach((line) => {
                            const trimmed = line.trim();
                            if (trimmed && !trimmed.startsWith('#')) {
                                const match = trimmed.match(/^([a-zA-Z0-9_-]+)([>=<!~]+)?(.*)?$/);
                                if (match) {
                                    deps[match[1]] = match[3] || 'latest';
                                }
                            }
                        });
                    }
                    else if (filename === 'pyproject.toml') {
                        if (content.dependencies) {
                            content.dependencies.forEach((dep) => {
                                const match = dep.match(/^([a-zA-Z0-9_-]+)([>=<!~]+)?(.*)?$/);
                                if (match) {
                                    deps[match[1]] = match[3] || 'latest';
                                }
                            });
                        }
                    }
                    break;
                case 'ruby':
                    if (filename === 'Gemfile') {
                        const lines = content.toString().split('\n');
                        lines.forEach((line) => {
                            const trimmed = line.trim();
                            const match = trimmed.match(/gem\s+['"]([^'"]+)['"](?:\s*,\s*['"]([^'"]+)['"])?/);
                            if (match) {
                                deps[match[1]] = match[2] || 'latest';
                            }
                        });
                    }
                    break;
                case 'go':
                    if (filename === 'go.mod') {
                        const lines = content.toString().split('\n');
                        let inRequire = false;
                        lines.forEach((line) => {
                            const trimmed = line.trim();
                            if (trimmed === 'require (') {
                                inRequire = true;
                                return;
                            }
                            if (trimmed === ')') {
                                inRequire = false;
                                return;
                            }
                            if (inRequire || trimmed.startsWith('require ')) {
                                const match = trimmed.match(/^(?:require\s+)?([^\s]+)\s+([^\s]+)/);
                                if (match) {
                                    deps[match[1]] = match[2];
                                }
                            }
                        });
                    }
                    break;
            }
            return deps;
        },
        getInstallCommand: (packages) => {
            const addCmd = primaryPackageManager.addCommand || primaryPackageManager.installCommand;
            return `${addCmd} ${packages.join(' ')}`;
        },
        getUpdateCommand: () => primaryPackageManager.updateCommand || primaryPackageManager.installCommand
    };
});
function getRegistryUrl(lang) {
    switch (lang) {
        case 'javascript':
        case 'typescript':
            return 'https://registry.npmjs.org';
        case 'rust': return 'https://crates.io/api/v1/crates';
        case 'python': return 'https://pypi.org/pypi';
        case 'go': return 'https://proxy.golang.org';
        case 'ruby': return 'https://rubygems.org/api/v1/gems';
        default: return '';
    }
}
/**
 * Enhanced function to fetch package information from various registries
 */
async function fetchPackageFromRegistry(packageName, projectType) {
    if (!projectType.packageInfoUrl) {
        throw new Error(`Registry not supported for ${projectType.name}`);
    }
    const url = projectType.packageInfoUrl(packageName);
    return new Promise((resolve, reject) => {
        const request = external_https_namespaceObject.get(url, (response) => {
            let data = '';
            response.on('data', (chunk) => {
                data += chunk;
            });
            response.on('end', () => {
                try {
                    const parsed = JSON.parse(data);
                    // Handle different registry response formats
                    switch (projectType.name) {
                        case 'JavaScript':
                        case 'Typescript':
                            resolve(parseNpmRegistryResponse(parsed, packageName));
                            break;
                        case 'Rust':
                            resolve(parseCratesIoResponse(parsed, packageName));
                            break;
                        case 'Python':
                            resolve(parsePyPiResponse(parsed, packageName));
                            break;
                        default:
                            resolve(parseGenericResponse(parsed, packageName));
                            break;
                    }
                }
                catch (error) {
                    reject(new Error(`Failed to parse registry response: ${error}`));
                }
            });
        });
        request.on('error', (error) => {
            reject(new Error(`Failed to fetch package info: ${error.message}`));
        });
        request.setTimeout(10000, () => {
            request.destroy();
            reject(new Error('Request timeout'));
        });
    });
}
/**
 * Parse npm registry response
 */
function parseNpmRegistryResponse(data, packageName) {
    const latestVersion = data['dist-tags']?.latest || 'unknown';
    const timeData = data.time || {};
    const lastPublished = timeData[latestVersion] || timeData.modified || 'unknown';
    return {
        name: packageName,
        latestVersion,
        description: data.description,
        homepage: data.homepage,
        repository: data.repository?.url,
        license: data.license,
        lastPublished,
        isDeprecated: !!data.deprecated,
        deprecatedMessage: data.deprecated,
        maintainers: data.maintainers?.map(m => m.name) || []
    };
}
/**
 * Parse crates.io registry response
 */
function parseCratesIoResponse(data, packageName) {
    const crate = data.crate || {};
    const versions = data.versions || [];
    const latestVersion = versions.find((v) => !v.yanked)?.num || 'unknown';
    return {
        name: packageName,
        latestVersion,
        description: crate.description,
        homepage: crate.homepage,
        repository: crate.repository,
        license: crate.license,
        lastPublished: crate.updated_at,
        downloadCount: crate.downloads,
        isDeprecated: false
    };
}
/**
 * Parse PyPI registry response
 */
function parsePyPiResponse(data, packageName) {
    const info = data.info || {};
    const latestVersion = info.version || 'unknown';
    return {
        name: packageName,
        latestVersion,
        description: info.summary || info.description,
        homepage: info.home_page,
        repository: info.project_urls?.Repository || info.project_urls?.Source,
        license: info.license,
        lastPublished: data.releases?.[latestVersion]?.[0]?.upload_time || 'unknown',
        isDeprecated: false,
        maintainers: info.maintainer ? [info.maintainer] : []
    };
}
/**
 * Parse generic registry response
 */
function parseGenericResponse(data, packageName) {
    return {
        name: packageName,
        latestVersion: data.version || data.latest || 'unknown',
        description: data.description || data.summary,
        isDeprecated: false
    };
}
/**
 * Get latest version using package manager commands
 */
async function getLatestVersion(packageName, projectType) {
    try {
        switch (projectType.name) {
            case 'JavaScript':
            case 'TypeScript':
                const { stdout } = await check_execAsync(`npm view ${packageName} version`);
                return stdout.trim();
            case 'Rust':
                // For Rust, we'll parse from cargo search output
                const { stdout: cargoOutput } = await check_execAsync(`cargo search ${packageName} --limit 1`);
                const match = cargoOutput.match(/= "(.*?)"/);
                return match ? match[1] : 'unknown';
            case 'Python':
                try {
                    const { stdout: pipOutput } = await check_execAsync(`pip show ${packageName}`);
                    const versionMatch = pipOutput.match(/Version: (.*)/);
                    return versionMatch ? versionMatch[1] : 'unknown';
                }
                catch {
                    // Fallback to pip index
                    const { stdout: indexOutput } = await check_execAsync(`pip index versions ${packageName}`);
                    const versions = indexOutput.match(/Available versions: (.*)/);
                    return versions ? versions[1].split(',')[0].trim() : 'unknown';
                }
            default:
                return 'unknown';
        }
    }
    catch (error) {
        return 'unknown';
    }
}
/**
 * Enhanced package info fetcher with registry integration
 */
async function getEnhancedPackageInfo(name, currentVersion, projectType) {
    const spinner = (0,node_modules_ora/* default */.Ay)(`Fetching ${name} from ${projectType.name} registry...`).start();
    try {
        // First try to get info from registry
        let registryInfo = {};
        try {
            registryInfo = await fetchPackageFromRegistry(name, projectType);
            spinner.text = `Analyzing ${name} package details...`;
        }
        catch (error) {
            spinner.warn(`Registry fetch failed for ${name}, using fallback method`);
            // Fallback to existing method
        }
        // Get latest version using package manager
        const latestVersion = registryInfo.latestVersion || await getLatestVersion(name, projectType);
        const cleanCurrentVersion = currentVersion ? node_modules_semver.clean(currentVersion) || currentVersion : 'unknown';
        const cleanLatestVersion = node_modules_semver.clean(latestVersion) || latestVersion;
        let needsUpdate = false;
        if (cleanCurrentVersion !== 'unknown' && cleanLatestVersion !== 'unknown') {
            try {
                needsUpdate = node_modules_semver.lt(cleanCurrentVersion, cleanLatestVersion);
            }
            catch {
                needsUpdate = cleanCurrentVersion !== cleanLatestVersion;
            }
        }
        spinner.succeed(`Retrieved info for ${name}`);
        return {
            name,
            currentVersion: cleanCurrentVersion,
            latestVersion: cleanLatestVersion,
            needsUpdate,
            projectType: projectType.name,
            packageManager: projectType.packageManager,
            description: registryInfo.description || 'No description available',
            homepage: registryInfo.homepage,
            repository: registryInfo.repository,
            license: registryInfo.license,
            lastPublished: registryInfo.lastPublished,
            maintainers: registryInfo.maintainers,
            downloadCount: registryInfo.downloadCount,
            isDeprecated: registryInfo.isDeprecated || false,
            deprecatedMessage: registryInfo.deprecatedMessage,
            securityVulnerabilities: 0, // To be implemented with security API
            bundleSize: undefined // To be implemented with bundlephobia API
        };
    }
    catch (error) {
        spinner.fail(`Failed to get package info for ${name}`);
        throw error;
    }
}
/**
 * Display help for check command
 */
function showCheckHelp() {
    const helpConfig = {
        commandName: 'Check',
        emoji: '🔍',
        description: 'Check package versions in your project and get suggestions for updates.\nHelps you keep your dependencies up-to-date and secure.',
        usage: [
            'check [package-name] [options]',
            'check [options]'
        ],
        options: [
            { flag: '-v, --verbose', description: 'Show detailed information for all packages' }
        ],
        examples: [
            { command: 'check', description: 'Check all packages in current project' },
            { command: 'check --verbose', description: 'Check all packages with detailed info' },
            { command: 'check react', description: 'Check specific package version' },
            { command: 'check @types/node', description: 'Check scoped packages' },
            { command: 'check --help', description: 'Show this help message' }
        ],
        additionalSections: [
            {
                title: 'Supported Package Managers',
                items: [
                    'npm, pnpm, yarn (JavaScript/TypeScript)',
                    'pip, pipenv, poetry (Python)',
                    'cargo (Rust)',
                    'go modules (Go)',
                    'gem, bundler (Ruby)'
                ]
            }
        ],
        tips: [
            'Use --verbose for detailed package information including security vulnerabilities',
            'Check specific packages by name for targeted updates'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
async function checkCommand(packageName, options) {
    // Check for help flag
    if (options?.help || options?.['--help'] || options?.['-h']) {
        showCheckHelp();
        return;
    }
    // Check for help flag
    if (packageName === '--help' || packageName === '-h') {
        showCheckHelp();
        return;
    }
    // Check for verbose flag
    const isVerbose = packageName === '--verbose' || packageName === '-v' || options?.verbose;
    // If verbose is the first argument, check all packages with verbose output
    if (packageName === '--verbose' || packageName === '-v') {
        packageName = undefined;
    }
    try {
        // Display command banner
        (0,banner/* displayCommandBanner */.kn)('Check', 'Check package versions and updates for your project dependencies');
        console.log('\n' + source/* default */.Ay.hex('#f39c12')('🔍 Starting package check...'));
        if (packageName && packageName !== '--verbose' && packageName !== '-v') {
            await checkSinglePackage(packageName, isVerbose);
        }
        else {
            await checkProjectPackages(isVerbose);
        }
    }
    catch (error) {
        console.error(source/* default */.Ay.hex('#ff4757')(`❌ Failed to check packages: ${error.message}`));
        throw error;
    }
}
async function checkSinglePackage(packageName, verbose = false) {
    const spinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#f39c12')(`🔄 Checking ${packageName}...`)).start();
    try {
        // Try to detect what kind of package this might be
        const projectType = await detectProjectType();
        // Fallback to npm if no project type detected
        const defaultProjectType = projectType || PROJECT_TYPES.find(pt => pt.name.toLowerCase().includes('npm') || pt.name.toLowerCase().includes('javascript')) || PROJECT_TYPES[0];
        const packageInfo = await getEnhancedPackageInfo(packageName, undefined, defaultProjectType);
        spinner.succeed(source/* default */.Ay.hex('#10ac84')(`✅ Package information retrieved for ${packageName}`));
        displayPackageInfo([packageInfo], projectType || undefined, verbose);
    }
    catch (error) {
        spinner.fail(source/* default */.Ay.hex('#ff4757')(`❌ Failed to check ${packageName}`));
        throw error;
    }
}
async function checkProjectPackages(verbose = false) {
    const spinner = (0,node_modules_ora/* default */.Ay)('Analyzing project dependencies...').start();
    try {
        // Detect ALL project types instead of just one
        const allProjectTypes = await detectAllProjectTypes();
        if (allProjectTypes.length === 0) {
            spinner.fail(source/* default */.Ay.hex('#ff4757')('❌ No supported project configuration files found'));
            console.log(source/* default */.Ay.hex('#95afc0')('💡 Supported files: package.json, tsconfig.json, Cargo.toml, requirements.txt, pyproject.toml, go.mod, Gemfile'));
            return;
        }
        spinner.succeed(source/* default */.Ay.hex('#10ac84')(`✅ Detected ${allProjectTypes.length} project type(s): ${allProjectTypes.map(pt => pt.name).join(', ')}`));
        // Process each project type separately
        for (let i = 0; i < allProjectTypes.length; i++) {
            const projectType = allProjectTypes[i];
            const isMultiProject = allProjectTypes.length > 1;
            if (isMultiProject) {
                console.log('\n' + source/* default */.Ay.hex('#667eea')('═'.repeat(80)));
                console.log(source/* default */.Ay.hex('#667eea')(`📋 Analyzing ${projectType.name} Dependencies (${i + 1}/${allProjectTypes.length})`));
                console.log(source/* default */.Ay.hex('#667eea')('═'.repeat(80)));
            }
            await analyzeSingleProjectType(projectType, verbose, isMultiProject);
        }
        return; // Exit early since we've processed all project types
    }
    catch (error) {
        spinner.fail(source/* default */.Ay.hex('#ff4757')(`❌ Failed to analyze projects: ${error.message}`));
        throw error;
    }
}
// New function to analyze a single project type
async function analyzeSingleProjectType(projectType, verbose, isMultiProject = false) {
    const spinner = (0,node_modules_ora/* default */.Ay)(`Analyzing ${projectType.name} dependencies...`).start();
    try {
        let dependencies = {};
        if (!projectType) {
            spinner.warn('No supported project files found in current directory');
            console.log(source/* default */.Ay.yellow('💡 Supported project types:'));
            PROJECT_TYPES.forEach(type => {
                console.log(`   ${source/* default */.Ay.cyan(type.name)}: ${type.files.join(', ')}`);
            });
            console.log(source/* default */.Ay.gray('\n   Or specify a package name: pi check <package-name>'));
            return;
        }
        // Get fresh dependencies
        dependencies = await getDependenciesForProject(projectType);
        if (Object.keys(dependencies).length === 0) {
            spinner.warn(`No dependencies found in ${projectType.name} project`);
            return;
        }
        spinner.text = `Checking ${Object.keys(dependencies).length} ${projectType.name} packages...`;
        const packageInfos = [];
        for (const [name, version] of Object.entries(dependencies)) {
            try {
                const info = await getEnhancedPackageInfo(name, version, projectType);
                packageInfos.push(info);
                spinner.text = `✔ Retrieved info for ${name}`;
            }
            catch (error) {
                console.warn(`⚠️  Could not check ${name}`);
            }
        }
        spinner.succeed(`✔ Checked ${packageInfos.length} ${projectType.name} packages`);
        // Cache the package check results (optional)
        try {
            await cachePackageCheckResults?.(packageInfos, projectType);
        }
        catch (error) {
            // Caching is optional, continue without it
        }
        displayPackageInfo(packageInfos, projectType, verbose, isMultiProject);
    }
    catch (error) {
        spinner.fail(`Failed to analyze ${projectType.name} dependencies`);
        throw error;
    }
}
// New function to detect ALL project types in a directory
async function detectAllProjectTypes() {
    console.log(source/* default */.Ay.gray('🔍 Detecting all project types...'));
    const foundTypes = [];
    const foundFiles = [];
    // Priority order for detection - check most common files first (supported languages only)
    const priorityFiles = ['package.json', 'tsconfig.json', 'Cargo.toml', 'requirements.txt', 'pyproject.toml', 'go.mod', 'Gemfile'];
    // Check all priority files in current directory
    for (const priorityFile of priorityFiles) {
        const filePath = external_path_.join(process.cwd(), priorityFile);
        console.log(source/* default */.Ay.gray(`   Checking: ${filePath}`));
        if (await fs_extra_lib.pathExists(filePath)) {
            console.log(source/* default */.Ay.green(`   ✅ Found: ${priorityFile}`));
            foundFiles.push(priorityFile);
            // Find the project type that matches this file
            const matchingType = PROJECT_TYPES.find(type => type.files.includes(priorityFile));
            if (matchingType && !foundTypes.find(t => t.name === matchingType.name)) {
                console.log(source/* default */.Ay.green(`   📦 Detected: ${matchingType.name}`));
                foundTypes.push(matchingType);
            }
        }
    }
    // Check for additional files in each detected project type
    for (const projectType of PROJECT_TYPES) {
        if (foundTypes.find(t => t.name === projectType.name))
            continue; // Already found
        for (const file of projectType.files) {
            if (priorityFiles.includes(file))
                continue; // Already checked
            const filePath = external_path_.join(process.cwd(), file);
            if (await fs_extra_lib.pathExists(filePath)) {
                console.log(source/* default */.Ay.green(`   ✅ Found additional: ${file}`));
                foundFiles.push(file);
                if (!foundTypes.find(t => t.name === projectType.name)) {
                    console.log(source/* default */.Ay.green(`   📦 Detected: ${projectType.name}`));
                    foundTypes.push(projectType);
                }
            }
        }
    }
    return foundTypes;
}
async function detectProjectType() {
    // This function now uses detectAllProjectTypes and returns the first one for backward compatibility
    const allTypes = await detectAllProjectTypes();
    return allTypes.length > 0 ? allTypes[0] : null;
}
async function getDependenciesForProject(projectType) {
    console.log(source/* default */.Ay.gray(`📋 Looking for dependencies in ${projectType.name} project...`));
    // Priority order for dependency files
    const priorityFiles = projectType.files.slice().sort((a, b) => {
        const priority = ['package.json', 'Cargo.toml', 'requirements.txt', 'composer.json', 'go.mod'];
        return priority.indexOf(a) - priority.indexOf(b);
    });
    // First check current directory with priority files
    for (const file of priorityFiles) {
        const filePath = external_path_.join(process.cwd(), file);
        console.log(source/* default */.Ay.gray(`   Checking: ${filePath}`));
        if (await fs_extra_lib.pathExists(filePath)) {
            console.log(source/* default */.Ay.green(`   ✅ Found: ${file}`));
            try {
                let content;
                if (file.endsWith('.json')) {
                    content = await fs_extra_lib.readJson(filePath);
                    console.log(source/* default */.Ay.gray(`   📦 Loaded JSON config from ${file}`));
                }
                else if (file.endsWith('.toml')) {
                    // Simple TOML parser for basic cases
                    const tomlContent = await fs_extra_lib.readFile(filePath, 'utf-8');
                    content = parseSimpleToml(tomlContent);
                    console.log(source/* default */.Ay.gray(`   📦 Loaded TOML config from ${file}`));
                }
                else {
                    content = await fs_extra_lib.readFile(filePath, 'utf-8');
                    console.log(source/* default */.Ay.gray(`   📦 Loaded text config from ${file}`));
                }
                const dependencies = projectType.getDependencies(content, file);
                const depCount = Object.keys(dependencies).length;
                console.log(source/* default */.Ay.green(`   📊 Found ${depCount} dependencies`));
                if (depCount > 0) {
                    console.log(source/* default */.Ay.gray(`   Dependencies: ${Object.keys(dependencies).slice(0, 5).join(', ')}${depCount > 5 ? '...' : ''}`));
                    return dependencies;
                }
            }
            catch (error) {
                console.warn(source/* default */.Ay.yellow(`   ⚠️  Could not parse ${file}: ${error}`));
            }
        }
    }
    // Then check subdirectories
    try {
        const currentDirContents = await fs_extra_lib.readdir(process.cwd());
        for (const item of currentDirContents) {
            const itemPath = external_path_.join(process.cwd(), item);
            const stats = await fs_extra_lib.stat(itemPath);
            if (stats.isDirectory()) {
                for (const file of priorityFiles) {
                    const configPath = external_path_.join(itemPath, file);
                    if (await fs_extra_lib.pathExists(configPath)) {
                        console.log(source/* default */.Ay.green(`   ✅ Found in subdirectory: ${item}/${file}`));
                        try {
                            let content;
                            if (file.endsWith('.json')) {
                                content = await fs_extra_lib.readJson(configPath);
                            }
                            else if (file.endsWith('.toml')) {
                                const tomlContent = await fs_extra_lib.readFile(configPath, 'utf-8');
                                content = parseSimpleToml(tomlContent);
                            }
                            else {
                                content = await fs_extra_lib.readFile(configPath, 'utf-8');
                            }
                            const dependencies = projectType.getDependencies(content, file);
                            const depCount = Object.keys(dependencies).length;
                            if (depCount > 0) {
                                console.log(source/* default */.Ay.green(`   📊 Found ${depCount} dependencies in ${configPath}`));
                                return dependencies;
                            }
                        }
                        catch (error) {
                            console.warn(source/* default */.Ay.yellow(`   ⚠️  Could not parse ${configPath}`));
                        }
                    }
                }
            }
        }
    }
    catch (error) {
        console.warn(source/* default */.Ay.yellow('   ⚠️  Could not read directory contents'));
    }
    console.log(source/* default */.Ay.yellow('   📦 No dependencies found'));
    return {};
}
function parseSimpleToml(content) {
    const result = {};
    const lines = content.split('\n');
    let currentSection = null;
    for (const line of lines) {
        const trimmed = line.trim();
        // Skip empty lines and comments
        if (!trimmed || trimmed.startsWith('#'))
            continue;
        // Section header
        const sectionMatch = trimmed.match(/^\[(.+)\]$/);
        if (sectionMatch) {
            currentSection = sectionMatch[1];
            const sections = currentSection.split('.');
            let current = result;
            for (let i = 0; i < sections.length - 1; i++) {
                if (!current[sections[i]])
                    current[sections[i]] = {};
                current = current[sections[i]];
            }
            if (!current[sections[sections.length - 1]]) {
                current[sections[sections.length - 1]] = {};
            }
            continue;
        }
        // Key-value pair
        const kvMatch = trimmed.match(/^([^=]+)=(.+)$/);
        if (kvMatch && currentSection) {
            const key = kvMatch[1].trim().replace(/"/g, '');
            const value = kvMatch[2].trim().replace(/"/g, '');
            const sections = currentSection.split('.');
            let current = result;
            for (const section of sections) {
                if (!current[section])
                    current[section] = {};
                current = current[section];
            }
            current[key] = value;
        }
    }
    return result;
}
async function getPackageInfo(packageName, currentVersion, projectType) {
    const type = projectType || PROJECT_TYPES[0];
    try {
        // Clean up version string (remove ^ ~ and similar prefixes)
        const cleanCurrentVersion = currentVersion?.replace(/[\^~>=<]/, '') || 'unknown';
        // Enhanced NPM registry support  
        if (type.name === 'JavaScript' || type.name === 'TypeScript') {
            const response = await fetch(`https://registry.npmjs.org/${packageName}`);
            if (!response.ok) {
                throw new Error(`Package ${packageName} not found in NPM registry`);
            }
            const data = await response.json();
            const latestVersion = data['dist-tags']?.latest || 'unknown';
            const maintainers = data.maintainers || [];
            const keywords = data.keywords || [];
            // Enhanced version comparison
            let needsUpdate = false;
            if (cleanCurrentVersion !== 'unknown' && latestVersion !== 'unknown') {
                try {
                    if (semver.valid(cleanCurrentVersion) && semver.valid(latestVersion)) {
                        needsUpdate = semver.lt(cleanCurrentVersion, latestVersion);
                    }
                }
                catch (error) {
                    // Fallback to string comparison if semver fails
                    needsUpdate = cleanCurrentVersion !== latestVersion;
                }
            }
            return {
                name: packageName,
                currentVersion: cleanCurrentVersion,
                latestVersion,
                isDeprecated: !!data.deprecated,
                deprecatedMessage: data.deprecated || undefined,
                alternatives: data.alternatives || [],
                homepage: data.homepage || undefined,
                repository: typeof data.repository === 'string'
                    ? data.repository
                    : data.repository?.url || undefined,
                description: data.description || undefined,
                needsUpdate,
                packageManager: type.packageManager,
                projectType: type.name
            };
        }
        // Enhanced support for Rust packages
        if (type.name === 'Rust') {
            try {
                const response = await fetch(`https://crates.io/api/v1/crates/${packageName}`);
                if (response.ok) {
                    const data = await response.json();
                    const latestVersion = data.crate?.newest_version || 'unknown';
                    return {
                        name: packageName,
                        currentVersion: cleanCurrentVersion,
                        latestVersion,
                        isDeprecated: false, // Crates.io doesn't have deprecated flag in this endpoint
                        homepage: data.crate?.homepage || undefined,
                        repository: data.crate?.repository || undefined,
                        description: data.crate?.description || undefined,
                        needsUpdate: cleanCurrentVersion !== 'unknown' && latestVersion !== 'unknown'
                            ? cleanCurrentVersion !== latestVersion
                            : false,
                        packageManager: type.packageManager,
                        projectType: type.name
                    };
                }
            }
            catch (error) {
                // Fall through to basic info
            }
        }
        // Enhanced support for Python packages
        if (type.name === 'Python') {
            try {
                const response = await fetch(`https://pypi.org/pypi/${packageName}/json`);
                if (response.ok) {
                    const data = await response.json();
                    const latestVersion = data.info?.version || 'unknown';
                    return {
                        name: packageName,
                        currentVersion: cleanCurrentVersion,
                        latestVersion,
                        isDeprecated: false,
                        homepage: data.info?.home_page || undefined,
                        repository: data.info?.project_urls?.Repository || data.info?.project_urls?.Homepage || undefined,
                        description: data.info?.summary || undefined,
                        needsUpdate: cleanCurrentVersion !== 'unknown' && latestVersion !== 'unknown'
                            ? cleanCurrentVersion !== latestVersion
                            : false,
                        packageManager: type.packageManager,
                        projectType: type.name
                    };
                }
            }
            catch (error) {
                // Fall through to basic info
            }
        }
        // For other project types or when registry lookup fails, return basic info
        return {
            name: packageName,
            currentVersion: cleanCurrentVersion,
            latestVersion: 'unknown',
            isDeprecated: false,
            needsUpdate: false,
            packageManager: type.packageManager,
            projectType: type.name,
            description: `${type.name} package - registry lookup not available`
        };
    }
    catch (error) {
        throw new Error(`Failed to fetch info for ${packageName}: ${error.message}`);
    }
}
function displayPackageInfo(packages, projectType, verbose = false, isMultiProject = false) {
    if (packages.length === 0) {
        console.log(source/* default */.Ay.yellow('📦 No packages to display'));
        return;
    }
    const outdatedPackages = packages.filter(pkg => pkg.needsUpdate);
    const deprecatedPackages = packages.filter(pkg => pkg.isDeprecated);
    const upToDatePackages = packages.filter(pkg => !pkg.needsUpdate && !pkg.isDeprecated);
    // Compact summary header
    console.log('\n' + source/* default */.Ay.hex('#00d2d3')('📊 Package Analysis Results'));
    console.log(source/* default */.Ay.gray('─'.repeat(80)));
    const summary = [
        `${source/* default */.Ay.hex('#10ac84')('✅')} ${upToDatePackages.length} up-to-date`,
        outdatedPackages.length > 0 ? `${source/* default */.Ay.hex('#f39c12')('⚠️')} ${outdatedPackages.length} need updates` : null,
        deprecatedPackages.length > 0 ? `${source/* default */.Ay.hex('#ff4757')('🚨')} ${deprecatedPackages.length} deprecated` : null
    ].filter(Boolean).join('  •  ');
    console.log(`${source/* default */.Ay.bold(`Total: ${packages.length}`)}  •  ${summary}`);
    if (projectType) {
        console.log(`${source/* default */.Ay.hex('#00d2d3')('📋')} ${projectType.name} (${source/* default */.Ay.cyan(projectType.packageManager)})`);
    }
    // Determine how many packages to show
    const packagesToShow = verbose ? packages : packages.slice(0, 12);
    // Group packages by status for better organization
    const groupedPackages = [
        ...deprecatedPackages.slice(0, verbose ? deprecatedPackages.length : 3),
        ...outdatedPackages.slice(0, verbose ? outdatedPackages.length : 8),
        ...upToDatePackages.slice(0, verbose ? upToDatePackages.length : 6)
    ].slice(0, verbose ? packages.length : 12);
    if (groupedPackages.length > 0) {
        console.log('\n');
        // Compact table format
        groupedPackages.forEach((pkg, index) => {
            const statusIcon = pkg.isDeprecated ? '🚨' : pkg.needsUpdate ? '⚠️' : '✅';
            const statusColor = pkg.isDeprecated ? '#ff4757' : pkg.needsUpdate ? '#f39c12' : '#10ac84';
            // Format version comparison compactly
            const versionText = pkg.needsUpdate && pkg.latestVersion !== 'unknown'
                ? `${source/* default */.Ay.dim(pkg.currentVersion)} → ${source/* default */.Ay.hex(statusColor)(pkg.latestVersion)}`
                : source/* default */.Ay.dim(pkg.currentVersion);
            // Truncate name and description for compact view
            const name = pkg.name.length > 25 ? pkg.name.slice(0, 22) + '...' : pkg.name;
            const desc = pkg.description
                ? (pkg.description.length > 50 ? pkg.description.slice(0, 47) + '...' : pkg.description)
                : source/* default */.Ay.dim('No description');
            console.log(`${statusIcon} ${source/* default */.Ay.bold(name.padEnd(25))} ${versionText.padEnd(20)} ${source/* default */.Ay.gray(desc)}`);
            // Show deprecation warning inline
            if (pkg.isDeprecated && pkg.deprecatedMessage) {
                console.log(`   ${source/* default */.Ay.hex('#ff4757')('⚠️')} ${source/* default */.Ay.dim(pkg.deprecatedMessage.slice(0, 80))}`);
            }
        });
    }
    // Show remaining packages summary when not in verbose mode
    if (!verbose && packages.length > 12) {
        const remaining = packages.length - groupedPackages.length;
        const remainingOutdated = packages.filter(pkg => pkg.needsUpdate && !groupedPackages.includes(pkg)).length;
        const remainingUpToDate = packages.filter(pkg => !pkg.needsUpdate && !pkg.isDeprecated && !groupedPackages.includes(pkg)).length;
        console.log('\n' + source/* default */.Ay.gray('─'.repeat(80)));
        const hiddenSummary = [
            remainingUpToDate > 0 ? `${source/* default */.Ay.hex('#10ac84')('✅')} ${remainingUpToDate} more up-to-date` : null,
            remainingOutdated > 0 ? `${source/* default */.Ay.hex('#f39c12')('⚠️')} ${remainingOutdated} more need updates` : null
        ].filter(Boolean).join('  •  ');
        if (hiddenSummary) {
            console.log(`${source/* default */.Ay.dim(`+${remaining} hidden:`)} ${hiddenSummary}`);
        }
        // Show sample of remaining package names
        if (remainingOutdated > 0) {
            const sampleNames = packages.filter(pkg => pkg.needsUpdate && !groupedPackages.includes(pkg))
                .slice(0, 4).map(pkg => pkg.name).join(', ');
            console.log(`${source/* default */.Ay.dim('Outdated:')} ${sampleNames}${remainingOutdated > 4 ? '...' : ''}`);
        }
        console.log(`\n${source/* default */.Ay.cyan('💡')} Use ${source/* default */.Ay.bold('--verbose')} to see all ${packages.length} packages`);
    }
    // Compact recommendations section
    if (outdatedPackages.length > 0 || deprecatedPackages.length > 0) {
        console.log('\n' + source/* default */.Ay.hex('#667eea')('💡 Quick Actions:'));
        console.log(source/* default */.Ay.gray('─'.repeat(40)));
        if (deprecatedPackages.length > 0) {
            console.log(`${source/* default */.Ay.hex('#ff4757')('🚨')} ${deprecatedPackages.length} deprecated - replace immediately`);
            deprecatedPackages.slice(0, 3).forEach(pkg => {
                console.log(`   • ${source/* default */.Ay.red(pkg.name)} ${source/* default */.Ay.gray(pkg.deprecatedMessage ? '- ' + pkg.deprecatedMessage.slice(0, 50) + '...' : '')}`);
            });
        }
        if (outdatedPackages.length > 0 && projectType) {
            console.log(`${source/* default */.Ay.hex('#f39c12')('⚠️')} ${outdatedPackages.length} need updates - Run: ${source/* default */.Ay.cyan(projectType.getUpdateCommand())}`);
        }
        if (packages.length > 50) {
            console.log(`${source/* default */.Ay.hex('#95afc0')('📦')} Large dependency count (${packages.length}) - consider optimization`);
        }
    }
    console.log(source/* default */.Ay.gray(`\nLast checked: ${new Date().toLocaleString()}`));
}
/**
 * Cache package check results for performance
 */
async function cachePackageCheckResults(packageInfos, projectType) {
    try {
        const projectPath = process.cwd();
        const projectName = external_path_.basename(projectPath);
        // Simple caching - just log for now
        console.log(source/* default */.Ay.gray(`📊 Caching package check results for ${packageInfos.length} packages`));
        // In a real implementation, you would save this to the cache manager
        // await cacheManager.setPackageCheckResults(projectPath, packageInfos);
    }
    catch (error) {
        // Silent fail - caching is not critical
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/figlet@1.8.2/node_modules/figlet/lib/node-figlet.js
var node_figlet = __webpack_require__(9372);
;// ./dist/utils/ui.js
/**
 * UI and display utilities for Package Installer CLI v3.2.0
 * Enhanced user interface components and styling utilities
 */








/**
 * Enhanced banner display with dynamic statistics
 */
function printBanner(version, frameworkCount, templateCount = 0) {
    console.clear();
    // Blue gradient themes for consistent branding
    const titleGradient = gradient(['#0072ff', '#00c6ff', '#0072ff']);
    const subtitleGradient = gradient(['#667eea', '#764ba2', '#667eea']);
    const taglineGradient = gradient(['#00c6ff', '#0072ff']);
    // Create ASCII art for "PACKAGE" and "INSTALLER" separately
    const packageArt = figlet.textSync('PACKAGE', {
        font: 'ANSI Shadow',
        horizontalLayout: 'fitted',
        verticalLayout: 'default'
    });
    const installerArt = figlet.textSync('INSTALLER', {
        font: 'ANSI Shadow',
        horizontalLayout: 'fitted',
        verticalLayout: 'default'
    });
    // Enhanced subtitle and tagline
    const subtitle = '🚀 The Ultimate Modern Project Scaffolding Tool';
    const tagline = '✨ Fast • Smart • Feature-Rich • Production-Ready';
    const description = '💡 Create stunning web applications with integrated features in seconds';
    // Create the banner content with better spacing - package and installer on separate lines
    const bannerContent = titleGradient(packageArt) + '\n' +
        titleGradient(installerArt) + '\n\n' +
        subtitleGradient(subtitle) + '\n' +
        taglineGradient(tagline) + '\n' +
        chalk.hex('#95afc0')(description);
    // Enhanced box with rounded corners and blue theme styling
    console.log('\n' + boxen(bannerContent, {
        padding: { top: 1, bottom: 1, left: 4, right: 4 },
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'double',
        borderColor: 'blueBright',
        backgroundColor: 'black',
        align: 'center'
    }));
    // Enhanced statistics with more information
    const statsContent = [
        `${chalk.bold('📦 Version:')} ${chalk.cyan(version)}`,
        `${chalk.bold('🎯 Frameworks:')} ${chalk.green(frameworkCount + '+')}`,
        templateCount > 0 ? `${chalk.bold('📋 Templates:')} ${chalk.blue(templateCount + '+')}` : '',
        `${chalk.bold('⚡ Status:')} ${chalk.greenBright('Ready to scaffold!')}`
    ].filter(Boolean).join('  •  ');
    const statsBox = boxen(statsContent, {
        padding: { top: 0, bottom: 0, left: 3, right: 3 },
        margin: { top: 0, bottom: 1, left: 0, right: 0 },
        borderStyle: 'round',
        borderColor: 'blue',
        backgroundColor: 'black',
        align: 'center'
    });
    console.log(statsBox);
}
/**
 * Enhanced project configuration summary with features display
 */
function showProjectSummary(options, selectedFeatures = []) {
    const { framework, language, bundler, src, tailwind, ui } = options;
    console.log(chalk.cyan('\n📋 Project Configuration Summary:'));
    console.log(chalk.gray('═'.repeat(70)));
    // Basic project information
    console.log(`  ${chalk.bold('🏷️  Project Name:')} ${chalk.cyan(options.projectName || 'N/A')}`);
    console.log(`  ${chalk.bold('🚀 Framework:')} ${chalk.green(framework.charAt(0).toUpperCase() + framework.slice(1))}`);
    if (language && language !== 'rust') {
        console.log(`  ${chalk.bold('💻 Language:')} ${chalk.yellow(language.charAt(0).toUpperCase() + language.slice(1))}`);
    }
    if (bundler) {
        console.log(`  ${chalk.bold('📦 Bundler:')} ${chalk.magenta(bundler.charAt(0).toUpperCase() + bundler.slice(1))}`);
    }
    // Configuration options
    if (typeof src === 'boolean') {
        console.log(`  ${chalk.bold('📁 Src Directory:')} ${src ? chalk.green('✓ Enabled') : chalk.red('✗ Disabled')}`);
    }
    if (typeof tailwind === 'boolean') {
        console.log(`  ${chalk.bold('🎨 Tailwind CSS:')} ${tailwind ? chalk.green('✓ Enabled') : chalk.red('✗ Disabled')}`);
    }
    if (ui) {
        console.log(`  ${chalk.bold('🎭 UI Library:')} ${chalk.blue(ui.charAt(0).toUpperCase() + ui.slice(1))}`);
    }
    // Enhanced features section
    if (selectedFeatures.length > 0) {
        console.log(chalk.gray('─'.repeat(70)));
        console.log(`  ${chalk.bold('🔧 Selected Features:')} ${chalk.green(`(${selectedFeatures.length} features)`)}`);
        selectedFeatures.forEach((feature, index) => {
            const isLast = index === selectedFeatures.length - 1;
            const prefix = isLast ? '└─' : '├─';
            console.log(`    ${chalk.gray(prefix)} ${chalk.cyan(feature.feature)} ${chalk.gray(`(${feature.provider || 'default'})`)}`);
        });
    }
    if (framework.includes('+')) {
        console.log(chalk.gray('─'.repeat(70)));
        console.log(`  ${chalk.bold('⚙️  Template Type:')} ${chalk.green('Combination Template (Pre-configured)')}`);
    }
    console.log(chalk.gray('═'.repeat(70)));
}
/**
 * Enhanced combination template information display
 */
function showCombinationTemplateInfo(framework, database, orm) {
    console.log(chalk.cyan('\n📦 Template Features:'));
    const features = [];
    if (framework.includes('shadcn')) {
        features.push({ name: 'Shadcn/ui Components', icon: '🎨', description: 'Beautiful, accessible UI components' });
    }
    if (framework.includes('expressjs')) {
        features.push({ name: 'Express.js Backend', icon: '🚀', description: 'Fast, minimalist web framework' });
    }
    if (framework.includes('nestjs')) {
        features.push({ name: 'NestJS Backend', icon: '🏗️', description: 'Scalable Node.js server-side framework' });
    }
    if (framework.includes('reactjs')) {
        features.push({ name: 'React.js Frontend', icon: '⚛️', description: 'Modern JavaScript library for UI' });
    }
    if (database) {
        features.push({
            name: `${database.charAt(0).toUpperCase() + database.slice(1)} Database`,
            icon: '🗄️',
            description: 'Production-ready database setup'
        });
    }
    if (orm) {
        features.push({
            name: `${orm.charAt(0).toUpperCase() + orm.slice(1)} ORM`,
            icon: '🔗',
            description: 'Object-relational mapping for database operations'
        });
    }
    features.forEach((feature, index) => {
        const isLast = index === features.length - 1;
        const prefix = isLast ? '└─' : '├─';
        console.log(`  ${chalk.gray(prefix)} ${feature.icon} ${chalk.green(feature.name)}`);
        console.log(`  ${chalk.gray(isLast ? '   ' : '│  ')} ${chalk.dim(feature.description)}`);
    });
    console.log(`\n  ${chalk.yellow('💡 All configurations are pre-configured for optimal development experience!')}`);
}
/**
 * Enhanced success message with better project type detection and commands
 */
function showSuccessMessage(filename, targetPath, theme, dependenciesInstalled = false, framework, installedFeatures = []) {
    console.log();
    const isCurrentDirectory = filename === 'current directory' || filename === '.';
    const projectName = isCurrentDirectory ? path.basename(targetPath) : filename;
    const cdCommand = isCurrentDirectory ? '' : `cd ${filename}`;
    // Enhanced project type detection
    const isRustProject = framework === 'rust' || fs.existsSync(path.join(targetPath, 'Cargo.toml'));
    const isCombinationTemplate = framework && framework.includes('+');
    const hasBackend = isCombinationTemplate && fs.existsSync(path.join(targetPath, 'backend'));
    const hasPackageJson = fs.existsSync(path.join(targetPath, 'package.json'));
    const hasPnpmLock = fs.existsSync(path.join(targetPath, 'pnpm-lock.yaml'));
    // Enhanced command determination
    let devCommand, buildCommand, installCommand, packageManager;
    if (isRustProject) {
        devCommand = `cargo run`;
        buildCommand = `cargo build --release`;
        installCommand = dependenciesInstalled ? '' : `cargo build`;
        packageManager = 'cargo';
    }
    else if (isCombinationTemplate && hasBackend) {
        const pm = hasPnpmLock ? 'pnpm' : 'npm';
        devCommand = `# Frontend\n  ${pm} run dev\n\n  # Backend\n  cd backend && ${pm} run dev`;
        buildCommand = `# Frontend\n  ${pm} run build\n\n  # Backend\n  cd backend && ${pm} run build`;
        installCommand = dependenciesInstalled ? '' : `# Install dependencies\n  ${pm} install\n  cd backend && ${pm} install`;
        packageManager = pm;
    }
    else {
        const pm = hasPnpmLock ? 'pnpm' : 'npm';
        devCommand = `${pm} run dev`;
        buildCommand = `${pm} run build`;
        installCommand = dependenciesInstalled ? '' : `${pm} install`;
        packageManager = pm;
    }
    // Main success message with enhanced styling
    const successTitle = gradient(['#0072ff', '#00c6ff'])(`🎉 Project "${chalk.bold(projectName)}" Created Successfully!`);
    let successContent = successTitle + '\n\n' +
        `${chalk.bold('📁 Location:')} ${chalk.cyan(targetPath)}\n` +
        `${chalk.bold('📦 Package Manager:')} ${chalk.yellow(packageManager || 'N/A')}\n`;
    if (installedFeatures.length > 0) {
        successContent += `${chalk.bold('🔧 Features Installed:')} ${chalk.green(installedFeatures.length + ' features')}\n`;
    }
    successContent += `${chalk.bold('⚡ Dependencies:')} ${dependenciesInstalled ? chalk.green('✓ Installed') : chalk.yellow('⏳ Pending')}\n\n`;
    if (cdCommand) {
        successContent += chalk.white(`${chalk.bold('🚀 Quick Start:')}\n  ${chalk.cyan(cdCommand)}\n`);
    }
    if (!dependenciesInstalled && installCommand) {
        successContent += `  ${chalk.yellow(installCommand)}\n`;
    }
    successContent += `  ${chalk.green(devCommand)}\n\n`;
    successContent += chalk.yellow('💡 Check the README.md file for detailed instructions!');
    const successBox = boxen(successContent, {
        padding: 2,
        margin: 1,
        borderStyle: 'double',
        borderColor: 'greenBright',
        backgroundColor: '#0d1117',
        title: '✨ Success',
        titleAlignment: 'center'
    });
    console.log(successBox);
    // Enhanced features summary if any features were installed
    if (installedFeatures.length > 0) {
        const featuresContent = installedFeatures.map((feature, index) => {
            const isLast = index === installedFeatures.length - 1;
            const prefix = isLast ? '└─' : '├─';
            return `  ${chalk.gray(prefix)} ${chalk.cyan(feature.feature)} ${chalk.gray(`(${feature.provider || 'default'})`)}`;
        }).join('\n');
        const featuresBox = boxen(`${chalk.bold('🔧 Installed Features:')}\n\n${featuresContent}`, {
            padding: 1,
            margin: { top: 1, bottom: 1 },
            borderStyle: 'round',
            borderColor: 'blue',
            backgroundColor: '#0d1117',
            title: '🎯 Features',
            titleAlignment: 'center'
        });
        console.log(featuresBox);
    }
    // Enhanced tips with more helpful information
    const tips = [
        `Use ${chalk.cyan('Ctrl+C')} to stop the development server`,
        `Check ${chalk.cyan('package.json')} for all available scripts`,
        hasBackend ? 'Run frontend and backend in separate terminals for best experience' : 'Use hot reload for faster development',
        `Visit the ${framework} documentation for advanced features`,
        installedFeatures.length > 0 ? 'Feature documentation is available in their respective folders' : 'Add more features anytime with the add command'
    ].filter(Boolean);
    const tipsContent = tips.map((tip, index) => `  ${chalk.gray('•')} ${chalk.white(tip)}`).join('\n');
    const tipsBox = boxen(`${chalk.bold('💡 Pro Tips:')}\n\n${tipsContent}`, {
        padding: 1,
        margin: { top: 1, bottom: 1 },
        borderStyle: 'round',
        borderColor: 'yellow',
        backgroundColor: '#0d1117',
        title: '💡 Tips',
        titleAlignment: 'center'
    });
    console.log(tipsBox);
}
/**
 * Enhanced error display with detailed information
 */
function showErrorMessage(title, message, details, suggestions) {
    console.log();
    let errorContent = gradient(['#667eea', '#764ba2'])(`❌ ${title}`) + '\n\n' +
        chalk.red(message);
    if (details) {
        errorContent += '\n\n' + chalk.gray(details);
    }
    if (suggestions && suggestions.length > 0) {
        errorContent += '\n\n' + chalk.bold('💡 Suggestions:');
        suggestions.forEach(suggestion => {
            errorContent += `\n  ${chalk.gray('•')} ${chalk.white(suggestion)}`;
        });
    }
    const errorBox = boxen(errorContent, {
        padding: 2,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'red',
        backgroundColor: '#1a0000',
        title: '🚨 Error',
        titleAlignment: 'center'
    });
    console.log(errorBox);
}
/**
 * Progress spinner with customizable messages
 */
class ProgressSpinner {
    constructor(text = 'Loading...', spinnerType = 'dots') {
        this.spinner = ora({
            text,
            spinner: cliSpinners[spinnerType],
            color: 'cyan'
        });
    }
    start(text) {
        if (text)
            this.spinner.text = text;
        this.spinner.start();
    }
    succeed(text) {
        this.spinner.succeed(text);
    }
    fail(text) {
        this.spinner.fail(text);
    }
    warn(text) {
        this.spinner.warn(text);
    }
    info(text) {
        this.spinner.info(text);
    }
    updateText(text) {
        this.spinner.text = text;
    }
    stop() {
        this.spinner.stop();
    }
}
/**
 * Progress bar for file operations
 */
function createProgressCallback(operation) {
    let lastPercent = 0;
    return (progress, message) => {
        const currentPercent = Math.round(progress);
        if (currentPercent > lastPercent) {
            const bar = '█'.repeat(Math.floor(currentPercent / 2)) +
                '░'.repeat(50 - Math.floor(currentPercent / 2));
            const statusColor = progress >= 100 ? 'green' : 'cyan';
            process.stdout.write('\r' +
                chalk[statusColor](`${operation}: `) +
                `[${chalk.cyan(bar)}] ` +
                chalk.bold(`${currentPercent}%`) +
                (message ? ` - ${chalk.gray(message)}` : ''));
            if (progress >= 100) {
                console.log(); // New line after completion
            }
            lastPercent = currentPercent;
        }
    };
}
/**
 * Enhanced banner alias for backward compatibility
 */
function showBanner() {
    printBanner('3.0.0', 12, 50);
}
/**
 * Enhanced logging utilities
 */
function logError(message, error) {
    const errorMsg = error instanceof Error ? error.message : error || 'Unknown error';
    console.error(source/* default */.Ay.red(`❌ ${message}: ${errorMsg}`));
    if (error instanceof Error && process.env.DEBUG) {
        console.error(source/* default */.Ay.gray(error.stack));
    }
}
function logSuccess(message) {
    console.log(chalk.green(`✅ ${message}`));
}
function logWarning(message) {
    console.log(chalk.yellow(`⚠️  ${message}`));
}
function logInfo(message) {
    console.log(chalk.blue(`ℹ️  ${message}`));
}
/**
 * Feature selection display helper
 */
function displayFeatureSelection(features, selectedCount = 0) {
    console.log(chalk.cyan('\n🔧 Available Features:'));
    console.log(chalk.gray('─'.repeat(60)));
    features.forEach((feature, index) => {
        const providerIcon = getProviderIcon(feature.provider || 'other');
        console.log(`  ${chalk.dim(String(index + 1).padStart(2))}. ${providerIcon} ${chalk.bold(feature.name)}`);
        console.log(`      ${chalk.gray(feature.provider || 'default')} • ${chalk.dim(feature.description || 'No description available')}`);
    });
    if (selectedCount > 0) {
        console.log(chalk.gray('─'.repeat(60)));
        console.log(`  ${chalk.green(`✓ ${selectedCount} feature${selectedCount > 1 ? 's' : ''} selected`)}`);
    }
    console.log(chalk.gray('─'.repeat(60)));
}
/**
 * Get provider icon based on provider name
 */
function getProviderIcon(provider) {
    const icons = {
        'auth': '🔐',
        'database': '🗄️',
        'ui': '🎨',
        'testing': '🧪',
        'deployment': '🚀',
        'monitoring': '📊',
        'analytics': '📈',
        'payment': '💳',
        'email': '📧',
        'storage': '☁️',
        'api': '🔌',
        'seo': '🔍',
        'pwa': '📱',
        'cms': '📝',
        'other': '⚙️'
    };
    return icons[provider.toLowerCase()] || icons['other'];
}
/**
 * Display installation summary
 */
function showInstallationSummary(installed, failed, skipped = []) {
    console.log(chalk.cyan('\n📦 Installation Summary:'));
    console.log(chalk.gray('═'.repeat(50)));
    if (installed.length > 0) {
        console.log(chalk.green(`✅ Successfully installed (${installed.length}):`));
        installed.forEach(item => console.log(`   • ${item}`));
    }
    if (failed.length > 0) {
        console.log(chalk.red(`❌ Failed to install (${failed.length}):`));
        failed.forEach(item => console.log(`   • ${item}`));
    }
    if (skipped.length > 0) {
        console.log(chalk.yellow(`⏭️  Skipped (${skipped.length}):`));
        skipped.forEach(item => console.log(`   • ${item}`));
    }
    console.log(chalk.gray('═'.repeat(50)));
}

;// ./dist/utils/cloneUtils.js







const cloneUtils_execAsync = (0,external_util_.promisify)(external_child_process_.exec);
async function cloneRepo(userRepo, projectName, options = {}) {
    try {
        // Validate and process repository format
        let repoUrl = userRepo;
        let provider = 'github'; // default
        if (!userRepo.startsWith('http') && !userRepo.startsWith('git@')) {
            // Handle provider prefixes
            if (userRepo.includes(':')) {
                const [providerPrefix, repo] = userRepo.split(':', 2);
                switch (providerPrefix.toLowerCase()) {
                    case 'github':
                        provider = 'github';
                        repoUrl = repo;
                        break;
                    case 'gitlab':
                        provider = 'gitlab';
                        repoUrl = repo;
                        break;
                    case 'bitbucket':
                        provider = 'bitbucket';
                        repoUrl = repo;
                        break;
                    case 'sourcehut':
                    case 'sr.ht':
                        provider = 'sourcehut';
                        repoUrl = repo;
                        break;
                    default:
                        // If it's not a recognized provider, treat it as part of the repo name
                        repoUrl = userRepo;
                        break;
                }
            }
            // Validate user/repo format
            if (!repoUrl.includes('/') || repoUrl.split('/').length !== 2) {
                throw new Error(`Invalid repository format: "${userRepo}"\n` +
                    'Expected formats:\n' +
                    '  • user/repo (defaults to GitHub)\n' +
                    '  • github:user/repo\n' +
                    '  • gitlab:user/repo\n' +
                    '  • bitbucket:user/repo\n' +
                    '  • sourcehut:user/repo\n' +
                    '  • https://github.com/user/repo.git');
            }
            const [user, repo] = repoUrl.split('/');
            if (!user || !repo) {
                throw new Error('Invalid repository format. Both user and repo names are required');
            }
        }
        else {
            // Handle full URLs - extract provider info
            if (userRepo.includes('gitlab.com')) {
                provider = 'gitlab';
            }
            else if (userRepo.includes('bitbucket.org')) {
                provider = 'bitbucket';
            }
            else if (userRepo.includes('git.sr.ht')) {
                provider = 'sourcehut';
            }
        }
        const targetDir = projectName || (repoUrl.includes('/') ? repoUrl.split('/')[1] : repoUrl.split('/').pop()?.replace('.git', ''));
        const targetPath = external_path_.resolve(process.cwd(), targetDir || 'cloned-repo');
        // Check if directory already exists
        if (await fs_extra_lib.pathExists(targetPath)) {
            throw new Error(`Directory "${targetDir}" already exists. Please choose a different name or remove the existing directory.`);
        }
        console.log('\n' + source/* default */.Ay.hex('#00d2d3')('🌟 Starting repository clone...'));
        console.log(`${source/* default */.Ay.hex('#ffa502')('Repository:')} ${source/* default */.Ay.hex('#00d2d3')(userRepo)}`);
        console.log(`${source/* default */.Ay.hex('#ffa502')('Provider:')} ${source/* default */.Ay.hex('#9c88ff')(provider.toUpperCase())}`);
        console.log(`${source/* default */.Ay.hex('#ffa502')('Target:')} ${source/* default */.Ay.hex('#95afc0')(targetDir)}`);
        const spinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#00d2d3')('🔄 Cloning repository...')).start();
        try {
            // Check if degit is available, if not try to use npx
            let degitCommand = '';
            try {
                await cloneUtils_execAsync('degit --version');
                degitCommand = 'degit';
            }
            catch {
                // Fallback to npx degit
                degitCommand = 'npx degit';
            }
            // Build the repository URL for degit
            let degitRepo = repoUrl;
            // Add provider prefix for non-GitHub providers
            if (provider !== 'github') {
                switch (provider) {
                    case 'gitlab':
                        degitRepo = `gitlab:${repoUrl}`;
                        break;
                    case 'bitbucket':
                        degitRepo = `bitbucket:${repoUrl}`;
                        break;
                    case 'sourcehut':
                        degitRepo = `git.sr.ht/${repoUrl}`;
                        break;
                }
            }
            const fullCommand = `${degitCommand} ${degitRepo} ${targetDir}`;
            spinner.text = source/* default */.Ay.hex('#00d2d3')(`Executing: ${fullCommand}`);
            await cloneUtils_execAsync(fullCommand, {
                cwd: process.cwd(),
                timeout: 60000 // 60 second timeout
            });
            spinner.succeed(source/* default */.Ay.hex('#10ac84')(`✅ Repository cloned successfully from ${provider.toUpperCase()}`));
            // Install dependencies if package.json exists
            if (!options.noDeps) {
                await installDependenciesForClone(targetPath, targetDir || 'cloned-repo');
            }
            // Create .env file from templates
            await createEnvFile(targetPath);
            // Initialize git repository
            if (!options.noGit) {
                await initializeGitRepository(targetPath, targetDir || 'cloned-repo');
            }
            // Show success message
            showCloneSuccessMessage(targetDir || 'cloned-repo', userRepo);
            // Return result for history tracking
            return {
                projectName: targetDir || 'cloned-repo',
                provider: provider
            };
        }
        catch (error) {
            spinner.fail(source/* default */.Ay.red('Failed to clone repository'));
            if (error.message.includes('not found') || error.message.includes('404')) {
                throw new Error(`Repository ${userRepo} not found or is private`);
            }
            else {
                throw new Error(`Failed to clone repository: ${error.message}`);
            }
        }
    }
    catch (error) {
        logError('Clone failed', error);
        console.log('\n' + source/* default */.Ay.hex('#00d2d3')('📝 Supported formats:'));
        console.log('  ' + source/* default */.Ay.hex('#95afc0')('GitHub (default):'));
        console.log('    ' + source/* default */.Ay.hex('#10ac84')('pi clone facebook/react my-app'));
        console.log('    ' + source/* default */.Ay.hex('#10ac84')('pi clone github:vercel/next.js'));
        console.log('  ' + source/* default */.Ay.hex('#95afc0')('GitLab:'));
        console.log('    ' + source/* default */.Ay.hex('#ff6b6b')('pi clone gitlab:user/project'));
        console.log('  ' + source/* default */.Ay.hex('#95afc0')('BitBucket:'));
        console.log('    ' + source/* default */.Ay.hex('#9c88ff')('pi clone bitbucket:user/repo'));
        console.log('  ' + source/* default */.Ay.hex('#95afc0')('SourceHut:'));
        console.log('    ' + source/* default */.Ay.hex('#ffa502')('pi clone sourcehut:user/repo'));
        console.log('  ' + source/* default */.Ay.hex('#95afc0')('Full URLs:'));
        console.log('    ' + source/* default */.Ay.hex('#00d2d3')('pi clone https://github.com/user/repo.git'));
        console.log('    ' + source/* default */.Ay.hex('#00d2d3')('pi clone https://gitlab.com/user/project.git'));
        return null;
    }
}
async function createEnvFile(targetPath) {
    try {
        const envSpinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.blue('Creating .env file...')).start();
        // Look for .env template files
        const envTemplateFiles = await fs_extra_lib.readdir(targetPath);
        const envTemplates = envTemplateFiles.filter(file => file.startsWith('.env.') && file !== '.env');
        if (envTemplates.length === 0) {
            envSpinner.info(source/* default */.Ay.gray('No .env template files found'));
            return;
        }
        // Collect all environment variables from template files
        const envVars = new Set();
        for (const templateFile of envTemplates) {
            const templatePath = external_path_.join(targetPath, templateFile);
            const content = await fs_extra_lib.readFile(templatePath, 'utf-8');
            // Extract variable names from template files
            const lines = content.split('\n');
            for (const line of lines) {
                const trimmedLine = line.trim();
                if (trimmedLine && !trimmedLine.startsWith('#')) {
                    const [key] = trimmedLine.split('=');
                    if (key) {
                        envVars.add(key.trim());
                    }
                }
            }
        }
        if (envVars.size > 0) {
            // Create .env file with empty values
            const envContent = Array.from(envVars)
                .sort()
                .map(key => `${key}=`)
                .join('\n');
            const envPath = external_path_.join(targetPath, '.env');
            await fs_extra_lib.writeFile(envPath, envContent + '\n');
            envSpinner.succeed(source/* default */.Ay.green(`Created .env file with ${envVars.size} variables`));
        }
        else {
            envSpinner.info(source/* default */.Ay.gray('No environment variables found in template files'));
        }
    }
    catch (error) {
        // Don't fail the whole process if .env creation fails
        console.log(source/* default */.Ay.yellow('⚠️  Could not create .env file automatically'));
    }
}
async function initializeGitRepository(targetPath, targetDir) {
    const gitSpinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#00d2d3')('🔧 Initializing git repository...')).start();
    try {
        // Try to initialize git repository using MCP server commands first
        try {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Initializing git with ginit...');
            await cloneUtils_execAsync('ginit', { cwd: targetPath });
        }
        catch {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Initializing git with git init...');
            await cloneUtils_execAsync('git init', { cwd: targetPath });
        }
        // Add all files to git
        try {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Adding files with gadd...');
            await cloneUtils_execAsync('gadd', { cwd: targetPath });
        }
        catch {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Adding files with git add...');
            await cloneUtils_execAsync('git add .', { cwd: targetPath });
        }
        // Make initial commit
        try {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Creating initial commit with gcommit...');
            await cloneUtils_execAsync('gcommit "Initial Commit from Package Installer CLI"', { cwd: targetPath });
        }
        catch {
            gitSpinner.text = source/* default */.Ay.hex('#00d2d3')('Creating initial commit with git commit...');
            await cloneUtils_execAsync('git commit -m "Initial Commit from Package Installer CLI - Cloned Repository"', { cwd: targetPath });
        }
        gitSpinner.succeed(source/* default */.Ay.hex('#10ac84')('✅ Git repository initialized with initial commit'));
    }
    catch (error) {
        gitSpinner.warn(source/* default */.Ay.hex('#ffa502')('⚠️  Could not initialize git repository automatically'));
        console.log(source/* default */.Ay.hex('#95afc0')('💡 You can initialize git manually:'));
        console.log(source/* default */.Ay.hex('#95afc0')(`   cd ${targetDir}`));
        console.log(source/* default */.Ay.hex('#95afc0')('   git init'));
        console.log(source/* default */.Ay.hex('#95afc0')('   git add .'));
        console.log(source/* default */.Ay.hex('#95afc0')('   git commit -m "Initial commit"'));
    }
}
async function installDependenciesForClone(projectPath, projectName) {
    const { installProjectDependencies } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2820));
    await installProjectDependencies(projectPath, projectName, true); // Install MCP server for cloned projects
}
function showCloneSuccessMessage(projectName, githubRepo) {
    console.log('\n' + source/* default */.Ay.hex('#10ac84')('✨ Repository cloned successfully!'));
    console.log('');
    console.log(source/* default */.Ay.hex('#00d2d3')('📁 Project Details:'));
    console.log(`   ${source/* default */.Ay.hex('#ffa502')('Repository:')} ${source/* default */.Ay.hex('#00d2d3')(githubRepo)}`);
    console.log(`   ${source/* default */.Ay.hex('#ffa502')('Project Name:')} ${source/* default */.Ay.hex('#9c88ff')(projectName)}`);
    console.log(`   ${source/* default */.Ay.hex('#ffa502')('Location:')} ${source/* default */.Ay.hex('#95afc0')(external_path_.resolve(process.cwd(), projectName))}`);
    console.log('');
    console.log(source/* default */.Ay.hex('#00d2d3')('🚀 Next Steps:'));
    console.log(`   ${source/* default */.Ay.hex('#95afc0')('1.')} cd ${projectName}`);
    console.log(`   ${source/* default */.Ay.hex('#95afc0')('2.')} Read the README.md for project-specific instructions`);
    console.log(`   ${source/* default */.Ay.hex('#95afc0')('3.')} Start exploring and building! 🎉`);
    console.log('');
    console.log(source/* default */.Ay.hex('#ffa502')('💡 Pro Tip: Check package.json scripts for available commands'));
    console.log('');
}

;// ./dist/commands/clone.js





/**
 * Display help for clone command using standardized format
 */
function showCloneHelp() {
    const helpConfig = {
        commandName: 'Clone',
        emoji: '📥',
        description: 'Clone any public repository from GitHub, GitLab, BitBucket, or SourceHut.\nAutomatically installs dependencies, creates .env files, and tracks usage.',
        usage: [
            'clone <user/repo> [project-name] [options]',
            'clone [options]'
        ],
        options: [
            { flag: '--offline', description: 'Use cached templates if available' },
            { flag: '--no-deps', description: 'Skip dependency installation' },
            { flag: '--no-git', description: 'Skip git initialization' },
            { flag: '--shallow', description: 'Create shallow clone (faster)' },
            { flag: '--branch <name>', description: 'Clone specific branch' },
            { flag: '--template', description: 'Treat as template repository' }
        ],
        examples: [
            { command: 'clone facebook/react', description: 'Clone from GitHub' },
            { command: 'clone facebook/react my-app', description: 'Clone with custom name' },
            { command: 'clone gitlab:user/project', description: 'Clone from GitLab' },
            { command: 'clone bitbucket:user/repo', description: 'Clone from BitBucket' },
            { command: 'clone sourcehut:user/repo', description: 'Clone from SourceHut' },
            { command: 'clone user/repo --offline', description: 'Use cached version' },
            { command: 'clone user/repo --no-deps', description: 'Skip dependencies' },
            { command: 'clone user/repo --shallow', description: 'Shallow clone' }
        ],
        additionalSections: [
            {
                title: 'Supported Platforms',
                items: [
                    'GitHub (default): user/repo',
                    'GitLab: gitlab:user/repo',
                    'BitBucket: bitbucket:user/repo',
                    'SourceHut: sourcehut:user/repo'
                ]
            },
            {
                title: 'Features',
                items: [
                    'Automatic dependency installation',
                    'Environment file creation from templates',
                    'Git repository initialization',
                    'Usage tracking and history',
                    'Offline mode with cached templates',
                    'Shallow cloning for faster downloads',
                    'Branch-specific cloning'
                ]
            }
        ],
        tips: [
            'Use --offline flag for cached repositories to work without internet',
            'Shallow clones are faster but have limited git history'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
async function clone_cloneRepo(userRepo, projectName, options = {}) {
    const startTime = Date.now();
    const cacheManager = new cacheUtils/* CacheManager */.Go();
    // Check for help flag
    if (options.help || options['-h'] || options['--help']) {
        showCloneHelp();
        return;
    }
    // Handle "." as project name - use current directory name
    let actualProjectName = projectName;
    if (projectName === '.') {
        actualProjectName = external_path_.basename(process.cwd());
        console.log(source/* default */.Ay.cyan(`Using current directory name: ${source/* default */.Ay.bold(actualProjectName)}`));
    }
    // Configure clone options from passed options
    const cloneOptions = {
        offline: options.offline || false,
        noDeps: options.noDeps || options['no-deps'] || false,
        noGit: options.noGit || options['no-git'] || false,
        shallow: options.shallow || false,
        branch: options.branch || null,
        template: options.template || false,
        ...options
    };
    try {
        const result = await cloneRepo(userRepo, actualProjectName, cloneOptions);
        // Track the clone operation in history
        if (result) {
            await cacheManager.addProjectToHistory({
                name: result.projectName || actualProjectName || 'unknown',
                path: projectName === '.' ? process.cwd() : external_path_.resolve(process.cwd(), result.projectName),
                framework: 'cloned',
                language: 'unknown',
                features: [],
                createdAt: new Date().toISOString()
            });
            // Track command completion
            const duration = Date.now() - startTime;
            await cacheManager.addCommandToHistory({
                command: 'clone',
                args: [userRepo, actualProjectName || ''],
                projectPath: projectName === '.' ? process.cwd() : external_path_.resolve(process.cwd(), result.projectName),
                success: true,
                duration
            });
        }
    }
    catch (error) {
        // Track failed clone attempts
        const duration = Date.now() - startTime;
        await cacheManager.addCommandToHistory({
            command: 'clone',
            args: [userRepo, actualProjectName || ''],
            projectPath: process.cwd(),
            success: false,
            duration
        });
        throw error;
    }
}

// EXTERNAL MODULE: ./dist/commands/add.js
var add = __webpack_require__(2191);
;// ./dist/commands/upgrade-cli.js
/**
 * Upgrade CLI command - Updates Package Installer CLI to the latest version
 */








const upgrade_cli_execAsync = (0,external_util_.promisify)(external_child_process_.exec);
/**
 * Display help for upgrade-cli command
 */
function showUpgradeHelp() {
    const helpConfig = {
        commandName: 'upgrade-cli',
        emoji: '🚀',
        description: 'Update Package Installer CLI to the latest version with intelligent upgrade management.\nIncludes breaking change detection and version compatibility checks!',
        usage: ['pi upgrade-cli'],
        options: [],
        examples: [
            { command: 'pi upgrade-cli', description: 'Smart upgrade with breaking change detection' },
            { command: 'pi upgrade-cli --help', description: 'Show this help message' }
        ],
        additionalSections: [
            {
                title: '💡 Enhanced Features',
                items: [
                    '• Semantic version analysis and breaking change detection',
                    '• Interactive confirmation for major version upgrades',
                    '• Automatic @latest tag installation for maximum compatibility',
                    '• Package size and release date information',
                    '• Comprehensive upgrade verification and rollback guidance'
                ]
            }
        ],
        tips: [
            'CLI will prompt for confirmation on major version upgrades',
            'Breaking changes are automatically detected and explained',
            'Use npm install -g package-installer-cli@<version> to rollback'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
/**
 * Get current CLI version
 */
async function getCurrentVersion() {
    try {
        const { stdout } = await upgrade_cli_execAsync('pi --version');
        return stdout.trim();
    }
    catch (error) {
        return 'unknown';
    }
}
/**
 * Get latest version from npm registry
 */
async function upgrade_cli_getLatestVersion() {
    try {
        const { stdout } = await upgrade_cli_execAsync('npm view @0xshariq/package-installer version');
        return stdout.trim();
    }
    catch (error) {
        throw new Error('Failed to fetch latest version from npm registry');
    }
}
/**
 * Detect package manager
 */
async function detectPackageManager() {
    try {
        await upgrade_cli_execAsync('pnpm --version');
        return 'pnpm';
    }
    catch { }
    try {
        await upgrade_cli_execAsync('yarn --version');
        return 'yarn';
    }
    catch { }
    return 'npm';
}
/**
 * Get package information
 */
async function upgrade_cli_getPackageInfo() {
    try {
        const { stdout } = await upgrade_cli_execAsync('npm view @0xshariq/package-installer --json');
        return JSON.parse(stdout);
    }
    catch (error) {
        return {};
    }
}
/**
 * Show upgrade summary
 */
function showUpgradeSummary(currentVersion, latestVersion, packageInfo) {
    console.log('\n' + (0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#10ac84')('📦 Upgrade Summary') + '\n\n' +
        source/* default */.Ay.white('Current Version: ') + source/* default */.Ay.hex('#ffa502')(currentVersion === 'unknown' ? 'Not detected' : `v${currentVersion}`) + '\n' +
        source/* default */.Ay.white('Latest Version:  ') + source/* default */.Ay.hex('#10ac84')(`v${latestVersion}`) + '\n' +
        source/* default */.Ay.white('Package Size:    ') + source/* default */.Ay.hex('#95afc0')((packageInfo.dist?.unpackedSize ? `${(packageInfo.dist.unpackedSize / 1024).toFixed(0)} KB` : 'Unknown')) + '\n' +
        source/* default */.Ay.white('Last Updated:    ') + source/* default */.Ay.hex('#95afc0')((packageInfo.time?.[latestVersion] ? new Date(packageInfo.time[latestVersion]).toLocaleDateString() : 'Unknown')), {
        padding: 1,
        borderStyle: 'single',
        borderColor: '#10ac84'
    }));
}
/**
 * Show breaking changes warning for major version upgrades
 */
async function showBreakingChangesWarning(currentVersion, latestVersion) {
    if (currentVersion === 'unknown')
        return true;
    const currentMajor = node_modules_semver.major(currentVersion);
    const latestMajor = node_modules_semver.major(latestVersion);
    if (latestMajor > currentMajor) {
        console.log('\n' + (0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#ff6b6b')('⚠️  MAJOR VERSION UPGRADE DETECTED') + '\n\n' +
            source/* default */.Ay.white(`This upgrade involves a major version change (v${currentMajor}.x → v${latestMajor}.x)`) + '\n' +
            source/* default */.Ay.white('which may include breaking changes that could affect your workflows.') + '\n\n' +
            source/* default */.Ay.hex('#ffa502')('Potential Breaking Changes:') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  • Command line interface modifications') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  • Template structure changes') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  • Configuration file format updates') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  • Feature removals or significant changes') + '\n\n' +
            source/* default */.Ay.cyan('💡 Recommendation:') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  Review the changelog before proceeding with the upgrade.'), {
            padding: 1,
            borderStyle: 'double',
            borderColor: '#ff6b6b'
        }));
        const { shouldProceed } = await lib["default"].prompt([
            {
                type: 'confirm',
                name: 'shouldProceed',
                message: 'Do you want to proceed with this major version upgrade?',
                default: false
            }
        ]);
        return shouldProceed;
    }
    return true;
}
/**
 * Main upgrade CLI function
 */
async function upgradeCliCommand() {
    // Check for help flag
    if (process.argv.includes('--help') || process.argv.includes('-h')) {
        showUpgradeHelp();
        return;
    }
    console.log('\n' + source/* default */.Ay.hex('#10ac84')('🚀 Package Installer CLI Upgrade'));
    console.log(source/* default */.Ay.hex('#95afc0')('Checking for updates...\n'));
    const spinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#f39c12')('🔍 Fetching version information...')).start();
    try {
        const [currentVersion, latestVersion, packageManager, packageInfo] = await Promise.all([
            getCurrentVersion(),
            upgrade_cli_getLatestVersion(),
            detectPackageManager(),
            upgrade_cli_getPackageInfo()
        ]);
        spinner.succeed(source/* default */.Ay.green('✅ Version information retrieved'));
        // Show upgrade summary
        showUpgradeSummary(currentVersion, latestVersion, packageInfo);
        if (currentVersion === latestVersion) {
            console.log('\n' + source/* default */.Ay.hex('#10ac84')('🎉 You are already using the latest version!'));
            return;
        }
        if (currentVersion === 'unknown') {
            console.log('\n' + source/* default */.Ay.hex('#ffa502')('⚠️  Could not detect current version.'));
            console.log(source/* default */.Ay.hex('#95afc0')('   The CLI might not be installed globally.'));
            console.log(source/* default */.Ay.hex('#95afc0')('   Proceeding with installation...'));
        }
        else {
            // Check for breaking changes and get user confirmation
            const shouldProceed = await showBreakingChangesWarning(currentVersion, latestVersion);
            if (!shouldProceed) {
                console.log('\n' + source/* default */.Ay.yellow('⏹️  Upgrade cancelled by user'));
                return;
            }
        }
        // Perform upgrade with @latest tag
        const upgradeSpinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#10ac84')(`🚀 Upgrading CLI using ${packageManager}...`)).start();
        let upgradeCommand;
        switch (packageManager) {
            case 'pnpm':
                upgradeCommand = 'pnpm add -g @0xshariq/package-installer@latest';
                break;
            case 'yarn':
                upgradeCommand = 'yarn global add @0xshariq/package-installer@latest';
                break;
            default:
                upgradeCommand = 'npm install -g @0xshariq/package-installer@latest';
        }
        upgradeSpinner.text = source/* default */.Ay.hex('#10ac84')(`Installing ${latestVersion} with @latest tag...`);
        await upgrade_cli_execAsync(upgradeCommand, { timeout: 120000 }); // 2 minute timeout
        upgradeSpinner.succeed(source/* default */.Ay.green('✅ CLI upgraded successfully!'));
        // Verify upgrade
        const verifySpinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#00d2d3')('🔍 Verifying upgrade...')).start();
        const newVersion = await getCurrentVersion();
        if (newVersion === latestVersion) {
            verifySpinner.succeed(source/* default */.Ay.green(`✅ Upgrade verified! Now running v${newVersion}`));
        }
        else {
            verifySpinner.warn(source/* default */.Ay.yellow('⚠️  Upgrade completed but version verification failed'));
            console.log(source/* default */.Ay.hex('#95afc0')('   Try running: pi --version'));
        }
        // Show success message with changelog link
        console.log('\n' + (0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#10ac84')('🎉 Upgrade Complete!') + '\n\n' +
            source/* default */.Ay.white(`Successfully upgraded from v${currentVersion} to v${latestVersion}`) + '\n' +
            source/* default */.Ay.white('All new features and improvements are now available!') + '\n\n' +
            source/* default */.Ay.hex('#00d2d3')('💡 What\'s new?') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  • Enhanced template system with better error handling') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  • Improved performance optimizations') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  • New analytics and tracking features') + '\n' +
            source/* default */.Ay.hex('#95afc0')('  • Better version management and upgrade warnings') + '\n\n' +
            source/* default */.Ay.cyan('📖 View full changelog:') + '\n' +
            source/* default */.Ay.blue('  https://github.com/0xshariq/package-installer-cli/releases'), {
            padding: 1,
            borderStyle: 'round',
            borderColor: '#10ac84',
            backgroundColor: '#001a00'
        }));
    }
    catch (error) {
        spinner.fail(source/* default */.Ay.red('❌ Upgrade failed'));
        console.log(source/* default */.Ay.red(`\n❌ Error: ${error.message}`));
        console.log(source/* default */.Ay.hex('#95afc0')('\n💡 Try running the upgrade manually:'));
        console.log(source/* default */.Ay.hex('#95afc0')('   npm install -g @0xshariq/package-installer@latest'));
        console.log(source/* default */.Ay.hex('#95afc0')('   # or'));
        console.log(source/* default */.Ay.hex('#95afc0')('   yarn global add @0xshariq/package-installer@latest'));
        console.log(source/* default */.Ay.hex('#95afc0')('   # or'));
        console.log(source/* default */.Ay.hex('#95afc0')('   pnpm add -g @0xshariq/package-installer@latest'));
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/cli-table3@0.6.5/node_modules/cli-table3/index.js
var cli_table3 = __webpack_require__(1248);
// EXTERNAL MODULE: ./dist/utils/historyManager.js
var utils_historyManager = __webpack_require__(4720);
;// ./dist/utils/dashboard.js
/**
 * Advanced Dashboard Utility
 * Creates beautiful terminal interfaces with advanced styling for Package Installer CLI
 */









/**
 * Create an amazing CLI banner
 */
function createBanner(title = 'Package Installer CLI') {
    console.clear();
    // Create figlet text with proper title
    const figletText = figlet.textSync(title.length > 15 ? 'Package Installer' : title, {
        font: 'ANSI Shadow',
        horizontalLayout: 'fitted',
        width: 80
    });
    // Apply gradient
    const gradientText = gradientString('cyan', 'magenta', 'yellow')(figletText);
    // Create a box around it
    const banner = boxen(gradientText, {
        padding: 1,
        margin: 1,
        borderStyle: 'double',
        borderColor: 'cyan',
        backgroundColor: '#1a1a1a'
    });
    console.log(banner);
    // Add tagline with updated branding
    const tagline = chalk.hex('#00d2d3')('🚀 Advanced Project Analytics Dashboard');
    const version = chalk.hex('#95afc0')('v3.2.0');
    const author = chalk.hex('#ffa502')('by @0xshariq');
    const centered = `${tagline} ${version} ${author}`;
    const padding = Math.max(0, Math.floor(((process.stdout.columns || 80) - centered.length) / 2));
    console.log(' '.repeat(padding) + centered);
    console.log();
}
/**
 * Display project statistics in a beautiful table
 */
function displayProjectStats(stats) {
    console.log(gradientString('cyan', 'magenta')('📊 PROJECT STATISTICS\n'));
    // Main stats table
    const statsTable = new Table({
        head: [
            chalk.hex('#00d2d3')('Metric'),
            chalk.hex('#10ac84')('Value'),
            chalk.hex('#ffa502')('Details')
        ],
        colWidths: [25, 15, 40],
        style: {
            head: [],
            border: ['cyan']
        }
    });
    statsTable.push([
        chalk.white('🏗️  Total Projects'),
        chalk.green(stats.totalProjects.toString()),
        chalk.gray('Projects created with CLI')
    ], [
        chalk.white('📝 Languages Used'),
        chalk.blue(Object.keys(stats.languageBreakdown).length.toString()),
        chalk.gray(Object.keys(stats.languageBreakdown).join(', ') || 'No data')
    ], [
        chalk.white('🎯 Frameworks Used'),
        chalk.cyan(Object.keys(stats.frameworkBreakdown).length.toString()),
        chalk.gray(Object.keys(stats.frameworkBreakdown).join(', ') || 'No data')
    ], [
        chalk.white('⚡ Total Commands'),
        chalk.yellow(stats.totalCommands.toString()),
        chalk.gray('CLI commands executed')
    ], [
        chalk.white('🔥 Usage Streak'),
        chalk.magenta(stats.usageStreak.toString() + ' days'),
        chalk.gray('Consecutive days of usage')
    ], [
        chalk.white('📅 Last Used'),
        chalk.greenBright(stats.lastUsed || 'Never'),
        chalk.gray('Most recent CLI activity')
    ]);
    console.log(statsTable.toString());
    // Display command breakdown if available
    if (Object.keys(stats.commandBreakdown).length > 0) {
        console.log('\n' + gradientString('green', 'blue')('🎮 COMMAND USAGE BREAKDOWN\n'));
        const commandTable = new Table({
            head: [
                chalk.hex('#10ac84')('Command'),
                chalk.hex('#00d2d3')('Count'),
                chalk.hex('#ffa502')('Percentage'),
                chalk.hex('#ff6b6b')('Usage Bar')
            ],
            style: {
                head: [],
                border: ['green']
            }
        });
        const totalCommands = Object.values(stats.commandBreakdown).reduce((sum, count) => sum + count, 0);
        Object.entries(stats.commandBreakdown)
            .sort(([, a], [, b]) => b - a)
            .slice(0, 8)
            .forEach(([command, count]) => {
            const percentage = ((count / totalCommands) * 100).toFixed(1);
            const barLength = Math.round((count / totalCommands) * 20);
            const bar = '█'.repeat(barLength) + '░'.repeat(20 - barLength);
            commandTable.push([
                chalk.white(command),
                chalk.cyan(count.toString()),
                chalk.green(percentage + '%'),
                chalk.hex('#74b9ff')(bar)
            ]);
        });
        console.log(commandTable.toString());
    }
    // Language breakdown pie chart (text-based)
    if (Object.keys(stats.languageBreakdown).length > 0) {
        console.log('\n' + gradientString('yellow', 'red')('🎯 LANGUAGE BREAKDOWN\n'));
        const total = Object.values(stats.languageBreakdown).reduce((a, b) => a + b, 0);
        const langTable = new Table({
            head: [
                chalk.hex('#ffa502')('Language'),
                chalk.hex('#00d2d3')('Projects'),
                chalk.hex('#10ac84')('Percentage'),
                chalk.hex('#95afc0')('Visual')
            ],
            style: {
                head: [],
                border: ['yellow']
            }
        });
        for (const [lang, count] of Object.entries(stats.languageBreakdown)) {
            const percentage = ((count / total) * 100).toFixed(1);
            const barLength = Math.round((count / total) * 20);
            const bar = '█'.repeat(barLength) + '░'.repeat(20 - barLength);
            langTable.push([
                getLanguageIcon(lang) + ' ' + chalk.white(lang),
                chalk.cyan(count.toString()),
                chalk.green(percentage + '%'),
                chalk.hex('#00d2d3')(bar)
            ]);
        }
        console.log(langTable.toString());
    }
    // Framework breakdown display
    if (Object.keys(stats.frameworkBreakdown).length > 0) {
        console.log('\n' + gradientString('magenta', 'cyan')('🎯 FRAMEWORK BREAKDOWN\n'));
        const total = Object.values(stats.frameworkBreakdown).reduce((a, b) => a + b, 0);
        const frameworkTable = new Table({
            head: [
                chalk.hex('#ff6b6b')('Framework'),
                chalk.hex('#00d2d3')('Projects'),
                chalk.hex('#10ac84')('Percentage'),
                chalk.hex('#95afc0')('Visual')
            ],
            style: {
                head: [],
                border: ['magenta']
            }
        });
        for (const [framework, count] of Object.entries(stats.frameworkBreakdown)) {
            const percentage = ((count / total) * 100).toFixed(1);
            const barLength = Math.round((count / total) * 20);
            const bar = '█'.repeat(barLength) + '░'.repeat(20 - barLength);
            frameworkTable.push([
                getFrameworkIcon(framework) + ' ' + chalk.white(framework),
                chalk.cyan(count.toString()),
                chalk.green(percentage + '%'),
                chalk.hex('#ff6b6b')(bar)
            ]);
        }
        console.log(frameworkTable.toString());
    }
}
/**
 * Display recent projects in a beautiful format
 */
function displayRecentProjects(projects) {
    if (projects.length === 0)
        return;
    console.log('\n' + gradientString('green', 'blue')('📂 RECENT PROJECTS\n'));
    const projectTable = new Table({
        head: [
            chalk.hex('#10ac84')('Project'),
            chalk.hex('#00d2d3')('Language'),
            chalk.hex('#ffa502')('Framework'),
            chalk.hex('#95afc0')('Size'),
            chalk.hex('#ff6b6b')('Last Modified')
        ],
        style: {
            head: [],
            border: ['green']
        }
    });
    projects.slice(0, 10).forEach(project => {
        projectTable.push([
            chalk.white('📁 ' + project.name),
            getLanguageIcon(project.language) + ' ' + chalk.cyan(project.language),
            chalk.yellow(project.framework || 'N/A'),
            chalk.magenta(formatFileSize(project.size)),
            chalk.gray(formatDate(project.lastModified))
        ]);
    });
    console.log(projectTable.toString());
}
/**
 * Display feature usage statistics from history
 */
function displayFeatureUsageFromHistory(featureStats) {
    console.log('\n' + gradientString('orange', 'red')('🎯 FEATURE USAGE\n'));
    if (featureStats.length === 0) {
        console.log(chalk.gray('   No features used yet. Use \'pi add\' to add features to projects.\n'));
        return;
    }
    const featureTable = new Table({
        head: [
            chalk.cyan('Feature'),
            chalk.cyan('Usage Count'),
            chalk.cyan('Frameworks'),
            chalk.cyan('Popularity')
        ],
        colWidths: [18, 15, 25, 15],
        style: {
            head: ['cyan'],
            border: ['dim']
        },
        chars: {
            'top': '─',
            'top-mid': '┬',
            'top-left': '┌',
            'top-right': '┐',
            'bottom': '─',
            'bottom-mid': '┴',
            'bottom-left': '└',
            'bottom-right': '┘',
            'left': '│',
            'left-mid': '├',
            'mid': '─',
            'mid-mid': '┼',
            'right': '│',
            'right-mid': '┤',
            'middle': '│'
        }
    });
    featureStats.slice(0, 5).forEach((feature) => {
        const icon = getFeatureIcon(feature.feature);
        const popularity = '█'.repeat(Math.ceil((feature.count / Math.max(...featureStats.map(f => f.count))) * 10));
        featureTable.push([
            `${icon} ${feature.feature}`,
            chalk.green(feature.count.toString()),
            feature.frameworks.join(', '),
            chalk.blue(popularity)
        ]);
    });
    console.log(featureTable.toString());
}
/**
 * Display project statistics from history
 */
function displayProjectStatsFromHistory(history) {
    console.log('\n' + gradientString('cyan', 'blue')('📊 PROJECT STATISTICS\n'));
    const stats = history.statistics;
    const frameworks = new Map();
    const languages = new Map();
    // Calculate framework and language usage
    history.projects.forEach((project) => {
        frameworks.set(project.framework, (frameworks.get(project.framework) || 0) + 1);
        languages.set(project.language, (languages.get(project.language) || 0) + 1);
    });
    const projectTable = new Table({
        head: [
            chalk.cyan('Metric'),
            chalk.cyan('Value'),
            chalk.cyan('Details')
        ],
        colWidths: [25, 15, 40],
        style: {
            head: ['cyan'],
            border: ['dim']
        },
        chars: {
            'top': '─',
            'top-mid': '┬',
            'top-left': '┌',
            'top-right': '┐',
            'bottom': '─',
            'bottom-mid': '┴',
            'bottom-left': '└',
            'bottom-right': '┘',
            'left': '│',
            'left-mid': '├',
            'mid': '─',
            'mid-mid': '┼',
            'right': '│',
            'right-mid': '┤',
            'middle': '│'
        }
    });
    projectTable.push([
        '🏗️  Total Projects',
        chalk.green(stats.totalProjectsCreated.toString()),
        'Projects created with CLI'
    ]);
    projectTable.push([
        '⚡ Features Added',
        chalk.blue(stats.totalFeaturesAdded.toString()),
        'Total features installed'
    ]);
    if (stats.mostUsedFramework) {
        projectTable.push([
            '🎯 Top Framework',
            chalk.yellow(stats.mostUsedFramework),
            `Most popular framework`
        ]);
    }
    if (stats.mostUsedLanguage) {
        projectTable.push([
            '🔤 Top Language',
            chalk.magenta(stats.mostUsedLanguage),
            `Most used language`
        ]);
    }
    if (stats.mostUsedFeature) {
        projectTable.push([
            '🚀 Top Feature',
            chalk.cyan(stats.mostUsedFeature),
            `Most added feature`
        ]);
    }
    console.log(projectTable.toString());
}
/**
 * Display recent projects from history
 */
function displayRecentProjectsFromHistory(recentProjects) {
    console.log('\n' + gradientString('green', 'teal')('📁 RECENT PROJECTS\n'));
    if (recentProjects.length === 0) {
        console.log(chalk.gray('   No projects found. Create your first project with \'pi create\'.\n'));
        return;
    }
    const projectTable = new Table({
        head: [
            chalk.cyan('Project'),
            chalk.cyan('Framework'),
            chalk.cyan('Language'),
            chalk.cyan('Features'),
            chalk.cyan('Created')
        ],
        colWidths: [20, 15, 12, 25, 12],
        style: {
            head: ['cyan'],
            border: ['dim']
        },
        chars: {
            'top': '─',
            'top-mid': '┬',
            'top-left': '┌',
            'top-right': '┐',
            'bottom': '─',
            'bottom-mid': '┴',
            'bottom-left': '└',
            'bottom-right': '┘',
            'left': '│',
            'left-mid': '├',
            'mid': '─',
            'mid-mid': '┼',
            'right': '│',
            'right-mid': '┤',
            'middle': '│'
        }
    });
    recentProjects.slice(0, 5).forEach((project) => {
        const createdDate = new Date(project.createdAt).toLocaleDateString();
        const features = project.features?.length > 0 ? project.features.join(', ') : 'None';
        projectTable.push([
            chalk.white(project.name),
            chalk.yellow(project.framework),
            chalk.blue(project.language),
            chalk.gray(features.length > 20 ? features.substring(0, 20) + '...' : features),
            chalk.gray(createdDate)
        ]);
    });
    console.log(projectTable.toString());
}
/**
 * Get icon for feature
 */
function getFeatureIcon(featureName) {
    const icons = {
        'auth': '🔐',
        'docker': '🐳',
        'testing': '🧪',
        'ui': '🎨',
        'api': '🚀',
        'pwa': '📱',
        'monitoring': '📊'
    };
    return icons[featureName] || '⚡';
}
/**
 * Display available commands in a beautiful grid
 */
function displayCommandsGrid() {
    console.log('\n' + gradientString('purple', 'pink')('🎯 AVAILABLE COMMANDS\n'));
    const commands = [
        {
            name: 'create',
            description: 'Create new projects from templates',
            icon: '🏗️',
            color: '#00d2d3'
        },
        {
            name: 'analyze',
            description: 'Analyze project structure and dependencies',
            icon: '🔍',
            color: '#9c88ff'
        },
        {
            name: 'update',
            description: 'Update packages to latest versions',
            icon: '�',
            color: '#ff6b6b'
        },
        {
            name: 'add',
            description: 'Add features to existing projects',
            icon: '➕',
            color: '#ffa502'
        },
        {
            name: 'check',
            description: 'Check project health and issues',
            icon: '�',
            color: '#54a0ff'
        },
        {
            name: 'clean',
            description: 'Clean development artifacts',
            icon: '🧹',
            color: '#00d2d3'
        },
        {
            name: 'clone',
            description: 'Clone and setup repositories',
            icon: '�',
            color: '#10ac84'
        },
        {
            name: 'deploy',
            description: 'Deploy projects to platforms (Coming Soon)',
            icon: '🚀',
            color: '#ff9ff3'
        },
        {
            name: 'doctor',
            description: 'Diagnose and fix project issues',
            icon: '🩺',
            color: '#00d2d3'
        },
        {
            name: 'env',
            description: 'Manage environment variables',
            icon: '🌍',
            color: '#10ac84'
        },
        {
            name: 'upgrade-cli',
            description: 'Upgrade CLI to latest version',
            icon: '⬆️',
            color: '#5f27cd'
        }
    ];
    const commandTable = new Table({
        head: [
            chalk.hex('#ff6b6b')('Command'),
            chalk.hex('#00d2d3')('Description'),
            chalk.hex('#10ac84')('Usage')
        ],
        colWidths: [15, 40, 25],
        style: {
            head: [],
            border: ['magenta']
        }
    });
    commands.forEach(cmd => {
        commandTable.push([
            chalk.hex(cmd.color)(cmd.icon + ' ' + cmd.name),
            chalk.white(cmd.description),
            chalk.gray(`pi ${cmd.name}`)
        ]);
    });
    console.log(commandTable.toString());
}
/**
 * Create an interactive system info panel
 */
function displaySystemInfo() {
    console.log('\n' + (0,dist/* default */.Ay)('orange', 'red')('💻 SYSTEM INFORMATION\n'));
    const systemTable = new cli_table3({
        head: [
            source/* default */.Ay.hex('#ffa502')('Property'),
            source/* default */.Ay.hex('#00d2d3')('Value')
        ],
        colWidths: [20, 40],
        style: {
            head: [],
            border: ['yellow']
        }
    });
    systemTable.push([source/* default */.Ay.white('🖥️  Platform'), source/* default */.Ay.cyan(process.platform)], [source/* default */.Ay.white('⚡ Node Version'), source/* default */.Ay.green(process.version)], [source/* default */.Ay.white('📁 Working Directory'), source/* default */.Ay.gray(process.cwd().replace(process.env.HOME || '', '~'))], [source/* default */.Ay.white('🔧 Architecture'), source/* default */.Ay.blue(process.arch)], [source/* default */.Ay.white('💾 Memory Usage'), source/* default */.Ay.magenta(formatMemory(process.memoryUsage().heapUsed))]);
    console.log(systemTable.toString());
}
/**
 * Create a beautiful loading animation
 */
function createLoadingAnimation(message) {
    const frames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];
    let i = 0;
    return setInterval(() => {
        process.stdout.write('\r' + chalk.hex('#00d2d3')(frames[i]) + ' ' + chalk.white(message));
        i = (i + 1) % frames.length;
    }, 100);
}
/**
 * Display success message with celebration
 */
function dashboard_displaySuccessMessage(message, details) {
    const box = (0,node_modules_boxen/* default */.A)(`${source/* default */.Ay.green('✨ SUCCESS! ✨')}\n\n${source/* default */.Ay.white(message)}${details ? '\n\n' + details.map(d => source/* default */.Ay.gray('• ' + d)).join('\n') : ''}`, {
        padding: 1,
        margin: 1,
        borderStyle: 'double',
        borderColor: 'green',
        backgroundColor: '#0a3d0a'
    });
    console.log('\n' + box);
}
/**
 * Display error message with helpful information
 */
function displayErrorMessage(message, suggestions) {
    const box = (0,node_modules_boxen/* default */.A)(`${source/* default */.Ay.red('❌ ERROR! ❌')}\n\n${source/* default */.Ay.white(message)}${suggestions ? '\n\n' + source/* default */.Ay.yellow('Suggestions:') + '\n' +
        suggestions.map(s => source/* default */.Ay.gray('• ' + s)).join('\n') : ''}`, {
        padding: 1,
        margin: 1,
        borderStyle: 'double',
        borderColor: 'red',
        backgroundColor: '#3d0a0a'
    });
    console.log('\n' + box);
}
/**
 * Create a progress bar
 */
function createProgressBar(current, total, width = 40) {
    const percentage = current / total;
    const filled = Math.round(width * percentage);
    const empty = width - filled;
    const bar = '█'.repeat(filled) + '░'.repeat(empty);
    const percent = (percentage * 100).toFixed(1);
    return `${chalk.hex('#00d2d3')(bar)} ${chalk.white(percent)}% (${current}/${total})`;
}
// Helper functions
function getLanguageIcon(language) {
    const icons = {
        'nodejs': '🟢',
        'typescript': '🔵',
        'javascript': '🟡',
        'rust': '🦀',
        'python': '🐍',
        'go': '🐹',
        'java': '☕',
        'php': '🐘',
        'ruby': '💎',
        'nextjs': '⚫',
        'reactjs': '⚛️',
        'vuejs': '💚',
        'angularjs': '🅰️',
        'express': '🚂',
        'nestjs': '🔴'
    };
    return icons[language.toLowerCase()] || '📄';
}
function getFrameworkIcon(framework) {
    const icons = {
        'next.js': '⚫',
        'nextjs': '⚫',
        'react': '⚛️',
        'reactjs': '⚛️',
        'vue.js': '💚',
        'vue': '💚',
        'vuejs': '💚',
        'angular': '🅰️',
        'angularjs': '🅰️',
        'express': '🚂',
        'express.js': '🚂',
        'nestjs': '🔴',
        'nest.js': '🔴',
        'rust': '🦀',
        'django': '🐍',
        'flask': '🐍',
        'spring': '🍃',
        'laravel': '🔴'
    };
    return icons[framework.toLowerCase()] || '🏗️';
}
function formatFileSize(bytes) {
    const sizes = ['B', 'KB', 'MB', 'GB'];
    if (bytes === 0)
        return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
}
function formatMemory(bytes) {
    return (bytes / 1024 / 1024).toFixed(2) + ' MB';
}
function formatDate(date) {
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays === 1)
        return 'Today';
    if (diffDays === 2)
        return 'Yesterday';
    if (diffDays <= 7)
        return `${diffDays} days ago`;
    return date.toLocaleDateString();
}
/**
 * Detect project languages in a directory
 */
async function detectProjectLanguage(projectPath) {
    try {
        const files = await fs.readdir(projectPath);
        const detectionResults = detectLanguageFromFiles(files);
        return detectionResults
            .filter(result => result.confidence > 50)
            .sort((a, b) => b.confidence - a.confidence)
            .map(result => result.language);
    }
    catch (error) {
        return [];
    }
}
/**
 * Get project statistics from workspace
 */
/**
 * Detect project framework based on configuration files
 */
async function detectProjectFramework(projectPath) {
    try {
        // Check for Next.js
        if (await fs.pathExists(path.join(projectPath, 'next.config.js')) ||
            await fs.pathExists(path.join(projectPath, 'next.config.mjs')) ||
            await fs.pathExists(path.join(projectPath, 'next.config.ts'))) {
            return 'Next.js';
        }
        // Check for Angular
        if (await fs.pathExists(path.join(projectPath, 'angular.json'))) {
            return 'Angular';
        }
        // Check for Vue
        if (await fs.pathExists(path.join(projectPath, 'vue.config.js')) ||
            await fs.pathExists(path.join(projectPath, 'vite.config.js'))) {
            const packageJson = path.join(projectPath, 'package.json');
            if (await fs.pathExists(packageJson)) {
                const pkg = await fs.readJson(packageJson);
                if (pkg.dependencies?.vue || pkg.devDependencies?.vue) {
                    return 'Vue.js';
                }
                if (pkg.dependencies?.react || pkg.devDependencies?.react) {
                    return 'React';
                }
            }
        }
        // Check for Express
        const packageJson = path.join(projectPath, 'package.json');
        if (await fs.pathExists(packageJson)) {
            const pkg = await fs.readJson(packageJson);
            if (pkg.dependencies?.express || pkg.devDependencies?.express) {
                return 'Express';
            }
        }
        // Check for Rust
        if (await fs.pathExists(path.join(projectPath, 'Cargo.toml'))) {
            return 'Rust';
        }
        return null;
    }
    catch (error) {
        return null;
    }
}
async function gatherProjectStats(workspacePath = process.cwd()) {
    const stats = {
        totalProjects: 0,
        languageBreakdown: {},
        frameworkBreakdown: {},
        recentProjects: [],
        featuresUsed: [],
        totalCommands: 0,
        commandBreakdown: {},
        usageStreak: 0,
        lastUsed: 'Never'
    };
    try {
        // Load real data from history.json in .package-installer-cli folder
        const historyManager = new HistoryManager();
        await historyManager.init();
        const data = historyManager.getHistory();
        if (data) {
            // Get project statistics
            const projects = data.projects || [];
            stats.totalProjects = projects.length;
            // Extract recent project names (last 5)
            stats.recentProjects = projects
                .slice(-5)
                .map((p) => p.name || 'Unnamed Project')
                .reverse();
            // Calculate language breakdown from projects
            projects.forEach((project) => {
                if (project.language) {
                    stats.languageBreakdown[project.language] = (stats.languageBreakdown[project.language] || 0) + 1;
                }
            });
            // Calculate framework breakdown from projects
            projects.forEach((project) => {
                if (project.framework) {
                    stats.frameworkBreakdown[project.framework] = (stats.frameworkBreakdown[project.framework] || 0) + 1;
                }
            });
            // Get feature statistics
            const features = data.features || [];
            stats.featuresUsed = features
                .slice(-10)
                .map((f) => f.name || 'Unknown Feature')
                .filter((name) => name !== 'Unknown Feature');
            // Get command statistics using historyManager methods
            const commandStats = historyManager.getCommandStats();
            commandStats.forEach(stat => {
                stats.commandBreakdown[stat.command] = stat.count;
            });
            stats.totalCommands = Object.values(stats.commandBreakdown).reduce((sum, count) => sum + count, 0);
            // Calculate usage streak and last used
            const allEvents = [...projects, ...features];
            if (allEvents.length > 0) {
                const dates = allEvents
                    .map((event) => new Date(event.createdAt || event.addedAt || event.timestamp))
                    .filter((date) => !isNaN(date.getTime()))
                    .sort((a, b) => b.getTime() - a.getTime());
                if (dates.length > 0) {
                    stats.lastUsed = formatRelativeTime(dates[0]);
                    stats.usageStreak = calculateUsageStreak(dates);
                }
            }
        }
        // If in a project directory, detect current project info
        try {
            const languages = await detectProjectLanguage(workspacePath);
            languages.forEach((lang) => {
                stats.languageBreakdown[lang] = (stats.languageBreakdown[lang] || 0) + 1;
            });
            const framework = await detectProjectFramework(workspacePath);
            if (framework) {
                stats.frameworkBreakdown[framework] = (stats.frameworkBreakdown[framework] || 0) + 1;
            }
        }
        catch (error) {
            // Ignore if not in a valid project directory
        }
    }
    catch (error) {
        console.warn('Warning: Could not load analytics data:', error.message || error);
        // Return stats with all zeros - no dummy data
    }
    return stats;
}
/**
 * Helper functions for analytics
 */
function formatRelativeTime(date) {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    if (diffMinutes < 60)
        return `${diffMinutes} minutes ago`;
    if (diffHours < 24)
        return `${diffHours} hours ago`;
    if (diffDays === 1)
        return 'Yesterday';
    if (diffDays < 7)
        return `${diffDays} days ago`;
    if (diffDays < 30)
        return `${Math.floor(diffDays / 7)} weeks ago`;
    if (diffDays < 365)
        return `${Math.floor(diffDays / 30)} months ago`;
    return `${Math.floor(diffDays / 365)} years ago`;
}
function calculateUsageStreak(dates) {
    if (dates.length === 0)
        return 0;
    let streak = 1;
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    for (let i = 0; i < dates.length - 1; i++) {
        const current = new Date(dates[i]);
        const next = new Date(dates[i + 1]);
        current.setHours(0, 0, 0, 0);
        next.setHours(0, 0, 0, 0);
        const diffDays = Math.floor((current.getTime() - next.getTime()) / (1000 * 60 * 60 * 24));
        if (diffDays === 1) {
            streak++;
        }
        else if (diffDays > 1) {
            break;
        }
    }
    return streak;
}
/**
 * Scan for recent projects in common directories
 */
async function scanForRecentProjects() {
    const projects = [];
    const commonDirs = [
        path.join(process.env.HOME || '', 'Desktop'),
        path.join(process.env.HOME || '', 'Documents'),
        path.join(process.env.HOME || '', 'Projects'),
        path.join(process.env.HOME || '', 'Code'),
        process.cwd()
    ];
    for (const dir of commonDirs) {
        try {
            if (await fs.pathExists(dir)) {
                const entries = await fs.readdir(dir, { withFileTypes: true });
                for (const entry of entries.slice(0, 20)) { // Limit to prevent too much scanning
                    if (entry.isDirectory()) {
                        const projectPath = path.join(dir, entry.name);
                        // Check if it's a valid project
                        const hasPackageJson = await fs.pathExists(path.join(projectPath, 'package.json'));
                        const hasCargoToml = await fs.pathExists(path.join(projectPath, 'Cargo.toml'));
                        const hasRequirementsTxt = await fs.pathExists(path.join(projectPath, 'requirements.txt'));
                        if (hasPackageJson || hasCargoToml || hasRequirementsTxt) {
                            const stats = await fs.stat(projectPath);
                            const languages = await detectProjectLanguage(projectPath);
                            projects.push({
                                name: entry.name,
                                path: projectPath,
                                language: languages[0] || 'unknown',
                                lastModified: stats.mtime,
                                size: stats.size
                            });
                        }
                    }
                }
            }
        }
        catch (error) {
            // Continue if directory can't be read
        }
    }
    return projects.sort((a, b) => b.lastModified.getTime() - a.lastModified.getTime()).slice(0, 10);
}

;// ./dist/commands/update.js
/**
 * Update Command - Advanced Project Dependency Updater for Package Installer CLI
 * Updates specific packages or all dependencies for JavaScript, TypeScript, Python, Rust, Go, and Ruby projects
 * Features: Breaking change detection, specific package updates, bulk updates
 */













const update_execAsync = (0,external_util_.promisify)(external_child_process_.exec);
/**
 * Main update command - Updates specific packages or all project dependencies
 * Supports: pi update, pi update package1, pi update package1,package2,package3
 */
async function updateCommand(packages, options = {}) {
    // Handle help option
    if (options.help || packages === '--help' || packages === '-h') {
        showUpdateHelp();
        return;
    }
    // Display banner
    console.clear();
    const banner = (0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#4facfe', '#00f2fe'])('🔄 Package Installer CLI - Advanced Dependency Updater') + '\n\n' +
        source/* default */.Ay.white('Update specific packages or all dependencies with breaking change detection'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'cyan'
    });
    console.log(banner);
    try {
        const projectPath = process.cwd();
        // Detect project configuration
        const projectConfig = await detectProjectConfig(projectPath);
        if (!projectConfig) {
            console.log(source/* default */.Ay.yellow('⚠️  No supported project detected in current directory'));
            console.log(source/* default */.Ay.gray('Supported project types:'));
            console.log(source/* default */.Ay.gray('  • JavaScript/TypeScript (package.json)'));
            console.log(source/* default */.Ay.gray('  • Python (requirements.txt, pyproject.toml)'));
            console.log(source/* default */.Ay.gray('  • Rust (Cargo.toml)'));
            console.log(source/* default */.Ay.gray('  • Go (go.mod)'));
            console.log(source/* default */.Ay.gray('  • Ruby (Gemfile)'));
            return;
        }
        console.log(source/* default */.Ay.blue(`🔍 Detected: ${source/* default */.Ay.cyan(projectConfig.type)} project using ${source/* default */.Ay.cyan(projectConfig.packageManager)}`));
        // Parse package names if provided
        const packageList = packages ? packages.split(',').map(pkg => pkg.trim()).filter(Boolean) : [];
        if (packageList.length > 0) {
            console.log(source/* default */.Ay.cyan(`� Updating specific packages: ${packageList.join(', ')}`));
            await updateSpecificPackages(projectPath, projectConfig, packageList, options);
        }
        else {
            console.log(source/* default */.Ay.cyan('📦 Updating all project dependencies'));
            await updateAllDependencies(projectPath, projectConfig, options);
        }
    }
    catch (error) {
        displayErrorMessage('Dependency update failed', ['An error occurred during the update process', String(error)]);
    }
}
/**
 * Detect project configuration including type, package manager, and files
 */
async function detectProjectConfig(projectPath) {
    const projectTypes = [
        {
            file: 'package.json',
            type: 'JavaScript/TypeScript',
            getPackageManager: async () => {
                if (await fs_extra_lib.pathExists(external_path_.join(projectPath, 'pnpm-lock.yaml')))
                    return 'pnpm';
                if (await fs_extra_lib.pathExists(external_path_.join(projectPath, 'yarn.lock')))
                    return 'yarn';
                if (await fs_extra_lib.pathExists(external_path_.join(projectPath, 'bun.lockb')))
                    return 'bun';
                return 'npm';
            },
            dependencyFile: 'package.json'
        },
        {
            file: 'pyproject.toml',
            type: 'Python',
            getPackageManager: async () => 'poetry',
            dependencyFile: 'pyproject.toml'
        },
        {
            file: 'requirements.txt',
            type: 'Python',
            getPackageManager: async () => 'pip',
            dependencyFile: 'requirements.txt'
        },
        {
            file: 'Cargo.toml',
            type: 'Rust',
            getPackageManager: async () => 'cargo',
            dependencyFile: 'Cargo.toml'
        },
        {
            file: 'go.mod',
            type: 'Go',
            getPackageManager: async () => 'go',
            dependencyFile: 'go.mod'
        },
        {
            file: 'Gemfile',
            type: 'Ruby',
            getPackageManager: async () => 'bundle',
            dependencyFile: 'Gemfile'
        }
    ];
    for (const config of projectTypes) {
        if (await fs_extra_lib.pathExists(external_path_.join(projectPath, config.file))) {
            const packageManager = await config.getPackageManager();
            return {
                type: config.type,
                packageManager,
                dependencyFile: config.file
            };
        }
    }
    return null;
}
/**
 * Update specific packages with breaking change detection
 */
async function updateSpecificPackages(projectPath, projectConfig, packageNames, options) {
    console.log(source/* default */.Ay.blue(`\n� Analyzing ${packageNames.length} package(s) for updates...`));
    const packagesInfo = [];
    // Analyze each package
    for (const packageName of packageNames) {
        const info = await analyzePackageUpdate(projectPath, projectConfig, packageName);
        if (info) {
            packagesInfo.push(info);
        }
        else {
            console.log(source/* default */.Ay.yellow(`⚠️  Package '${packageName}' not found in dependencies`));
        }
    }
    if (packagesInfo.length === 0) {
        console.log(source/* default */.Ay.yellow('❌ No valid packages found to update'));
        return;
    }
    // Display update summary
    displayUpdateSummary(packagesInfo);
    // Check for breaking changes
    const hasBreakingChanges = packagesInfo.some(pkg => pkg.hasBreakingChanges);
    if (hasBreakingChanges) {
        console.log(source/* default */.Ay.red('\n⚠️  WARNING: Breaking changes detected!'));
        displayBreakingChanges(packagesInfo.filter(pkg => pkg.hasBreakingChanges));
        const { confirm } = await lib["default"].prompt([
            {
                type: 'confirm',
                name: 'confirm',
                message: 'Do you want to continue with these potentially breaking updates?',
                default: false
            }
        ]);
        if (!confirm) {
            console.log(source/* default */.Ay.yellow('❌ Update cancelled by user'));
            return;
        }
    }
    // Perform updates
    await performPackageUpdates(projectPath, projectConfig, packagesInfo, options);
}
/**
 * Update all dependencies in the project
 */
async function updateAllDependencies(projectPath, projectConfig, options) {
    console.log(source/* default */.Ay.blue('\n🔍 Analyzing all project dependencies...'));
    // Get current dependencies
    const currentDeps = await getCurrentDependencies(projectPath, projectConfig);
    if (Object.keys(currentDeps).length === 0) {
        console.log(source/* default */.Ay.yellow('❌ No dependencies found to update'));
        return;
    }
    const packagesInfo = [];
    const spinner = (0,node_modules_ora/* default */.Ay)(`Checking ${Object.keys(currentDeps).length} dependencies for updates...`).start();
    // Analyze all packages
    for (const [packageName] of Object.entries(currentDeps)) {
        const info = await analyzePackageUpdate(projectPath, projectConfig, packageName);
        if (info && info.currentVersion !== info.latestVersion) {
            packagesInfo.push(info);
        }
    }
    spinner.succeed(`Found ${packagesInfo.length} packages with available updates`);
    if (packagesInfo.length === 0) {
        console.log(source/* default */.Ay.green('✅ All dependencies are already up to date!'));
        return;
    }
    // Display update summary
    displayUpdateSummary(packagesInfo);
    // Check for breaking changes
    const breakingPackages = packagesInfo.filter(pkg => pkg.hasBreakingChanges);
    if (breakingPackages.length > 0) {
        console.log(source/* default */.Ay.red(`\n⚠️  WARNING: ${breakingPackages.length} package(s) have potential breaking changes!`));
        displayBreakingChanges(breakingPackages);
        const { confirm } = await lib["default"].prompt([
            {
                type: 'confirm',
                name: 'confirm',
                message: 'Do you want to continue with updates that may include breaking changes?',
                default: false
            }
        ]);
        if (!confirm) {
            console.log(source/* default */.Ay.yellow('❌ Update cancelled by user'));
            return;
        }
    }
    // Perform updates
    await performPackageUpdates(projectPath, projectConfig, packagesInfo, options);
}
/**
 * Get current dependencies from project files
 */
async function getCurrentDependencies(projectPath, projectConfig) {
    const dependencies = {};
    try {
        switch (projectConfig.type) {
            case 'JavaScript/TypeScript': {
                const packageJsonPath = external_path_.join(projectPath, 'package.json');
                const packageJson = await fs_extra_lib.readJson(packageJsonPath);
                Object.assign(dependencies, packageJson.dependencies || {});
                Object.assign(dependencies, packageJson.devDependencies || {});
                break;
            }
            case 'Python': {
                if (projectConfig.dependencyFile === 'pyproject.toml') {
                    // Handle Poetry dependencies
                    const tomlPath = external_path_.join(projectPath, 'pyproject.toml');
                    const tomlContent = await fs_extra_lib.readFile(tomlPath, 'utf-8');
                    // Simple TOML parsing for dependencies
                    const depMatch = tomlContent.match(/\[tool\.poetry\.dependencies\]([\s\S]*?)(?=\[|$)/);
                    if (depMatch) {
                        const depSection = depMatch[1];
                        const depLines = depSection.split('\n').filter(line => line.includes('='));
                        for (const line of depLines) {
                            const match = line.match(/^([^=]+)\s*=\s*"([^"]+)"/);
                            if (match && match[1].trim() !== 'python') {
                                dependencies[match[1].trim()] = match[2];
                            }
                        }
                    }
                }
                else {
                    // Handle requirements.txt
                    const reqPath = external_path_.join(projectPath, 'requirements.txt');
                    const reqContent = await fs_extra_lib.readFile(reqPath, 'utf-8');
                    const lines = reqContent.split('\n');
                    for (const line of lines) {
                        const trimmed = line.trim();
                        if (trimmed && !trimmed.startsWith('#')) {
                            const match = trimmed.match(/^([a-zA-Z0-9_-]+)([>=<!~]+)?(.*)?$/);
                            if (match) {
                                dependencies[match[1]] = match[3] || 'latest';
                            }
                        }
                    }
                }
                break;
            }
            case 'Rust': {
                const cargoPath = external_path_.join(projectPath, 'Cargo.toml');
                const cargoContent = await fs_extra_lib.readFile(cargoPath, 'utf-8');
                const depMatch = cargoContent.match(/\[dependencies\]([\s\S]*?)(?=\[|$)/);
                if (depMatch) {
                    const depSection = depMatch[1];
                    const depLines = depSection.split('\n').filter(line => line.includes('='));
                    for (const line of depLines) {
                        const match = line.match(/^([^=]+)\s*=\s*"([^"]+)"/);
                        if (match) {
                            dependencies[match[1].trim()] = match[2];
                        }
                    }
                }
                break;
            }
            case 'Go': {
                const goModPath = external_path_.join(projectPath, 'go.mod');
                const goModContent = await fs_extra_lib.readFile(goModPath, 'utf-8');
                const lines = goModContent.split('\n');
                let inRequire = false;
                for (const line of lines) {
                    const trimmed = line.trim();
                    if (trimmed === 'require (') {
                        inRequire = true;
                        continue;
                    }
                    if (trimmed === ')') {
                        inRequire = false;
                        continue;
                    }
                    if (inRequire || trimmed.startsWith('require ')) {
                        const match = trimmed.match(/^(?:require\s+)?([^\s]+)\s+([^\s]+)/);
                        if (match) {
                            dependencies[match[1]] = match[2];
                        }
                    }
                }
                break;
            }
            case 'Ruby': {
                const gemfilePath = external_path_.join(projectPath, 'Gemfile');
                const gemfileContent = await fs_extra_lib.readFile(gemfilePath, 'utf-8');
                const lines = gemfileContent.split('\n');
                for (const line of lines) {
                    const trimmed = line.trim();
                    const match = trimmed.match(/gem\s+['"]([^'"]+)['"](?:\s*,\s*['"]([^'"]+)['"])?/);
                    if (match) {
                        dependencies[match[1]] = match[2] || 'latest';
                    }
                }
                break;
            }
        }
    }
    catch (error) {
        console.warn(source/* default */.Ay.yellow(`⚠️  Could not read dependencies: ${error}`));
    }
    return dependencies;
}
/**
 * Analyze a package for updates and breaking changes
 */
async function analyzePackageUpdate(projectPath, projectConfig, packageName) {
    const currentDeps = await getCurrentDependencies(projectPath, projectConfig);
    const currentVersion = currentDeps[packageName];
    if (!currentVersion) {
        return null;
    }
    let latestVersion = '';
    let breakingChangeDetails = [];
    try {
        // Get latest version based on project type
        switch (projectConfig.type) {
            case 'JavaScript/TypeScript':
                latestVersion = await getLatestNpmVersion(packageName);
                breakingChangeDetails = await getNpmBreakingChanges(packageName, currentVersion, latestVersion);
                break;
            case 'Python':
                latestVersion = await getLatestPyPiVersion(packageName);
                break;
            case 'Rust':
                latestVersion = await getLatestCratesVersion(packageName);
                break;
            case 'Go':
                latestVersion = await getLatestGoVersion(packageName);
                break;
            case 'Ruby':
                latestVersion = await getLatestGemVersion(packageName);
                break;
        }
    }
    catch (error) {
        console.warn(source/* default */.Ay.yellow(`⚠️  Could not fetch latest version for ${packageName}: ${error}`));
        latestVersion = currentVersion;
    }
    const cleanCurrent = node_modules_semver.clean(currentVersion) || currentVersion;
    const cleanLatest = node_modules_semver.clean(latestVersion) || latestVersion;
    let updateType = 'unknown';
    let hasBreakingChanges = false;
    if (node_modules_semver.valid(cleanCurrent) && node_modules_semver.valid(cleanLatest)) {
        if (node_modules_semver.major(cleanLatest) > node_modules_semver.major(cleanCurrent)) {
            updateType = 'major';
            hasBreakingChanges = true;
        }
        else if (node_modules_semver.minor(cleanLatest) > node_modules_semver.minor(cleanCurrent)) {
            updateType = 'minor';
        }
        else if (node_modules_semver.patch(cleanLatest) > node_modules_semver.patch(cleanCurrent)) {
            updateType = 'patch';
        }
    }
    else if (cleanCurrent !== cleanLatest) {
        hasBreakingChanges = true; // Assume breaking changes for non-semver
    }
    return {
        name: packageName,
        currentVersion: cleanCurrent,
        latestVersion: cleanLatest,
        hasBreakingChanges: hasBreakingChanges || breakingChangeDetails.length > 0,
        breakingChangeDetails,
        updateType,
        language: projectConfig.type
    };
}
/**
 * Get latest version from npm registry
 */
async function getLatestNpmVersion(packageName) {
    return new Promise((resolve, reject) => {
        const url = `https://registry.npmjs.org/${packageName}`;
        external_https_namespaceObject.get(url, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                try {
                    const parsed = JSON.parse(data);
                    resolve(parsed['dist-tags']?.latest || 'unknown');
                }
                catch (error) {
                    reject(new Error(`Failed to parse npm response: ${error}`));
                }
            });
        }).on('error', reject);
    });
}
/**
 * Get breaking changes information from npm package
 */
async function getNpmBreakingChanges(packageName, currentVersion, latestVersion) {
    const changes = [];
    // Check if it's a major version bump (likely breaking)
    const currentMajor = node_modules_semver.major(node_modules_semver.clean(currentVersion) || '0.0.0');
    const latestMajor = node_modules_semver.major(node_modules_semver.clean(latestVersion) || '0.0.0');
    if (latestMajor > currentMajor) {
        changes.push(`Major version change: ${currentMajor}.x.x → ${latestMajor}.x.x`);
        changes.push('This usually indicates breaking changes. Check the package changelog.');
    }
    return changes;
}
/**
 * Get latest version from PyPI
 */
async function getLatestPyPiVersion(packageName) {
    return new Promise((resolve, reject) => {
        const url = `https://pypi.org/pypi/${packageName}/json`;
        external_https_namespaceObject.get(url, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                try {
                    const parsed = JSON.parse(data);
                    resolve(parsed.info?.version || 'unknown');
                }
                catch (error) {
                    reject(new Error(`Failed to parse PyPI response: ${error}`));
                }
            });
        }).on('error', reject);
    });
}
/**
 * Get latest version from crates.io
 */
async function getLatestCratesVersion(packageName) {
    return new Promise((resolve, reject) => {
        const url = `https://crates.io/api/v1/crates/${packageName}`;
        external_https_namespaceObject.get(url, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                try {
                    const parsed = JSON.parse(data);
                    resolve(parsed.crate?.newest_version || 'unknown');
                }
                catch (error) {
                    reject(new Error(`Failed to parse crates.io response: ${error}`));
                }
            });
        }).on('error', reject);
    });
}
/**
 * Get latest version from Go proxy
 */
async function getLatestGoVersion(packageName) {
    try {
        const { stdout } = await update_execAsync(`go list -m -versions ${packageName}`);
        const versions = stdout.trim().split(' ');
        return versions[versions.length - 1] || 'unknown';
    }
    catch (error) {
        return 'unknown';
    }
}
/**
 * Get latest version from RubyGems
 */
async function getLatestGemVersion(packageName) {
    return new Promise((resolve, reject) => {
        const url = `https://rubygems.org/api/v1/gems/${packageName}.json`;
        external_https_namespaceObject.get(url, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                try {
                    const parsed = JSON.parse(data);
                    resolve(parsed.version || 'unknown');
                }
                catch (error) {
                    reject(new Error(`Failed to parse RubyGems response: ${error}`));
                }
            });
        }).on('error', reject);
    });
}
/**
 * Display update summary with visual formatting
 */
function displayUpdateSummary(updates) {
    if (updates.length === 0) {
        console.log(source/* default */.Ay.green('✅ All packages are up to date!'));
        return;
    }
    console.log(source/* default */.Ay.cyan('\n📦 Package Updates Available:\n'));
    const table = updates.map(pkg => {
        const versionChange = `${pkg.currentVersion} → ${pkg.latestVersion}`;
        const status = pkg.hasBreakingChanges ?
            source/* default */.Ay.yellow('⚠️  Breaking') :
            source/* default */.Ay.green('✅ Safe');
        return [
            source/* default */.Ay.bold(pkg.name),
            versionChange,
            status,
            pkg.language || 'unknown'
        ];
    });
    // Simple table formatting
    console.log('Package'.padEnd(25) + 'Version Change'.padEnd(20) + 'Status'.padEnd(15) + 'Language');
    console.log('─'.repeat(70));
    table.forEach(row => {
        console.log(row[0].padEnd(25) +
            row[1].padEnd(20) +
            row[2].padEnd(15) +
            row[3]);
    });
    console.log();
}
/**
 * Display breaking changes warnings
 */
function displayBreakingChanges(packages) {
    const packagesWithBreaking = packages.filter(pkg => pkg.hasBreakingChanges);
    if (packagesWithBreaking.length === 0)
        return;
    console.log(source/* default */.Ay.red('⚠️  Breaking Changes Detected:\n'));
    packagesWithBreaking.forEach(pkg => {
        console.log(source/* default */.Ay.yellow(`${pkg.name}:`));
        (pkg.breakingChangeDetails || []).forEach(change => {
            console.log(`  • ${change}`);
        });
        console.log();
    });
    console.log(source/* default */.Ay.yellow('Please review these changes before updating!\n'));
}
/**
 * Perform actual package updates
 */
async function performPackageUpdates(projectPath, projectConfig, packages, options) {
    const spinner = (0,node_modules_ora/* default */.Ay)('Updating packages...').start();
    try {
        for (const pkg of packages) {
            spinner.text = `Updating ${pkg.name}...`;
            switch (pkg.language || projectConfig.type) {
                case 'javascript':
                case 'typescript':
                case 'JavaScript/TypeScript':
                    await updateNpmPackage(projectPath, pkg.name, pkg.latestVersion);
                    break;
                case 'python':
                case 'Python':
                    await updatePythonPackage(projectPath, pkg.name, pkg.latestVersion);
                    break;
                case 'rust':
                case 'Rust':
                    await updateRustPackage(projectPath, pkg.name, pkg.latestVersion);
                    break;
                case 'go':
                case 'Go':
                    await updateGoPackage(projectPath, pkg.name, pkg.latestVersion);
                    break;
                case 'ruby':
                case 'Ruby':
                    await updateRubyPackage(projectPath, pkg.name, pkg.latestVersion);
                    break;
            }
        }
        spinner.succeed(source/* default */.Ay.green('✅ All packages updated successfully!'));
    }
    catch (error) {
        spinner.fail(source/* default */.Ay.red('❌ Failed to update packages'));
        throw error;
    }
}
/**
 * Update individual npm package
 */
async function updateNpmPackage(projectPath, packageName, version) {
    await update_execAsync(`npm install ${packageName}@${version}`, { cwd: projectPath });
}
/**
 * Update individual Python package
 */
async function updatePythonPackage(projectPath, packageName, version) {
    const hasPoetry = await fs_extra_lib.pathExists(external_path_.join(projectPath, 'pyproject.toml'));
    if (hasPoetry) {
        await update_execAsync(`poetry add ${packageName}@${version}`, { cwd: projectPath });
    }
    else {
        await update_execAsync(`pip install ${packageName}==${version}`, { cwd: projectPath });
    }
}
/**
 * Update individual Rust package
 */
async function updateRustPackage(projectPath, packageName, version) {
    await update_execAsync(`cargo add ${packageName}@${version}`, { cwd: projectPath });
}
/**
 * Update individual Go package
 */
async function updateGoPackage(projectPath, packageName, version) {
    await update_execAsync(`go get ${packageName}@v${version}`, { cwd: projectPath });
}
/**
 * Update individual Ruby package
 */
async function updateRubyPackage(projectPath, packageName, version) {
    // Update Gemfile and run bundle install
    await update_execAsync(`bundle add ${packageName} --version ${version}`, { cwd: projectPath });
}
/**
 * Update Python dependencies
 */
async function updatePythonDependencies(projectPath, options) {
    const spinner = ora('Updating Python dependencies...').start();
    try {
        const hasPoetry = await fs.pathExists(path.join(projectPath, 'pyproject.toml')) ||
            await fs.pathExists(path.join(projectPath, 'poetry.lock'));
        if (hasPoetry) {
            // Use Poetry
            await update_execAsync('poetry update', { cwd: projectPath });
            spinner.succeed(chalk.green('✅ Python dependencies updated with Poetry'));
        }
        else {
            // Use pip with requirements.txt
            const requirementsPath = path.join(projectPath, 'requirements.txt');
            if (await fs.pathExists(requirementsPath)) {
                await update_execAsync('pip install --upgrade -r requirements.txt', { cwd: projectPath });
                spinner.succeed(chalk.green('✅ Python dependencies updated with pip'));
            }
            else {
                spinner.warn(chalk.yellow('⚠️  No requirements.txt or pyproject.toml found'));
            }
        }
    }
    catch (error) {
        spinner.fail(chalk.red('❌ Failed to update Python dependencies'));
        throw new Error(`Python update error: ${error.message}`);
    }
}
/**
 * Update Rust dependencies
 */
async function updateRustDependencies(projectPath, options) {
    const spinner = ora('Updating Rust dependencies...').start();
    try {
        await update_execAsync('cargo update', { cwd: projectPath });
        spinner.succeed(chalk.green('✅ Rust dependencies updated with Cargo'));
    }
    catch (error) {
        spinner.fail(chalk.red('❌ Failed to update Rust dependencies'));
        throw new Error(`Cargo update error: ${error.message}`);
    }
}
/**
 * Update Go dependencies
 */
async function updateGoDependencies(projectPath, options) {
    const spinner = ora('Updating Go dependencies...').start();
    try {
        // Update all dependencies to their latest versions
        await update_execAsync('go get -u ./...', { cwd: projectPath });
        await update_execAsync('go mod tidy', { cwd: projectPath });
        spinner.succeed(chalk.green('✅ Go dependencies updated'));
    }
    catch (error) {
        spinner.fail(chalk.red('❌ Failed to update Go dependencies'));
        throw new Error(`Go update error: ${error.message}`);
    }
}
/**
 * Update Ruby dependencies
 */
async function updateRubyDependencies(projectPath, options) {
    const spinner = ora('Updating Ruby dependencies...').start();
    try {
        await update_execAsync('bundle update', { cwd: projectPath });
        spinner.succeed(chalk.green('✅ Ruby dependencies updated with Bundler'));
    }
    catch (error) {
        spinner.fail(chalk.red('❌ Failed to update Ruby dependencies'));
        throw new Error(`Bundle update error: ${error.message}`);
    }
}
/**
 * Update PHP dependencies
 */
async function updatePhpDependencies(projectPath, options) {
    const spinner = ora('Updating PHP dependencies...').start();
    try {
        await update_execAsync('composer update', { cwd: projectPath });
        spinner.succeed(chalk.green('✅ PHP dependencies updated with Composer'));
    }
    catch (error) {
        spinner.fail(chalk.red('❌ Failed to update PHP dependencies'));
        throw new Error(`Composer update error: ${error.message}`);
    }
}
/**
 * Show detailed help for update command
 */
function showUpdateHelp() {
    const helpConfig = {
        commandName: 'Update',
        emoji: '🔄',
        description: 'Update project dependencies to their latest versions.\nAutomatically detects project type and package manager.',
        usage: [
            'update [options]',
            'u [options]   # alias'
        ],
        options: [
            { flag: '--latest', description: 'Update to latest versions (breaking changes possible)' }
        ],
        examples: [
            { command: 'update', description: 'Update dependencies in current project' },
            { command: 'update --latest', description: 'Update to latest versions (potentially breaking)' },
            { command: 'u', description: 'Use alias command' }
        ],
        additionalSections: [
            {
                title: 'Supported Project Types',
                items: [
                    '📦 JavaScript/TypeScript - npm, yarn, pnpm',
                    '🐍 Python - pip, poetry',
                    '🦀 Rust - cargo',
                    '🐹 Go - go mod',
                    '💎 Ruby - bundler, gem'
                ]
            }
        ],
        tips: [
            'Always backup your project before major updates',
            'For CLI updates, use: pi upgrade-cli',
            'Use --latest flag with caution as it may introduce breaking changes'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}

// EXTERNAL MODULE: external "os"
var external_os_ = __webpack_require__(857);
;// ./dist/commands/analyze.js
/**
 * Analyze command - Advanced terminal dashboard showing Package Installer CLI usage analytics
 */










/**
 * Display help for analyze command using standardized format
 */
function showAnalyzeHelp() {
    const helpConfig = {
        commandName: 'Analyze',
        emoji: '📊',
        description: 'Display comprehensive CLI usage analytics and project dashboard.\nInteractive dashboard showing Package Installer CLI usage statistics, project analytics, recent activities, and development environment info.',
        usage: [
            'analyze [options]',
            'stats [options]   # alias'
        ],
        options: [
            { flag: '--export <method>', description: 'Export analytics data to specified file format (json, xml, yaml)' },
            { flag: '--reset', description: 'Reset analytics history' },
            { flag: '--detailed', description: 'Show detailed analytics breakdown' }
        ],
        examples: [
            { command: 'analyze', description: 'Show complete analytics dashboard' },
            { command: 'analyze --detailed', description: 'Show detailed breakdown with more metrics' },
            { command: 'analyze --export json', description: 'Export analytics data to JSON file' },
            { command: 'analyze --export xml', description: 'Export analytics data to XML file' },
            { command: 'analyze --export yaml', description: 'Export analytics data to YAML file' },
            { command: 'analyze --reset', description: 'Clear all analytics history' },
            { command: 'stats', description: 'Use alias command' }
        ],
        additionalSections: [
            {
                title: 'Features',
                items: [
                    '📈 Command Usage Stats - Frequency and trends of CLI commands',
                    '🚀 Project Analytics - Created projects and framework breakdown',
                    '📁 Recent Activity - Last created/modified projects timeline',
                    '🎯 Feature Usage - Most used features and integrations',
                    '⚙️ Environment Info - Development environment overview',
                    '📊 Performance - CLI performance metrics and insights'
                ]
            }
        ],
        tips: [
            'Analytics data is collected from ~/.package-installer-cli/history.json',
            'Use --export to backup your analytics data in JSON, XML, or YAML format',
            'Use --reset to start fresh analytics tracking'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
/**
 * Main analyze command function
 */
async function analyzeCommand(options = {}) {
    // Show help if help flag is present
    if (options.help || options['--help'] || options['-h']) {
        showAnalyzeHelp();
        return;
    }
    (0,banner/* displayCommandBanner */.kn)('Analytics', 'Comprehensive project analytics and usage insights');
    const historyManager = new utils_historyManager/* HistoryManager */.c();
    try {
        // Load analytics data from history.json
        const historyData = await loadAnalyticsData();
        // Handle specific options
        if (options.export) {
            await exportAnalyticsData(historyData, options.export || 'json');
            return;
        }
        if (options.reset) {
            await resetAnalyticsData();
            return;
        }
        // Display dashboard
        if (options.detailed) {
            await displayDetailedAnalyticsDashboard(historyData);
        }
        else {
            await displayAnalyticsDashboard(historyData);
        }
    }
    catch (error) {
        console.error(source/* default */.Ay.red('❌ Failed to load analytics:'), error);
        dashboard_displaySuccessMessage('Package Installer CLI Analytics Dashboard', ['No data available yet - start using the CLI to see analytics!', 'Use commands like "pi create", "pi add", "pi clone" to generate data']);
    }
}
/**
 * Load analytics data from history.json
 */
async function loadAnalyticsData() {
    const historyPath = external_path_.join(external_os_.homedir(), '.package-installer-cli', 'history.json');
    if (!await fs_extra_lib.pathExists(historyPath)) {
        return {
            commands: {},
            projects: [],
            features: [],
            statistics: {
                totalCommands: 0,
                totalProjects: 0,
                totalFeatures: 0,
                frameworks: {},
                languages: {}
            }
        };
    }
    return await fs_extra_lib.readJson(historyPath);
}
/**
 * Display analytics dashboard
 */
async function displayAnalyticsDashboard(data) {
    console.log('\n');
    // Show summary overview first
    displaySummaryOverview(data);
    // Display command usage statistics
    displayCommandStatistics(data);
    // Display project statistics
    displayProjectStatistics(data);
    // Display feature usage
    displayFeatureUsage(data);
    // Display recent activity
    displayRecentActivity(data);
    // Display performance insights
    displayPerformanceInsights(data);
    // Display system info
    displaySystemInfo();
}
/**
 * Display detailed analytics dashboard with more metrics
 */
async function displayDetailedAnalyticsDashboard(data) {
    console.log('\n');
    // Show summary overview first
    displaySummaryOverview(data);
    // Display command usage statistics with trends
    displayDetailedCommandStatistics(data);
    // Display detailed project statistics
    displayDetailedProjectStatistics(data);
    // Display feature usage breakdown
    displayDetailedFeatureUsage(data);
    // Display time-based analytics
    displayTimeBasedAnalytics(data);
    // Display recent activity with more details
    displayDetailedRecentActivity(data);
    // Display performance insights
    displayPerformanceInsights(data);
    // Display system info
    displaySystemInfo();
}
/**
 * Display summary overview with enhanced visual appeal
 */
function displaySummaryOverview(data) {
    const totalCommands = data.statistics?.totalCommands || 0;
    const totalProjects = data.statistics?.totalProjects || 0;
    const totalFeatures = data.statistics?.totalFeatures || 0;
    const uniqueFrameworks = Object.keys(data.statistics?.frameworks || {}).length;
    const uniqueLanguages = Object.keys(data.statistics?.languages || {}).length;
    // Calculate productivity score
    const productivityScore = calculateProductivityScore(totalCommands, totalProjects, totalFeatures);
    const scoreColor = productivityScore >= 80 ? '#10ac84' : productivityScore >= 60 ? '#ffa502' : productivityScore >= 40 ? '#ff6b6b' : '#95afc0';
    const summaryContent = (0,dist/* default */.Ay)(['#e056fd', '#f18a8a'])('🚀 Package Installer CLI Analytics Dashboard') + '\n' +
        (0,dist/* default */.Ay)(['#74b9ff', '#0984e3'])('━'.repeat(60)) + '\n\n' +
        // Main metrics row
        source/* default */.Ay.hex('#00d2d3')('📈 OVERVIEW METRICS') + '\n\n' +
        `${source/* default */.Ay.white('⚡ Commands Executed:')} ${source/* default */.Ay.cyan.bold(totalCommands.toString().padStart(8))} ${getUsageEmoji(totalCommands)}\n` +
        `${source/* default */.Ay.white('🏗️  Projects Created: ')} ${source/* default */.Ay.green.bold(totalProjects.toString().padStart(8))} ${getProjectEmoji(totalProjects)}\n` +
        `${source/* default */.Ay.white('🎯 Features Added:   ')} ${source/* default */.Ay.yellow.bold(totalFeatures.toString().padStart(8))} ${getFeatureEmoji(totalFeatures)}\n` +
        `${source/* default */.Ay.white('🎨 Frameworks Used:  ')} ${source/* default */.Ay.blue.bold(uniqueFrameworks.toString().padStart(8))} ${getFrameworkEmoji(uniqueFrameworks)}\n` +
        `${source/* default */.Ay.white('🔤 Languages Used:   ')} ${source/* default */.Ay.magenta.bold(uniqueLanguages.toString().padStart(8))} ${getLanguageEmoji(uniqueLanguages)}\n\n` +
        // Productivity section
        source/* default */.Ay.hex('#ff6b6b')('🎯 PRODUCTIVITY SCORE') + '\n\n' +
        `${source/* default */.Ay.white('Overall Score:')} ${source/* default */.Ay.hex(scoreColor).bold(productivityScore + '/100')} ` +
        getScoreBar(productivityScore) + '\n' +
        source/* default */.Ay.gray(`${getProductivityMessage(productivityScore)}`) + '\n\n' +
        // Journey summary
        source/* default */.Ay.hex('#9c88ff')('✨ YOUR CODING JOURNEY') + '\n\n' +
        source/* default */.Ay.gray('You\'ve been building amazing projects with Package Installer CLI!\n') +
        source/* default */.Ay.gray(`Keep exploring new frameworks and features to boost your productivity.`);
    console.log((0,node_modules_boxen/* default */.A)(summaryContent, {
        padding: 2,
        margin: { top: 1, bottom: 1 },
        borderStyle: 'double',
        borderColor: 'magenta',
        backgroundColor: '#1a1a2e'
    }));
}
// Helper functions for enhanced display
function getUsageEmoji(count) {
    if (count >= 100)
        return '🔥';
    if (count >= 50)
        return '⚡';
    if (count >= 20)
        return '👍';
    if (count >= 5)
        return '🌱';
    return '🆕';
}
function getProjectEmoji(count) {
    if (count >= 20)
        return '🏆';
    if (count >= 10)
        return '🎯';
    if (count >= 5)
        return '📈';
    if (count >= 1)
        return '🚀';
    return '💡';
}
function getFeatureEmoji(count) {
    if (count >= 30)
        return '🌟';
    if (count >= 15)
        return '⭐';
    if (count >= 5)
        return '✨';
    if (count >= 1)
        return '💫';
    return '🔮';
}
function getFrameworkEmoji(count) {
    if (count >= 5)
        return '🎨';
    if (count >= 3)
        return '🎭';
    if (count >= 2)
        return '🎪';
    if (count >= 1)
        return '🎨';
    return '🎁';
}
function getLanguageEmoji(count) {
    if (count >= 4)
        return '🌈';
    if (count >= 3)
        return '🌊';
    if (count >= 2)
        return '🌟';
    if (count >= 1)
        return '💎';
    return '🔤';
}
function getScoreBar(score) {
    const barLength = 20;
    const filled = Math.round((score / 100) * barLength);
    const empty = barLength - filled;
    let bar = '';
    if (score >= 80) {
        bar = source/* default */.Ay.green('█'.repeat(filled)) + source/* default */.Ay.gray('░'.repeat(empty));
    }
    else if (score >= 60) {
        bar = source/* default */.Ay.yellow('█'.repeat(filled)) + source/* default */.Ay.gray('░'.repeat(empty));
    }
    else if (score >= 40) {
        bar = source/* default */.Ay.red('█'.repeat(filled)) + source/* default */.Ay.gray('░'.repeat(empty));
    }
    else {
        bar = source/* default */.Ay.gray('█'.repeat(filled)) + source/* default */.Ay.gray('░'.repeat(empty));
    }
    return `[${bar}]`;
}
function getProductivityMessage(score) {
    if (score >= 90)
        return 'Outstanding! You\'re a CLI power user! 🏆';
    if (score >= 80)
        return 'Excellent productivity! Keep up the great work! 🌟';
    if (score >= 70)
        return 'Great job! You\'re making good use of the CLI 👏';
    if (score >= 60)
        return 'Good progress! Try exploring more features 📈';
    if (score >= 40)
        return 'Getting started! Consider using more commands 🚀';
    if (score >= 20)
        return 'Just beginning! Explore the help with "pi --help" 💡';
    return 'Welcome! Start your journey by creating your first project! 🌱';
}
/**
 * Display command usage statistics with enhanced visuals
 */
function displayCommandStatistics(data) {
    const commands = data.commands || {};
    const totalCommands = data.statistics?.totalCommands || 0;
    const commandEntries = Object.entries(commands);
    let content = (0,dist/* default */.Ay)(['#4facfe', '#00f2fe'])('📊 Command Usage Statistics') + '\n' +
        (0,dist/* default */.Ay)(['#74b9ff', '#0984e3'])('━'.repeat(45)) + '\n\n';
    if (totalCommands > 0 && commandEntries.length > 0) {
        const sortedCommands = commandEntries.sort(([, a], [, b]) => b - a).slice(0, 8);
        const maxCount = Math.max(...Object.values(commands).map(c => Number(c)));
        // Add header
        content += source/* default */.Ay.hex('#00d2d3')('Command'.padEnd(12)) + ' ' +
            source/* default */.Ay.hex('#ffa502')('Usage'.padEnd(35)) + ' ' +
            source/* default */.Ay.hex('#10ac84')('Count') + '\n\n';
        sortedCommands.forEach(([cmd, count], index) => {
            const percentage = ((count / totalCommands) * 100).toFixed(1);
            const barLength = Math.min(Math.ceil((count / maxCount) * 25), 25);
            // Create a colorful progress bar
            let bar = '';
            const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff'];
            const color = colors[index % colors.length];
            bar = source/* default */.Ay.hex(color)('█'.repeat(barLength)) + source/* default */.Ay.gray('░'.repeat(25 - barLength));
            // Get command emoji
            const emoji = getCommandEmoji(cmd);
            content += `${emoji} ${source/* default */.Ay.white(cmd.padEnd(10))} ${bar} ${source/* default */.Ay.cyan(count.toString().padStart(4))} ${source/* default */.Ay.gray('(' + percentage + '%)')}\n`;
        });
        content += '\n' + source/* default */.Ay.hex('#95afc0')(`📈 Total: ${totalCommands} commands • Most used: ${sortedCommands[0][0]}`);
        // Add usage insights
        const insights = generateUsageInsights(sortedCommands, totalCommands);
        if (insights) {
            content += '\n\n' + source/* default */.Ay.hex('#9c88ff')('💡 Insights: ') + source/* default */.Ay.gray(insights);
        }
    }
    else {
        content += source/* default */.Ay.gray('🔍 No command usage data available yet\n\n') +
            source/* default */.Ay.gray('Start using the CLI to see your command patterns!\n') +
            source/* default */.Ay.hex('#00d2d3')('Try: ') + source/* default */.Ay.white('pi create my-app') + source/* default */.Ay.gray(' or ') + source/* default */.Ay.white('pi add auth');
    }
    console.log((0,node_modules_boxen/* default */.A)(content, {
        padding: 1,
        margin: { top: 1, bottom: 1 },
        borderStyle: 'round',
        borderColor: 'cyan',
        backgroundColor: '#0d1b2a'
    }));
}
function getCommandEmoji(command) {
    const emojis = {
        'create': '🏗️',
        'add': '➕',
        'analyze': '📊',
        'update': '⬆️',
        'check': '✅',
        'doctor': '🩺',
        'clean': '🧹',
        'clone': '📂',
        'deploy': '🚀',
        'env': '🌍',
        'upgrade-cli': '📦',
        'email': '📧',
        'cache': '💾'
    };
    return emojis[command] || '⚡';
}
function generateUsageInsights(sortedCommands, totalCommands) {
    if (sortedCommands.length === 0)
        return '';
    const topCommand = sortedCommands[0];
    const topPercentage = ((topCommand[1] / totalCommands) * 100).toFixed(0);
    if (topCommand[0] === 'create' && parseInt(topPercentage) > 40) {
        return 'You love creating new projects! Consider exploring "pi add" to enhance them.';
    }
    else if (topCommand[0] === 'analyze' && parseInt(topPercentage) > 30) {
        return 'Great job staying analytical! You\'re monitoring your projects well.';
    }
    else if (topCommand[0] === 'add' && parseInt(topPercentage) > 30) {
        return 'You\'re actively enhancing projects with features - excellent!';
    }
    else if (sortedCommands.length >= 5) {
        return 'Balanced CLI usage across multiple commands - you\'re a power user!';
    }
    return `${topCommand[0]} is your go-to command (${topPercentage}% usage)`;
}
/**
 * Display detailed command statistics with trends
 */
function displayDetailedCommandStatistics(data) {
    const commands = data.commands || {};
    const totalCommands = data.statistics?.totalCommands || 0;
    const commandEntries = Object.entries(commands);
    console.log((0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#4facfe', '#00f2fe'])('📊 Detailed Command Usage Statistics') + '\n\n' +
        (totalCommands > 0 && commandEntries.length > 0
            ? commandEntries
                .sort(([, a], [, b]) => b - a)
                .map(([cmd, count], index) => {
                const percentage = ((count / totalCommands) * 100).toFixed(1);
                const maxCount = Math.max(...Object.values(commands).map(c => Number(c)));
                const barLength = Math.min(Math.ceil((count / maxCount) * 25), 25);
                const bar = '█'.repeat(barLength);
                const rank = index + 1;
                const rankEmoji = rank === 1 ? '🥇' : rank === 2 ? '🥈' : rank === 3 ? '🥉' : '  ';
                return `${rankEmoji} ${source/* default */.Ay.white(cmd.padEnd(18))} ` +
                    source/* default */.Ay.cyan(bar.padEnd(25)) +
                    source/* default */.Ay.gray(` ${count} uses (${percentage}%)`);
            }).join('\n') + '\n\n' +
                source/* default */.Ay.gray(`Total: ${totalCommands} commands • Average: ${(totalCommands / commandEntries.length).toFixed(1)} per command`)
            : source/* default */.Ay.gray('  No command usage data available yet')), {
        padding: 1,
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'cyan'
    }));
}
/**
 * Display project statistics
 */
/**
 * Display enhanced performance insights
 */
function displayPerformanceInsights(data) {
    const commands = data.commands || {};
    const projects = data.projects || [];
    const features = data.features || [];
    const totalCommands = Object.values(commands).reduce((sum, count) => sum + Number(count), 0);
    const productivityScore = calculateProductivityScore(totalCommands, projects.length, features.length);
    const commandsPerProject = projects.length > 0 ? (totalCommands / projects.length).toFixed(1) : '0';
    const featuresPerProject = projects.length > 0 ? (features.length / projects.length).toFixed(1) : '0';
    // Calculate efficiency metrics
    const efficiencyRating = getEfficiencyRating(parseFloat(commandsPerProject), parseFloat(featuresPerProject));
    const developmentVelocity = getDevelopmentVelocity(projects, features);
    let content = (0,dist/* default */.Ay)(['#74b9ff', '#00b894'])('⚡ Performance & Productivity Insights') + '\n' +
        (0,dist/* default */.Ay)(['#0984e3', '#00b894'])('━'.repeat(50)) + '\n\n';
    // Performance metrics grid
    content += source/* default */.Ay.hex('#00d2d3')('📊 CORE METRICS') + '\n\n';
    content += `${source/* default */.Ay.white('🎯 Productivity Score:')} ${getScoreDisplay(productivityScore)}\n`;
    content += `${source/* default */.Ay.white('⚡ Commands per Project:')} ${source/* default */.Ay.blue(commandsPerProject)} ${getCommandsRating(parseFloat(commandsPerProject))}\n`;
    content += `${source/* default */.Ay.white('🔧 Features per Project:')} ${source/* default */.Ay.cyan(featuresPerProject)} ${getFeaturesRating(parseFloat(featuresPerProject))}\n`;
    content += `${source/* default */.Ay.white('🚀 Development Velocity:')} ${source/* default */.Ay.yellow(developmentVelocity)} ${getVelocityEmoji(developmentVelocity)}\n`;
    content += `${source/* default */.Ay.white('⭐ Efficiency Rating:')} ${source/* default */.Ay.magenta(efficiencyRating)} ${getEfficiencyEmoji(efficiencyRating)}\n\n`;
    // Insights section
    content += source/* default */.Ay.hex('#ff6b6b')('💡 INSIGHTS & RECOMMENDATIONS') + '\n\n';
    const insights = generatePerformanceInsights(productivityScore, commandsPerProject, featuresPerProject, projects.length);
    content += source/* default */.Ay.gray(insights.join('\n• '));
    // Achievement badges
    const badges = generateAchievementBadges(totalCommands, projects.length, features.length, productivityScore);
    if (badges.length > 0) {
        content += '\n\n' + source/* default */.Ay.hex('#9c88ff')('🏆 ACHIEVEMENTS UNLOCKED') + '\n\n';
        content += badges.join(' ');
    }
    console.log((0,node_modules_boxen/* default */.A)(content, {
        padding: 2,
        margin: { top: 1, bottom: 1 },
        borderStyle: 'double',
        borderColor: 'blue',
        backgroundColor: '#1a1a2e'
    }));
}
function getScoreDisplay(score) {
    const color = score >= 80 ? '#10ac84' : score >= 60 ? '#ffa502' : score >= 40 ? '#ff6b6b' : '#95afc0';
    return source/* default */.Ay.hex(color).bold(`${score}/100`) + ' ' + getScoreBar(score);
}
function getCommandsRating(commands) {
    if (commands >= 10)
        return source/* default */.Ay.green('🔥 Power User');
    if (commands >= 7)
        return source/* default */.Ay.yellow('⚡ Active');
    if (commands >= 5)
        return source/* default */.Ay.blue('👍 Good');
    if (commands >= 3)
        return source/* default */.Ay.gray('🌱 Growing');
    return source/* default */.Ay.gray('🆕 New');
}
function getFeaturesRating(features) {
    if (features >= 5)
        return source/* default */.Ay.green('🌟 Feature Rich');
    if (features >= 3)
        return source/* default */.Ay.yellow('✨ Enhanced');
    if (features >= 2)
        return source/* default */.Ay.blue('💫 Improved');
    if (features >= 1)
        return source/* default */.Ay.gray('🔮 Basic');
    return source/* default */.Ay.gray('💡 Minimal');
}
function getEfficiencyRating(commandsPerProject, featuresPerProject) {
    const efficiency = (commandsPerProject * 0.6) + (featuresPerProject * 0.4);
    if (efficiency >= 8)
        return 'Excellent';
    if (efficiency >= 6)
        return 'Very Good';
    if (efficiency >= 4)
        return 'Good';
    if (efficiency >= 2)
        return 'Fair';
    return 'Getting Started';
}
function getEfficiencyEmoji(rating) {
    const emojis = {
        'Excellent': '🏆',
        'Very Good': '🌟',
        'Good': '👍',
        'Fair': '📈',
        'Getting Started': '🌱'
    };
    return emojis[rating] || '⚡';
}
function getDevelopmentVelocity(projects, features) {
    const totalItems = projects.length + features.length;
    if (totalItems >= 50)
        return 'Lightning Fast';
    if (totalItems >= 30)
        return 'Very Fast';
    if (totalItems >= 20)
        return 'Fast';
    if (totalItems >= 10)
        return 'Moderate';
    if (totalItems >= 5)
        return 'Steady';
    return 'Just Started';
}
function getVelocityEmoji(velocity) {
    const emojis = {
        'Lightning Fast': '⚡',
        'Very Fast': '🚀',
        'Fast': '🏃',
        'Moderate': '🚶',
        'Steady': '🐢',
        'Just Started': '🌱'
    };
    return emojis[velocity] || '📈';
}
function generatePerformanceInsights(score, commandsPerProject, featuresPerProject, projectCount) {
    const insights = [];
    if (score >= 80) {
        insights.push('Outstanding performance! You\'re maximizing CLI potential.');
    }
    else if (score >= 60) {
        insights.push('Great productivity! Consider exploring more advanced features.');
    }
    else if (score >= 40) {
        insights.push('Good progress! Try using more CLI commands for better workflow.');
    }
    else {
        insights.push('Getting started! Run "pi --help" to discover powerful features.');
    }
    const commandsNum = parseFloat(commandsPerProject);
    if (commandsNum < 3 && projectCount > 0) {
        insights.push('Consider using more commands per project for better automation.');
    }
    else if (commandsNum >= 8) {
        insights.push('Excellent command usage! You\'re leveraging CLI automation well.');
    }
    const featuresNum = parseFloat(featuresPerProject);
    if (featuresNum < 2 && projectCount > 0) {
        insights.push('Try adding more features with "pi add" to enhance your projects.');
    }
    else if (featuresNum >= 4) {
        insights.push('Great feature adoption! Your projects are well-equipped.');
    }
    if (projectCount >= 10) {
        insights.push('Impressive project count! You\'re a prolific builder.');
    }
    else if (projectCount >= 5) {
        insights.push('Good project activity! Keep building and experimenting.');
    }
    return insights;
}
function generateAchievementBadges(commands, projects, features, score) {
    const badges = [];
    if (commands >= 100)
        badges.push(source/* default */.Ay.hex('#ffd700')('🥇 Command Master'));
    else if (commands >= 50)
        badges.push(source/* default */.Ay.hex('#c0c0c0')('🥈 Command Expert'));
    else if (commands >= 25)
        badges.push(source/* default */.Ay.hex('#cd7f32')('🥉 Command User'));
    if (projects >= 20)
        badges.push(source/* default */.Ay.hex('#ff6b6b')('🏗️ Architect'));
    else if (projects >= 10)
        badges.push(source/* default */.Ay.hex('#4ecdc4')('🚀 Builder'));
    else if (projects >= 5)
        badges.push(source/* default */.Ay.hex('#45b7d1')('🌱 Creator'));
    if (features >= 30)
        badges.push(source/* default */.Ay.hex('#9c88ff')('🌟 Feature Master'));
    else if (features >= 15)
        badges.push(source/* default */.Ay.hex('#feca57')('✨ Feature Explorer'));
    if (score >= 90)
        badges.push(source/* default */.Ay.hex('#10ac84')('👑 CLI Legend'));
    else if (score >= 80)
        badges.push(source/* default */.Ay.hex('#00d2d3')('⚡ Power User'));
    return badges;
}
/**
 * Display time-based analytics
 */
function displayTimeBasedAnalytics(data) {
    const projects = data.projects || [];
    const features = data.features || [];
    const allEvents = [...projects, ...features];
    const timeStats = analyzeTimePatterns(allEvents);
    console.log((0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#fd79a8', '#fdcb6e'])('📅 Time-Based Analytics') + '\n\n' +
        source/* default */.Ay.white(`Most Active Day: `) + source/* default */.Ay.yellow(timeStats.mostActiveDay || 'N/A') + '\n' +
        source/* default */.Ay.white(`Most Active Hour: `) + source/* default */.Ay.yellowBright(timeStats.mostActiveHour || 'N/A') + '\n' +
        source/* default */.Ay.white(`Weekly Activity: `) + source/* default */.Ay.green(`${timeStats.weeklyAverage || 0} actions/week`) + '\n\n' +
        source/* default */.Ay.gray('📊 ') + source/* default */.Ay.white(getTimeInsight(timeStats)), {
        padding: 1,
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'yellow'
    }));
}
/**
 * Display detailed recent activity
 */
function displayDetailedRecentActivity(data) {
    const projects = data.projects || [];
    const features = data.features || [];
    const commands = data.commands || {};
    // Get recent projects (last 30 days)
    const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);
    const recentProjects = projects.filter((p) => new Date(p.createdAt || 0).getTime() > thirtyDaysAgo);
    const recentFeatures = features.filter((f) => new Date(f.createdAt || 0).getTime() > thirtyDaysAgo);
    console.log((0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#6c5ce7', '#a29bfe'])('📈 Detailed Recent Activity (Last 30 Days)') + '\n\n' +
        source/* default */.Ay.white(`Recent Projects: `) + source/* default */.Ay.cyan(recentProjects.length) + '\n' +
        source/* default */.Ay.white(`Recent Features: `) + source/* default */.Ay.magenta(recentFeatures.length) + '\n' +
        source/* default */.Ay.white(`Total CLI Commands: `) + source/* default */.Ay.green(Object.values(commands).reduce((sum, count) => sum + Number(count), 0)) + '\n\n' +
        (recentProjects.length > 0
            ? source/* default */.Ay.white('Latest Projects:\n') +
                recentProjects
                    .slice(0, 5)
                    .map((p) => source/* default */.Ay.gray(`  • ${p.name || 'Unnamed'} (${getTimeAgo(p.createdAt)})`))
                    .join('\n') + '\n\n'
            : source/* default */.Ay.gray('No recent projects\n\n')) +
        (recentFeatures.length > 0
            ? source/* default */.Ay.white('Latest Features:\n') +
                recentFeatures
                    .slice(0, 5)
                    .map((f) => source/* default */.Ay.gray(`  • ${f.name || 'Unnamed'} (${getTimeAgo(f.createdAt)})`))
                    .join('\n')
            : source/* default */.Ay.gray('No recent features')), {
        padding: 1,
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'magenta'
    }));
}
/**
 * Helper functions for analytics
 */
function calculateProductivityScore(totalCommands, projectCount, featureCount) {
    let score = 0;
    // Command usage (0-40 points)
    score += Math.min(40, totalCommands * 2);
    // Project diversity (0-30 points)
    score += Math.min(30, projectCount * 5);
    // Feature adoption (0-30 points)
    score += Math.min(30, featureCount * 3);
    return Math.round(score);
}
function getProductivityTip(score) {
    if (score >= 80)
        return 'Excellent CLI usage! You\'re maximizing productivity.';
    if (score >= 60)
        return 'Good productivity! Try exploring more features.';
    if (score >= 40)
        return 'Moderate usage. Consider using more CLI commands.';
    if (score >= 20)
        return 'Getting started! Explore more commands and features.';
    return 'Just beginning your journey. Run "pi --help" to discover more!';
}
function analyzeTimePatterns(events) {
    if (events.length === 0)
        return {};
    const dayCount = {};
    const hourCount = {};
    events.forEach(event => {
        if (event.createdAt) {
            const date = new Date(event.createdAt);
            const day = date.toLocaleDateString('en-US', { weekday: 'long' });
            const hour = date.getHours();
            dayCount[day] = (dayCount[day] || 0) + 1;
            hourCount[hour] = (hourCount[hour] || 0) + 1;
        }
    });
    const mostActiveDay = Object.entries(dayCount)
        .sort(([, a], [, b]) => b - a)[0]?.[0];
    const mostActiveHour = Object.entries(hourCount)
        .sort(([, a], [, b]) => b - a)[0]?.[0];
    return {
        mostActiveDay,
        mostActiveHour: mostActiveHour ? `${mostActiveHour}:00` : undefined,
        weeklyAverage: (events.length / Math.max(1, getWeeksSpan(events))).toFixed(1)
    };
}
function getTimeInsight(timeStats) {
    if (!timeStats.mostActiveDay)
        return 'No activity patterns detected yet.';
    const insights = [
        `You're most active on ${timeStats.mostActiveDay}s`,
        timeStats.mostActiveHour ? `Peak activity around ${timeStats.mostActiveHour}` : '',
        `Averaging ${timeStats.weeklyAverage} actions per week`
    ].filter(Boolean);
    return insights.join(' • ');
}
function getWeeksSpan(events) {
    if (events.length === 0)
        return 1;
    const dates = events
        .map(e => new Date(e.createdAt || Date.now()))
        .filter(d => !isNaN(d.getTime()));
    if (dates.length === 0)
        return 1;
    const earliest = Math.min(...dates.map(d => d.getTime()));
    const weeksSpan = Math.max(1, (Date.now() - earliest) / (1000 * 60 * 60 * 24 * 7));
    return weeksSpan;
}
function getProjectsPerMonth(projects) {
    if (projects.length === 0)
        return '0.0';
    const dates = projects
        .map(p => new Date(p.createdAt || Date.now()))
        .filter(d => !isNaN(d.getTime()));
    if (dates.length === 0)
        return '0.0';
    const earliest = Math.min(...dates.map(d => d.getTime()));
    const monthsSpan = Math.max(1, (Date.now() - earliest) / (1000 * 60 * 60 * 24 * 30));
    return (projects.length / monthsSpan).toFixed(1);
}
function getCategoryEmoji(category) {
    const categoryMap = {
        ui: '🎨',
        auth: '🔐',
        database: '🗄️',
        aws: '☁️',
        payment: '💳',
        analytics: '📊',
        monitoring: '📈',
        testing: '🧪',
        docker: '🐳',
        ai: '🤖',
        storage: '💾'
    };
    return categoryMap[category] || '⚡';
}
function getTimeAgo(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    if (diffDays === 0)
        return 'today';
    if (diffDays === 1)
        return 'yesterday';
    if (diffDays < 30)
        return `${diffDays} days ago`;
    if (diffDays < 365)
        return `${Math.floor(diffDays / 30)} months ago`;
    return `${Math.floor(diffDays / 365)} years ago`;
}
function displayProjectStatistics(data) {
    const projects = data.projects || [];
    const frameworks = data.statistics?.frameworks || {};
    const languages = data.statistics?.languages || {};
    console.log((0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#ff6b6b', '#feca57'])('🚀 Project Statistics') + '\n\n' +
        source/* default */.Ay.white(`Total Projects Created: `) + source/* default */.Ay.cyan(projects.length) + '\n\n' +
        (Object.keys(frameworks).length > 0
            ? source/* default */.Ay.white('Most Used Frameworks:\n') +
                Object.entries(frameworks)
                    .sort(([, a], [, b]) => b - a)
                    .slice(0, 5)
                    .map(([fw, count]) => source/* default */.Ay.white(`  ${fw.padEnd(12)}: `) + source/* default */.Ay.green(count))
                    .join('\n') + '\n\n'
            : source/* default */.Ay.gray('No framework data available\n\n')) +
        (Object.keys(languages).length > 0
            ? source/* default */.Ay.white('Languages Explored:\n') +
                Object.entries(languages)
                    .sort(([, a], [, b]) => b - a)
                    .slice(0, 5)
                    .map(([lang, count]) => source/* default */.Ay.white(`  ${lang.padEnd(12)}: `) + source/* default */.Ay.yellow(count))
                    .join('\n')
            : source/* default */.Ay.gray('No language data available')), {
        padding: 1,
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'yellow'
    }));
}
/**
 * Display detailed project statistics
 */
function displayDetailedProjectStatistics(data) {
    const projects = data.projects || [];
    const frameworks = data.statistics?.frameworks || {};
    const languages = data.statistics?.languages || {};
    console.log((0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#ff6b6b', '#feca57'])('🚀 Detailed Project Statistics') + '\n\n' +
        source/* default */.Ay.white(`Total Projects Created: `) + source/* default */.Ay.cyan(projects.length) + '\n' +
        source/* default */.Ay.white(`Average Projects per Month: `) + source/* default */.Ay.green(getProjectsPerMonth(projects)) + '\n\n' +
        (Object.keys(frameworks).length > 0
            ? source/* default */.Ay.white('Framework Distribution:\n') +
                Object.entries(frameworks)
                    .sort(([, a], [, b]) => b - a)
                    .map(([fw, count]) => {
                    const percentage = ((count / projects.length) * 100).toFixed(1);
                    return source/* default */.Ay.white(`  ${fw.padEnd(15)}: `) + source/* default */.Ay.green(`${count} (${percentage}%)`);
                }).join('\n') + '\n\n'
            : source/* default */.Ay.gray('No framework data available\n\n')) +
        (Object.keys(languages).length > 0
            ? source/* default */.Ay.white('Language Preferences:\n') +
                Object.entries(languages)
                    .sort(([, a], [, b]) => b - a)
                    .map(([lang, count]) => {
                    const percentage = ((count / projects.length) * 100).toFixed(1);
                    return source/* default */.Ay.white(`  ${lang.padEnd(15)}: `) + source/* default */.Ay.yellow(`${count} (${percentage}%)`);
                }).join('\n')
            : source/* default */.Ay.gray('No language data available')), {
        padding: 1,
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'yellow'
    }));
}
/**
 * Display feature usage statistics
 */
function displayFeatureUsage(data) {
    const features = data.features || [];
    const featureStats = {};
    // Count feature usage
    features.forEach((feature) => {
        if (feature.name) {
            featureStats[feature.name] = (featureStats[feature.name] || 0) + 1;
        }
    });
    console.log((0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#9c88ff', '#f093fb'])('🎯 Feature Usage') + '\n\n' +
        (Object.keys(featureStats).length > 0
            ? Object.entries(featureStats)
                .sort(([, a], [, b]) => b - a)
                .slice(0, 8)
                .map(([feature, count]) => source/* default */.Ay.white(`  ${feature.padEnd(18)}: `) + source/* default */.Ay.magenta(`${count} times`))
                .join('\n')
            : source/* default */.Ay.gray('  No feature usage data available yet\n  Install features with "pi add" to see usage stats!')), {
        padding: 1,
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'magenta'
    }));
}
/**
 * Display detailed feature usage
 */
function displayDetailedFeatureUsage(data) {
    const features = data.features || [];
    const featureStats = {};
    // Count feature usage and track categories
    features.forEach((feature) => {
        if (feature.name) {
            if (!featureStats[feature.name]) {
                featureStats[feature.name] = {
                    count: 0,
                    category: feature.category || 'misc',
                    lastUsed: feature.createdAt || new Date().toISOString()
                };
            }
            featureStats[feature.name].count++;
        }
    });
    console.log((0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#9c88ff', '#f093fb'])('🎯 Detailed Feature Usage Analytics') + '\n\n' +
        (Object.keys(featureStats).length > 0
            ? Object.entries(featureStats)
                .sort(([, a], [, b]) => b.count - a.count)
                .map(([feature, stats]) => {
                const categoryEmoji = getCategoryEmoji(stats.category);
                return `${categoryEmoji} ${source/* default */.Ay.white(feature.padEnd(20))} ` +
                    source/* default */.Ay.magenta(`${stats.count} uses`) +
                    source/* default */.Ay.gray(` • Last: ${getTimeAgo(stats.lastUsed)}`);
            }).join('\n') + '\n\n' +
                source/* default */.Ay.gray(`Total features used: ${Object.keys(featureStats).length}`)
            : source/* default */.Ay.gray('  No feature usage data available yet')), {
        padding: 1,
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'magenta'
    }));
}
/**
 * Display recent activity
 */
function displayRecentActivity(data) {
    const projects = data.projects || [];
    const recentProjects = projects
        .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())
        .slice(0, 5);
    console.log((0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#a8edea', '#fed6e3'])('📁 Recent Activity') + '\n\n' +
        (recentProjects.length > 0
            ? recentProjects
                .map((project) => source/* default */.Ay.white(`  ${project.name || 'Unknown'} `) +
                source/* default */.Ay.gray(`(${project.framework || 'unknown'})`) +
                (project.createdAt ? '\n    ' + source/* default */.Ay.dim(new Date(project.createdAt).toLocaleDateString()) : '')).join('\n')
            : source/* default */.Ay.gray('  No recent projects')), {
        padding: 1,
        margin: { top: 1, bottom: 1, left: 2, right: 2 },
        borderStyle: 'round',
        borderColor: 'magenta'
    }));
}
/**
 * Export analytics data in specified format
 */
async function exportAnalyticsData(data, method = 'json') {
    const timestamp = new Date().toISOString().split('T')[0];
    // Ensure method is a string and normalize it
    const methodStr = typeof method === 'string' ? method : 'json';
    const normalizedMethod = methodStr.toLowerCase().trim();
    let filename = '';
    let content = '';
    try {
        switch (normalizedMethod) {
            case 'xml':
                filename = `analytics-export-${timestamp}.xml`;
                content = convertToXML(data);
                await fs_extra_lib.writeFile(filename, content, 'utf8');
                break;
            case 'yaml':
            case 'yml':
                filename = `analytics-export-${timestamp}.yaml`;
                content = convertToYAML(data);
                await fs_extra_lib.writeFile(filename, content, 'utf8');
                break;
            case 'json':
            default:
                filename = `analytics-export-${timestamp}.json`;
                await fs_extra_lib.writeJson(filename, data, { spaces: 2 });
                break;
        }
        dashboard_displaySuccessMessage(`Analytics exported as ${normalizedMethod.toUpperCase()}`, [
            `📄 Saved to: ${filename}`,
            `📊 Format: ${normalizedMethod.toUpperCase()}`,
            `📈 Contains all CLI usage statistics and project data`,
            `💾 Size: ${await getFileSize(filename)}`
        ]);
    }
    catch (error) {
        console.error(source/* default */.Ay.red('❌ Export failed:'), error);
        console.log(source/* default */.Ay.yellow('\n💡 Supported formats: json, xml, yaml, yml'));
        console.log(source/* default */.Ay.gray('   Example: analyze --export json'));
    }
}
/**
 * Convert analytics data to XML format
 */
function convertToXML(data) {
    const xmlHeader = '<?xml version="1.0" encoding="UTF-8"?>\n';
    const xmlContent = objectToXML(data, 'analytics');
    return xmlHeader + xmlContent;
}
/**
 * Convert object to XML recursively
 */
function objectToXML(obj, rootName = 'root', indent = '') {
    if (obj === null || obj === undefined) {
        return `${indent}<${rootName}></${rootName}>\n`;
    }
    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {
        return `${indent}<${rootName}>${escapeXML(String(obj))}</${rootName}>\n`;
    }
    if (Array.isArray(obj)) {
        let xml = `${indent}<${rootName}>\n`;
        obj.forEach((item, index) => {
            xml += objectToXML(item, 'item', indent + '  ');
        });
        xml += `${indent}</${rootName}>\n`;
        return xml;
    }
    if (typeof obj === 'object') {
        let xml = `${indent}<${rootName}>\n`;
        Object.entries(obj).forEach(([key, value]) => {
            const safeKey = key.replace(/[^a-zA-Z0-9_-]/g, '_');
            xml += objectToXML(value, safeKey, indent + '  ');
        });
        xml += `${indent}</${rootName}>\n`;
        return xml;
    }
    return `${indent}<${rootName}>${escapeXML(String(obj))}</${rootName}>\n`;
}
/**
 * Escape XML special characters
 */
function escapeXML(str) {
    return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;');
}
/**
 * Convert analytics data to YAML format
 */
function convertToYAML(data) {
    return objectToYAML(data, 0);
}
/**
 * Convert object to YAML recursively
 */
function objectToYAML(obj, indent = 0) {
    const spaces = '  '.repeat(indent);
    if (obj === null || obj === undefined) {
        return 'null\n';
    }
    if (typeof obj === 'string') {
        // Escape strings that might need quotes
        if (obj.includes('\n') || obj.includes('"') || obj.includes("'") || obj.includes(':')) {
            return `"${obj.replace(/"/g, '\\"')}"\n`;
        }
        return `${obj}\n`;
    }
    if (typeof obj === 'number' || typeof obj === 'boolean') {
        return `${obj}\n`;
    }
    if (Array.isArray(obj)) {
        if (obj.length === 0)
            return '[]\n';
        let yaml = '\n';
        obj.forEach(item => {
            yaml += `${spaces}- `;
            if (typeof item === 'object' && item !== null) {
                const itemYaml = objectToYAML(item, indent + 1);
                yaml += itemYaml.substring(itemYaml.indexOf('\n') + 1);
            }
            else {
                yaml += objectToYAML(item, 0).trim() + '\n';
            }
        });
        return yaml;
    }
    if (typeof obj === 'object') {
        if (Object.keys(obj).length === 0)
            return '{}\n';
        let yaml = '\n';
        Object.entries(obj).forEach(([key, value]) => {
            yaml += `${spaces}${key}: `;
            if (typeof value === 'object' && value !== null) {
                yaml += objectToYAML(value, indent + 1);
            }
            else {
                yaml += objectToYAML(value, 0);
            }
        });
        return yaml;
    }
    return `${obj}\n`;
}
/**
 * Get file size in human readable format
 */
async function getFileSize(filename) {
    try {
        const stats = await fs_extra_lib.stat(filename);
        const bytes = stats.size;
        if (bytes === 0)
            return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    catch (error) {
        return 'Unknown';
    }
}
/**
 * Reset analytics data
 */
async function resetAnalyticsData() {
    const historyPath = external_path_.join(external_os_.homedir(), '.package-installer-cli', 'history.json');
    const emptyData = {
        commands: {},
        projects: [],
        features: [],
        statistics: {
            totalCommands: 0,
            totalProjects: 0,
            totalFeatures: 0,
            frameworks: {},
            languages: {}
        }
    };
    await fs_extra_lib.ensureDir(external_path_.dirname(historyPath));
    await fs_extra_lib.writeJson(historyPath, emptyData, { spaces: 2 });
    dashboard_displaySuccessMessage('Analytics data reset', ['All usage statistics have been cleared', 'Fresh analytics will be collected from now on']);
}

;// ./dist/deploy/vercel/vercel.js





async function deployToVercel() {
    try {
        console.log(source/* default */.Ay.cyan('🚀 Starting Vercel deployment...\n'));
        // Check if Vercel CLI is installed
        try {
            (0,external_child_process_.execSync)('vercel --version', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Vercel CLI not found. Installing...'));
            try {
                (0,external_child_process_.execSync)('npm install -g vercel', { stdio: 'inherit' });
            }
            catch (installError) {
                return {
                    success: false,
                    error: 'Failed to install Vercel CLI. Please install manually with: npm install -g vercel'
                };
            }
        }
        // Check if user is logged in
        try {
            (0,external_child_process_.execSync)('vercel whoami', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('🔐 Not logged in to Vercel. Please authenticate...'));
            try {
                (0,external_child_process_.execSync)('vercel login', { stdio: 'inherit' });
            }
            catch (loginError) {
                return {
                    success: false,
                    error: 'Failed to authenticate with Vercel'
                };
            }
        }
        // Check for vercel.json config
        const configPath = external_path_.join(process.cwd(), 'vercel.json');
        if (!fs_extra_lib.existsSync(configPath)) {
            const { createConfig } = await lib["default"].prompt([
                {
                    type: 'confirm',
                    name: 'createConfig',
                    message: 'No vercel.json found. Would you like to create one?',
                    default: true
                }
            ]);
            if (createConfig) {
                const { framework } = await lib["default"].prompt([
                    {
                        type: 'list',
                        name: 'framework',
                        message: 'Select your framework:',
                        choices: [
                            'nextjs',
                            'react',
                            'vue',
                            'nuxt',
                            'svelte',
                            'angular',
                            'static',
                            'other'
                        ]
                    }
                ]);
                const config = {
                    version: 2,
                    framework: framework === 'other' ? undefined : framework,
                    buildCommand: framework === 'static' ? undefined : 'npm run build',
                    outputDirectory: framework === 'static' ? '.' : getOutputDirectory(framework)
                };
                fs_extra_lib.writeJsonSync(configPath, config, { spaces: 2 });
                console.log(source/* default */.Ay.green('✅ Created vercel.json configuration'));
            }
        }
        // Deploy using Vercel CLI
        console.log(source/* default */.Ay.cyan('📦 Deploying to Vercel...'));
        const deployProcess = (0,external_child_process_.spawn)('vercel', ['--prod'], {
            stdio: 'inherit',
            shell: true
        });
        return new Promise((resolve) => {
            deployProcess.on('close', (code) => {
                if (code === 0) {
                    console.log(source/* default */.Ay.green('\n✅ Successfully deployed to Vercel!'));
                    // Get deployment URL
                    try {
                        const output = (0,external_child_process_.execSync)('vercel ls --meta url', { encoding: 'utf-8' });
                        const url = output.trim().split('\n')[1]?.split(' ')[1];
                        resolve({
                            success: true,
                            url: url || 'Check Vercel dashboard for URL'
                        });
                    }
                    catch (error) {
                        resolve({
                            success: true,
                            url: 'Check Vercel dashboard for URL'
                        });
                    }
                }
                else {
                    resolve({
                        success: false,
                        error: `Vercel deployment failed with exit code ${code}`
                    });
                }
            });
            deployProcess.on('error', (error) => {
                resolve({
                    success: false,
                    error: `Failed to start Vercel deployment: ${error.message}`
                });
            });
        });
    }
    catch (error) {
        return {
            success: false,
            error: `Deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
function getOutputDirectory(framework) {
    switch (framework) {
        case 'nextjs':
            return '.next';
        case 'react':
            return 'build';
        case 'vue':
            return 'dist';
        case 'nuxt':
            return '.nuxt/output';
        case 'svelte':
            return 'build';
        case 'angular':
            return 'dist';
        default:
            return 'dist';
    }
}

;// ./dist/deploy/aws/aws.js





async function deployToAWS() {
    try {
        console.log(source/* default */.Ay.cyan('☁️ Starting AWS deployment...\n'));
        // Check if AWS CLI is installed
        try {
            (0,external_child_process_.execSync)('aws --version', { stdio: 'pipe' });
        }
        catch (error) {
            return {
                success: false,
                error: 'AWS CLI not found. Please install AWS CLI: https://aws.amazon.com/cli/'
            };
        }
        // Check if AWS is configured
        try {
            (0,external_child_process_.execSync)('aws sts get-caller-identity', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('🔐 AWS credentials not configured. Please configure...'));
            console.log(source/* default */.Ay.blue('Run: aws configure'));
            return {
                success: false,
                error: 'AWS credentials not configured. Run "aws configure" to set up credentials.'
            };
        }
        // Choose deployment type
        const { deploymentType } = await lib["default"].prompt([
            {
                type: 'list',
                name: 'deploymentType',
                message: 'Select AWS deployment type:',
                choices: [
                    { name: 'S3 Static Website', value: 's3-static' },
                    { name: 'S3 + CloudFront Distribution', value: 's3-cloudfront' },
                    { name: 'Lambda Function', value: 'lambda' },
                    { name: 'Elastic Beanstalk', value: 'beanstalk' }
                ]
            }
        ]);
        switch (deploymentType) {
            case 's3-static':
                return await deployToS3Static();
            case 's3-cloudfront':
                return await deployToS3CloudFront();
            case 'lambda':
                return await deployToLambda();
            case 'beanstalk':
                return await deployToBeanstalk();
            default:
                return {
                    success: false,
                    error: 'Invalid deployment type selected'
                };
        }
    }
    catch (error) {
        return {
            success: false,
            error: `AWS deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToS3Static() {
    try {
        const { bucketName, buildDir } = await lib["default"].prompt([
            {
                type: 'input',
                name: 'bucketName',
                message: 'Enter S3 bucket name:',
                validate: (input) => input.length > 0 || 'Bucket name is required'
            },
            {
                type: 'input',
                name: 'buildDir',
                message: 'Enter build directory:',
                default: 'build'
            }
        ]);
        const buildPath = external_path_.join(process.cwd(), buildDir);
        if (!fs_extra_lib.existsSync(buildPath)) {
            return {
                success: false,
                error: `Build directory "${buildDir}" not found. Please build your project first.`
            };
        }
        console.log(source/* default */.Ay.cyan('📦 Creating S3 bucket (if not exists)...'));
        try {
            (0,external_child_process_.execSync)(`aws s3 mb s3://${bucketName}`, { stdio: 'pipe' });
        }
        catch (error) {
            // Bucket might already exist, continue
        }
        console.log(source/* default */.Ay.cyan('🌐 Configuring bucket for static website hosting...'));
        (0,external_child_process_.execSync)(`aws s3 website s3://${bucketName} --index-document index.html --error-document error.html`, { stdio: 'inherit' });
        console.log(source/* default */.Ay.cyan('📤 Uploading files to S3...'));
        (0,external_child_process_.execSync)(`aws s3 sync ${buildPath} s3://${bucketName} --delete`, { stdio: 'inherit' });
        console.log(source/* default */.Ay.cyan('🔓 Setting bucket policy for public read...'));
        const bucketPolicy = {
            Version: '2012-10-17',
            Statement: [
                {
                    Sid: 'PublicReadGetObject',
                    Effect: 'Allow',
                    Principal: '*',
                    Action: 's3:GetObject',
                    Resource: `arn:aws:s3:::${bucketName}/*`
                }
            ]
        };
        const policyFile = external_path_.join(process.cwd(), 'temp-bucket-policy.json');
        fs_extra_lib.writeJsonSync(policyFile, bucketPolicy);
        (0,external_child_process_.execSync)(`aws s3api put-bucket-policy --bucket ${bucketName} --policy file://${policyFile}`, { stdio: 'pipe' });
        fs_extra_lib.removeSync(policyFile);
        const websiteUrl = `http://${bucketName}.s3-website-us-east-1.amazonaws.com`;
        console.log(source/* default */.Ay.green('✅ Successfully deployed to S3!'));
        return {
            success: true,
            url: websiteUrl
        };
    }
    catch (error) {
        return {
            success: false,
            error: `S3 deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToS3CloudFront() {
    console.log(source/* default */.Ay.yellow('🚧 CloudFront deployment requires additional setup...'));
    console.log(source/* default */.Ay.blue('Please use AWS Console or CDK for CloudFront distribution setup.'));
    return {
        success: false,
        error: 'CloudFront deployment not yet implemented. Use S3 static deployment for now.'
    };
}
async function deployToLambda() {
    try {
        const { functionName, runtime } = await lib["default"].prompt([
            {
                type: 'input',
                name: 'functionName',
                message: 'Enter Lambda function name:',
                validate: (input) => input.length > 0 || 'Function name is required'
            },
            {
                type: 'list',
                name: 'runtime',
                message: 'Select Lambda runtime:',
                choices: [
                    'nodejs18.x',
                    'nodejs20.x',
                    'python3.9',
                    'python3.10',
                    'python3.11'
                ]
            }
        ]);
        // Check for deployment package
        const zipFile = 'function.zip';
        if (!fs_extra_lib.existsSync(zipFile)) {
            console.log(source/* default */.Ay.yellow('📦 Creating deployment package...'));
            (0,external_child_process_.execSync)(`zip -r ${zipFile} . -x "node_modules/*" "*.git*" "*.zip"`, { stdio: 'inherit' });
        }
        console.log(source/* default */.Ay.cyan('🚀 Deploying Lambda function...'));
        try {
            // Try to update existing function
            (0,external_child_process_.execSync)(`aws lambda update-function-code --function-name ${functionName} --zip-file fileb://${zipFile}`, { stdio: 'inherit' });
        }
        catch (error) {
            // Function doesn't exist, create it
            (0,external_child_process_.execSync)(`aws lambda create-function --function-name ${functionName} --runtime ${runtime} --role arn:aws:iam::YOUR_ACCOUNT:role/lambda-execution-role --handler index.handler --zip-file fileb://${zipFile}`, { stdio: 'inherit' });
        }
        console.log(source/* default */.Ay.green('✅ Successfully deployed Lambda function!'));
        return {
            success: true,
            url: `Lambda function: ${functionName}`
        };
    }
    catch (error) {
        return {
            success: false,
            error: `Lambda deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToBeanstalk() {
    console.log(source/* default */.Ay.yellow('🚧 Elastic Beanstalk deployment requires EB CLI...'));
    console.log(source/* default */.Ay.blue('Please install EB CLI: pip install awsebcli'));
    return {
        success: false,
        error: 'Elastic Beanstalk deployment not yet implemented. Please use EB CLI directly.'
    };
}

;// ./dist/deploy/github-pages/gh-pages.js





async function deployToGithubPages() {
    try {
        console.log(source/* default */.Ay.cyan('📚 Starting GitHub Pages deployment...\n'));
        // Check if GitHub CLI is installed
        try {
            (0,external_child_process_.execSync)('gh --version', { stdio: 'pipe' });
        }
        catch (error) {
            return {
                success: false,
                error: 'GitHub CLI not found. Please install GitHub CLI: https://cli.github.com/'
            };
        }
        // Check if user is authenticated
        try {
            (0,external_child_process_.execSync)('gh auth status', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('🔐 Not authenticated with GitHub. Please login...'));
            try {
                (0,external_child_process_.execSync)('gh auth login', { stdio: 'inherit' });
            }
            catch (loginError) {
                return {
                    success: false,
                    error: 'Failed to authenticate with GitHub'
                };
            }
        }
        // Check if we're in a git repository
        try {
            (0,external_child_process_.execSync)('git rev-parse --git-dir', { stdio: 'pipe' });
        }
        catch (error) {
            return {
                success: false,
                error: 'Not in a Git repository. Please initialize Git first: git init'
            };
        }
        // Get repository information
        let repoInfo;
        try {
            const remoteUrl = (0,external_child_process_.execSync)('git remote get-url origin', { encoding: 'utf-8' }).trim();
            const match = remoteUrl.match(/github\.com[:/]([^/]+)\/([^/.]+)/);
            if (match) {
                repoInfo = { owner: match[1], repo: match[2] };
            }
        }
        catch (error) {
            // No remote origin, we'll create one
        }
        if (!repoInfo) {
            const { createRepo } = await lib["default"].prompt([
                {
                    type: 'confirm',
                    name: 'createRepo',
                    message: 'No GitHub repository found. Create a new repository?',
                    default: true
                }
            ]);
            if (!createRepo) {
                return {
                    success: false,
                    error: 'GitHub repository required for Pages deployment'
                };
            }
            const { repoName, isPrivate } = await lib["default"].prompt([
                {
                    type: 'input',
                    name: 'repoName',
                    message: 'Enter repository name:',
                    default: external_path_.basename(process.cwd()),
                    validate: (input) => input.length > 0 || 'Repository name is required'
                },
                {
                    type: 'confirm',
                    name: 'isPrivate',
                    message: 'Make repository private?',
                    default: false
                }
            ]);
            console.log(source/* default */.Ay.cyan('📦 Creating GitHub repository...'));
            const visibility = isPrivate ? '--private' : '--public';
            (0,external_child_process_.execSync)(`gh repo create ${repoName} ${visibility} --source=. --remote=origin --push`, { stdio: 'inherit' });
            repoInfo = { owner: (0,external_child_process_.execSync)('gh api user --jq .login', { encoding: 'utf-8' }).trim(), repo: repoName };
        }
        // Choose deployment method
        const { deploymentMethod } = await lib["default"].prompt([
            {
                type: 'list',
                name: 'deploymentMethod',
                message: 'Select deployment method:',
                choices: [
                    { name: 'GitHub Actions (Recommended)', value: 'actions' },
                    { name: 'Direct gh-pages branch', value: 'branch' },
                    { name: 'Manual upload', value: 'manual' }
                ]
            }
        ]);
        switch (deploymentMethod) {
            case 'actions':
                return await deployWithActions(repoInfo);
            case 'branch':
                return await deployToBranch(repoInfo);
            case 'manual':
                return await deployManual(repoInfo);
            default:
                return {
                    success: false,
                    error: 'Invalid deployment method selected'
                };
        }
    }
    catch (error) {
        return {
            success: false,
            error: `GitHub Pages deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployWithActions(repoInfo) {
    try {
        const { framework, buildCommand, outputDir } = await lib["default"].prompt([
            {
                type: 'list',
                name: 'framework',
                message: 'Select your framework:',
                choices: [
                    'react',
                    'vue',
                    'angular',
                    'svelte',
                    'nextjs',
                    'nuxt',
                    'static-html',
                    'jekyll',
                    'other'
                ]
            },
            {
                type: 'input',
                name: 'buildCommand',
                message: 'Enter build command:',
                default: 'npm run build'
            },
            {
                type: 'input',
                name: 'outputDir',
                message: 'Enter output directory:',
                default: 'dist'
            }
        ]);
        // Create GitHub Actions workflow
        const workflowsDir = external_path_.join(process.cwd(), '.github', 'workflows');
        fs_extra_lib.ensureDirSync(workflowsDir);
        const workflowContent = generateGitHubActionsWorkflow(framework, buildCommand, outputDir);
        const workflowPath = external_path_.join(workflowsDir, 'deploy-pages.yml');
        fs_extra_lib.writeFileSync(workflowPath, workflowContent);
        console.log(source/* default */.Ay.green('✅ Created GitHub Actions workflow'));
        // Commit and push the workflow
        (0,external_child_process_.execSync)('git add .github/workflows/deploy-pages.yml', { stdio: 'pipe' });
        (0,external_child_process_.execSync)('git commit -m "Add GitHub Pages deployment workflow"', { stdio: 'pipe' });
        (0,external_child_process_.execSync)('git push origin main', { stdio: 'inherit' });
        // Enable GitHub Pages
        console.log(source/* default */.Ay.cyan('🔧 Enabling GitHub Pages...'));
        try {
            (0,external_child_process_.execSync)(`gh api repos/${repoInfo.owner}/${repoInfo.repo}/pages -X POST -f source='{"branch":"gh-pages","path":"/"}'`, { stdio: 'pipe' });
        }
        catch (error) {
            // Pages might already be enabled
        }
        console.log(source/* default */.Ay.green('✅ GitHub Pages deployment configured!'));
        console.log(source/* default */.Ay.blue('🚀 Workflow will run on next push to main branch'));
        return {
            success: true,
            url: `https://${repoInfo.owner}.github.io/${repoInfo.repo}`
        };
    }
    catch (error) {
        return {
            success: false,
            error: `GitHub Actions deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToBranch(repoInfo) {
    try {
        const { buildDir } = await lib["default"].prompt([
            {
                type: 'input',
                name: 'buildDir',
                message: 'Enter build directory:',
                default: 'dist'
            }
        ]);
        const buildPath = external_path_.join(process.cwd(), buildDir);
        if (!fs_extra_lib.existsSync(buildPath)) {
            return {
                success: false,
                error: `Build directory "${buildDir}" not found. Please build your project first.`
            };
        }
        console.log(source/* default */.Ay.cyan('📦 Deploying to gh-pages branch...'));
        // Install gh-pages if not available (fallback method)
        try {
            (0,external_child_process_.execSync)('npx gh-pages --version', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('Installing gh-pages...'));
            (0,external_child_process_.execSync)('npm install -g gh-pages', { stdio: 'inherit' });
        }
        // Deploy using gh-pages
        (0,external_child_process_.execSync)(`npx gh-pages -d ${buildDir}`, { stdio: 'inherit' });
        console.log(source/* default */.Ay.green('✅ Successfully deployed to GitHub Pages!'));
        return {
            success: true,
            url: `https://${repoInfo.owner}.github.io/${repoInfo.repo}`
        };
    }
    catch (error) {
        return {
            success: false,
            error: `Branch deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployManual(repoInfo) {
    console.log(source/* default */.Ay.yellow('📖 Manual deployment instructions:'));
    console.log(source/* default */.Ay.blue('1. Build your project'));
    console.log(source/* default */.Ay.blue('2. Go to GitHub repository settings'));
    console.log(source/* default */.Ay.blue('3. Navigate to Pages section'));
    console.log(source/* default */.Ay.blue('4. Select source branch (main or gh-pages)'));
    console.log(source/* default */.Ay.blue('5. Specify root directory or /docs folder'));
    return {
        success: true,
        url: `https://${repoInfo.owner}.github.io/${repoInfo.repo}`
    };
}
function generateGitHubActionsWorkflow(framework, buildCommand, outputDir) {
    return `name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Build
        run: ${buildCommand}
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${outputDir}

  deploy:
    environment:
      name: github-pages
      url: \${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
`;
}

;// ./dist/deploy/docker-hub/docker-hub.js





async function deployToDockerHub() {
    try {
        console.log(source/* default */.Ay.cyan('🐳 Starting Docker Hub deployment...\n'));
        // Check if Docker is installed
        try {
            (0,external_child_process_.execSync)('docker --version', { stdio: 'pipe' });
        }
        catch (error) {
            return {
                success: false,
                error: 'Docker not found. Please install Docker: https://docs.docker.com/get-docker/'
            };
        }
        // Check if Docker daemon is running
        try {
            (0,external_child_process_.execSync)('docker info', { stdio: 'pipe' });
        }
        catch (error) {
            return {
                success: false,
                error: 'Docker daemon is not running. Please start Docker and try again.'
            };
        }
        // Check if user is logged in to Docker Hub
        try {
            (0,external_child_process_.execSync)('docker info | grep Username', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('🔐 Not logged in to Docker Hub. Please authenticate...'));
            try {
                (0,external_child_process_.execSync)('docker login', { stdio: 'inherit' });
            }
            catch (loginError) {
                return {
                    success: false,
                    error: 'Failed to authenticate with Docker Hub'
                };
            }
        }
        // Check for Dockerfile
        const dockerfilePath = external_path_.join(process.cwd(), 'Dockerfile');
        if (!fs_extra_lib.existsSync(dockerfilePath)) {
            const { createDockerfile } = await lib["default"].prompt([
                {
                    type: 'confirm',
                    name: 'createDockerfile',
                    message: 'No Dockerfile found. Would you like to create one?',
                    default: true
                }
            ]);
            if (createDockerfile) {
                const { framework } = await lib["default"].prompt([
                    {
                        type: 'list',
                        name: 'framework',
                        message: 'Select your application framework:',
                        choices: [
                            'node.js',
                            'python',
                            'react',
                            'nextjs',
                            'express',
                            'nginx-static',
                            'custom'
                        ]
                    }
                ]);
                const dockerfileContent = generateDockerfile(framework);
                fs_extra_lib.writeFileSync(dockerfilePath, dockerfileContent);
                console.log(source/* default */.Ay.green('✅ Created Dockerfile'));
            }
            else {
                return {
                    success: false,
                    error: 'Dockerfile is required for Docker Hub deployment'
                };
            }
        }
        // Get Docker Hub repository details
        const { username, repository, tag } = await lib["default"].prompt([
            {
                type: 'input',
                name: 'username',
                message: 'Enter your Docker Hub username:',
                validate: (input) => input.length > 0 || 'Username is required'
            },
            {
                type: 'input',
                name: 'repository',
                message: 'Enter repository name:',
                default: external_path_.basename(process.cwd()),
                validate: (input) => input.length > 0 || 'Repository name is required'
            },
            {
                type: 'input',
                name: 'tag',
                message: 'Enter image tag:',
                default: 'latest'
            }
        ]);
        const imageName = `${username}/${repository}:${tag}`;
        console.log(source/* default */.Ay.cyan('🔨 Building Docker image...'));
        try {
            (0,external_child_process_.execSync)(`docker build -t ${imageName} .`, { stdio: 'inherit' });
        }
        catch (error) {
            return {
                success: false,
                error: 'Failed to build Docker image. Check your Dockerfile and try again.'
            };
        }
        console.log(source/* default */.Ay.cyan('📤 Pushing image to Docker Hub...'));
        try {
            (0,external_child_process_.execSync)(`docker push ${imageName}`, { stdio: 'inherit' });
        }
        catch (error) {
            return {
                success: false,
                error: 'Failed to push image to Docker Hub. Check your credentials and try again.'
            };
        }
        console.log(source/* default */.Ay.green('✅ Successfully deployed to Docker Hub!'));
        return {
            success: true,
            url: `https://hub.docker.com/r/${username}/${repository}`
        };
    }
    catch (error) {
        return {
            success: false,
            error: `Docker Hub deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
function generateDockerfile(framework) {
    switch (framework) {
        case 'node.js':
            return `# Node.js Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy application code
COPY . .

EXPOSE 3000

CMD ["npm", "start"]
`;
        case 'python':
            return `# Python Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Copy requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

EXPOSE 8000

CMD ["python", "app.py"]
`;
        case 'react':
            return `# React Dockerfile
FROM node:18-alpine as build

WORKDIR /app
COPY package*.json ./
RUN npm ci

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
`;
        case 'nextjs':
            return `# Next.js Dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci

COPY . .
RUN npm run build

EXPOSE 3000

CMD ["npm", "start"]
`;
        case 'express':
            return `# Express.js Dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

EXPOSE 3000

CMD ["node", "server.js"]
`;
        case 'nginx-static':
            return `# Static files with Nginx
FROM nginx:alpine

COPY . /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
`;
        default:
            return `# Custom Dockerfile
FROM node:18-alpine

WORKDIR /app

COPY . .

EXPOSE 3000

CMD ["npm", "start"]
`;
    }
}

;// ./dist/deploy/digitalocean/digitalocean.js





async function deployToDigitalOcean() {
    try {
        console.log(source/* default */.Ay.cyan('🌊 Starting DigitalOcean deployment...\n'));
        // Check if doctl is installed
        try {
            (0,external_child_process_.execSync)('doctl version', { stdio: 'pipe' });
        }
        catch (error) {
            return {
                success: false,
                error: 'DigitalOcean CLI (doctl) not found. Please install it: https://docs.digitalocean.com/reference/doctl/how-to/install/'
            };
        }
        // Check if user is authenticated
        try {
            (0,external_child_process_.execSync)('doctl account get', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('🔐 Not authenticated with DigitalOcean. Please authenticate...'));
            console.log(source/* default */.Ay.blue('Run: doctl auth init'));
            return {
                success: false,
                error: 'DigitalOcean authentication required. Run "doctl auth init" to authenticate.'
            };
        }
        // Choose deployment type
        const { deploymentType } = await lib["default"].prompt([
            {
                type: 'list',
                name: 'deploymentType',
                message: 'Select DigitalOcean deployment type:',
                choices: [
                    { name: 'App Platform (PaaS) - Recommended', value: 'app-platform' },
                    { name: 'Container Registry + App Platform', value: 'container-registry' },
                    { name: 'Droplet (VPS)', value: 'droplet' },
                    { name: 'Kubernetes Cluster', value: 'kubernetes' }
                ]
            }
        ]);
        switch (deploymentType) {
            case 'app-platform':
                return await deployToAppPlatform();
            case 'container-registry':
                return await deployToContainerRegistry();
            case 'droplet':
                return await deployToDroplet();
            case 'kubernetes':
                return await deployToKubernetes();
            default:
                return {
                    success: false,
                    error: 'Invalid deployment type selected'
                };
        }
    }
    catch (error) {
        return {
            success: false,
            error: `DigitalOcean deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToAppPlatform() {
    try {
        const { appName, region, gitRepo } = await lib["default"].prompt([
            {
                type: 'input',
                name: 'appName',
                message: 'Enter app name:',
                validate: (input) => input.length > 0 || 'App name is required'
            },
            {
                type: 'list',
                name: 'region',
                message: 'Select region:',
                choices: [
                    'nyc1', 'nyc3', 'ams3', 'sfo3', 'sgp1', 'lon1', 'fra1', 'tor1', 'blr1'
                ]
            },
            {
                type: 'input',
                name: 'gitRepo',
                message: 'Enter Git repository URL (optional):',
                default: ''
            }
        ]);
        // Check for app.yaml spec file
        const specPath = external_path_.join(process.cwd(), 'app.yaml');
        if (!fs_extra_lib.existsSync(specPath)) {
            const { createSpec } = await lib["default"].prompt([
                {
                    type: 'confirm',
                    name: 'createSpec',
                    message: 'No app.yaml found. Would you like to create one?',
                    default: true
                }
            ]);
            if (createSpec) {
                const { appType } = await lib["default"].prompt([
                    {
                        type: 'list',
                        name: 'appType',
                        message: 'Select application type:',
                        choices: [
                            'static-site',
                            'node.js',
                            'python',
                            'docker',
                            'go'
                        ]
                    }
                ]);
                const specContent = generateAppSpec(appName, appType, gitRepo, region);
                fs_extra_lib.writeFileSync(specPath, specContent);
                console.log(source/* default */.Ay.green('✅ Created app.yaml specification'));
            }
        }
        console.log(source/* default */.Ay.cyan('🚀 Creating DigitalOcean App...'));
        if (fs_extra_lib.existsSync(specPath)) {
            (0,external_child_process_.execSync)(`doctl apps create --spec ${specPath}`, { stdio: 'inherit' });
        }
        else {
            // Create app without spec file
            const createCommand = `doctl apps create --no-spec --name ${appName} --region ${region}`;
            (0,external_child_process_.execSync)(createCommand, { stdio: 'inherit' });
        }
        console.log(source/* default */.Ay.green('✅ Successfully created DigitalOcean App!'));
        // Get app URL
        try {
            const output = (0,external_child_process_.execSync)(`doctl apps list --format Name,DefaultIngress --no-header | grep ${appName}`, { encoding: 'utf-8' });
            const url = output.split(/\s+/)[1];
            return {
                success: true,
                url: url || `Check DigitalOcean dashboard for ${appName} URL`
            };
        }
        catch (error) {
            return {
                success: true,
                url: `Check DigitalOcean dashboard for ${appName} URL`
            };
        }
    }
    catch (error) {
        return {
            success: false,
            error: `App Platform deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToContainerRegistry() {
    try {
        const { registryName, imageName, tag } = await lib["default"].prompt([
            {
                type: 'input',
                name: 'registryName',
                message: 'Enter container registry name:',
                validate: (input) => input.length > 0 || 'Registry name is required'
            },
            {
                type: 'input',
                name: 'imageName',
                message: 'Enter image name:',
                default: external_path_.basename(process.cwd())
            },
            {
                type: 'input',
                name: 'tag',
                message: 'Enter image tag:',
                default: 'latest'
            }
        ]);
        // Check for Dockerfile
        const dockerfilePath = external_path_.join(process.cwd(), 'Dockerfile');
        if (!fs_extra_lib.existsSync(dockerfilePath)) {
            return {
                success: false,
                error: 'Dockerfile not found. Container Registry deployment requires a Dockerfile.'
            };
        }
        console.log(source/* default */.Ay.cyan('🔨 Building Docker image...'));
        const fullImageName = `registry.digitalocean.com/${registryName}/${imageName}:${tag}`;
        (0,external_child_process_.execSync)(`docker build -t ${fullImageName} .`, { stdio: 'inherit' });
        console.log(source/* default */.Ay.cyan('🔐 Logging in to DigitalOcean Container Registry...'));
        (0,external_child_process_.execSync)(`doctl registry login`, { stdio: 'inherit' });
        console.log(source/* default */.Ay.cyan('📤 Pushing image to registry...'));
        (0,external_child_process_.execSync)(`docker push ${fullImageName}`, { stdio: 'inherit' });
        console.log(source/* default */.Ay.green('✅ Successfully pushed to DigitalOcean Container Registry!'));
        return {
            success: true,
            url: `https://cloud.digitalocean.com/registry/${registryName}`
        };
    }
    catch (error) {
        return {
            success: false,
            error: `Container Registry deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToDroplet() {
    console.log(source/* default */.Ay.yellow('🚧 Droplet deployment requires manual setup...'));
    console.log(source/* default */.Ay.blue('Please use DigitalOcean dashboard to create and configure droplets.'));
    return {
        success: false,
        error: 'Droplet deployment not yet implemented. Use DigitalOcean dashboard or App Platform.'
    };
}
async function deployToKubernetes() {
    console.log(source/* default */.Ay.yellow('🚧 Kubernetes deployment requires additional setup...'));
    console.log(source/* default */.Ay.blue('Please use doctl kubernetes cluster commands for K8s deployment.'));
    return {
        success: false,
        error: 'Kubernetes deployment not yet implemented. Use App Platform for simpler deployment.'
    };
}
function generateAppSpec(appName, appType, gitRepo, region) {
    const baseSpec = {
        name: appName,
        region: region,
        services: []
    };
    switch (appType) {
        case 'static-site':
            baseSpec.services = [{
                    name: 'web',
                    source_dir: '/',
                    github: gitRepo ? {
                        repo: gitRepo,
                        branch: 'main'
                    } : undefined,
                    build_command: 'npm run build',
                    output_dir: 'build',
                    routes: [{
                            path: '/'
                        }]
                }];
            break;
        case 'node.js':
            baseSpec.services = [{
                    name: 'api',
                    source_dir: '/',
                    github: gitRepo ? {
                        repo: gitRepo,
                        branch: 'main'
                    } : undefined,
                    build_command: 'npm install',
                    run_command: 'npm start',
                    environment_slug: 'node-js',
                    instance_count: 1,
                    instance_size_slug: 'basic-xxs',
                    routes: [{
                            path: '/'
                        }]
                }];
            break;
        case 'python':
            baseSpec.services = [{
                    name: 'api',
                    source_dir: '/',
                    github: gitRepo ? {
                        repo: gitRepo,
                        branch: 'main'
                    } : undefined,
                    build_command: 'pip install -r requirements.txt',
                    run_command: 'python app.py',
                    environment_slug: 'python',
                    instance_count: 1,
                    instance_size_slug: 'basic-xxs',
                    routes: [{
                            path: '/'
                        }]
                }];
            break;
        case 'docker':
            baseSpec.services = [{
                    name: 'web',
                    source_dir: '/',
                    github: gitRepo ? {
                        repo: gitRepo,
                        branch: 'main'
                    } : undefined,
                    dockerfile_path: 'Dockerfile',
                    instance_count: 1,
                    instance_size_slug: 'basic-xxs',
                    routes: [{
                            path: '/'
                        }]
                }];
            break;
        default:
            baseSpec.services = [{
                    name: 'web',
                    source_dir: '/',
                    github: gitRepo ? {
                        repo: gitRepo,
                        branch: 'main'
                    } : undefined,
                    build_command: 'echo "Configure your build command"',
                    run_command: 'echo "Configure your run command"',
                    routes: [{
                            path: '/'
                        }]
                }];
    }
    return `# DigitalOcean App Platform Specification
# Generated by Package Installer CLI

name: ${appName}
region: ${region}

services:
${baseSpec.services.map(service => `  - name: ${service.name}
    source_dir: ${service.source_dir}${service.github ? `
    github:
      repo: ${service.github.repo}
      branch: ${service.github.branch}` : ''}${service.build_command ? `
    build_command: ${service.build_command}` : ''}${service.run_command ? `
    run_command: ${service.run_command}` : ''}${service.environment_slug ? `
    environment_slug: ${service.environment_slug}` : ''}${service.dockerfile_path ? `
    dockerfile_path: ${service.dockerfile_path}` : ''}${service.output_dir ? `
    output_dir: ${service.output_dir}` : ''}
    instance_count: ${service.instance_count || 1}
    instance_size_slug: ${service.instance_size_slug || 'basic-xxs'}
    routes:
      - path: /`).join('\n')}
`;
}

;// ./dist/deploy/cloudflare/cloudflare.js





async function deployToCloudflare() {
    try {
        console.log(source/* default */.Ay.cyan('☁️ Starting Cloudflare deployment...\n'));
        // Check if Wrangler CLI is installed
        try {
            (0,external_child_process_.execSync)('wrangler --version', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Wrangler CLI not found. Installing...'));
            try {
                (0,external_child_process_.execSync)('npm install -g wrangler', { stdio: 'inherit' });
            }
            catch (installError) {
                return {
                    success: false,
                    error: 'Failed to install Wrangler CLI. Please install manually with: npm install -g wrangler'
                };
            }
        }
        // Check if user is authenticated
        try {
            (0,external_child_process_.execSync)('wrangler whoami', { stdio: 'pipe' });
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('🔐 Not authenticated with Cloudflare. Please authenticate...'));
            try {
                (0,external_child_process_.execSync)('wrangler login', { stdio: 'inherit' });
            }
            catch (loginError) {
                return {
                    success: false,
                    error: 'Failed to authenticate with Cloudflare'
                };
            }
        }
        // Choose deployment type
        const { deploymentType } = await lib["default"].prompt([
            {
                type: 'list',
                name: 'deploymentType',
                message: 'Select Cloudflare deployment type:',
                choices: [
                    { name: 'Cloudflare Pages - Static sites', value: 'pages' },
                    { name: 'Cloudflare Workers - Serverless functions', value: 'workers' },
                    { name: 'Cloudflare Workers Sites - Full stack apps', value: 'workers-sites' }
                ]
            }
        ]);
        switch (deploymentType) {
            case 'pages':
                return await deployToPages();
            case 'workers':
                return await deployToWorkers();
            case 'workers-sites':
                return await deployToWorkersSites();
            default:
                return {
                    success: false,
                    error: 'Invalid deployment type selected'
                };
        }
    }
    catch (error) {
        return {
            success: false,
            error: `Cloudflare deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToPages() {
    try {
        const { projectName, buildDir, buildCommand } = await lib["default"].prompt([
            {
                type: 'input',
                name: 'projectName',
                message: 'Enter project name:',
                default: external_path_.basename(process.cwd()),
                validate: (input) => input.length > 0 || 'Project name is required'
            },
            {
                type: 'input',
                name: 'buildDir',
                message: 'Enter build output directory:',
                default: 'dist'
            },
            {
                type: 'input',
                name: 'buildCommand',
                message: 'Enter build command:',
                default: 'npm run build'
            }
        ]);
        const buildPath = external_path_.join(process.cwd(), buildDir);
        // Build the project if build command is provided
        if (buildCommand && buildCommand.trim() !== '') {
            console.log(source/* default */.Ay.cyan('🔨 Building project...'));
            try {
                (0,external_child_process_.execSync)(buildCommand, { stdio: 'inherit' });
            }
            catch (error) {
                return {
                    success: false,
                    error: 'Build failed. Please fix build errors and try again.'
                };
            }
        }
        if (!fs_extra_lib.existsSync(buildPath)) {
            return {
                success: false,
                error: `Build directory "${buildDir}" not found. Please build your project first.`
            };
        }
        console.log(source/* default */.Ay.cyan('📤 Deploying to Cloudflare Pages...'));
        try {
            // Deploy using wrangler pages
            const deployCommand = `wrangler pages publish ${buildPath} --project-name=${projectName}`;
            const output = (0,external_child_process_.execSync)(deployCommand, { encoding: 'utf-8', stdio: 'pipe' });
            // Extract URL from output
            const urlMatch = output.match(/https:\/\/[^\s]+\.pages\.dev/);
            const deployUrl = urlMatch ? urlMatch[0] : undefined;
            console.log(source/* default */.Ay.green('✅ Successfully deployed to Cloudflare Pages!'));
            return {
                success: true,
                url: deployUrl || `https://${projectName}.pages.dev`
            };
        }
        catch (error) {
            // Try alternative deployment method
            try {
                (0,external_child_process_.execSync)(`wrangler pages deploy ${buildPath} --project-name=${projectName}`, { stdio: 'inherit' });
                console.log(source/* default */.Ay.green('✅ Successfully deployed to Cloudflare Pages!'));
                return {
                    success: true,
                    url: `https://${projectName}.pages.dev`
                };
            }
            catch (altError) {
                return {
                    success: false,
                    error: 'Failed to deploy to Cloudflare Pages. Check your build output and try again.'
                };
            }
        }
    }
    catch (error) {
        return {
            success: false,
            error: `Cloudflare Pages deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToWorkers() {
    try {
        // Check for wrangler.toml config
        const configPath = external_path_.join(process.cwd(), 'wrangler.toml');
        if (!fs_extra_lib.existsSync(configPath)) {
            const { createConfig } = await lib["default"].prompt([
                {
                    type: 'confirm',
                    name: 'createConfig',
                    message: 'No wrangler.toml found. Would you like to create one?',
                    default: true
                }
            ]);
            if (createConfig) {
                const { workerName, workerType } = await lib["default"].prompt([
                    {
                        type: 'input',
                        name: 'workerName',
                        message: 'Enter worker name:',
                        default: external_path_.basename(process.cwd()),
                        validate: (input) => input.length > 0 || 'Worker name is required'
                    },
                    {
                        type: 'list',
                        name: 'workerType',
                        message: 'Select worker type:',
                        choices: [
                            'javascript',
                            'typescript',
                            'module-worker'
                        ]
                    }
                ]);
                const configContent = generateWranglerConfig(workerName, workerType);
                fs_extra_lib.writeFileSync(configPath, configContent);
                console.log(source/* default */.Ay.green('✅ Created wrangler.toml configuration'));
                // Create sample worker file if it doesn't exist
                const workerFile = workerType === 'typescript' ? 'src/index.ts' : 'src/index.js';
                const workerPath = external_path_.join(process.cwd(), workerFile);
                if (!fs_extra_lib.existsSync(workerPath)) {
                    fs_extra_lib.ensureDirSync(external_path_.dirname(workerPath));
                    const workerContent = generateWorkerCode(workerType);
                    fs_extra_lib.writeFileSync(workerPath, workerContent);
                    console.log(source/* default */.Ay.green(`✅ Created sample worker file: ${workerFile}`));
                }
            }
            else {
                return {
                    success: false,
                    error: 'wrangler.toml configuration is required for Workers deployment'
                };
            }
        }
        console.log(source/* default */.Ay.cyan('🚀 Deploying Cloudflare Worker...'));
        try {
            const output = (0,external_child_process_.execSync)('wrangler publish', { encoding: 'utf-8', stdio: 'pipe' });
            // Extract URL from output
            const urlMatch = output.match(/https:\/\/[^\s]+\.workers\.dev/) ||
                output.match(/https:\/\/[^\s]+\.[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/);
            const deployUrl = urlMatch ? urlMatch[0] : undefined;
            console.log(source/* default */.Ay.green('✅ Successfully deployed Cloudflare Worker!'));
            return {
                success: true,
                url: deployUrl || 'Check Cloudflare Dashboard for worker URL'
            };
        }
        catch (error) {
            return {
                success: false,
                error: 'Failed to deploy Cloudflare Worker. Check your wrangler.toml and worker code.'
            };
        }
    }
    catch (error) {
        return {
            success: false,
            error: `Cloudflare Workers deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
async function deployToWorkersSites() {
    try {
        const { siteName, buildDir } = await lib["default"].prompt([
            {
                type: 'input',
                name: 'siteName',
                message: 'Enter Workers Site name:',
                default: external_path_.basename(process.cwd()),
                validate: (input) => input.length > 0 || 'Site name is required'
            },
            {
                type: 'input',
                name: 'buildDir',
                message: 'Enter static assets directory:',
                default: 'dist'
            }
        ]);
        // Check for wrangler.toml and create if needed
        const configPath = external_path_.join(process.cwd(), 'wrangler.toml');
        if (!fs_extra_lib.existsSync(configPath)) {
            const configContent = generateWorkersSiteConfig(siteName, buildDir);
            fs_extra_lib.writeFileSync(configPath, configContent);
            console.log(source/* default */.Ay.green('✅ Created wrangler.toml for Workers Sites'));
        }
        const buildPath = external_path_.join(process.cwd(), buildDir);
        if (!fs_extra_lib.existsSync(buildPath)) {
            return {
                success: false,
                error: `Static assets directory "${buildDir}" not found. Please build your project first.`
            };
        }
        console.log(source/* default */.Ay.cyan('🚀 Deploying Cloudflare Workers Site...'));
        try {
            const output = (0,external_child_process_.execSync)('wrangler publish', { encoding: 'utf-8', stdio: 'pipe' });
            // Extract URL from output
            const urlMatch = output.match(/https:\/\/[^\s]+\.workers\.dev/) ||
                output.match(/https:\/\/[^\s]+\.[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/);
            const deployUrl = urlMatch ? urlMatch[0] : undefined;
            console.log(source/* default */.Ay.green('✅ Successfully deployed Workers Site!'));
            return {
                success: true,
                url: deployUrl || 'Check Cloudflare Dashboard for site URL'
            };
        }
        catch (error) {
            return {
                success: false,
                error: 'Failed to deploy Workers Site. Check your configuration and static assets.'
            };
        }
    }
    catch (error) {
        return {
            success: false,
            error: `Cloudflare Workers Sites deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
    }
}
function generateWranglerConfig(workerName, workerType) {
    const main = workerType === 'typescript' ? 'src/index.ts' : 'src/index.js';
    return `name = "${workerName}"
main = "${main}"
compatibility_date = "2023-10-01"

# Uncomment to configure environment variables
# [vars]
# MY_VAR = "production_value"

# Uncomment to configure KV namespace bindings
# [[kv_namespaces]]
# binding = "MY_KV_NAMESPACE"
# id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Uncomment to configure R2 bucket bindings
# [[r2_buckets]]
# binding = "MY_BUCKET"
# bucket_name = "my-bucket"
`;
}
function generateWorkerCode(workerType) {
    if (workerType === 'typescript') {
        return `export interface Env {
  // Example binding to KV. Learn more at https://developers.cloudflare.com/workers/runtime-apis/kv/
  // MY_KV_NAMESPACE: KVNamespace;
  //
  // Example binding to Durable Object. Learn more at https://developers.cloudflare.com/workers/runtime-apis/durable-objects/
  // MY_DURABLE_OBJECT: DurableObjectNamespace;
  //
  // Example binding to R2. Learn more at https://developers.cloudflare.com/workers/runtime-apis/r2/
  // MY_BUCKET: R2Bucket;
}

export default {
  async fetch(
    request: Request,
    env: Env,
    ctx: ExecutionContext
  ): Promise<Response> {
    return new Response("Hello World from Cloudflare Worker!");
  },
};
`;
    }
    else {
        return `export default {
  async fetch(request, env, ctx) {
    return new Response("Hello World from Cloudflare Worker!");
  },
};
`;
    }
}
function generateWorkersSiteConfig(siteName, buildDir) {
    return `name = "${siteName}"
main = "workers-site/index.js"
compatibility_date = "2023-10-01"

[site]
bucket = "./${buildDir}"
entry-point = "workers-site"

# Uncomment to configure environment variables
# [vars]
# MY_VAR = "production_value"
`;
}

;// ./dist/deploy/google-cloud/google-cloud.js




async function deployToGoogleCloud() {
    console.log(source/* default */.Ay.blue('🌐 Starting Google Cloud deployment...'));
    // Check if gcloud CLI is installed
    if (!isGcloudInstalled()) {
        console.log(source/* default */.Ay.red('❌ Google Cloud CLI (gcloud) is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://cloud.google.com/sdk/docs/install'));
        console.log(source/* default */.Ay.gray('Installation commands:'));
        console.log(source/* default */.Ay.gray('  curl https://sdk.cloud.google.com | bash'));
        console.log(source/* default */.Ay.gray('  exec -l $SHELL'));
        console.log(source/* default */.Ay.gray('  gcloud init'));
        return;
    }
    // Check authentication
    if (!isGcloudAuthenticated()) {
        console.log(source/* default */.Ay.yellow('🔐 You need to authenticate with Google Cloud first.'));
        console.log(source/* default */.Ay.blue('Running: gcloud auth login'));
        try {
            (0,external_child_process_.execSync)('gcloud auth login', { stdio: 'inherit' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Authentication failed.'));
            return;
        }
    }
    const config = await getGoogleCloudConfig();
    try {
        await deployProject(config);
        console.log(source/* default */.Ay.green('✅ Successfully deployed to Google Cloud!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Deployment failed:'), error);
    }
}
function isGcloudInstalled() {
    try {
        (0,external_child_process_.execSync)('gcloud --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isGcloudAuthenticated() {
    try {
        const result = (0,external_child_process_.execSync)('gcloud auth list --filter=status:ACTIVE --format="value(account)"', { encoding: 'utf8' });
        return result.trim().length > 0;
    }
    catch {
        return false;
    }
}
async function getGoogleCloudConfig() {
    // Get available projects
    let projects = [];
    try {
        const projectsOutput = (0,external_child_process_.execSync)('gcloud projects list --format="value(projectId)"', { encoding: 'utf8' });
        projects = projectsOutput.trim().split('\n').filter(p => p);
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  Could not fetch projects. You may need to create one.'));
    }
    const answers = await lib["default"].prompt([
        {
            type: 'list',
            name: 'deploymentType',
            message: 'Select Google Cloud deployment type:',
            choices: [
                { name: 'App Engine - Serverless platform for web apps', value: 'app-engine' },
                { name: 'Cloud Run - Containerized applications', value: 'cloud-run' },
                { name: 'Cloud Functions - Serverless functions', value: 'cloud-functions' },
                { name: 'Firebase Hosting - Web hosting', value: 'firebase-hosting' }
            ]
        },
        {
            type: projects.length > 0 ? 'list' : 'input',
            name: 'projectId',
            message: projects.length > 0 ? 'Select a Google Cloud project:' : 'Enter your Google Cloud project ID:',
            choices: projects.length > 0 ? projects : undefined,
            validate: (input) => input.trim().length > 0 || 'Project ID is required'
        },
        {
            type: 'list',
            name: 'region',
            message: 'Select a region:',
            choices: [
                'us-central1',
                'us-east1',
                'us-west1',
                'europe-west1',
                'asia-southeast1',
                'asia-northeast1'
            ]
        },
        {
            type: 'input',
            name: 'service',
            message: 'Enter service name:',
            default: 'my-app',
            validate: (input) => input.trim().length > 0 || 'Service name is required'
        }
    ]);
    return answers;
}
async function deployProject(config) {
    console.log(source/* default */.Ay.blue(`📦 Deploying to ${config.deploymentType}...`));
    // Set the project
    (0,external_child_process_.execSync)(`gcloud config set project ${config.projectId}`, { stdio: 'inherit' });
    switch (config.deploymentType) {
        case 'app-engine':
            await deployToAppEngine(config);
            break;
        case 'cloud-run':
            await deployToCloudRun(config);
            break;
        case 'cloud-functions':
            await deployToCloudFunctions(config);
            break;
        case 'firebase-hosting':
            await deployToFirebaseHosting(config);
            break;
    }
}
async function deployToAppEngine(config) {
    // Create app.yaml if it doesn't exist
    if (!external_fs_.existsSync('app.yaml')) {
        const appYaml = generateAppYaml();
        external_fs_.writeFileSync('app.yaml', appYaml);
        console.log(source/* default */.Ay.green('📄 Created app.yaml'));
    }
    console.log(source/* default */.Ay.blue('🚀 Deploying to App Engine...'));
    (0,external_child_process_.execSync)('gcloud app deploy', { stdio: 'inherit' });
}
async function deployToCloudRun(config) {
    // Create Dockerfile if it doesn't exist
    if (!external_fs_.existsSync('Dockerfile')) {
        const dockerfile = google_cloud_generateDockerfile();
        external_fs_.writeFileSync('Dockerfile', dockerfile);
        console.log(source/* default */.Ay.green('📄 Created Dockerfile'));
    }
    console.log(source/* default */.Ay.blue('🔨 Building container image...'));
    (0,external_child_process_.execSync)(`gcloud builds submit --tag gcr.io/${config.projectId}/${config.service}`, { stdio: 'inherit' });
    console.log(source/* default */.Ay.blue('🚀 Deploying to Cloud Run...'));
    (0,external_child_process_.execSync)(`gcloud run deploy ${config.service} --image gcr.io/${config.projectId}/${config.service} --platform managed --region ${config.region} --allow-unauthenticated`, { stdio: 'inherit' });
}
async function deployToCloudFunctions(config) {
    console.log(source/* default */.Ay.blue('🚀 Deploying to Cloud Functions...'));
    // Check if this is a Node.js project
    if (external_fs_.existsSync('package.json')) {
        (0,external_child_process_.execSync)(`gcloud functions deploy ${config.service} --runtime nodejs18 --trigger-http --allow-unauthenticated --region ${config.region}`, { stdio: 'inherit' });
    }
    else {
        console.log(source/* default */.Ay.yellow('⚠️  This appears to be a non-Node.js project. Please configure Cloud Functions manually.'));
    }
}
async function deployToFirebaseHosting(config) {
    // Check if Firebase CLI is installed
    if (!isFirebaseInstalled()) {
        console.log(source/* default */.Ay.red('❌ Firebase CLI is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Installing Firebase CLI...'));
        (0,external_child_process_.execSync)('npm install -g firebase-tools', { stdio: 'inherit' });
    }
    // Initialize Firebase if not already done
    if (!external_fs_.existsSync('firebase.json')) {
        console.log(source/* default */.Ay.blue('🔧 Initializing Firebase...'));
        (0,external_child_process_.execSync)('firebase init hosting', { stdio: 'inherit' });
    }
    console.log(source/* default */.Ay.blue('🚀 Deploying to Firebase Hosting...'));
    (0,external_child_process_.execSync)(`firebase deploy --project ${config.projectId}`, { stdio: 'inherit' });
}
function isFirebaseInstalled() {
    try {
        (0,external_child_process_.execSync)('firebase --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function generateAppYaml() {
    // Detect framework and generate appropriate app.yaml
    if (external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        if (packageJson.dependencies?.next) {
            return `runtime: nodejs18

env_variables:
  NODE_ENV: production

automatic_scaling:
  min_instances: 0
  max_instances: 10
`;
        }
        else if (packageJson.dependencies?.react) {
            return `runtime: nodejs18

handlers:
- url: /static
  static_dir: build/static

- url: /(.*\\.(json|ico|js))$
  static_files: build/\\1
  upload: build/.*\\.(json|ico|js)$

- url: .*
  static_files: build/index.html
  upload: build/index.html
`;
        }
    }
    // Default app.yaml
    return `runtime: nodejs18

env_variables:
  NODE_ENV: production
`;
}
function google_cloud_generateDockerfile() {
    if (external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        if (packageJson.dependencies?.next) {
            return `FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

EXPOSE 3000

CMD ["npm", "start"]
`;
        }
        else if (packageJson.dependencies?.react) {
            return `FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
`;
        }
    }
    // Default Dockerfile
    return `FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

EXPOSE 3000

CMD ["npm", "start"]
`;
}

;// ./dist/deploy/firebase/firebase.js




async function deployToFirebase() {
    console.log(source/* default */.Ay.blue('🔥 Starting Firebase deployment...'));
    // Check if Firebase CLI is installed
    if (!firebase_isFirebaseInstalled()) {
        console.log(source/* default */.Ay.red('❌ Firebase CLI is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://firebase.google.com/docs/cli'));
        console.log(source/* default */.Ay.gray('Installation command:'));
        console.log(source/* default */.Ay.gray('  npm install -g firebase-tools'));
        return;
    }
    // Check authentication
    if (!isFirebaseAuthenticated()) {
        console.log(source/* default */.Ay.yellow('🔐 You need to authenticate with Firebase first.'));
        console.log(source/* default */.Ay.blue('Running: firebase login'));
        try {
            (0,external_child_process_.execSync)('firebase login', { stdio: 'inherit' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Authentication failed.'));
            return;
        }
    }
    const config = await getFirebaseConfig();
    try {
        await firebase_deployProject(config);
        console.log(source/* default */.Ay.green('✅ Successfully deployed to Firebase!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Deployment failed:'), error);
    }
}
function firebase_isFirebaseInstalled() {
    try {
        (0,external_child_process_.execSync)('firebase --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isFirebaseAuthenticated() {
    try {
        const result = (0,external_child_process_.execSync)('firebase projects:list', { encoding: 'utf8', stdio: 'pipe' });
        return !result.includes('not logged in');
    }
    catch {
        return false;
    }
}
async function getFirebaseConfig() {
    // Get available projects
    let projects = [];
    try {
        const projectsOutput = (0,external_child_process_.execSync)('firebase projects:list --json', { encoding: 'utf8', stdio: 'pipe' });
        const projectsData = JSON.parse(projectsOutput);
        projects = projectsData.map((p) => p.projectId);
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  Could not fetch projects. You may need to create one.'));
    }
    const answers = await lib["default"].prompt([
        {
            type: 'list',
            name: 'deploymentType',
            message: 'Select Firebase deployment type:',
            choices: [
                { name: 'Hosting - Static web hosting', value: 'hosting' },
                { name: 'Functions - Serverless functions', value: 'functions' },
                { name: 'Firestore - NoSQL database', value: 'firestore' },
                { name: 'Storage - File storage', value: 'storage' }
            ]
        },
        {
            type: projects.length > 0 ? 'list' : 'input',
            name: 'projectId',
            message: projects.length > 0 ? 'Select a Firebase project:' : 'Enter your Firebase project ID:',
            choices: projects.length > 0 ? projects : undefined,
            validate: (input) => input.trim().length > 0 || 'Project ID is required'
        },
        {
            type: 'input',
            name: 'buildDir',
            message: 'Enter build directory (for hosting):',
            default: detectBuildDir(),
            when: (answers) => answers.deploymentType === 'hosting'
        }
    ]);
    return answers;
}
function detectBuildDir() {
    if (external_fs_.existsSync('dist'))
        return 'dist';
    if (external_fs_.existsSync('build'))
        return 'build';
    if (external_fs_.existsSync('public'))
        return 'public';
    return 'dist';
}
async function firebase_deployProject(config) {
    console.log(source/* default */.Ay.blue(`📦 Deploying to Firebase ${config.deploymentType}...`));
    // Initialize Firebase if not already done
    if (!external_fs_.existsSync('firebase.json')) {
        console.log(source/* default */.Ay.blue('🔧 Initializing Firebase...'));
        await initializeFirebase(config);
    }
    // Set the project
    (0,external_child_process_.execSync)(`firebase use ${config.projectId}`, { stdio: 'inherit' });
    switch (config.deploymentType) {
        case 'hosting':
            await deployToHosting(config);
            break;
        case 'functions':
            await deployToFunctions(config);
            break;
        case 'firestore':
            await deployToFirestore(config);
            break;
        case 'storage':
            await deployToStorage(config);
            break;
    }
}
async function initializeFirebase(config) {
    const firebaseConfig = {
        hosting: {
            public: config.buildDir || 'dist',
            ignore: [
                'firebase.json',
                '**/.*',
                '**/node_modules/**'
            ],
            rewrites: [
                {
                    source: '**',
                    destination: '/index.html'
                }
            ]
        }
    };
    if (config.deploymentType === 'functions') {
        firebaseConfig.functions = {
            source: 'functions',
            runtime: 'nodejs18'
        };
    }
    if (config.deploymentType === 'firestore') {
        firebaseConfig.firestore = {
            rules: 'firestore.rules',
            indexes: 'firestore.indexes.json'
        };
    }
    if (config.deploymentType === 'storage') {
        firebaseConfig.storage = {
            rules: 'storage.rules'
        };
    }
    external_fs_.writeFileSync('firebase.json', JSON.stringify(firebaseConfig, null, 2));
    console.log(source/* default */.Ay.green('📄 Created firebase.json'));
    // Create .firebaserc
    const firebaserc = {
        projects: {
            default: config.projectId
        }
    };
    external_fs_.writeFileSync('.firebaserc', JSON.stringify(firebaserc, null, 2));
    console.log(source/* default */.Ay.green('📄 Created .firebaserc'));
}
async function deployToHosting(config) {
    // Build the project if needed
    if (external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        if (packageJson.scripts?.build) {
            console.log(source/* default */.Ay.blue('🔨 Building project...'));
            (0,external_child_process_.execSync)('npm run build', { stdio: 'inherit' });
        }
    }
    console.log(source/* default */.Ay.blue('🚀 Deploying to Firebase Hosting...'));
    (0,external_child_process_.execSync)('firebase deploy --only hosting', { stdio: 'inherit' });
}
async function deployToFunctions(config) {
    // Create functions directory if it doesn't exist
    if (!external_fs_.existsSync('functions')) {
        external_fs_.mkdirSync('functions');
        // Create basic function files
        const indexJs = `const functions = require('firebase-functions');

// Create and Deploy Your First Cloud Functions
// https://firebase.google.com/docs/functions/write-firebase-functions

exports.helloWorld = functions.https.onRequest((request, response) => {
  functions.logger.info("Hello logs!", {structuredData: true});
  response.send("Hello from Firebase!");
});
`;
        const packageJsonContent = {
            name: 'functions',
            description: 'Cloud Functions for Firebase',
            scripts: {
                serve: 'firebase emulators:start --only functions',
                shell: 'firebase functions:shell',
                start: 'npm run shell',
                deploy: 'firebase deploy --only functions',
                logs: 'firebase functions:log'
            },
            engines: {
                node: '18'
            },
            main: 'index.js',
            dependencies: {
                'firebase-admin': '^11.8.0',
                'firebase-functions': '^4.3.1'
            },
            devDependencies: {
                'firebase-functions-test': '^3.1.0'
            },
            private: true
        };
        external_fs_.writeFileSync('functions/index.js', indexJs);
        external_fs_.writeFileSync('functions/package.json', JSON.stringify(packageJsonContent, null, 2));
        console.log(source/* default */.Ay.green('📄 Created functions directory with sample function'));
        console.log(source/* default */.Ay.blue('📦 Installing function dependencies...'));
        (0,external_child_process_.execSync)('cd functions && npm install', { stdio: 'inherit' });
    }
    console.log(source/* default */.Ay.blue('🚀 Deploying to Firebase Functions...'));
    (0,external_child_process_.execSync)('firebase deploy --only functions', { stdio: 'inherit' });
}
async function deployToFirestore(config) {
    // Create firestore rules if they don't exist
    if (!external_fs_.existsSync('firestore.rules')) {
        const rules = `rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read/write access to all users under any conditions
    // This rule set is useful for getting started, but it is configured to
    // expire after 30 days because it leaves your app open to attackers.
    // At that time, all client requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // your app will lose access to your Firestore database
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2024, 12, 31);
    }
  }
}`;
        external_fs_.writeFileSync('firestore.rules', rules);
        console.log(source/* default */.Ay.green('📄 Created firestore.rules'));
    }
    // Create firestore indexes if they don't exist
    if (!external_fs_.existsSync('firestore.indexes.json')) {
        const indexes = {
            indexes: [],
            fieldOverrides: []
        };
        external_fs_.writeFileSync('firestore.indexes.json', JSON.stringify(indexes, null, 2));
        console.log(source/* default */.Ay.green('📄 Created firestore.indexes.json'));
    }
    console.log(source/* default */.Ay.blue('🚀 Deploying Firestore rules and indexes...'));
    (0,external_child_process_.execSync)('firebase deploy --only firestore', { stdio: 'inherit' });
}
async function deployToStorage(config) {
    // Create storage rules if they don't exist
    if (!external_fs_.existsSync('storage.rules')) {
        const rules = `rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}`;
        external_fs_.writeFileSync('storage.rules', rules);
        console.log(source/* default */.Ay.green('📄 Created storage.rules'));
    }
    console.log(source/* default */.Ay.blue('🚀 Deploying Firebase Storage rules...'));
    (0,external_child_process_.execSync)('firebase deploy --only storage', { stdio: 'inherit' });
}

;// ./dist/deploy/auth0/auth0.js




async function deployToAuth0() {
    console.log(source/* default */.Ay.blue('🔐 Starting Auth0 configuration...'));
    // Check if Auth0 CLI is installed
    if (!isAuth0Installed()) {
        console.log(source/* default */.Ay.red('❌ Auth0 CLI is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://github.com/auth0/auth0-cli'));
        console.log(source/* default */.Ay.gray('Installation commands:'));
        console.log(source/* default */.Ay.gray('  # macOS'));
        console.log(source/* default */.Ay.gray('  brew tap auth0/auth0-cli && brew install auth0'));
        console.log(source/* default */.Ay.gray('  # Linux'));
        console.log(source/* default */.Ay.gray('  curl -sSfL https://raw.githubusercontent.com/auth0/auth0-cli/main/install.sh | sh -s -- -b /usr/local/bin'));
        console.log(source/* default */.Ay.gray('  # Windows'));
        console.log(source/* default */.Ay.gray('  scoop bucket add auth0 https://github.com/auth0/scoop-auth0-cli.git'));
        console.log(source/* default */.Ay.gray('  scoop install auth0'));
        return;
    }
    // Check authentication
    if (!isAuth0Authenticated()) {
        console.log(source/* default */.Ay.yellow('🔐 You need to authenticate with Auth0 first.'));
        console.log(source/* default */.Ay.blue('Running: auth0 login'));
        try {
            (0,external_child_process_.execSync)('auth0 login', { stdio: 'inherit' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Authentication failed.'));
            return;
        }
    }
    const config = await getAuth0Config();
    try {
        await configureAuth0(config);
        console.log(source/* default */.Ay.green('✅ Successfully configured Auth0!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Configuration failed:'), error);
    }
}
function isAuth0Installed() {
    try {
        (0,external_child_process_.execSync)('auth0 --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isAuth0Authenticated() {
    try {
        (0,external_child_process_.execSync)('auth0 tenants list', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
async function getAuth0Config() {
    console.log(source/* default */.Ay.blue('🔧 Configuring Auth0 settings...'));
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'domain',
            message: 'Enter your Auth0 domain (e.g., myapp.auth0.com):',
            validate: (input) => {
                if (!input.trim())
                    return 'Domain is required';
                if (!input.includes('.auth0.com') && !input.includes('.')) {
                    return 'Please enter a valid Auth0 domain';
                }
                return true;
            }
        },
        {
            type: 'input',
            name: 'clientId',
            message: 'Enter your Auth0 Client ID:',
            validate: (input) => input.trim().length > 0 || 'Client ID is required'
        },
        {
            type: 'password',
            name: 'clientSecret',
            message: 'Enter your Auth0 Client Secret:',
            validate: (input) => input.trim().length > 0 || 'Client Secret is required'
        },
        {
            type: 'input',
            name: 'audience',
            message: 'Enter API Audience (optional, for API access):',
            default: ''
        },
        {
            type: 'input',
            name: 'scope',
            message: 'Enter default scopes (optional):',
            default: 'openid profile email'
        }
    ]);
    return answers;
}
async function configureAuth0(config) {
    console.log(source/* default */.Ay.blue('⚙️  Configuring Auth0 application...'));
    // Detect framework and create appropriate configuration
    const framework = detectFramework();
    switch (framework) {
        case 'nextjs':
            await configureNextJsAuth0(config);
            break;
        case 'react':
            await configureReactAuth0(config);
            break;
        case 'angular':
            await configureAngularAuth0(config);
            break;
        case 'vue':
            await configureVueAuth0(config);
            break;
        case 'express':
            await configureExpressAuth0(config);
            break;
        default:
            await createGenericAuth0Config(config);
            break;
    }
    // Create .env file with Auth0 configuration
    await auth0_createEnvFile(config);
    console.log(source/* default */.Ay.green('📄 Auth0 configuration files created!'));
    console.log(source/* default */.Ay.blue('📖 Next steps:'));
    console.log(source/* default */.Ay.gray('1. Add your domain to Auth0 Dashboard > Applications > Settings > Allowed Callback URLs'));
    console.log(source/* default */.Ay.gray('2. Add your domain to Allowed Logout URLs'));
    console.log(source/* default */.Ay.gray('3. Configure CORS settings if needed'));
    console.log(source/* default */.Ay.yellow('4. Install required dependencies and restart your application'));
}
function detectFramework() {
    if (!external_fs_.existsSync('package.json'))
        return 'generic';
    const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
    const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
    if (deps.next)
        return 'nextjs';
    if (deps.react)
        return 'react';
    if (deps['@angular/core'])
        return 'angular';
    if (deps.vue)
        return 'vue';
    if (deps.express)
        return 'express';
    return 'generic';
}
async function configureNextJsAuth0(config) {
    console.log(source/* default */.Ay.blue('⚛️  Configuring for Next.js...'));
    // Install Auth0 Next.js SDK
    console.log(source/* default */.Ay.blue('📦 Installing @auth0/nextjs-auth0...'));
    (0,external_child_process_.execSync)('npm install @auth0/nextjs-auth0', { stdio: 'inherit' });
    // Create API route for Auth0
    const apiDir = 'pages/api/auth';
    if (!external_fs_.existsSync('pages'))
        external_fs_.mkdirSync('pages');
    if (!external_fs_.existsSync('pages/api'))
        external_fs_.mkdirSync('pages/api');
    if (!external_fs_.existsSync(apiDir))
        external_fs_.mkdirSync(apiDir);
    const authHandler = `import { handleAuth } from '@auth0/nextjs-auth0';

export default handleAuth();
`;
    external_fs_.writeFileSync(`${apiDir}/[...auth0].js`, authHandler);
    console.log(source/* default */.Ay.green('📄 Created Auth0 API route'));
    // Create _app.js wrapper
    const appWrapper = `import React from 'react';
import { UserProvider } from '@auth0/nextjs-auth0/client';

export default function App({ Component, pageProps }) {
  return (
    <UserProvider>
      <Component {...pageProps} />
    </UserProvider>
  );
}
`;
    if (!external_fs_.existsSync('pages/_app.js')) {
        external_fs_.writeFileSync('pages/_app.js', appWrapper);
        console.log(source/* default */.Ay.green('📄 Created _app.js with Auth0 UserProvider'));
    }
    // Create example usage component
    const exampleComponent = `import React from 'react';
import { useUser } from '@auth0/nextjs-auth0/client';

export default function Profile() {
  const { user, error, isLoading } = useUser();

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>{error.message}</div>;

  return (
    user && (
      <div>
        <img src={user.picture} alt={user.name} />
        <h2>{user.name}</h2>
        <p>{user.email}</p>
      </div>
    )
  );
}
`;
    external_fs_.writeFileSync('components/Profile.js', exampleComponent);
    console.log(source/* default */.Ay.green('📄 Created example Profile component'));
}
async function configureReactAuth0(config) {
    console.log(source/* default */.Ay.blue('⚛️  Configuring for React...'));
    // Install Auth0 React SDK
    console.log(source/* default */.Ay.blue('📦 Installing @auth0/auth0-react...'));
    (0,external_child_process_.execSync)('npm install @auth0/auth0-react', { stdio: 'inherit' });
    // Create Auth0 provider wrapper
    const auth0Provider = `import React from 'react';
import { Auth0Provider } from '@auth0/auth0-react';

const Auth0ProviderWithHistory = ({ children }) => {
  const domain = process.env.REACT_APP_AUTH0_DOMAIN;
  const clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;
  const audience = process.env.REACT_APP_AUTH0_AUDIENCE;

  return (
    <Auth0Provider
      domain={domain}
      clientId={clientId}
      authorizationParams={{
        redirect_uri: window.location.origin,
        audience: audience,
        scope: "openid profile email"
      }}
    >
      {children}
    </Auth0Provider>
  );
};

export default Auth0ProviderWithHistory;
`;
    external_fs_.writeFileSync('src/auth/Auth0ProviderWithHistory.js', auth0Provider);
    console.log(source/* default */.Ay.green('📄 Created Auth0 provider wrapper'));
    // Create login/logout buttons component
    const authButtons = `import React from 'react';
import { useAuth0 } from '@auth0/auth0-react';

const LoginButton = () => {
  const { loginWithRedirect } = useAuth0();

  return (
    <button onClick={() => loginWithRedirect()}>
      Log In
    </button>
  );
};

const LogoutButton = () => {
  const { logout } = useAuth0();

  return (
    <button onClick={() => logout({ logoutParams: { returnTo: window.location.origin } })}>
      Log Out
    </button>
  );
};

const Profile = () => {
  const { user, isAuthenticated, isLoading } = useAuth0();

  if (isLoading) {
    return <div>Loading ...</div>;
  }

  return (
    isAuthenticated && (
      <div>
        <img src={user.picture} alt={user.name} />
        <h2>{user.name}</h2>
        <p>{user.email}</p>
      </div>
    )
  );
};

export { LoginButton, LogoutButton, Profile };
`;
    if (!external_fs_.existsSync('src/components'))
        external_fs_.mkdirSync('src/components', { recursive: true });
    external_fs_.writeFileSync('src/components/Auth.js', authButtons);
    console.log(source/* default */.Ay.green('📄 Created Auth components'));
}
async function configureExpressAuth0(config) {
    console.log(source/* default */.Ay.blue('🚂 Configuring for Express.js...'));
    // Install Auth0 Express SDK
    console.log(source/* default */.Ay.blue('📦 Installing express-openid-connect...'));
    (0,external_child_process_.execSync)('npm install express-openid-connect', { stdio: 'inherit' });
    // Create Auth0 middleware
    const auth0Middleware = `const { auth } = require('express-openid-connect');

const authConfig = {
  authRequired: false,
  auth0Logout: true,
  secret: process.env.AUTH0_SECRET,
  baseURL: process.env.AUTH0_BASE_URL,
  clientID: process.env.AUTH0_CLIENT_ID,
  issuerBaseURL: \`https://\${process.env.AUTH0_DOMAIN}\`
};

module.exports = { auth, authConfig };
`;
    if (!external_fs_.existsSync('middleware'))
        external_fs_.mkdirSync('middleware');
    external_fs_.writeFileSync('middleware/auth0.js', auth0Middleware);
    console.log(source/* default */.Ay.green('📄 Created Auth0 middleware'));
    // Create example routes
    const exampleRoutes = `const express = require('express');
const { requiresAuth } = require('express-openid-connect');
const router = express.Router();

// Public route
router.get('/', (req, res) => {
  res.send(req.oidc.isAuthenticated() ? 'Logged in' : 'Logged out');
});

// Protected route
router.get('/profile', requiresAuth(), (req, res) => {
  res.json(req.oidc.user);
});

module.exports = router;
`;
    if (!external_fs_.existsSync('routes'))
        external_fs_.mkdirSync('routes');
    external_fs_.writeFileSync('routes/auth.js', exampleRoutes);
    console.log(source/* default */.Ay.green('📄 Created example auth routes'));
}
async function configureAngularAuth0(config) {
    console.log(source/* default */.Ay.blue('🅰️  Configuring for Angular...'));
    // Install Auth0 Angular SDK
    console.log(source/* default */.Ay.blue('📦 Installing @auth0/auth0-angular...'));
    (0,external_child_process_.execSync)('npm install @auth0/auth0-angular', { stdio: 'inherit' });
    console.log(source/* default */.Ay.yellow('📝 Manual configuration required for Angular:'));
    console.log(source/* default */.Ay.gray('1. Add AuthModule to your app.module.ts'));
    console.log(source/* default */.Ay.gray('2. Configure the Auth0 domain and clientId'));
    console.log(source/* default */.Ay.gray('3. Add AuthGuard to protect routes'));
}
async function configureVueAuth0(config) {
    console.log(source/* default */.Ay.blue('💚 Configuring for Vue.js...'));
    // Install Auth0 Vue SDK
    console.log(source/* default */.Ay.blue('📦 Installing @auth0/auth0-vue...'));
    (0,external_child_process_.execSync)('npm install @auth0/auth0-vue', { stdio: 'inherit' });
    console.log(source/* default */.Ay.yellow('📝 Manual configuration required for Vue:'));
    console.log(source/* default */.Ay.gray('1. Add Auth0 plugin to your main.js'));
    console.log(source/* default */.Ay.gray('2. Configure the Auth0 domain and clientId'));
    console.log(source/* default */.Ay.gray('3. Use authGuard for protected routes'));
}
async function createGenericAuth0Config(config) {
    console.log(source/* default */.Ay.blue('⚙️  Creating generic Auth0 configuration...'));
    const configFile = `// Auth0 Configuration
const auth0Config = {
  domain: '${config.domain}',
  clientId: '${config.clientId}',
  ${config.audience ? `audience: '${config.audience}',` : ''}
  scope: '${config.scope || 'openid profile email'}'
};

module.exports = auth0Config;
`;
    external_fs_.writeFileSync('auth0.config.js', configFile);
    console.log(source/* default */.Ay.green('📄 Created auth0.config.js'));
}
async function auth0_createEnvFile(config) {
    const envContent = `# Auth0 Configuration
AUTH0_DOMAIN=${config.domain}
AUTH0_CLIENT_ID=${config.clientId}
AUTH0_CLIENT_SECRET=${config.clientSecret}
${config.audience ? `AUTH0_AUDIENCE=${config.audience}` : ''}
AUTH0_SCOPE=${config.scope || 'openid profile email'}

# For Next.js
NEXT_PUBLIC_AUTH0_DOMAIN=${config.domain}
NEXT_PUBLIC_AUTH0_CLIENT_ID=${config.clientId}
AUTH0_SECRET=${generateRandomString(32)}
AUTH0_BASE_URL=http://localhost:3000

# For React
REACT_APP_AUTH0_DOMAIN=${config.domain}
REACT_APP_AUTH0_CLIENT_ID=${config.clientId}
${config.audience ? `REACT_APP_AUTH0_AUDIENCE=${config.audience}` : ''}
`;
    // Append to existing .env or create new one
    if (external_fs_.existsSync('.env')) {
        external_fs_.appendFileSync('.env', '\n' + envContent);
        console.log(source/* default */.Ay.green('📄 Added Auth0 variables to existing .env file'));
    }
    else {
        external_fs_.writeFileSync('.env', envContent);
        console.log(source/* default */.Ay.green('📄 Created .env file with Auth0 variables'));
    }
    // Create .env.example
    const envExampleContent = envContent.replace(/=.+$/gm, '=');
    external_fs_.writeFileSync('.env.example', envExampleContent);
    console.log(source/* default */.Ay.green('📄 Created .env.example file'));
}
function generateRandomString(length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

;// ./dist/deploy/serverless/serverless.js





async function deployToServerless() {
    console.log(source/* default */.Ay.blue('⚡ Starting Serverless Framework deployment...'));
    // Check if Serverless Framework is installed
    if (!isServerlessInstalled()) {
        console.log(source/* default */.Ay.red('❌ Serverless Framework is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://www.serverless.com/framework/docs/getting-started'));
        console.log(source/* default */.Ay.gray('Installation command:'));
        console.log(source/* default */.Ay.gray('  npm install -g serverless'));
        return;
    }
    const config = await getServerlessConfig();
    try {
        await serverless_deployProject(config);
        console.log(source/* default */.Ay.green('✅ Successfully deployed with Serverless Framework!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Deployment failed:'), error);
    }
}
function isServerlessInstalled() {
    try {
        (0,external_child_process_.execSync)('serverless --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
async function getServerlessConfig() {
    console.log(source/* default */.Ay.blue('🔧 Configuring Serverless deployment...'));
    const framework = serverless_detectFramework();
    const answers = await lib["default"].prompt([
        {
            type: 'list',
            name: 'provider',
            message: 'Select cloud provider:',
            choices: [
                { name: 'AWS - Amazon Web Services', value: 'aws' },
                { name: 'Azure - Microsoft Azure', value: 'azure' },
                { name: 'GCP - Google Cloud Platform', value: 'gcp' },
                { name: 'Cloudflare - Cloudflare Workers', value: 'cloudflare' }
            ]
        },
        {
            type: 'input',
            name: 'service',
            message: 'Enter service name:',
            default: external_path_.basename(process.cwd()),
            validate: (input) => input.trim().length > 0 || 'Service name is required'
        },
        {
            type: 'list',
            name: 'runtime',
            message: 'Select runtime:',
            choices: (answers) => {
                if (answers.provider === 'aws') {
                    return [
                        'nodejs18.x',
                        'nodejs16.x',
                        'python3.9',
                        'python3.8',
                        'java11',
                        'dotnet6',
                        'go1.x'
                    ];
                }
                else if (answers.provider === 'azure') {
                    return [
                        'nodejs18',
                        'nodejs16',
                        'python3.9',
                        'python3.8',
                        'dotnet6'
                    ];
                }
                else if (answers.provider === 'gcp') {
                    return [
                        'nodejs18',
                        'nodejs16',
                        'python39',
                        'python38',
                        'go119',
                        'java11'
                    ];
                }
                else {
                    return ['javascript', 'typescript'];
                }
            }
        },
        {
            type: 'list',
            name: 'region',
            message: 'Select region:',
            choices: (answers) => {
                if (answers.provider === 'aws') {
                    return [
                        'us-east-1',
                        'us-west-2',
                        'eu-west-1',
                        'ap-southeast-1',
                        'ap-northeast-1'
                    ];
                }
                else if (answers.provider === 'azure') {
                    return [
                        'East US',
                        'West US 2',
                        'West Europe',
                        'Southeast Asia',
                        'Japan East'
                    ];
                }
                else if (answers.provider === 'gcp') {
                    return [
                        'us-central1',
                        'us-east1',
                        'europe-west1',
                        'asia-southeast1',
                        'asia-northeast1'
                    ];
                }
                else {
                    return ['global'];
                }
            }
        },
        {
            type: 'input',
            name: 'stage',
            message: 'Enter deployment stage:',
            default: 'dev',
            validate: (input) => input.trim().length > 0 || 'Stage is required'
        }
    ]);
    return { ...answers, framework };
}
function serverless_detectFramework() {
    if (!external_fs_.existsSync('package.json'))
        return 'generic';
    const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
    const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
    if (deps.next)
        return 'nextjs';
    if (deps.express)
        return 'express';
    if (deps.fastify)
        return 'fastify';
    if (deps.koa)
        return 'koa';
    if (deps.react)
        return 'react';
    if (deps.vue)
        return 'vue';
    return 'nodejs';
}
async function serverless_deployProject(config) {
    console.log(source/* default */.Ay.blue(`📦 Deploying ${config.service} to ${config.provider}...`));
    // Create serverless.yml if it doesn't exist
    if (!external_fs_.existsSync('serverless.yml') && !external_fs_.existsSync('serverless.yaml')) {
        const serverlessConfig = generateServerlessConfig(config);
        external_fs_.writeFileSync('serverless.yml', serverlessConfig);
        console.log(source/* default */.Ay.green('📄 Created serverless.yml'));
    }
    // Create handler file if it doesn't exist
    if (!external_fs_.existsSync('handler.js') && !external_fs_.existsSync('index.js') && config.framework === 'nodejs') {
        const handlerContent = generateHandlerFile(config);
        external_fs_.writeFileSync('handler.js', handlerContent);
        console.log(source/* default */.Ay.green('📄 Created handler.js'));
    }
    // Install serverless plugins if needed
    await installPlugins(config);
    // Deploy the service
    console.log(source/* default */.Ay.blue('🚀 Deploying to cloud provider...'));
    (0,external_child_process_.execSync)(`serverless deploy --stage ${config.stage}`, { stdio: 'inherit' });
}
function generateServerlessConfig(config) {
    const baseConfig = `service: ${config.service}

provider:
  name: ${config.provider}
  runtime: ${config.runtime}
  region: ${config.region}
  stage: \${opt:stage, '${config.stage}'}

functions:`;
    if (config.framework === 'express') {
        return baseConfig + `
  app:
    handler: handler.server
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
      - http:
          path: /
          method: ANY
          cors: true

plugins:
  - serverless-http
`;
    }
    else if (config.framework === 'nextjs') {
        return baseConfig + `
  nextjs:
    handler: handler.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
      - http:
          path: /
          method: ANY

plugins:
  - serverless-nextjs-plugin
`;
    }
    else {
        return baseConfig + `
  hello:
    handler: handler.hello
    events:
      - http:
          path: /hello
          method: get
          cors: true

  api:
    handler: handler.api
    events:
      - http:
          path: /api/{proxy+}
          method: ANY
          cors: true
`;
    }
}
function generateHandlerFile(config) {
    if (config.framework === 'express') {
        return `const serverless = require('serverless-http');
const express = require('express');

const app = express();

app.use(express.json());

app.get('/', (req, res) => {
  res.json({
    message: 'Hello from Serverless Express!',
    service: '${config.service}',
    stage: process.env.NODE_ENV || '${config.stage}'
  });
});

app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

module.exports.server = serverless(app);
`;
    }
    else {
        return `'use strict';

module.exports.hello = async (event) => {
  return {
    statusCode: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Credentials': true,
    },
    body: JSON.stringify(
      {
        message: 'Hello from Serverless!',
        service: '${config.service}',
        stage: process.env.NODE_ENV || '${config.stage}',
        input: event,
      },
      null,
      2
    ),
  };
};

module.exports.api = async (event) => {
  const { httpMethod, path, pathParameters } = event;
  
  return {
    statusCode: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Credentials': true,
    },
    body: JSON.stringify({
      message: 'API endpoint',
      method: httpMethod,
      path: path,
      params: pathParameters,
      timestamp: new Date().toISOString()
    }),
  };
};
`;
    }
}
async function installPlugins(config) {
    const plugins = [];
    if (config.framework === 'express') {
        plugins.push('serverless-http');
    }
    else if (config.framework === 'nextjs') {
        plugins.push('serverless-nextjs-plugin');
    }
    if (config.provider === 'aws') {
        plugins.push('serverless-offline');
    }
    if (plugins.length > 0) {
        console.log(source/* default */.Ay.blue('📦 Installing Serverless plugins...'));
        for (const plugin of plugins) {
            try {
                (0,external_child_process_.execSync)(`npm install ${plugin}`, { stdio: 'inherit' });
            }
            catch (error) {
                console.log(source/* default */.Ay.yellow(`⚠️  Failed to install ${plugin}, continuing...`));
            }
        }
    }
}

;// ./dist/deploy/railway/railway.js





async function deployToRailway() {
    console.log(source/* default */.Ay.blue('🚂 Starting Railway deployment...'));
    // Check if Railway CLI is installed
    if (!isRailwayInstalled()) {
        console.log(source/* default */.Ay.red('❌ Railway CLI is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://docs.railway.app/develop/cli'));
        console.log(source/* default */.Ay.gray('Installation commands:'));
        console.log(source/* default */.Ay.gray('  # macOS/Linux'));
        console.log(source/* default */.Ay.gray('  curl -fsSL https://railway.app/install.sh | sh'));
        console.log(source/* default */.Ay.gray('  # Windows'));
        console.log(source/* default */.Ay.gray('  iwr https://railway.app/install.ps1 | iex'));
        console.log(source/* default */.Ay.gray('  # npm'));
        console.log(source/* default */.Ay.gray('  npm install -g @railway/cli'));
        return;
    }
    // Check authentication
    if (!isRailwayAuthenticated()) {
        console.log(source/* default */.Ay.yellow('🔐 You need to authenticate with Railway first.'));
        console.log(source/* default */.Ay.blue('Running: railway login'));
        try {
            (0,external_child_process_.execSync)('railway login', { stdio: 'inherit' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Authentication failed.'));
            return;
        }
    }
    const config = await getRailwayConfig();
    try {
        await railway_deployProject(config);
        console.log(source/* default */.Ay.green('✅ Successfully deployed to Railway!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Deployment failed:'), error);
    }
}
function isRailwayInstalled() {
    try {
        (0,external_child_process_.execSync)('railway --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isRailwayAuthenticated() {
    try {
        (0,external_child_process_.execSync)('railway whoami', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
async function getRailwayConfig() {
    console.log(source/* default */.Ay.blue('🔧 Configuring Railway deployment...'));
    const framework = railway_detectFramework();
    const defaultCommands = getDefaultCommands(framework);
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'projectName',
            message: 'Enter project name:',
            default: external_path_.basename(process.cwd()),
            validate: (input) => input.trim().length > 0 || 'Project name is required'
        },
        {
            type: 'list',
            name: 'environment',
            message: 'Select environment:',
            choices: [
                { name: 'Production', value: 'production' },
                { name: 'Staging', value: 'staging' },
                { name: 'Development', value: 'development' }
            ]
        },
        {
            type: 'input',
            name: 'buildCommand',
            message: 'Enter build command (optional):',
            default: defaultCommands.build,
            when: () => defaultCommands.build !== undefined
        },
        {
            type: 'input',
            name: 'startCommand',
            message: 'Enter start command:',
            default: defaultCommands.start,
            validate: (input) => input.trim().length > 0 || 'Start command is required'
        }
    ]);
    return { ...answers, framework };
}
function railway_detectFramework() {
    if (!external_fs_.existsSync('package.json'))
        return 'generic';
    const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
    const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
    if (deps.next)
        return 'nextjs';
    if (deps.react && deps['react-scripts'])
        return 'create-react-app';
    if (deps.react && deps.vite)
        return 'vite-react';
    if (deps.vue && deps.vite)
        return 'vite-vue';
    if (deps.express)
        return 'express';
    if (deps.fastify)
        return 'fastify';
    if (deps.nest)
        return 'nestjs';
    if (deps.nuxt)
        return 'nuxtjs';
    if (deps.svelte)
        return 'svelte';
    if (deps.gatsby)
        return 'gatsby';
    if (deps.remix)
        return 'remix';
    return 'nodejs';
}
function getDefaultCommands(framework) {
    switch (framework) {
        case 'nextjs':
            return { build: 'npm run build', start: 'npm start' };
        case 'create-react-app':
            return { build: 'npm run build', start: 'npx serve -s build' };
        case 'vite-react':
        case 'vite-vue':
            return { build: 'npm run build', start: 'npx serve -s dist' };
        case 'nuxtjs':
            return { build: 'npm run build', start: 'npm start' };
        case 'gatsby':
            return { build: 'npm run build', start: 'npx serve -s public' };
        case 'remix':
            return { build: 'npm run build', start: 'npm start' };
        case 'express':
        case 'fastify':
        case 'nestjs':
            return { start: 'npm start' };
        case 'svelte':
            return { build: 'npm run build', start: 'npx serve -s public' };
        default:
            return { start: 'npm start' };
    }
}
async function railway_deployProject(config) {
    console.log(source/* default */.Ay.blue(`📦 Deploying ${config.projectName} to Railway...`));
    // Initialize Railway project if not exists
    if (!external_fs_.existsSync('railway.json') && !external_fs_.existsSync('.railway')) {
        console.log(source/* default */.Ay.blue('🔧 Initializing Railway project...'));
        (0,external_child_process_.execSync)(`railway init ${config.projectName}`, { stdio: 'inherit' });
    }
    // Create or update railway.json configuration
    await createRailwayConfig(config);
    // Create Procfile if needed for specific frameworks
    await createProcfile(config);
    // Create Dockerfile if it doesn't exist and framework needs it
    if (shouldCreateDockerfile(config.framework) && !external_fs_.existsSync('Dockerfile')) {
        const dockerfile = railway_generateDockerfile(config);
        external_fs_.writeFileSync('Dockerfile', dockerfile);
        console.log(source/* default */.Ay.green('📄 Created Dockerfile'));
    }
    // Set environment variables
    await setEnvironmentVariables(config);
    // Deploy the project
    console.log(source/* default */.Ay.blue('🚀 Deploying to Railway...'));
    (0,external_child_process_.execSync)('railway up', { stdio: 'inherit' });
    // Get deployment URL
    try {
        const result = (0,external_child_process_.execSync)('railway status', { encoding: 'utf8' });
        const urlMatch = result.match(/https:\/\/[^\s]+/);
        if (urlMatch) {
            console.log(source/* default */.Ay.green(`🌐 Deployed at: ${urlMatch[0]}`));
        }
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  Could not retrieve deployment URL'));
    }
}
async function createRailwayConfig(config) {
    const railwayConfig = {
        build: {},
        deploy: {}
    };
    if (config.buildCommand) {
        railwayConfig.build.command = config.buildCommand;
    }
    if (config.startCommand) {
        railwayConfig.deploy.startCommand = config.startCommand;
    }
    // Add framework-specific configurations
    if (config.framework === 'nextjs') {
        railwayConfig.build.watchPatterns = ['**/*.tsx', '**/*.ts', '**/*.jsx', '**/*.js'];
    }
    else if (config.framework === 'create-react-app') {
        railwayConfig.deploy.staticFilesDirectory = 'build';
    }
    external_fs_.writeFileSync('railway.json', JSON.stringify(railwayConfig, null, 2));
    console.log(source/* default */.Ay.green('📄 Created railway.json'));
}
async function createProcfile(config) {
    if (config.framework === 'express' || config.framework === 'fastify' || config.framework === 'nestjs') {
        const procfileContent = `web: ${config.startCommand}`;
        external_fs_.writeFileSync('Procfile', procfileContent);
        console.log(source/* default */.Ay.green('📄 Created Procfile'));
    }
}
function shouldCreateDockerfile(framework) {
    return ['express', 'fastify', 'nestjs', 'nextjs'].includes(framework);
}
function railway_generateDockerfile(config) {
    const baseDockerfile = `FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .
`;
    const startCmd = config.startCommand || 'npm start';
    if (config.buildCommand) {
        return baseDockerfile + `
RUN ${config.buildCommand}

EXPOSE 3000

CMD ${JSON.stringify(startCmd.split(' '))}
`;
    }
    else {
        return baseDockerfile + `
EXPOSE 3000

CMD ${JSON.stringify(startCmd.split(' '))}
`;
    }
}
async function setEnvironmentVariables(config) {
    // Set NODE_ENV based on environment
    const nodeEnv = config.environment === 'production' ? 'production' : 'development';
    try {
        (0,external_child_process_.execSync)(`railway variables set NODE_ENV=${nodeEnv}`, { stdio: 'inherit' });
        console.log(source/* default */.Ay.green(`📄 Set NODE_ENV=${nodeEnv}`));
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  Could not set environment variables'));
    }
    // Check for .env file and suggest adding variables
    if (external_fs_.existsSync('.env')) {
        console.log(source/* default */.Ay.blue('💡 Found .env file. You may want to add these variables to Railway:'));
        const envContent = external_fs_.readFileSync('.env', 'utf8');
        const envVars = envContent
            .split('\n')
            .filter(line => line.includes('=') && !line.startsWith('#'))
            .map(line => line.split('=')[0]);
        if (envVars.length > 0) {
            console.log(source/* default */.Ay.gray('Use: railway variables set KEY=value'));
            envVars.forEach(key => {
                console.log(source/* default */.Ay.gray(`  railway variables set ${key}=<value>`));
            });
        }
    }
}

;// ./dist/deploy/netlify/netlify.js





async function deployToNetlify() {
    console.log(source/* default */.Ay.blue('🟢 Starting Netlify deployment...'));
    // Check if Netlify CLI is installed
    if (!isNetlifyInstalled()) {
        console.log(source/* default */.Ay.red('❌ Netlify CLI is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://docs.netlify.com/cli/get-started/'));
        console.log(source/* default */.Ay.gray('Installation command:'));
        console.log(source/* default */.Ay.gray('  npm install -g netlify-cli'));
        return;
    }
    // Check authentication
    if (!isNetlifyAuthenticated()) {
        console.log(source/* default */.Ay.yellow('🔐 You need to authenticate with Netlify first.'));
        console.log(source/* default */.Ay.blue('Running: netlify login'));
        try {
            (0,external_child_process_.execSync)('netlify login', { stdio: 'inherit' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Authentication failed.'));
            return;
        }
    }
    const config = await getNetlifyConfig();
    try {
        await netlify_deployProject(config);
        console.log(source/* default */.Ay.green('✅ Successfully deployed to Netlify!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Deployment failed:'), error);
    }
}
function isNetlifyInstalled() {
    try {
        (0,external_child_process_.execSync)('netlify --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isNetlifyAuthenticated() {
    try {
        const result = (0,external_child_process_.execSync)('netlify status', { encoding: 'utf8', stdio: 'pipe' });
        return !result.includes('Not logged in');
    }
    catch {
        return false;
    }
}
async function getNetlifyConfig() {
    console.log(source/* default */.Ay.blue('🔧 Configuring Netlify deployment...'));
    const framework = netlify_detectFramework();
    const defaultConfig = getDefaultConfig(framework);
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'siteName',
            message: 'Enter site name:',
            default: external_path_.basename(process.cwd()),
            validate: (input) => input.trim().length > 0 || 'Site name is required'
        },
        {
            type: 'list',
            name: 'environment',
            message: 'Select deployment type:',
            choices: [
                { name: 'Production - Deploy to main site', value: 'production' },
                { name: 'Preview - Deploy preview from branch', value: 'preview' },
                { name: 'Branch Deploy - Deploy specific branch', value: 'branch-deploy' }
            ]
        },
        {
            type: 'input',
            name: 'buildCommand',
            message: 'Enter build command (optional):',
            default: defaultConfig.buildCommand,
            when: () => defaultConfig.buildCommand !== undefined
        },
        {
            type: 'input',
            name: 'buildDirectory',
            message: 'Enter build/publish directory:',
            default: defaultConfig.buildDirectory,
            validate: (input) => input.trim().length > 0 || 'Build directory is required'
        },
        {
            type: 'input',
            name: 'domain',
            message: 'Enter custom domain (optional):',
            validate: (input) => {
                if (input && !input.includes('.')) {
                    return 'Please enter a valid domain';
                }
                return true;
            }
        }
    ]);
    return { ...answers, framework };
}
function netlify_detectFramework() {
    if (!external_fs_.existsSync('package.json'))
        return 'generic';
    const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
    const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
    if (deps.next)
        return 'nextjs';
    if (deps.react && deps['react-scripts'])
        return 'create-react-app';
    if (deps.react && deps.vite)
        return 'vite-react';
    if (deps.vue && deps.vite)
        return 'vite-vue';
    if (deps.vue && deps['@vue/cli-service'])
        return 'vue-cli';
    if (deps.svelte)
        return 'svelte';
    if (deps.gatsby)
        return 'gatsby';
    if (deps.nuxt)
        return 'nuxtjs';
    if (deps.gridsome)
        return 'gridsome';
    if (deps.eleventy)
        return '11ty';
    if (deps.hugo)
        return 'hugo';
    if (deps.jekyll)
        return 'jekyll';
    return 'static';
}
function getDefaultConfig(framework) {
    switch (framework) {
        case 'nextjs':
            return { buildCommand: 'npm run build && npm run export', buildDirectory: 'out' };
        case 'create-react-app':
            return { buildCommand: 'npm run build', buildDirectory: 'build' };
        case 'vite-react':
        case 'vite-vue':
            return { buildCommand: 'npm run build', buildDirectory: 'dist' };
        case 'vue-cli':
            return { buildCommand: 'npm run build', buildDirectory: 'dist' };
        case 'gatsby':
            return { buildCommand: 'npm run build', buildDirectory: 'public' };
        case 'nuxtjs':
            return { buildCommand: 'npm run generate', buildDirectory: 'dist' };
        case 'svelte':
            return { buildCommand: 'npm run build', buildDirectory: 'public' };
        case 'gridsome':
            return { buildCommand: 'npm run build', buildDirectory: 'dist' };
        case '11ty':
            return { buildCommand: 'npm run build', buildDirectory: '_site' };
        case 'hugo':
            return { buildCommand: 'hugo', buildDirectory: 'public' };
        case 'jekyll':
            return { buildCommand: 'bundle exec jekyll build', buildDirectory: '_site' };
        default:
            return { buildDirectory: 'dist' };
    }
}
async function netlify_deployProject(config) {
    console.log(source/* default */.Ay.blue(`📦 Deploying ${config.siteName} to Netlify...`));
    // Create netlify.toml if it doesn't exist
    if (!external_fs_.existsSync('netlify.toml')) {
        const netlifyConfig = generateNetlifyConfig(config);
        external_fs_.writeFileSync('netlify.toml', netlifyConfig);
        console.log(source/* default */.Ay.green('📄 Created netlify.toml'));
    }
    // Create _redirects file for SPA routing
    await createRedirectsFile(config);
    // Create _headers file for security headers
    await createHeadersFile(config);
    // Build the project if build command is specified
    if (config.buildCommand) {
        console.log(source/* default */.Ay.blue('🔨 Building project...'));
        (0,external_child_process_.execSync)(config.buildCommand, { stdio: 'inherit' });
    }
    // Initialize Netlify site if not exists
    if (!external_fs_.existsSync('.netlify')) {
        console.log(source/* default */.Ay.blue('🔧 Initializing Netlify site...'));
        (0,external_child_process_.execSync)(`netlify init --manual`, { stdio: 'inherit' });
    }
    // Deploy based on environment
    let deployCommand = '';
    if (config.environment === 'production') {
        deployCommand = `netlify deploy --prod --dir=${config.buildDirectory}`;
    }
    else {
        deployCommand = `netlify deploy --dir=${config.buildDirectory}`;
    }
    console.log(source/* default */.Ay.blue('🚀 Deploying to Netlify...'));
    (0,external_child_process_.execSync)(deployCommand, { stdio: 'inherit' });
    // Set custom domain if specified
    if (config.domain) {
        try {
            (0,external_child_process_.execSync)(`netlify sites:update --domain=${config.domain}`, { stdio: 'inherit' });
            console.log(source/* default */.Ay.green(`🌐 Custom domain set: ${config.domain}`));
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('⚠️  Could not set custom domain. You may need to configure it manually.'));
        }
    }
    // Get site URL
    try {
        const result = (0,external_child_process_.execSync)('netlify status', { encoding: 'utf8' });
        const urlMatch = result.match(/Website URL:\s+(https:\/\/[^\s]+)/);
        if (urlMatch) {
            console.log(source/* default */.Ay.green(`🌐 Site URL: ${urlMatch[1]}`));
        }
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  Could not retrieve site URL'));
    }
}
function generateNetlifyConfig(config) {
    let netlifyConfig = `[build]
  publish = "${config.buildDirectory}"`;
    if (config.buildCommand) {
        netlifyConfig += `
  command = "${config.buildCommand}"`;
    }
    // Add framework-specific configurations
    if (config.framework === 'nextjs') {
        netlifyConfig += `

[build.environment]
  NODE_VERSION = "18"
  NPM_FLAGS = "--prefix=/opt/buildhome/repo && npm run build && npm run export"

[[plugins]]
  package = "@netlify/plugin-nextjs"`;
    }
    else if (config.framework === 'gatsby') {
        netlifyConfig += `

[build.environment]
  NODE_VERSION = "18"
  GATSBY_TELEMETRY_DISABLED = "1"

[[plugins]]
  package = "netlify-plugin-gatsby-cache"`;
    }
    else if (config.framework === 'nuxtjs') {
        netlifyConfig += `

[build.environment]
  NODE_VERSION = "18"

[[plugins]]
  package = "@nuxtjs/netlify-files"`;
    }
    // Add redirects for SPA
    if (['create-react-app', 'vite-react', 'vue-cli', 'vite-vue'].includes(config.framework)) {
        netlifyConfig += `

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200`;
    }
    // Add security headers
    netlifyConfig += `

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "same-origin"`;
    return netlifyConfig;
}
async function createRedirectsFile(config) {
    // Create _redirects file for SPA routing
    if (['create-react-app', 'vite-react', 'vue-cli', 'vite-vue'].includes(config.framework)) {
        if (!external_fs_.existsSync('public')) {
            external_fs_.mkdirSync('public', { recursive: true });
        }
        const redirectsContent = `/*    /index.html   200`;
        external_fs_.writeFileSync('public/_redirects', redirectsContent);
        console.log(source/* default */.Ay.green('📄 Created _redirects file for SPA routing'));
    }
}
async function createHeadersFile(config) {
    // Create _headers file for security
    if (!external_fs_.existsSync('public')) {
        external_fs_.mkdirSync('public', { recursive: true });
    }
    const headersContent = `/*
  X-Frame-Options: DENY
  X-XSS-Protection: 1; mode=block
  X-Content-Type-Options: nosniff
  Referrer-Policy: same-origin

/static/*
  Cache-Control: public, max-age=31536000, immutable

/*.js
  Cache-Control: public, max-age=31536000, immutable

/*.css
  Cache-Control: public, max-age=31536000, immutable`;
    external_fs_.writeFileSync('public/_headers', headersContent);
    console.log(source/* default */.Ay.green('📄 Created _headers file for security and caching'));
}

;// ./dist/deploy/heroku/heroku.js




async function deployToHeroku() {
    console.log(source/* default */.Ay.blue('⚡ Starting Heroku deployment...'));
    // Check if Heroku CLI is installed
    if (!isHerokuInstalled()) {
        console.log(source/* default */.Ay.red('❌ Heroku CLI is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://devcenter.heroku.com/articles/heroku-cli'));
        console.log(source/* default */.Ay.gray('Installation commands:'));
        console.log(source/* default */.Ay.gray('  # macOS'));
        console.log(source/* default */.Ay.gray('  brew tap heroku/brew && brew install heroku'));
        console.log(source/* default */.Ay.gray('  # Ubuntu/Debian'));
        console.log(source/* default */.Ay.gray('  curl https://cli-assets.heroku.com/install-ubuntu.sh | sh'));
        console.log(source/* default */.Ay.gray('  # Windows'));
        console.log(source/* default */.Ay.gray('  Download from: https://cli-assets.heroku.com/heroku-x64.exe'));
        return;
    }
    // Check authentication
    if (!isHerokuAuthenticated()) {
        console.log(source/* default */.Ay.yellow('🔐 You need to authenticate with Heroku first.'));
        console.log(source/* default */.Ay.blue('Running: heroku login'));
        try {
            (0,external_child_process_.execSync)('heroku login', { stdio: 'inherit' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Authentication failed.'));
            return;
        }
    }
    const config = await getHerokuConfig();
    try {
        await heroku_deployProject(config);
        console.log(source/* default */.Ay.green('✅ Successfully deployed to Heroku!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Deployment failed:'), error);
    }
}
function isHerokuInstalled() {
    try {
        (0,external_child_process_.execSync)('heroku --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isHerokuAuthenticated() {
    try {
        (0,external_child_process_.execSync)('heroku auth:whoami', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
async function getHerokuConfig() {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'appName',
            message: 'Enter Heroku app name (or leave blank for auto-generated):',
            validate: (input) => {
                if (!input.trim())
                    return true; // Allow empty for auto-generation
                if (!/^[a-z][a-z0-9-]{1,28}[a-z0-9]$/.test(input)) {
                    return 'App name must be lowercase, start with a letter, and contain only letters, numbers, and dashes';
                }
                return true;
            }
        },
        {
            type: 'list',
            name: 'stack',
            message: 'Select Heroku stack:',
            choices: [
                { name: 'heroku-22 (Ubuntu 22.04)', value: 'heroku-22' },
                { name: 'heroku-20 (Ubuntu 20.04)', value: 'heroku-20' },
                { name: 'container (Docker)', value: 'container' }
            ],
            default: 'heroku-22'
        },
        {
            type: 'list',
            name: 'region',
            message: 'Select region:',
            choices: [
                { name: 'United States', value: 'us' },
                { name: 'Europe', value: 'eu' }
            ],
            default: 'us'
        },
        {
            type: 'list',
            name: 'buildpack',
            message: 'Select buildpack (optional):',
            choices: [
                { name: 'Auto-detect', value: '' },
                { name: 'Node.js', value: 'heroku/nodejs' },
                { name: 'Python', value: 'heroku/python' },
                { name: 'Ruby', value: 'heroku/ruby' },
                { name: 'Java', value: 'heroku/java' },
                { name: 'Go', value: 'heroku/go' },
                { name: 'PHP', value: 'heroku/php' },
                { name: 'Scala', value: 'heroku/scala' }
            ]
        },
        {
            type: 'checkbox',
            name: 'addons',
            message: 'Select add-ons to provision:',
            choices: [
                { name: 'Heroku Postgres (Free)', value: 'heroku-postgresql:mini' },
                { name: 'Heroku Redis (Free)', value: 'heroku-redis:mini' },
                { name: 'Papertrail (Logging)', value: 'papertrail:choklad' },
                { name: 'New Relic (Monitoring)', value: 'newrelic:wayne' },
                { name: 'SendGrid (Email)', value: 'sendgrid:starter' }
            ]
        }
    ]);
    return answers;
}
async function heroku_deployProject(config) {
    console.log(source/* default */.Ay.blue('📦 Deploying to Heroku...'));
    // Initialize git if not already done
    if (!external_fs_.existsSync('.git')) {
        console.log(source/* default */.Ay.blue('🔧 Initializing git repository...'));
        (0,external_child_process_.execSync)('git init', { stdio: 'inherit' });
        (0,external_child_process_.execSync)('git add .', { stdio: 'inherit' });
        (0,external_child_process_.execSync)('git commit -m "Initial commit"', { stdio: 'inherit' });
    }
    // Create Heroku app
    let createCommand = `heroku create`;
    if (config.appName) {
        createCommand += ` ${config.appName}`;
    }
    createCommand += ` --stack ${config.stack} --region ${config.region}`;
    try {
        console.log(source/* default */.Ay.blue('🚀 Creating Heroku app...'));
        (0,external_child_process_.execSync)(createCommand, { stdio: 'inherit' });
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  App might already exist, continuing...'));
    }
    // Set buildpack if specified
    if (config.buildpack) {
        console.log(source/* default */.Ay.blue('🔧 Setting buildpack...'));
        (0,external_child_process_.execSync)(`heroku buildpacks:set ${config.buildpack}`, { stdio: 'inherit' });
    }
    // Create necessary configuration files
    await createConfigurationFiles(config);
    // Add add-ons
    if (config.addons.length > 0) {
        console.log(source/* default */.Ay.blue('🔌 Adding Heroku add-ons...'));
        for (const addon of config.addons) {
            try {
                (0,external_child_process_.execSync)(`heroku addons:create ${addon}`, { stdio: 'inherit' });
            }
            catch (error) {
                console.log(source/* default */.Ay.yellow(`⚠️  Could not add ${addon}, continuing...`));
            }
        }
    }
    // Deploy to Heroku
    console.log(source/* default */.Ay.blue('🚀 Deploying to Heroku...'));
    (0,external_child_process_.execSync)('git add .', { stdio: 'inherit' });
    try {
        (0,external_child_process_.execSync)('git commit -m "Deploy to Heroku"', { stdio: 'inherit' });
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  No changes to commit, continuing...'));
    }
    (0,external_child_process_.execSync)('git push heroku main', { stdio: 'inherit' });
    // Open app
    console.log(source/* default */.Ay.green('🌐 Opening app in browser...'));
    (0,external_child_process_.execSync)('heroku open', { stdio: 'inherit' });
}
async function createConfigurationFiles(config) {
    const framework = heroku_detectFramework();
    // Create Procfile
    if (!external_fs_.existsSync('Procfile')) {
        const procfile = generateProcfile(framework);
        external_fs_.writeFileSync('Procfile', procfile);
        console.log(source/* default */.Ay.green('📄 Created Procfile'));
    }
    // Create app.json for Heroku Button and Review Apps
    if (!external_fs_.existsSync('app.json')) {
        const appJson = generateAppJson(config, framework);
        external_fs_.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
        console.log(source/* default */.Ay.green('📄 Created app.json'));
    }
    // Create runtime.txt for Python
    if (framework === 'python' && !external_fs_.existsSync('runtime.txt')) {
        external_fs_.writeFileSync('runtime.txt', 'python-3.11.0');
        console.log(source/* default */.Ay.green('📄 Created runtime.txt'));
    }
    // Create requirements.txt for Python if it doesn't exist
    if (framework === 'python' && !external_fs_.existsSync('requirements.txt') && !external_fs_.existsSync('Pipfile')) {
        const requirements = `Flask==2.3.3
gunicorn==21.2.0`;
        external_fs_.writeFileSync('requirements.txt', requirements);
        console.log(source/* default */.Ay.green('📄 Created requirements.txt'));
    }
    // Update package.json for Node.js
    if (framework === 'nodejs' && external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        // Ensure engines field exists
        if (!packageJson.engines) {
            packageJson.engines = {
                node: '>=18.0.0',
                npm: '>=8.0.0'
            };
        }
        // Ensure start script exists
        if (!packageJson.scripts) {
            packageJson.scripts = {};
        }
        if (!packageJson.scripts.start) {
            packageJson.scripts.start = 'node server.js';
        }
        external_fs_.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
        console.log(source/* default */.Ay.green('📄 Updated package.json'));
    }
    // Create Dockerfile for container stack
    if (config.stack === 'container' && !external_fs_.existsSync('Dockerfile')) {
        const dockerfile = heroku_generateDockerfile(framework);
        external_fs_.writeFileSync('Dockerfile', dockerfile);
        console.log(source/* default */.Ay.green('📄 Created Dockerfile'));
    }
}
function heroku_detectFramework() {
    if (external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
        if (deps.next)
            return 'nextjs';
        if (deps.react)
            return 'react';
        if (deps.express)
            return 'express';
        if (deps.vue)
            return 'vue';
        if (deps.angular)
            return 'angular';
        return 'nodejs';
    }
    if (external_fs_.existsSync('requirements.txt') || external_fs_.existsSync('Pipfile') || external_fs_.existsSync('setup.py')) {
        return 'python';
    }
    if (external_fs_.existsSync('Gemfile'))
        return 'ruby';
    if (external_fs_.existsSync('pom.xml') || external_fs_.existsSync('build.gradle'))
        return 'java';
    if (external_fs_.existsSync('go.mod'))
        return 'go';
    if (external_fs_.existsSync('composer.json'))
        return 'php';
    return 'generic';
}
function generateProcfile(framework) {
    switch (framework) {
        case 'nextjs':
            return 'web: npm start';
        case 'react':
            return 'web: npx serve -s build -l $PORT';
        case 'express':
        case 'nodejs':
            return 'web: node server.js';
        case 'python':
            return 'web: gunicorn app:app';
        case 'ruby':
            return 'web: bundle exec ruby app.rb -p $PORT';
        case 'go':
            return 'web: ./main';
        case 'php':
            return 'web: vendor/bin/heroku-php-apache2 public/';
        default:
            return 'web: npm start';
    }
}
function generateAppJson(config, framework) {
    const appJson = {
        name: config.appName || 'My App',
        description: 'Application deployed via Package Installer CLI',
        repository: 'https://github.com/yourusername/yourapp',
        logo: 'https://cdn.rawgit.com/heroku/node-js-getting-started/main/public/node.svg',
        keywords: ['node', 'express', framework],
        image: `heroku/${framework}`,
        stack: config.stack,
        env: {
            NODE_ENV: {
                description: 'Environment',
                value: 'production'
            }
        },
        formation: {
            web: {
                quantity: 1
            }
        },
        addons: config.addons.map(addon => addon.split(':')[0]),
        buildpacks: []
    };
    if (config.buildpack) {
        appJson.buildpacks.push({ url: config.buildpack });
    }
    return appJson;
}
function heroku_generateDockerfile(framework) {
    switch (framework) {
        case 'nodejs':
        case 'nextjs':
        case 'react':
        case 'express':
            return `FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

${framework === 'nextjs' ? 'RUN npm run build' : ''}
${framework === 'react' ? 'RUN npm run build' : ''}

EXPOSE $PORT

CMD ["npm", "start"]`;
        case 'python':
            return `FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE $PORT

CMD ["gunicorn", "--bind", "0.0.0.0:$PORT", "app:app"]`;
        case 'ruby':
            return `FROM ruby:3.2-slim

WORKDIR /app

COPY Gemfile* ./
RUN bundle install

COPY . .

EXPOSE $PORT

CMD ["ruby", "app.rb", "-p", "$PORT"]`;
        case 'go':
            return `FROM golang:1.21-alpine AS builder

WORKDIR /app
COPY . .
RUN go mod download
RUN go build -o main .

FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/

COPY --from=builder /app/main .

EXPOSE $PORT

CMD ["./main"]`;
        default:
            return `FROM node:18-alpine

WORKDIR /app

COPY . .

EXPOSE $PORT

CMD ["npm", "start"]`;
    }
}

;// ./dist/deploy/cloud-foundry/cloud-foundry.js





async function deployToCloudFoundry() {
    console.log(source/* default */.Ay.blue('☁️ Starting Cloud Foundry deployment...'));
    // Check if Cloud Foundry CLI is installed
    if (!isCfInstalled()) {
        console.log(source/* default */.Ay.red('❌ Cloud Foundry CLI is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://docs.cloudfoundry.org/cf-cli/install-go-cli.html'));
        console.log(source/* default */.Ay.gray('Installation commands:'));
        console.log(source/* default */.Ay.gray('  # macOS'));
        console.log(source/* default */.Ay.gray('  brew install cloudfoundry/tap/cf-cli@8'));
        console.log(source/* default */.Ay.gray('  # Linux'));
        console.log(source/* default */.Ay.gray('  wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -'));
        console.log(source/* default */.Ay.gray('  echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list'));
        console.log(source/* default */.Ay.gray('  sudo apt-get update && sudo apt-get install cf8-cli'));
        console.log(source/* default */.Ay.gray('  # Windows'));
        console.log(source/* default */.Ay.gray('  Download from: https://github.com/cloudfoundry/cli/releases'));
        return;
    }
    // Check authentication
    if (!isCfAuthenticated()) {
        console.log(source/* default */.Ay.yellow('🔐 You need to authenticate with Cloud Foundry first.'));
        const config = await getCloudFoundryConfig();
        try {
            console.log(source/* default */.Ay.blue(`Logging in to ${config.apiEndpoint}...`));
            (0,external_child_process_.execSync)(`cf login -a ${config.apiEndpoint}`, { stdio: 'inherit' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Authentication failed.'));
            return;
        }
    }
    else {
        const config = await getCloudFoundryConfig();
    }
    const config = await getCloudFoundryConfig();
    try {
        await cloud_foundry_deployProject(config);
        console.log(source/* default */.Ay.green('✅ Successfully deployed to Cloud Foundry!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Deployment failed:'), error);
    }
}
function isCfInstalled() {
    try {
        (0,external_child_process_.execSync)('cf --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isCfAuthenticated() {
    try {
        const result = (0,external_child_process_.execSync)('cf target', { encoding: 'utf8', stdio: 'pipe' });
        return !result.includes('Not logged in');
    }
    catch {
        return false;
    }
}
async function getCloudFoundryConfig() {
    const answers = await lib["default"].prompt([
        {
            type: 'list',
            name: 'apiEndpoint',
            message: 'Select Cloud Foundry API endpoint:',
            choices: [
                { name: 'Pivotal Web Services', value: 'https://api.run.pivotal.io' },
                { name: 'IBM Cloud', value: 'https://api.ng.bluemix.net' },
                { name: 'SAP Cloud Platform', value: 'https://api.cf.sap.hana.ondemand.com' },
                { name: 'Custom', value: 'custom' }
            ]
        },
        {
            type: 'input',
            name: 'apiEndpoint',
            message: 'Enter custom API endpoint:',
            when: (answers) => answers.apiEndpoint === 'custom',
            validate: (input) => {
                if (!input.trim())
                    return 'API endpoint is required';
                if (!input.startsWith('https://'))
                    return 'API endpoint must start with https://';
                return true;
            }
        },
        {
            type: 'input',
            name: 'org',
            message: 'Enter Cloud Foundry organization:',
            validate: (input) => input.trim().length > 0 || 'Organization is required'
        },
        {
            type: 'input',
            name: 'space',
            message: 'Enter Cloud Foundry space:',
            default: 'development',
            validate: (input) => input.trim().length > 0 || 'Space is required'
        },
        {
            type: 'input',
            name: 'appName',
            message: 'Enter application name:',
            default: external_path_.basename(process.cwd()),
            validate: (input) => {
                if (!input.trim())
                    return 'App name is required';
                if (!/^[a-zA-Z0-9-]+$/.test(input)) {
                    return 'App name can only contain letters, numbers, and hyphens';
                }
                return true;
            }
        },
        {
            type: 'list',
            name: 'buildpack',
            message: 'Select buildpack:',
            choices: [
                { name: 'Auto-detect', value: '' },
                { name: 'Node.js', value: 'nodejs_buildpack' },
                { name: 'Python', value: 'python_buildpack' },
                { name: 'Java', value: 'java_buildpack' },
                { name: 'Ruby', value: 'ruby_buildpack' },
                { name: 'Go', value: 'go_buildpack' },
                { name: 'PHP', value: 'php_buildpack' },
                { name: 'Static', value: 'staticfile_buildpack' },
                { name: '.NET Core', value: 'dotnet_core_buildpack' }
            ]
        },
        {
            type: 'list',
            name: 'memory',
            message: 'Select memory limit:',
            choices: ['128M', '256M', '512M', '1G', '2G'],
            default: '512M'
        },
        {
            type: 'number',
            name: 'instances',
            message: 'Number of instances:',
            default: 1,
            validate: (input) => input > 0 || 'Must be at least 1 instance'
        },
        {
            type: 'checkbox',
            name: 'services',
            message: 'Select services to bind (optional):',
            choices: [
                { name: 'PostgreSQL Database', value: 'postgresql' },
                { name: 'MySQL Database', value: 'mysql' },
                { name: 'Redis Cache', value: 'redis' },
                { name: 'RabbitMQ', value: 'rabbitmq' },
                { name: 'Elasticsearch', value: 'elasticsearch' }
            ]
        }
    ]);
    return answers;
}
async function cloud_foundry_deployProject(config) {
    console.log(source/* default */.Ay.blue('📦 Deploying to Cloud Foundry...'));
    // Target the org and space
    console.log(source/* default */.Ay.blue('🎯 Targeting organization and space...'));
    (0,external_child_process_.execSync)(`cf target -o "${config.org}" -s "${config.space}"`, { stdio: 'inherit' });
    // Create manifest.yml
    await createManifest(config);
    // Create services if specified
    if (config.services.length > 0) {
        await createServices(config);
    }
    // Build the application if needed
    await buildApplication();
    // Push the application
    console.log(source/* default */.Ay.blue('🚀 Pushing application to Cloud Foundry...'));
    (0,external_child_process_.execSync)('cf push', { stdio: 'inherit' });
    // Show app info
    console.log(source/* default */.Ay.green('📊 Application information:'));
    (0,external_child_process_.execSync)(`cf app ${config.appName}`, { stdio: 'inherit' });
}
async function createManifest(config) {
    const manifest = {
        version: 1,
        applications: [
            {
                name: config.appName,
                memory: config.memory,
                instances: config.instances,
                ...(config.buildpack && { buildpack: config.buildpack }),
                ...(config.services.length > 0 && { services: config.services }),
                env: {
                    NODE_ENV: 'production'
                }
            }
        ]
    };
    // Detect framework-specific configurations
    const framework = cloud_foundry_detectFramework();
    const app = manifest.applications[0];
    switch (framework) {
        case 'nodejs':
        case 'nextjs':
        case 'react':
            if (!config.buildpack) {
                app.buildpack = 'nodejs_buildpack';
            }
            break;
        case 'python':
            if (!config.buildpack) {
                app.buildpack = 'python_buildpack';
            }
            break;
        case 'java':
            if (!config.buildpack) {
                app.buildpack = 'java_buildpack';
            }
            break;
    }
    external_fs_.writeFileSync('manifest.yml', `---
${JSON.stringify(manifest, null, 2).replace(/"/g, '').replace(/,/g, '')}`);
    console.log(source/* default */.Ay.green('📄 Created manifest.yml'));
}
async function createServices(config) {
    console.log(source/* default */.Ay.blue('🔌 Creating and binding services...'));
    for (const service of config.services) {
        const serviceName = `${config.appName}-${service}`;
        try {
            let serviceCommand = '';
            switch (service) {
                case 'postgresql':
                    serviceCommand = `cf create-service postgresql shared-psql ${serviceName}`;
                    break;
                case 'mysql':
                    serviceCommand = `cf create-service mysql shared-mysql ${serviceName}`;
                    break;
                case 'redis':
                    serviceCommand = `cf create-service redis shared-vm ${serviceName}`;
                    break;
                case 'rabbitmq':
                    serviceCommand = `cf create-service rabbitmq shared-vm ${serviceName}`;
                    break;
                case 'elasticsearch':
                    serviceCommand = `cf create-service elasticsearch shared-vm ${serviceName}`;
                    break;
            }
            if (serviceCommand) {
                console.log(source/* default */.Ay.blue(`Creating ${service} service...`));
                (0,external_child_process_.execSync)(serviceCommand, { stdio: 'inherit' });
            }
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow(`⚠️  Could not create ${service} service, it might already exist or the service plan might not be available.`));
        }
    }
}
async function buildApplication() {
    const framework = cloud_foundry_detectFramework();
    if (external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        if (packageJson.scripts?.build) {
            console.log(source/* default */.Ay.blue('🔨 Building application...'));
            (0,external_child_process_.execSync)('npm run build', { stdio: 'inherit' });
        }
    }
    // Create Procfile if it doesn't exist
    if (!external_fs_.existsSync('Procfile')) {
        const procfile = cloud_foundry_generateProcfile(framework);
        external_fs_.writeFileSync('Procfile', procfile);
        console.log(source/* default */.Ay.green('📄 Created Procfile'));
    }
}
function cloud_foundry_detectFramework() {
    if (external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
        if (deps.next)
            return 'nextjs';
        if (deps.react)
            return 'react';
        if (deps.express)
            return 'express';
        if (deps.vue)
            return 'vue';
        return 'nodejs';
    }
    if (external_fs_.existsSync('requirements.txt') || external_fs_.existsSync('setup.py'))
        return 'python';
    if (external_fs_.existsSync('pom.xml') || external_fs_.existsSync('build.gradle'))
        return 'java';
    if (external_fs_.existsSync('Gemfile'))
        return 'ruby';
    if (external_fs_.existsSync('go.mod'))
        return 'go';
    if (external_fs_.existsSync('composer.json'))
        return 'php';
    return 'generic';
}
function cloud_foundry_generateProcfile(framework) {
    switch (framework) {
        case 'nextjs':
            return 'web: npm start';
        case 'react':
            return 'web: npx serve -s build';
        case 'express':
        case 'nodejs':
            return 'web: node server.js';
        case 'python':
            return 'web: python app.py';
        case 'java':
            return 'web: java -jar target/*.jar';
        case 'ruby':
            return 'web: bundle exec ruby app.rb';
        case 'go':
            return 'web: ./main';
        case 'php':
            return 'web: php -S 0.0.0.0:$PORT -t public/';
        default:
            return 'web: npm start';
    }
}

;// ./dist/deploy/fly-io/fly-io.js





async function deployToFly() {
    console.log(source/* default */.Ay.blue('🪂 Starting Fly.io deployment...'));
    // Check if Fly CLI is installed
    if (!isFlyInstalled()) {
        console.log(source/* default */.Ay.red('❌ Fly CLI is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://fly.io/docs/hands-on/install-flyctl/'));
        console.log(source/* default */.Ay.gray('Installation commands:'));
        console.log(source/* default */.Ay.gray('  # macOS/Linux'));
        console.log(source/* default */.Ay.gray('  curl -L https://fly.io/install.sh | sh'));
        console.log(source/* default */.Ay.gray('  # Windows (PowerShell)'));
        console.log(source/* default */.Ay.gray('  powershell -Command "iwr https://fly.io/install.ps1 -useb | iex"'));
        console.log(source/* default */.Ay.gray('  # Homebrew'));
        console.log(source/* default */.Ay.gray('  brew install flyctl'));
        return;
    }
    // Check authentication
    if (!isFlyAuthenticated()) {
        console.log(source/* default */.Ay.yellow('🔐 You need to authenticate with Fly.io first.'));
        console.log(source/* default */.Ay.blue('Running: fly auth login'));
        try {
            (0,external_child_process_.execSync)('fly auth login', { stdio: 'inherit' });
        }
        catch (error) {
            console.log(source/* default */.Ay.red('❌ Authentication failed.'));
            return;
        }
    }
    const config = await getFlyConfig();
    try {
        await fly_io_deployProject(config);
        console.log(source/* default */.Ay.green('✅ Successfully deployed to Fly.io!'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Deployment failed:'), error);
    }
}
function isFlyInstalled() {
    try {
        (0,external_child_process_.execSync)('fly version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isFlyAuthenticated() {
    try {
        (0,external_child_process_.execSync)('fly auth whoami', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
async function getFlyConfig() {
    // Get available regions
    let regions = [
        { name: 'Ashburn, Virginia (US East)', value: 'iad' },
        { name: 'Los Angeles, California (US West)', value: 'lax' },
        { name: 'London, England (Europe)', value: 'lhr' },
        { name: 'Frankfurt, Germany (Europe)', value: 'fra' },
        { name: 'Singapore (Asia Pacific)', value: 'sin' },
        { name: 'Sydney, Australia (Asia Pacific)', value: 'syd' }
    ];
    try {
        const regionsOutput = (0,external_child_process_.execSync)('fly platform regions', { encoding: 'utf8', stdio: 'pipe' });
        // Parse regions from CLI output if available
    }
    catch (error) {
        // Use default regions if CLI call fails
    }
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'appName',
            message: 'Enter Fly.io app name:',
            default: external_path_.basename(process.cwd()).toLowerCase().replace(/[^a-z0-9-]/g, '-'),
            validate: (input) => {
                if (!input.trim())
                    return 'App name is required';
                if (!/^[a-z0-9-]+$/.test(input)) {
                    return 'App name must be lowercase and contain only letters, numbers, and hyphens';
                }
                if (input.length > 30)
                    return 'App name must be 30 characters or less';
                return true;
            }
        },
        {
            type: 'list',
            name: 'region',
            message: 'Select primary region:',
            choices: regions,
            default: 'iad'
        },
        {
            type: 'list',
            name: 'vmSize',
            message: 'Select VM size:',
            choices: [
                { name: 'shared-cpu-1x (256MB RAM) - Free tier', value: 'shared-cpu-1x' },
                { name: 'shared-cpu-2x (512MB RAM)', value: 'shared-cpu-2x' },
                { name: 'shared-cpu-4x (1GB RAM)', value: 'shared-cpu-4x' },
                { name: 'shared-cpu-8x (2GB RAM)', value: 'shared-cpu-8x' },
                { name: 'performance-1x (2GB RAM)', value: 'performance-1x' },
                { name: 'performance-2x (4GB RAM)', value: 'performance-2x' }
            ],
            default: 'shared-cpu-1x'
        },
        {
            type: 'number',
            name: 'minMachines',
            message: 'Minimum number of machines:',
            default: 0,
            validate: (input) => input >= 0 || 'Must be 0 or greater'
        },
        {
            type: 'number',
            name: 'maxMachines',
            message: 'Maximum number of machines:',
            default: 1,
            validate: (input, answers) => {
                if (input < answers.minMachines)
                    return 'Must be greater than or equal to minimum machines';
                return true;
            }
        },
        {
            type: 'confirm',
            name: 'httpService',
            message: 'Enable HTTP service?',
            default: true
        },
        {
            type: 'number',
            name: 'internalPort',
            message: 'Internal port (port your app listens on):',
            default: detectPort(),
            validate: (input) => {
                if (input < 1 || input > 65535)
                    return 'Port must be between 1 and 65535';
                return true;
            }
        }
    ]);
    return answers;
}
function detectPort() {
    if (external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        // Check for common framework ports
        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
        if (deps.next)
            return 3000;
        if (deps.react && !deps.express)
            return 3000;
        if (deps.express)
            return 3000;
        if (deps.fastify)
            return 3000;
        if (deps.koa)
            return 3000;
    }
    if (external_fs_.existsSync('requirements.txt') || external_fs_.existsSync('app.py'))
        return 8000;
    if (external_fs_.existsSync('Gemfile'))
        return 4567;
    if (external_fs_.existsSync('go.mod'))
        return 8080;
    return 8080;
}
async function fly_io_deployProject(config) {
    console.log(source/* default */.Ay.blue('📦 Deploying to Fly.io...'));
    // Launch the app (creates app and fly.toml)
    console.log(source/* default */.Ay.blue('🚀 Launching Fly.io app...'));
    const launchCommand = [
        'fly launch',
        `--name ${config.appName}`,
        `--region ${config.region}`,
        `--vm-size ${config.vmSize}`,
        '--no-deploy', // Don't deploy immediately, we want to configure first
        '--generate-name=false'
    ].join(' ');
    try {
        (0,external_child_process_.execSync)(launchCommand, { stdio: 'inherit' });
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  App might already exist, continuing...'));
    }
    // Create or update fly.toml
    await createFlyConfig(config);
    // Create Dockerfile if it doesn't exist
    if (!external_fs_.existsSync('Dockerfile')) {
        console.log(source/* default */.Ay.blue('🔧 Creating Dockerfile...'));
        const dockerfile = fly_io_generateDockerfile();
        external_fs_.writeFileSync('Dockerfile', dockerfile);
        console.log(source/* default */.Ay.green('📄 Created Dockerfile'));
    }
    // Create .dockerignore if it doesn't exist
    if (!external_fs_.existsSync('.dockerignore')) {
        const dockerignore = generateDockerignore();
        external_fs_.writeFileSync('.dockerignore', dockerignore);
        console.log(source/* default */.Ay.green('📄 Created .dockerignore'));
    }
    // Deploy the app
    console.log(source/* default */.Ay.blue('🚀 Deploying to Fly.io...'));
    (0,external_child_process_.execSync)('fly deploy', { stdio: 'inherit' });
    // Show app status
    console.log(source/* default */.Ay.green('📊 App status:'));
    (0,external_child_process_.execSync)(`fly status -a ${config.appName}`, { stdio: 'inherit' });
    // Open the app
    console.log(source/* default */.Ay.green('🌐 Opening app...'));
    (0,external_child_process_.execSync)(`fly open -a ${config.appName}`, { stdio: 'inherit' });
}
async function createFlyConfig(config) {
    const flyConfig = {
        app: config.appName,
        primary_region: config.region,
        build: {},
        http_service: config.httpService ? {
            internal_port: config.internalPort,
            force_https: true,
            auto_stop_machines: config.minMachines === 0,
            auto_start_machines: true,
            min_machines_running: config.minMachines,
            processes: ['app']
        } : undefined,
        vm: [
            {
                cpu_kind: config.vmSize.includes('performance') ? 'performance' : 'shared',
                cpus: parseInt(config.vmSize.split('-')[2]?.replace('x', '') || '1'),
                memory_mb: getMemoryFromVmSize(config.vmSize)
            }
        ],
        env: {
            NODE_ENV: 'production',
            PORT: config.internalPort.toString()
        }
    };
    // Add framework-specific configurations
    const framework = fly_io_detectFramework();
    if (framework === 'nodejs' || framework === 'nextjs' || framework === 'react') {
        flyConfig.build = {
            builder: 'heroku/buildpacks:20'
        };
    }
    // Convert to TOML format
    const tomlContent = generateTOML(flyConfig);
    external_fs_.writeFileSync('fly.toml', tomlContent);
    console.log(source/* default */.Ay.green('📄 Created/updated fly.toml'));
}
function getMemoryFromVmSize(vmSize) {
    const sizeMap = {
        'shared-cpu-1x': 256,
        'shared-cpu-2x': 512,
        'shared-cpu-4x': 1024,
        'shared-cpu-8x': 2048,
        'performance-1x': 2048,
        'performance-2x': 4096,
        'performance-4x': 8192,
        'performance-8x': 16384
    };
    return sizeMap[vmSize] || 256;
}
function fly_io_detectFramework() {
    if (external_fs_.existsSync('package.json')) {
        const packageJson = JSON.parse(external_fs_.readFileSync('package.json', 'utf8'));
        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
        if (deps.next)
            return 'nextjs';
        if (deps.react)
            return 'react';
        if (deps.express)
            return 'express';
        if (deps.fastify)
            return 'fastify';
        return 'nodejs';
    }
    if (external_fs_.existsSync('requirements.txt') || external_fs_.existsSync('app.py'))
        return 'python';
    if (external_fs_.existsSync('Gemfile'))
        return 'ruby';
    if (external_fs_.existsSync('go.mod'))
        return 'go';
    if (external_fs_.existsSync('Cargo.toml'))
        return 'rust';
    return 'generic';
}
function fly_io_generateDockerfile() {
    const framework = fly_io_detectFramework();
    switch (framework) {
        case 'nodejs':
        case 'express':
        case 'fastify':
            return `FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

EXPOSE 8080

CMD ["npm", "start"]`;
        case 'nextjs':
            return `FROM node:18-alpine AS deps
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM node:18-alpine AS runner
WORKDIR /app
ENV NODE_ENV production

COPY --from=deps /app/node_modules ./node_modules
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json

EXPOSE 3000
CMD ["npm", "start"]`;
        case 'react':
            return `FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]`;
        case 'python':
            return `FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["python", "app.py"]`;
        case 'go':
            return `FROM golang:1.21-alpine AS builder

WORKDIR /app
COPY go.* ./
RUN go mod download

COPY . .
RUN go build -o main .

FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/

COPY --from=builder /app/main .

EXPOSE 8080

CMD ["./main"]`;
        case 'ruby':
            return `FROM ruby:3.2-alpine

WORKDIR /app

COPY Gemfile* ./
RUN bundle install

COPY . .

EXPOSE 4567

CMD ["ruby", "app.rb"]`;
        default:
            return `FROM node:18-alpine

WORKDIR /app

COPY . .

EXPOSE 8080

CMD ["npm", "start"]`;
    }
}
function generateDockerignore() {
    return `node_modules
npm-debug.log
Dockerfile
.dockerignore
.git
.gitignore
README.md
.env
.nyc_output
coverage
.nyc_output
.coverage
.vscode
.idea
*.log
.DS_Store
dist
build
.next
*.tgz
*.tar.gz`;
}
function generateTOML(config) {
    let toml = '';
    for (const [key, value] of Object.entries(config)) {
        if (value === undefined)
            continue;
        if (typeof value === 'string') {
            toml += `${key} = "${value}"\n`;
        }
        else if (typeof value === 'number' || typeof value === 'boolean') {
            toml += `${key} = ${value}\n`;
        }
        else if (Array.isArray(value)) {
            toml += `\n[[${key}]]\n`;
            for (const item of value) {
                if (typeof item === 'object') {
                    for (const [subKey, subValue] of Object.entries(item)) {
                        if (typeof subValue === 'string') {
                            toml += `${subKey} = "${subValue}"\n`;
                        }
                        else {
                            toml += `${subKey} = ${subValue}\n`;
                        }
                    }
                }
            }
        }
        else if (typeof value === 'object' && value !== null) {
            toml += `\n[${key}]\n`;
            for (const [subKey, subValue] of Object.entries(value)) {
                if (Array.isArray(subValue)) {
                    toml += `${subKey} = [${subValue.map(v => `"${v}"`).join(', ')}]\n`;
                }
                else if (typeof subValue === 'string') {
                    toml += `${subKey} = "${subValue}"\n`;
                }
                else {
                    toml += `${subKey} = ${subValue}\n`;
                }
            }
        }
    }
    return toml;
}

;// ./dist/deploy/goreleaser/goreleaser.js





async function deployToGoReleaser() {
    console.log(source/* default */.Ay.blue('🚀 Starting GoReleaser deployment...'));
    // Check if this is a Go project
    if (!external_fs_.existsSync('go.mod')) {
        console.log(source/* default */.Ay.red('❌ This doesn\'t appear to be a Go project.'));
        console.log(source/* default */.Ay.yellow('GoReleaser is designed for Go projects. Please ensure you have a go.mod file.'));
        return;
    }
    // Check if GoReleaser is installed
    if (!isGoReleaserInstalled()) {
        console.log(source/* default */.Ay.red('❌ GoReleaser is not installed.'));
        console.log(source/* default */.Ay.yellow('📥 Please install it from: https://goreleaser.com/install/'));
        console.log(source/* default */.Ay.gray('Installation commands:'));
        console.log(source/* default */.Ay.gray('  # macOS'));
        console.log(source/* default */.Ay.gray('  brew install goreleaser'));
        console.log(source/* default */.Ay.gray('  # Linux'));
        console.log(source/* default */.Ay.gray('  curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh'));
        console.log(source/* default */.Ay.gray('  # Go install'));
        console.log(source/* default */.Ay.gray('  go install github.com/goreleaser/goreleaser@latest'));
        return;
    }
    // Check if Git is initialized and has remotes
    if (!isGitInitialized()) {
        console.log(source/* default */.Ay.red('❌ Git repository is not initialized or has no remotes.'));
        console.log(source/* default */.Ay.yellow('GoReleaser requires a Git repository with remotes configured.'));
        return;
    }
    const config = await getGoReleaserConfig();
    try {
        await setupGoReleaser(config);
        console.log(source/* default */.Ay.green('✅ GoReleaser configuration completed!'));
        console.log(source/* default */.Ay.blue('📖 Next steps:'));
        console.log(source/* default */.Ay.gray('1. Create a Git tag: git tag -a v1.0.0 -m "First release"'));
        console.log(source/* default */.Ay.gray('2. Push the tag: git push origin v1.0.0'));
        console.log(source/* default */.Ay.gray('3. Run GoReleaser: goreleaser release --rm-dist'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Setup failed:'), error);
    }
}
function isGoReleaserInstalled() {
    try {
        (0,external_child_process_.execSync)('goreleaser --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
function isGitInitialized() {
    try {
        if (!external_fs_.existsSync('.git'))
            return false;
        const remotes = (0,external_child_process_.execSync)('git remote -v', { encoding: 'utf8', stdio: 'pipe' });
        return remotes.trim().length > 0;
    }
    catch {
        return false;
    }
}
async function getGoReleaserConfig() {
    // Get project info from go.mod
    const goMod = external_fs_.readFileSync('go.mod', 'utf8');
    const moduleMatch = goMod.match(/module\s+(.+)/);
    const defaultProjectName = moduleMatch ? external_path_.basename(moduleMatch[1]) : external_path_.basename(process.cwd());
    // Detect Git hosting service
    let defaultReleaseType = 'github';
    try {
        const remoteUrl = (0,external_child_process_.execSync)('git remote get-url origin', { encoding: 'utf8' }).trim();
        if (remoteUrl.includes('gitlab'))
            defaultReleaseType = 'gitlab';
        if (remoteUrl.includes('gitea'))
            defaultReleaseType = 'gitea';
    }
    catch {
        // Default to GitHub
    }
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'projectName',
            message: 'Enter project name:',
            default: defaultProjectName,
            validate: (input) => input.trim().length > 0 || 'Project name is required'
        },
        {
            type: 'input',
            name: 'version',
            message: 'Enter initial version:',
            default: 'v1.0.0',
            validate: (input) => {
                if (!input.trim())
                    return 'Version is required';
                if (!/^v?\d+\.\d+\.\d+/.test(input))
                    return 'Version should be in format v1.0.0';
                return true;
            }
        },
        {
            type: 'list',
            name: 'releaseType',
            message: 'Select Git hosting service:',
            choices: [
                { name: 'GitHub', value: 'github' },
                { name: 'GitLab', value: 'gitlab' },
                { name: 'Gitea', value: 'gitea' }
            ],
            default: defaultReleaseType
        },
        {
            type: 'checkbox',
            name: 'platforms',
            message: 'Select target platforms:',
            choices: [
                { name: 'Linux AMD64', value: 'linux_amd64', checked: true },
                { name: 'Linux ARM64', value: 'linux_arm64', checked: true },
                { name: 'Linux ARM', value: 'linux_arm' },
                { name: 'macOS AMD64', value: 'darwin_amd64', checked: true },
                { name: 'macOS ARM64 (Apple Silicon)', value: 'darwin_arm64', checked: true },
                { name: 'Windows AMD64', value: 'windows_amd64', checked: true },
                { name: 'Windows ARM64', value: 'windows_arm64' },
                { name: 'FreeBSD AMD64', value: 'freebsd_amd64' },
                { name: 'OpenBSD AMD64', value: 'openbsd_amd64' }
            ],
            validate: (input) => input.length > 0 || 'Select at least one platform'
        },
        {
            type: 'confirm',
            name: 'archives',
            message: 'Create archives (tar.gz, zip)?',
            default: true
        },
        {
            type: 'input',
            name: 'dockerImages',
            message: 'Enter Docker images to build (comma-separated, optional):',
            default: '',
            filter: (input) => input.trim() ? input.split(',').map(s => s.trim()) : []
        },
        {
            type: 'confirm',
            name: 'snapcraft',
            message: 'Enable Snapcraft publishing?',
            default: false
        },
        {
            type: 'confirm',
            name: 'homebrew',
            message: 'Enable Homebrew tap?',
            default: false
        }
    ]);
    return answers;
}
async function setupGoReleaser(config) {
    console.log(source/* default */.Ay.blue('⚙️ Setting up GoReleaser configuration...'));
    // Create .goreleaser.yaml
    const goreleaserConfig = generateGoReleaserConfig(config);
    external_fs_.writeFileSync('.goreleaser.yaml', goreleaserConfig);
    console.log(source/* default */.Ay.green('📄 Created .goreleaser.yaml'));
    // Create GitHub Actions workflow if using GitHub
    if (config.releaseType === 'github') {
        await createGitHubWorkflow(config);
    }
    // Create GitLab CI if using GitLab
    if (config.releaseType === 'gitlab') {
        await createGitLabCI(config);
    }
    // Initialize git tag if none exists
    try {
        (0,external_child_process_.execSync)('git describe --tags', { stdio: 'ignore' });
    }
    catch {
        console.log(source/* default */.Ay.blue('🏷️  Creating initial git tag...'));
        const version = config.version.startsWith('v') ? config.version : `v${config.version}`;
        (0,external_child_process_.execSync)(`git tag -a ${version} -m "Initial release"`, { stdio: 'inherit' });
        console.log(source/* default */.Ay.green(`📄 Created git tag ${version}`));
    }
    // Test GoReleaser configuration
    console.log(source/* default */.Ay.blue('🧪 Testing GoReleaser configuration...'));
    try {
        (0,external_child_process_.execSync)('goreleaser check', { stdio: 'inherit' });
        console.log(source/* default */.Ay.green('✅ GoReleaser configuration is valid'));
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  Configuration test completed with warnings'));
    }
    // Create example main.go if it doesn't exist
    if (!external_fs_.existsSync('main.go')) {
        const exampleMain = generateExampleMain(config.projectName);
        external_fs_.writeFileSync('main.go', exampleMain);
        console.log(source/* default */.Ay.green('📄 Created example main.go'));
    }
}
function generateGoReleaserConfig(config) {
    const builds = [{
            env: ['CGO_ENABLED=0'],
            goos: [],
            goarch: [],
            binary: config.projectName
        }];
    // Parse platforms
    for (const platform of config.platforms) {
        const [os, arch] = platform.split('_');
        if (!builds[0].goos.includes(os))
            builds[0].goos.push(os);
        if (!builds[0].goarch.includes(arch))
            builds[0].goarch.push(arch);
    }
    const goreleaserConfig = {
        before: {
            hooks: ['go mod tidy', 'go generate ./...']
        },
        builds,
        archives: config.archives ? [{
                name_template: `${config.projectName}_{{ .Version }}_{{ .Os }}_{{ .Arch }}`,
                replacements: {
                    darwin: 'macOS',
                    linux: 'Linux',
                    windows: 'Windows',
                    '386': 'i386',
                    amd64: 'x86_64'
                }
            }] : [],
        checksum: {
            name_template: 'checksums.txt'
        },
        snapshot: {
            name_template: '{{ incpatch .Version }}-next'
        },
        changelog: {
            sort: 'asc',
            filters: {
                exclude: ['^docs:', '^test:']
            }
        }
    };
    // Add Docker configuration
    if (config.dockerImages.length > 0) {
        goreleaserConfig.dockers = config.dockerImages.map((image) => ({
            image_templates: [`${image}:{{ .Tag }}`, `${image}:latest`],
            dockerfile: 'Dockerfile',
            build_flag_templates: [
                '--pull',
                '--label=org.opencontainers.image.created={{.Date}}',
                '--label=org.opencontainers.image.title={{.ProjectName}}',
                '--label=org.opencontainers.image.revision={{.FullCommit}}',
                '--label=org.opencontainers.image.version={{.Version}}'
            ]
        }));
        // Create Dockerfile
        const dockerfile = `FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY ${config.projectName} .
CMD ["./${config.projectName}"]`;
        external_fs_.writeFileSync('Dockerfile', dockerfile);
    }
    // Add Snapcraft configuration
    if (config.snapcraft) {
        goreleaserConfig.snapcrafts = [{
                name_template: config.projectName,
                summary: `${config.projectName} - Built with GoReleaser`,
                description: `${config.projectName} application built and released with GoReleaser`,
                grade: 'stable',
                confinement: 'strict',
                publish: true
            }];
    }
    // Add Homebrew configuration
    if (config.homebrew) {
        const remoteUrl = (0,external_child_process_.execSync)('git remote get-url origin', { encoding: 'utf8' }).trim();
        const repoMatch = remoteUrl.match(/github\.com[:/](.+)\/(.+)\.git/);
        if (repoMatch) {
            goreleaserConfig.brews = [{
                    name: config.projectName,
                    tap: {
                        owner: repoMatch[1],
                        name: 'homebrew-tap'
                    },
                    homepage: `https://github.com/${repoMatch[1]}/${repoMatch[2]}`,
                    description: `${config.projectName} - Built with GoReleaser`,
                    install: `bin.install "${config.projectName}"`
                }];
        }
    }
    return `# This is an example .goreleaser.yaml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com
${Object.entries(goreleaserConfig).map(([key, value]) => {
        if (Array.isArray(value)) {
            return `${key}:\n${value.map(item => `  - ${typeof item === 'object' ? '\n' + Object.entries(item).map(([k, v]) => `    ${k}: ${typeof v === 'object' ? JSON.stringify(v) : v}`).join('\n') : item}`).join('\n')}`;
        }
        else if (typeof value === 'object' && value !== null) {
            return `${key}:\n${Object.entries(value).map(([k, v]) => `  ${k}: ${typeof v === 'object' && v !== null ? JSON.stringify(v) : v}`).join('\n')}`;
        }
        return `${key}: ${value}`;
    }).join('\n\n')}`;
}
async function createGitHubWorkflow(config) {
    const workflowDir = '.github/workflows';
    if (!external_fs_.existsSync(workflowDir)) {
        external_fs_.mkdirSync(workflowDir, { recursive: true });
    }
    const workflow = `name: Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable
      
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          ${config.dockerImages.length > 0 ? 'DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}' : ''}
          ${config.snapcraft ? 'SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}' : ''}
`;
    external_fs_.writeFileSync(`${workflowDir}/release.yml`, workflow);
    console.log(source/* default */.Ay.green('📄 Created GitHub Actions workflow'));
}
async function createGitLabCI(config) {
    const gitlabCI = `stages:
  - release

release:
  stage: release
  image: golang:1.21
  only:
    - tags
  script:
    - curl -sL https://git.io/goreleaser | bash
  variables:
    GITLAB_TOKEN: $GITLAB_TOKEN
    ${config.dockerImages.length > 0 ? 'DOCKER_USERNAME: $DOCKER_USERNAME\n    DOCKER_PASSWORD: $DOCKER_PASSWORD' : ''}
`;
    external_fs_.writeFileSync('.gitlab-ci.yml', gitlabCI);
    console.log(source/* default */.Ay.green('📄 Created GitLab CI configuration'));
}
function generateExampleMain(projectName) {
    return `package main

import (
	"fmt"
	"log"
	"os"
)

func main() {
	fmt.Printf("Hello from %s!\\n", "${projectName}")
	
	if len(os.Args) > 1 {
		fmt.Printf("Arguments: %v\\n", os.Args[1:])
	}
	
	// Your application logic here
	log.Printf("%s started successfully", "${projectName}")
}
`;
}

;// ./dist/deploy/capistrano/capistrano.js





async function deployToCapistrano() {
    console.log(source/* default */.Ay.blue('💎 Starting Capistrano deployment setup...'));
    // Check if this is a Ruby project
    if (!external_fs_.existsSync('Gemfile') && !external_fs_.existsSync('Gemfile.lock')) {
        console.log(source/* default */.Ay.red('❌ This doesn\'t appear to be a Ruby project.'));
        console.log(source/* default */.Ay.yellow('Capistrano is designed for Ruby applications. Please ensure you have a Gemfile.'));
        return;
    }
    // Check if Capistrano is installed
    if (!isCapistranoInstalled()) {
        console.log(source/* default */.Ay.yellow('⚠️  Capistrano is not installed. Installing...'));
        await installCapistrano();
    }
    // Check if Git is initialized
    if (!capistrano_isGitInitialized()) {
        console.log(source/* default */.Ay.red('❌ Git repository is not initialized.'));
        console.log(source/* default */.Ay.yellow('Capistrano requires a Git repository for deployment.'));
        return;
    }
    const config = await getCapistranoConfig();
    try {
        await setupCapistrano(config);
        console.log(source/* default */.Ay.green('✅ Capistrano deployment setup completed!'));
        console.log(source/* default */.Ay.blue('📖 Next steps:'));
        console.log(source/* default */.Ay.gray('1. Configure your servers in config/deploy/production.rb'));
        console.log(source/* default */.Ay.gray('2. Set up your server with: cap production deploy:setup'));
        console.log(source/* default */.Ay.gray('3. Deploy your application: cap production deploy'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Setup failed:'), error);
    }
}
function isCapistranoInstalled() {
    try {
        (0,external_child_process_.execSync)('cap --version', { stdio: 'ignore' });
        return true;
    }
    catch {
        // Check if it's in Gemfile
        if (external_fs_.existsSync('Gemfile')) {
            const gemfile = external_fs_.readFileSync('Gemfile', 'utf8');
            return gemfile.includes('capistrano');
        }
        return false;
    }
}
async function installCapistrano() {
    try {
        // Add to Gemfile if not present
        if (external_fs_.existsSync('Gemfile')) {
            const gemfile = external_fs_.readFileSync('Gemfile', 'utf8');
            if (!gemfile.includes('capistrano')) {
                const capistranoGems = `
# Deployment
group :development do
  gem 'capistrano', '~> 3.18'
  gem 'capistrano-rails', '~> 1.6'
  gem 'capistrano-passenger', '~> 0.2.1'
  gem 'capistrano-rbenv', '~> 2.2'
  gem 'capistrano3-puma', '~> 5.2'
end
`;
                external_fs_.appendFileSync('Gemfile', capistranoGems);
                console.log(source/* default */.Ay.green('📄 Added Capistrano gems to Gemfile'));
            }
        }
        console.log(source/* default */.Ay.blue('📦 Installing Capistrano gems...'));
        (0,external_child_process_.execSync)('bundle install', { stdio: 'inherit' });
        console.log(source/* default */.Ay.green('✅ Capistrano installed successfully'));
    }
    catch (error) {
        console.log(source/* default */.Ay.red('❌ Failed to install Capistrano'));
        throw error;
    }
}
function capistrano_isGitInitialized() {
    try {
        return external_fs_.existsSync('.git');
    }
    catch {
        return false;
    }
}
async function getCapistranoConfig() {
    // Detect framework
    let defaultFramework = 'custom';
    if (external_fs_.existsSync('config/application.rb'))
        defaultFramework = 'rails';
    if (external_fs_.existsSync('config.ru') && !external_fs_.existsSync('config/application.rb'))
        defaultFramework = 'sinatra';
    // Get git repository URL
    let defaultRepository = '';
    try {
        defaultRepository = (0,external_child_process_.execSync)('git remote get-url origin', { encoding: 'utf8' }).trim();
    }
    catch {
        // No remote configured
    }
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'appName',
            message: 'Enter application name:',
            default: external_path_.basename(process.cwd()),
            validate: (input) => input.trim().length > 0 || 'Application name is required'
        },
        {
            type: 'input',
            name: 'repository',
            message: 'Enter Git repository URL:',
            default: defaultRepository,
            validate: (input) => {
                if (!input.trim())
                    return 'Repository URL is required';
                if (!input.includes('git') && !input.includes('github') && !input.includes('gitlab')) {
                    return 'Please enter a valid Git repository URL';
                }
                return true;
            }
        },
        {
            type: 'input',
            name: 'deployTo',
            message: 'Enter deployment path on server:',
            default: '/var/www/html',
            validate: (input) => input.trim().length > 0 || 'Deployment path is required'
        },
        {
            type: 'list',
            name: 'framework',
            message: 'Select Ruby framework:',
            choices: [
                { name: 'Ruby on Rails', value: 'rails' },
                { name: 'Sinatra', value: 'sinatra' },
                { name: 'Custom Ruby Application', value: 'custom' }
            ],
            default: defaultFramework
        },
        {
            type: 'input',
            name: 'rubyVersion',
            message: 'Enter Ruby version:',
            default: detectRubyVersion(),
            validate: (input) => {
                if (!input.trim())
                    return 'Ruby version is required';
                if (!/^\d+\.\d+\.\d+$/.test(input))
                    return 'Ruby version should be in format X.Y.Z';
                return true;
            }
        },
        {
            type: 'list',
            name: 'webServer',
            message: 'Select web server:',
            choices: [
                { name: 'Nginx', value: 'nginx' },
                { name: 'Apache', value: 'apache' },
                { name: 'Passenger Standalone', value: 'passenger' }
            ],
            default: 'nginx'
        },
        {
            type: 'list',
            name: 'appServer',
            message: 'Select application server:',
            choices: [
                { name: 'Puma', value: 'puma' },
                { name: 'Unicorn', value: 'unicorn' },
                { name: 'Thin', value: 'thin' },
                { name: 'Passenger', value: 'passenger' }
            ],
            default: 'puma'
        }
    ]);
    // Get server configuration
    const servers = [];
    let addMore = true;
    while (addMore) {
        const serverConfig = await lib["default"].prompt([
            {
                type: 'input',
                name: 'host',
                message: 'Enter server hostname or IP:',
                validate: (input) => input.trim().length > 0 || 'Server hostname is required'
            },
            {
                type: 'input',
                name: 'user',
                message: 'Enter SSH username:',
                default: 'deploy',
                validate: (input) => input.trim().length > 0 || 'SSH username is required'
            },
            {
                type: 'checkbox',
                name: 'roles',
                message: 'Select server roles:',
                choices: [
                    { name: 'Web Server', value: 'web', checked: true },
                    { name: 'Application Server', value: 'app', checked: true },
                    { name: 'Database Server', value: 'db' },
                    { name: 'Background Jobs', value: 'job' }
                ],
                validate: (input) => input.length > 0 || 'Select at least one role'
            },
            {
                type: 'confirm',
                name: 'addAnother',
                message: 'Add another server?',
                default: false
            }
        ]);
        servers.push({
            host: serverConfig.host,
            user: serverConfig.user,
            roles: serverConfig.roles
        });
        addMore = serverConfig.addAnother;
    }
    return { ...answers, servers };
}
function detectRubyVersion() {
    try {
        // Check .ruby-version file
        if (external_fs_.existsSync('.ruby-version')) {
            return external_fs_.readFileSync('.ruby-version', 'utf8').trim();
        }
        // Check Gemfile
        if (external_fs_.existsSync('Gemfile')) {
            const gemfile = external_fs_.readFileSync('Gemfile', 'utf8');
            const rubyMatch = gemfile.match(/ruby ['"]([^'"]+)['"]/);
            if (rubyMatch)
                return rubyMatch[1];
        }
        // Get system Ruby version
        const rubyVersion = (0,external_child_process_.execSync)('ruby --version', { encoding: 'utf8' });
        const versionMatch = rubyVersion.match(/ruby (\d+\.\d+\.\d+)/);
        return versionMatch ? versionMatch[1] : '3.2.0';
    }
    catch {
        return '3.2.0';
    }
}
async function setupCapistrano(config) {
    console.log(source/* default */.Ay.blue('⚙️ Setting up Capistrano configuration...'));
    // Initialize Capistrano
    try {
        (0,external_child_process_.execSync)('bundle exec cap install', { stdio: 'inherit' });
        console.log(source/* default */.Ay.green('📄 Initialized Capistrano configuration'));
    }
    catch (error) {
        console.log(source/* default */.Ay.yellow('⚠️  Capistrano already initialized or failed to initialize'));
    }
    // Create deploy.rb
    await createDeployConfig(config);
    // Create stage configurations
    await createStageConfigs(config);
    // Create additional configuration files
    await createAdditionalConfigs(config);
    console.log(source/* default */.Ay.green('📄 Capistrano configuration completed'));
}
async function createDeployConfig(config) {
    const deployConfig = `# config/deploy.rb
lock "~> 3.18.0"

set :application, "${config.appName}"
set :repo_url, "${config.repository}"

# Default branch is :master
ask :branch, \`git rev-parse --abbrev-ref HEAD\`.chomp

# Default deploy_to directory is /var/www/my_app_name
set :deploy_to, "${config.deployTo}"

# Default value for :format is :airbrussh.
set :format, :airbrussh

# You can configure the Airbrussh format using :format_options.
set :format_options, command_output: true, log_file: "log/capistrano.log", color: :auto, truncate: :auto

# Default value for :pty is false
set :pty, true

# Default value for :linked_files is []
append :linked_files, "config/database.yml", "config/master.key"

# Default value for linked_dirs is []
append :linked_dirs, "log", "tmp/pids", "tmp/cache", "tmp/sockets", "public/system", "vendor", "storage"

# Default value for default_env is {}
set :default_env, { path: "/opt/ruby/bin:$PATH" }

# Default value for local_user is ENV['USER']
set :local_user, -> { \`whoami\`.chomp }

# Default value for keep_releases is 5
set :keep_releases, 5

# Uncomment the following to require manually verifying the host key before first deploy.
# set :ssh_options, verify_host_key: :secure

${config.framework === 'rails' ? `
# Rails specific configuration
set :migration_role, :app
set :conditionally_migrate, true
set :assets_roles, [:web, :app]
set :normalize_asset_timestamps, %w{public/images public/javascripts public/stylesheets}
` : ''}

${config.appServer === 'puma' ? `
# Puma configuration
set :puma_threads,    [4, 16]
set :puma_workers,    0
set :puma_bind,       "unix://#{shared_path}/tmp/sockets/#{fetch(:application)}-puma.sock"
set :puma_state,      "#{shared_path}/tmp/pids/puma.state"
set :puma_pid,        "#{shared_path}/tmp/pids/puma.pid"
set :puma_access_log, "#{release_path}/log/puma.error.log"
set :puma_error_log,  "#{release_path}/log/puma.access.log"
set :puma_preload_app, true
set :puma_worker_timeout, nil
set :puma_init_active_record, true
` : ''}

# Ruby version
set :rbenv_type, :user
set :rbenv_ruby, "${config.rubyVersion}"

# Restart application after deployment
namespace :deploy do
  after :restart, :clear_cache do
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      # within release_path do
      #   execute :rake, 'cache:clear'
      # end
    end
  end
end
`;
    external_fs_.writeFileSync('config/deploy.rb', deployConfig);
    console.log(source/* default */.Ay.green('📄 Created config/deploy.rb'));
}
async function createStageConfigs(config) {
    const productionConfig = `# config/deploy/production.rb

${config.servers.map(server => `server "${server.host}", user: "${server.user}", roles: %w{${server.roles.join(' ')}}`).join('\n')}

# server-based syntax
# ======================
# Defines a single server with a list of roles and multiple properties.
# You can define all roles on a single server, or split them:

# server "example.com", user: "deploy", roles: %w{app db web}, my_property: :my_value
# server "example.com", user: "deploy", roles: %w{app web}, other_property: :other_value
# server "db.example.com", user: "deploy", roles: %w{db}

# role-based syntax
# ==================
# Defines a role with one or multiple servers. The primary server in each
# group is considered to be the first unless any hosts have the primary
# property set. Specify the username and a domain or IP for the server.
# Don't use \`:all\`, it's a meta role.

${(() => {
        const roleMap = config.servers.reduce((acc, server) => {
            server.roles.forEach(role => {
                if (!acc[role])
                    acc[role] = [];
                acc[role].push(server.host);
            });
            return acc;
        }, {});
        return Object.entries(roleMap).map(([role, hosts]) => `# role :${role}, %w{${[...new Set(hosts)].join(' ')}}`).join('\n');
    })()}

# Configuration
# =============
# You can set any configuration variable like in config/deploy.rb
# These variables are then only loaded and set in this stage.
# For available Capistrano configuration variables see the documentation page.
# http://capistranorb.com/documentation/getting-started/configuration/
# Feel free to add new variables to customise your setup.

# Custom SSH Options
# ==================
# You may pass any option but keep in mind that net/ssh understands a
# limited set of options, consult the Net::SSH documentation.
# http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start
#
# Global options
# --------------
set :ssh_options, {
  keys: %w(~/.ssh/id_rsa),
  forward_agent: true,
  auth_methods: %w(publickey)
}
`;
    external_fs_.writeFileSync('config/deploy/production.rb', productionConfig);
    console.log(source/* default */.Ay.green('📄 Created config/deploy/production.rb'));
    // Create staging configuration
    const stagingConfig = productionConfig.replace(/production/g, 'staging');
    external_fs_.writeFileSync('config/deploy/staging.rb', stagingConfig);
    console.log(source/* default */.Ay.green('📄 Created config/deploy/staging.rb'));
}
async function createAdditionalConfigs(config) {
    // Create Capfile
    const capfile = `# Load DSL and set up stages
require "capistrano/setup"

# Include default deployment tasks
require "capistrano/deploy"

# Load the SCM plugin appropriate to your project:
require "capistrano/scm/git"
install_plugin Capistrano::SCM::Git

# Include tasks from other gems included in your Gemfile
${config.framework === 'rails' ? `
require "capistrano/rails/assets"
require "capistrano/rails/migrations"
` : ''}
require "capistrano/rbenv"
${config.appServer === 'puma' ? 'require "capistrano3/puma"' : ''}
${config.webServer === 'passenger' ? 'require "capistrano/passenger"' : ''}

# Load custom tasks from \`lib/capistrano/tasks\` if you have any defined
Dir.glob("lib/capistrano/tasks/*.rake").each { |r| import r }

${config.appServer === 'puma' ? `
# Puma tasks
install_plugin Capistrano3::Puma::Systemd
` : ''}
`;
    external_fs_.writeFileSync('Capfile', capfile);
    console.log(source/* default */.Ay.green('📄 Created Capfile'));
    // Create lib/capistrano/tasks directory for custom tasks
    const tasksDir = 'lib/capistrano/tasks';
    if (!external_fs_.existsSync(tasksDir)) {
        external_fs_.mkdirSync(tasksDir, { recursive: true });
        // Create example custom task
        const customTask = `# lib/capistrano/tasks/custom.rake
namespace :custom do
  desc "Restart application"
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      # Your custom restart logic here
      execute :touch, release_path.join('tmp/restart.txt')
    end
  end

  desc "Check application status"
  task :status do
    on roles(:app) do
      execute "ps aux | grep ${config.appName}"
    end
  end
end
`;
        external_fs_.writeFileSync(`${tasksDir}/custom.rake`, customTask);
        console.log(source/* default */.Ay.green('📄 Created custom Capistrano tasks'));
    }
}

;// ./dist/commands/deploy.js
/**
 * Deploy command - Deploy projects to various cloud platforms
 */






















/**
 * Detect project type and framework
 */
function detectProjectInfo() {
    const projectInfo = {
        type: 'unknown',
        hasEnvFile: false,
        envFiles: [],
        suggestedPlatforms: []
    };
    const cwd = process.cwd();
    // Check for package.json (Node.js projects)
    const packageJsonPath = external_path_.join(cwd, 'package.json');
    if (external_fs_.existsSync(packageJsonPath)) {
        try {
            const packageJson = JSON.parse(external_fs_.readFileSync(packageJsonPath, 'utf8'));
            projectInfo.type = 'nodejs';
            projectInfo.buildCommand = packageJson.scripts?.build;
            projectInfo.startCommand = packageJson.scripts?.start;
            // Detect framework from dependencies
            const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
            if (deps.next) {
                projectInfo.framework = 'nextjs';
                projectInfo.buildDir = '.next';
                projectInfo.suggestedPlatforms = ['vercel', 'netlify', 'aws', 'railway'];
            }
            else if (deps.react || deps['react-dom']) {
                projectInfo.framework = 'react';
                projectInfo.buildDir = 'build';
                projectInfo.suggestedPlatforms = ['vercel', 'netlify', 'aws', 'github-pages'];
            }
            else if (deps.vue || deps['@vue/cli']) {
                projectInfo.framework = 'vue';
                projectInfo.buildDir = 'dist';
                projectInfo.suggestedPlatforms = ['vercel', 'netlify', 'aws', 'firebase'];
            }
            else if (deps['@angular/core']) {
                projectInfo.framework = 'angular';
                projectInfo.buildDir = 'dist';
                projectInfo.suggestedPlatforms = ['vercel', 'netlify', 'firebase', 'aws'];
            }
            else if (deps.nuxt) {
                projectInfo.framework = 'nuxtjs';
                projectInfo.buildDir = '.nuxt';
                projectInfo.suggestedPlatforms = ['vercel', 'netlify', 'railway'];
            }
            else if (deps.svelte || deps['@sveltejs/kit']) {
                projectInfo.framework = 'svelte';
                projectInfo.buildDir = 'build';
                projectInfo.suggestedPlatforms = ['vercel', 'netlify', 'railway'];
            }
            else if (deps.express) {
                projectInfo.framework = 'express';
                projectInfo.suggestedPlatforms = ['heroku', 'railway', 'fly-io', 'aws'];
            }
            else if (deps.nestjs || deps['@nestjs/core']) {
                projectInfo.framework = 'nestjs';
                projectInfo.suggestedPlatforms = ['heroku', 'railway', 'fly-io', 'google-cloud'];
            }
            else {
                projectInfo.suggestedPlatforms = ['heroku', 'railway', 'fly-io'];
            }
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('Warning: Could not parse package.json'));
        }
    }
    // Check for Gemfile (Ruby projects)
    if (external_fs_.existsSync(external_path_.join(cwd, 'Gemfile'))) {
        projectInfo.type = 'ruby';
        const gemfileContent = external_fs_.readFileSync(external_path_.join(cwd, 'Gemfile'), 'utf8');
        if (gemfileContent.includes('rails')) {
            projectInfo.framework = 'rails';
            projectInfo.suggestedPlatforms = ['heroku', 'capistrano', 'railway', 'fly-io'];
        }
        else {
            projectInfo.framework = 'ruby';
            projectInfo.suggestedPlatforms = ['heroku', 'capistrano'];
        }
    }
    // Check for go.mod (Go projects)
    if (external_fs_.existsSync(external_path_.join(cwd, 'go.mod'))) {
        projectInfo.type = 'go';
        projectInfo.framework = 'go';
        projectInfo.suggestedPlatforms = ['goreleaser', 'fly-io', 'railway', 'google-cloud'];
    }
    // Check for requirements.txt or pyproject.toml (Python projects)
    if (external_fs_.existsSync(external_path_.join(cwd, 'requirements.txt')) || external_fs_.existsSync(external_path_.join(cwd, 'pyproject.toml'))) {
        projectInfo.type = 'python';
        if (external_fs_.existsSync(external_path_.join(cwd, 'manage.py'))) {
            projectInfo.framework = 'django';
        }
        else if (external_fs_.existsSync(external_path_.join(cwd, 'app.py')) || external_fs_.existsSync(external_path_.join(cwd, 'main.py'))) {
            projectInfo.framework = 'flask';
        }
        projectInfo.suggestedPlatforms = ['heroku', 'railway', 'fly-io', 'google-cloud'];
    }
    // Check for Dockerfile
    if (external_fs_.existsSync(external_path_.join(cwd, 'Dockerfile'))) {
        projectInfo.suggestedPlatforms.unshift('docker-hub', 'fly-io', 'railway');
    }
    // Check for serverless.yml
    if (external_fs_.existsSync(external_path_.join(cwd, 'serverless.yml'))) {
        projectInfo.suggestedPlatforms.unshift('serverless');
    }
    // Check for static files (HTML/CSS/JS)
    if (external_fs_.existsSync(external_path_.join(cwd, 'index.html')) && projectInfo.type === 'unknown') {
        projectInfo.type = 'static';
        projectInfo.framework = 'static';
        projectInfo.suggestedPlatforms = ['github-pages', 'netlify', 'vercel', 'firebase'];
    }
    // Check for environment files
    const envFiles = ['.env', '.env.local', '.env.production', '.env.staging', '.env.development'];
    envFiles.forEach(file => {
        if (external_fs_.existsSync(external_path_.join(cwd, file))) {
            projectInfo.envFiles.push(file);
            projectInfo.hasEnvFile = true;
        }
    });
    // Default suggestions if none found
    if (projectInfo.suggestedPlatforms.length === 0) {
        projectInfo.suggestedPlatforms = ['vercel', 'netlify', 'heroku', 'railway'];
    }
    return projectInfo;
}
/**
 * Parse command line options
 */
function parseDeployOptions() {
    const args = process.argv.slice(2);
    const options = {};
    // Parse platform
    const platformIndex = args.findIndex(arg => arg === '--platform' || arg === '-p');
    if (platformIndex !== -1 && args[platformIndex + 1]) {
        options.platform = args[platformIndex + 1];
    }
    // Parse env file
    const envIndex = args.findIndex(arg => arg === '--env');
    if (envIndex !== -1 && args[envIndex + 1]) {
        options.envFile = args[envIndex + 1];
    }
    // Parse boolean flags
    options.interactive = args.includes('--interactive') || args.includes('-i');
    options.autoDetect = args.includes('--auto-detect') || args.includes('-a');
    options.build = args.includes('--build');
    options.dryRun = args.includes('--dry-run');
    options.force = args.includes('--force') || args.includes('-f');
    options.watch = args.includes('--watch') || args.includes('-w');
    options.quiet = args.includes('--quiet') || args.includes('-q');
    options.verbose = args.includes('--verbose') || args.includes('-v');
    return options;
}
/**
 * Display project information
 */
function displayProjectInfo(projectInfo, options) {
    if (options.quiet)
        return;
    console.log(source/* default */.Ay.cyan('📦 Project Information'));
    console.log(source/* default */.Ay.gray('========================\n'));
    console.log(`${source/* default */.Ay.blue('Type:')} ${projectInfo.type}`);
    if (projectInfo.framework) {
        console.log(`${source/* default */.Ay.blue('Framework:')} ${projectInfo.framework}`);
    }
    if (projectInfo.buildCommand) {
        console.log(`${source/* default */.Ay.blue('Build Command:')} ${projectInfo.buildCommand}`);
    }
    if (projectInfo.startCommand) {
        console.log(`${source/* default */.Ay.blue('Start Command:')} ${projectInfo.startCommand}`);
    }
    if (projectInfo.buildDir) {
        console.log(`${source/* default */.Ay.blue('Build Directory:')} ${projectInfo.buildDir}`);
    }
    if (projectInfo.envFiles.length > 0) {
        console.log(`${source/* default */.Ay.blue('Environment Files:')} ${projectInfo.envFiles.join(', ')}`);
    }
    if (projectInfo.suggestedPlatforms.length > 0) {
        console.log(`${source/* default */.Ay.blue('Suggested Platforms:')} ${projectInfo.suggestedPlatforms.slice(0, 3).join(', ')}`);
    }
    console.log(); // Empty line
}
/**
 * Interactive platform selection with project-specific suggestions
 */
async function interactivePlatformSelection(projectInfo) {
    console.log(source/* default */.Ay.cyan('🚀 Select Deployment Platform\n'));
    // Show suggested platforms first if available
    if (projectInfo.suggestedPlatforms.length > 0) {
        console.log(source/* default */.Ay.green('💡 Recommended for your project:'));
        projectInfo.suggestedPlatforms.slice(0, 3).forEach((platform, index) => {
            console.log(`   ${index + 1}. ${platform}`);
        });
        console.log();
        const { useRecommended } = await lib["default"].prompt([
            {
                type: 'confirm',
                name: 'useRecommended',
                message: `Deploy to ${source/* default */.Ay.green(projectInfo.suggestedPlatforms[0])} (recommended)?`,
                default: true
            }
        ]);
        if (useRecommended) {
            return projectInfo.suggestedPlatforms[0];
        }
    }
    // Show all platforms
    const { platform } = await lib["default"].prompt([
        {
            type: 'list',
            name: 'platform',
            message: 'Choose deployment platform:',
            choices: [
                {
                    name: '🔐 Auth0 - Authentication and identity management',
                    value: 'auth0',
                    short: 'Auth0'
                },
                {
                    name: '☁️ AWS - S3 static sites and Lambda functions',
                    value: 'aws',
                    short: 'AWS'
                },
                {
                    name: '💎 Capistrano - Ruby deployment automation',
                    value: 'capistrano',
                    short: 'Capistrano'
                },
                {
                    name: '☁️ Cloud Foundry - Enterprise cloud platform',
                    value: 'cloud-foundry',
                    short: 'Cloud Foundry'
                },
                {
                    name: '☁️ Cloudflare - Pages, Workers, and Workers Sites',
                    value: 'cloudflare',
                    short: 'Cloudflare'
                },
                {
                    name: '🌊 DigitalOcean - App Platform and container registry',
                    value: 'digitalocean',
                    short: 'DigitalOcean'
                },
                {
                    name: '🐳 Docker Hub - Container registry and deployment',
                    value: 'docker-hub',
                    short: 'Docker Hub'
                },
                {
                    name: '🔥 Firebase - Hosting, Functions, and Firestore',
                    value: 'firebase',
                    short: 'Firebase'
                },
                {
                    name: '🪂 Fly.io - Deploy apps close to users globally',
                    value: 'fly-io',
                    short: 'Fly.io'
                },
                {
                    name: '📚 GitHub Pages - Static sites and documentation',
                    value: 'github-pages',
                    short: 'GitHub Pages'
                },
                {
                    name: '🌐 Google Cloud - App Engine, Cloud Run, and Functions',
                    value: 'google-cloud',
                    short: 'Google Cloud'
                },
                {
                    name: '🚀 GoReleaser - Release Go binaries fast and easily',
                    value: 'goreleaser',
                    short: 'GoReleaser'
                },
                {
                    name: '⚡ Heroku - Cloud application platform',
                    value: 'heroku',
                    short: 'Heroku'
                },
                {
                    name: '🟢 Netlify - Static sites and serverless functions',
                    value: 'netlify',
                    short: 'Netlify'
                },
                {
                    name: '🚂 Railway - Modern app hosting platform',
                    value: 'railway',
                    short: 'Railway'
                },
                {
                    name: '⚡ Serverless Framework - Multi-cloud serverless deployment',
                    value: 'serverless',
                    short: 'Serverless'
                },
                {
                    name: '🔺 Vercel - Frontend and fullstack applications',
                    value: 'vercel',
                    short: 'Vercel'
                }
            ]
        }
    ]);
    return platform;
}
/**
 * Display help for deploy command
 */
function showDeployHelp() {
    const helpConfig = {
        commandName: 'deploy',
        emoji: '🚀',
        description: 'Deploy your projects to various cloud platforms seamlessly.',
        usage: [
            'pi deploy',
            'pi deploy --platform <platform>',
            'pi deploy --list'
        ],
        options: [
            { flag: '--platform, -p <platform>', description: 'Specify deployment platform (auth0, aws, capistrano, cloud-foundry, cloudflare, digitalocean, docker-hub, firebase, fly-io, github-pages, google-cloud, goreleaser, heroku, netlify, railway, serverless, vercel)' },
            { flag: '--list, -l', description: 'List all available deployment platforms' },
            { flag: '--config, -c', description: 'Configure deployment settings' },
            { flag: '--interactive, -i', description: 'Interactive mode with auto-detection (default)' },
            { flag: '--auto-detect, -a', description: 'Auto-detect project type and suggest platforms' },
            { flag: '--build', description: 'Build project before deployment' },
            { flag: '--env <file>', description: 'Use environment variables from file (.env by default)' },
            { flag: '--dry-run', description: 'Show what would be deployed without actually deploying' },
            { flag: '--force, -f', description: 'Skip confirmation prompts' },
            { flag: '--watch, -w', description: 'Watch for changes and auto-deploy' },
            { flag: '--quiet, -q', description: 'Suppress non-essential output' },
            { flag: '--verbose, -v', description: 'Show detailed deployment information' }
        ],
        examples: [
            { command: 'pi deploy', description: 'Interactive mode with auto-detection' },
            { command: 'pi deploy --auto-detect', description: 'Auto-detect and suggest best platforms' },
            { command: 'pi deploy --platform vercel', description: 'Deploy directly to Vercel' },
            { command: 'pi deploy --platform aws --build', description: 'Build and deploy to AWS' },
            { command: 'pi deploy --dry-run', description: 'Preview deployment without executing' },
            { command: 'pi deploy --list', description: 'Show all available platforms' },
            { command: 'pi deploy --config', description: 'Configure deployment settings' },
            { command: 'pi deploy --watch', description: 'Watch for changes and auto-deploy' }
        ],
        additionalSections: [
            {
                title: '🌐 Supported Platforms',
                items: [
                    'Auth0 - Authentication and identity management',
                    'AWS - S3 static sites and Lambda functions',
                    'Capistrano - Ruby deployment automation',
                    'Cloud Foundry - Enterprise cloud platform',
                    'Cloudflare - Pages, Workers, and Workers Sites',
                    'DigitalOcean - App Platform and container registry',
                    'Docker Hub - Container registry and deployment',
                    'Firebase - Hosting, Functions, and Firestore',
                    'Fly.io - Deploy apps close to users globally',
                    'GitHub Pages - Static sites and documentation',
                    'Google Cloud - App Engine, Cloud Run, and Functions',
                    'GoReleaser - Release Go binaries fast and easily',
                    'Heroku - Cloud application platform',
                    'Netlify - Static sites and serverless functions',
                    'Railway - Modern app hosting platform',
                    'Serverless Framework - Multi-cloud serverless deployment',
                    'Vercel - Frontend and fullstack applications'
                ]
            },
            {
                title: '🔧 Prerequisites',
                items: [
                    'Platform CLI installed (auth0, aws-cli, capistrano, cf, docker, doctl, firebase-tools, flyctl, gh, gcloud, goreleaser, heroku, netlify, railway, serverless, vercel, wrangler)',
                    'Authentication configured for chosen platform',
                    'Project build configuration (if required)'
                ]
            }
        ],
        tips: [
            'Each platform has specific requirements - check platform documentation',
            'Use --build flag to automatically build before deployment',
            'Environment variables can be configured per platform'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
/**
 * Main deploy command function
 */
async function deployCommand() {
    // Check for help flag
    if (process.argv.includes('--help') || process.argv.includes('-h')) {
        showDeployHelp();
        return;
    }
    // Parse command line options
    const options = parseDeployOptions();
    const args = process.argv.slice(2);
    const listFlag = args.includes('--list') || args.includes('-l');
    const configFlag = args.includes('--config') || args.includes('-c');
    if (listFlag) {
        showAvailablePlatforms();
        return;
    }
    if (configFlag) {
        await configureDeployment();
        return;
    }
    // Detect project information
    const projectInfo = detectProjectInfo();
    // Display project info unless in quiet mode
    if (!options.quiet) {
        displayProjectInfo(projectInfo, options);
    }
    // Auto-detect mode - just show suggestions and exit
    if (options.autoDetect) {
        console.log(source/* default */.Ay.cyan('🎯 Recommended deployment platforms for your project:\n'));
        projectInfo.suggestedPlatforms.slice(0, 5).forEach((platform, index) => {
            console.log(`${index + 1}. ${source/* default */.Ay.green(platform)} - Deploy with: ${source/* default */.Ay.blue(`pi deploy --platform ${platform}`)}`);
        });
        console.log(source/* default */.Ay.gray('\nRun without --auto-detect to start interactive deployment.'));
        return;
    }
    let selectedPlatform = options.platform || null;
    // If no platform specified, show interactive selection with suggestions
    if (!selectedPlatform) {
        selectedPlatform = await interactivePlatformSelection(projectInfo);
    }
    // Dry run mode - show what would be deployed
    if (options.dryRun) {
        console.log(source/* default */.Ay.cyan('🔍 Dry Run Mode - Preview Deployment\n'));
        console.log(`Platform: ${source/* default */.Ay.green(selectedPlatform)}`);
        console.log(`Project: ${source/* default */.Ay.blue(projectInfo.type)} ${projectInfo.framework ? `(${projectInfo.framework})` : ''}`);
        console.log(`Build Command: ${source/* default */.Ay.blue(projectInfo.buildCommand || 'Not specified')}`);
        console.log(`Environment Files: ${source/* default */.Ay.blue(projectInfo.envFiles.join(', ') || 'None')}`);
        if (options.build) {
            console.log(`${source/* default */.Ay.yellow('Would run build step')}`);
        }
        console.log(source/* default */.Ay.gray('\nNo actual deployment performed. Remove --dry-run to deploy.'));
        return;
    }
    // Build project if requested
    if (options.build && projectInfo.buildCommand) {
        console.log(source/* default */.Ay.cyan('🔨 Building project...'));
        const { spawn } = await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 5317, 19));
        await new Promise((resolve, reject) => {
            const buildProcess = spawn('npm', ['run', 'build'], { stdio: 'inherit' });
            buildProcess.on('close', (code) => {
                if (code === 0) {
                    console.log(source/* default */.Ay.green('✅ Build completed successfully'));
                    resolve(void 0);
                }
                else {
                    reject(new Error(`Build failed with code ${code}`));
                }
            });
        });
    }
    // Validate platform
    const validPlatforms = ['auth0', 'aws', 'capistrano', 'cloud-foundry', 'cloudflare', 'digitalocean', 'docker-hub', 'firebase', 'fly-io', 'github-pages', 'google-cloud', 'goreleaser', 'heroku', 'netlify', 'railway', 'serverless', 'vercel'];
    if (!selectedPlatform || !validPlatforms.includes(selectedPlatform)) {
        console.log(source/* default */.Ay.red(`❌ Invalid platform: ${selectedPlatform}`));
        console.log(source/* default */.Ay.yellow(`Valid platforms: ${validPlatforms.join(', ')}`));
        return;
    }
    console.log(source/* default */.Ay.cyan(`\n🚀 Starting deployment to ${selectedPlatform}...\n`));
    try {
        let result;
        switch (selectedPlatform) {
            case 'vercel':
                result = await deployToVercel();
                break;
            case 'aws':
                result = await deployToAWS();
                break;
            case 'github-pages':
                result = await deployToGithubPages();
                break;
            case 'docker-hub':
                result = await deployToDockerHub();
                break;
            case 'digitalocean':
                result = await deployToDigitalOcean();
                break;
            case 'cloudflare':
                result = await deployToCloudflare();
                break;
            case 'google-cloud':
                await deployToGoogleCloud();
                result = { success: true };
                break;
            case 'firebase':
                await deployToFirebase();
                result = { success: true };
                break;
            case 'auth0':
                await deployToAuth0();
                result = { success: true };
                break;
            case 'serverless':
                await deployToServerless();
                result = { success: true };
                break;
            case 'railway':
                await deployToRailway();
                result = { success: true };
                break;
            case 'netlify':
                await deployToNetlify();
                result = { success: true };
                break;
            case 'heroku':
                await deployToHeroku();
                result = { success: true };
                break;
            case 'cloud-foundry':
                await deployToCloudFoundry();
                result = { success: true };
                break;
            case 'fly-io':
                await deployToFly();
                result = { success: true };
                break;
            case 'goreleaser':
                await deployToGoReleaser();
                result = { success: true };
                break;
            case 'capistrano':
                await deployToCapistrano();
                result = { success: true };
                break;
            default:
                throw new Error(`Unsupported platform: ${selectedPlatform}`);
        }
        if (result.success) {
            console.log(source/* default */.Ay.green('\n🎉 Deployment completed successfully!'));
            if (result.url) {
                console.log(source/* default */.Ay.blue(`🔗 URL: ${result.url}`));
            }
        }
        else {
            console.log(source/* default */.Ay.red('\n❌ Deployment failed!'));
            if (result.error) {
                console.log(source/* default */.Ay.red(`Error: ${result.error}`));
            }
        }
    }
    catch (error) {
        console.log(source/* default */.Ay.red('\n❌ Deployment failed!'));
        console.log(source/* default */.Ay.red(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`));
    }
}
function showAvailablePlatforms() {
    console.log(source/* default */.Ay.cyan('\n🌐 Available Deployment Platforms:\n'));
    console.log(source/* default */.Ay.hex('#eb5424')('� Auth0'));
    console.log(source/* default */.Ay.gray('   • Authentication and identity management'));
    console.log(source/* default */.Ay.gray('   • Framework-specific SDK configuration'));
    console.log(source/* default */.Ay.gray('   • Environment variable setup'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform auth0\n'));
    console.log(source/* default */.Ay.hex('#ff9f00')('☁️ AWS'));
    console.log(source/* default */.Ay.gray('   • S3 static website hosting'));
    console.log(source/* default */.Ay.gray('   • Lambda function deployment'));
    console.log(source/* default */.Ay.gray('   • CloudFront distribution'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform aws\n'));
    console.log(source/* default */.Ay.hex('#cc342d')('� Capistrano'));
    console.log(source/* default */.Ay.gray('   • Ruby deployment automation'));
    console.log(source/* default */.Ay.gray('   • SSH-based deployments'));
    console.log(source/* default */.Ay.gray('   • Multi-server management'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform capistrano\n'));
    console.log(source/* default */.Ay.hex('#0091da')('☁️ Cloud Foundry'));
    console.log(source/* default */.Ay.gray('   • Enterprise cloud platform'));
    console.log(source/* default */.Ay.gray('   • Multi-cloud deployment'));
    console.log(source/* default */.Ay.gray('   • Service bindings and buildpacks'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform cloud-foundry\n'));
    console.log(source/* default */.Ay.hex('#f38020')('☁️ Cloudflare'));
    console.log(source/* default */.Ay.gray('   • Cloudflare Pages (static sites)'));
    console.log(source/* default */.Ay.gray('   • Workers (serverless functions)'));
    console.log(source/* default */.Ay.gray('   • Workers Sites (full-stack apps)'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform cloudflare\n'));
    console.log(source/* default */.Ay.hex('#0080ff')('🌊 DigitalOcean'));
    console.log(source/* default */.Ay.gray('   • App Platform (PaaS)'));
    console.log(source/* default */.Ay.gray('   • Container Registry'));
    console.log(source/* default */.Ay.gray('   • Droplets and Kubernetes'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform digitalocean\n'));
    console.log(source/* default */.Ay.hex('#0db7ed')('🐳 Docker Hub'));
    console.log(source/* default */.Ay.gray('   • Container registry and deployment'));
    console.log(source/* default */.Ay.gray('   • Multi-platform container support'));
    console.log(source/* default */.Ay.gray('   • Automated builds and deployments'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform docker-hub\n'));
    console.log(source/* default */.Ay.hex('#ffca28')('🔥 Firebase'));
    console.log(source/* default */.Ay.gray('   • Firebase Hosting (static web hosting)'));
    console.log(source/* default */.Ay.gray('   • Cloud Functions (serverless functions)'));
    console.log(source/* default */.Ay.gray('   • Firestore (NoSQL database)'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform firebase\n'));
    console.log(source/* default */.Ay.hex('#7c3aed')('🪂 Fly.io'));
    console.log(source/* default */.Ay.gray('   • Deploy apps close to users'));
    console.log(source/* default */.Ay.gray('   • Global edge deployment'));
    console.log(source/* default */.Ay.gray('   • Container-based hosting'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform fly-io\n'));
    console.log(source/* default */.Ay.hex('#333')('📚 GitHub Pages'));
    console.log(source/* default */.Ay.gray('   • Static sites and documentation'));
    console.log(source/* default */.Ay.gray('   • GitHub Actions integration'));
    console.log(source/* default */.Ay.gray('   • Custom domains supported'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform github-pages\n'));
    console.log(source/* default */.Ay.hex('#4285f4')('🌐 Google Cloud'));
    console.log(source/* default */.Ay.gray('   • App Engine (serverless platform)'));
    console.log(source/* default */.Ay.gray('   • Cloud Run (containerized applications)'));
    console.log(source/* default */.Ay.gray('   • Cloud Functions (serverless functions)'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform google-cloud\n'));
    console.log(source/* default */.Ay.hex('#00add8')('� GoReleaser'));
    console.log(source/* default */.Ay.gray('   • Release Go binaries fast'));
    console.log(source/* default */.Ay.gray('   • Multi-platform builds'));
    console.log(source/* default */.Ay.gray('   • GitHub/GitLab integration'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform goreleaser\n'));
    console.log(source/* default */.Ay.hex('#430098')('⚡ Heroku'));
    console.log(source/* default */.Ay.gray('   • Cloud application platform'));
    console.log(source/* default */.Ay.gray('   • Add-ons and buildpacks'));
    console.log(source/* default */.Ay.gray('   • Auto-scaling and monitoring'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform heroku\n'));
    console.log(source/* default */.Ay.hex('#00d2d3')('🟢 Netlify'));
    console.log(source/* default */.Ay.gray('   • Static sites and JAMstack'));
    console.log(source/* default */.Ay.gray('   • Serverless functions'));
    console.log(source/* default */.Ay.gray('   • CDN and edge computing'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform netlify\n'));
    console.log(source/* default */.Ay.hex('#6c5ce7')('� Railway'));
    console.log(source/* default */.Ay.gray('   • Modern app hosting platform'));
    console.log(source/* default */.Ay.gray('   • Container and traditional deployment'));
    console.log(source/* default */.Ay.gray('   • Database and infrastructure services'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform railway\n'));
    console.log(source/* default */.Ay.hex('#fd79a8')('⚡ Serverless Framework'));
    console.log(source/* default */.Ay.gray('   • Multi-cloud serverless deployment'));
    console.log(source/* default */.Ay.gray('   • AWS, Azure, GCP, Cloudflare support'));
    console.log(source/* default */.Ay.gray('   • Functions and API deployment'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform serverless\n'));
    console.log(source/* default */.Ay.hex('#ff6b6b')('� Vercel'));
    console.log(source/* default */.Ay.gray('   • Frontend and fullstack applications'));
    console.log(source/* default */.Ay.gray('   • Automatic builds and deployments'));
    console.log(source/* default */.Ay.gray('   • Custom domains and SSL'));
    console.log(source/* default */.Ay.gray('   • Usage: pi deploy --platform vercel\n'));
}
async function configureDeployment() {
    console.log(source/* default */.Ay.cyan('⚙️ Deployment Configuration\n'));
    const { action } = await lib["default"].prompt([
        {
            type: 'list',
            name: 'action',
            message: 'What would you like to configure?',
            choices: [
                'Platform credentials',
                'Build settings',
                'Environment variables',
                'Domain configuration',
                'View platform setup commands'
            ]
        }
    ]);
    switch (action) {
        case 'Platform credentials':
            await configurePlatformCredentials();
            break;
        case 'Build settings':
            await configureBuildSettings();
            break;
        case 'Environment variables':
            await configureEnvironmentVariables();
            break;
        case 'Domain configuration':
            await configureDomainSettings();
            break;
        case 'View platform setup commands':
            await showPlatformSetupCommands();
            break;
        default:
            console.log(source/* default */.Ay.yellow(`\n🔧 ${action} configuration is not yet implemented.`));
    }
}
async function configurePlatformCredentials() {
    console.log(source/* default */.Ay.cyan('\n🔐 Platform Credentials Configuration\n'));
    const { platform } = await lib["default"].prompt([
        {
            type: 'list',
            name: 'platform',
            message: 'Select platform to configure credentials:',
            choices: [
                'auth0',
                'aws',
                'capistrano',
                'cloud-foundry',
                'cloudflare',
                'digitalocean',
                'docker-hub',
                'firebase',
                'fly-io',
                'github-pages',
                'google-cloud',
                'goreleaser',
                'heroku',
                'netlify',
                'railway',
                'serverless',
                'vercel'
            ]
        }
    ]);
    await showPlatformSetupCommand(platform);
}
async function configureBuildSettings() {
    console.log(source/* default */.Ay.cyan('\n🔨 Build Settings Configuration\n'));
    const { buildConfig } = await lib["default"].prompt([
        {
            type: 'checkbox',
            name: 'buildConfig',
            message: 'Select build configuration options:',
            choices: [
                'Auto-detect build command',
                'Set custom build command',
                'Configure build directory',
                'Set environment variables',
                'Enable build caching',
                'Configure Node.js version',
                'Set up build hooks'
            ]
        }
    ]);
    console.log(source/* default */.Ay.yellow('\n🔧 Build configuration options selected:'));
    buildConfig.forEach((option) => {
        console.log(source/* default */.Ay.gray(`• ${option}`));
    });
    console.log(source/* default */.Ay.blue('\n💡 Build settings will be applied during deployment.'));
}
async function configureEnvironmentVariables() {
    console.log(source/* default */.Ay.cyan('\n🌍 Environment Variables Configuration\n'));
    const { envAction } = await lib["default"].prompt([
        {
            type: 'list',
            name: 'envAction',
            message: 'What would you like to do with environment variables?',
            choices: [
                'Load from .env file',
                'Set individual variables',
                'Copy from another environment',
                'View current variables',
                'Clear all variables'
            ]
        }
    ]);
    switch (envAction) {
        case 'Load from .env file':
            console.log(source/* default */.Ay.blue('\n📁 Environment variables will be loaded from .env file during deployment.'));
            break;
        case 'Set individual variables':
            console.log(source/* default */.Ay.blue('\n✏️ Individual environment variables can be set per platform during deployment.'));
            break;
        case 'Copy from another environment':
            console.log(source/* default */.Ay.blue('\n📋 Environment variables can be copied between environments during platform setup.'));
            break;
        case 'View current variables':
            console.log(source/* default */.Ay.blue('\n👁️ Current environment variables will be displayed during deployment configuration.'));
            break;
        case 'Clear all variables':
            console.log(source/* default */.Ay.yellow('\n🗑️ Environment variables will be cleared during next deployment configuration.'));
            break;
    }
}
async function configureDomainSettings() {
    console.log(source/* default */.Ay.cyan('\n🌐 Domain Configuration\n'));
    const { domainAction } = await lib["default"].prompt([
        {
            type: 'list',
            name: 'domainAction',
            message: 'Select domain configuration option:',
            choices: [
                'Add custom domain',
                'Configure SSL certificate',
                'Set up domain redirects',
                'Configure DNS settings',
                'View domain status'
            ]
        }
    ]);
    console.log(source/* default */.Ay.yellow(`\n🔧 ${domainAction} will be configured during platform-specific deployment.`));
    console.log(source/* default */.Ay.blue('Domain settings vary by platform - refer to platform documentation for specific steps.'));
}
async function showPlatformSetupCommands() {
    console.log(source/* default */.Ay.cyan('\n⚡ Platform Setup Commands\n'));
    const platforms = [
        {
            name: 'Auth0',
            cli: 'auth0',
            install: 'npm install -g @auth0/auth0-cli',
            setup: 'auth0 login',
            docs: 'https://auth0.com/docs/cli',
            package: 'https://www.npmjs.com/package/@auth0/auth0-cli'
        },
        {
            name: 'AWS',
            cli: 'aws-cli',
            install: 'pip install awscli',
            setup: 'aws configure',
            docs: 'https://docs.aws.amazon.com/cli/',
            package: 'https://pypi.org/project/awscli/'
        },
        {
            name: 'Capistrano',
            cli: 'capistrano',
            install: 'gem install capistrano',
            setup: 'cap install',
            docs: 'https://capistranorb.com/',
            package: 'https://rubygems.org/gems/capistrano'
        },
        {
            name: 'Cloud Foundry',
            cli: 'cf',
            install: 'Download from GitHub releases',
            setup: 'cf login',
            docs: 'https://docs.cloudfoundry.org/cf-cli/',
            package: 'https://github.com/cloudfoundry/cli/releases'
        },
        {
            name: 'Cloudflare',
            cli: 'wrangler',
            install: 'npm install -g wrangler',
            setup: 'wrangler login',
            docs: 'https://developers.cloudflare.com/workers/wrangler/',
            package: 'https://www.npmjs.com/package/wrangler'
        },
        {
            name: 'DigitalOcean',
            cli: 'doctl',
            install: 'Download from GitHub releases',
            setup: 'doctl auth init',
            docs: 'https://docs.digitalocean.com/reference/doctl/',
            package: 'https://github.com/digitalocean/doctl/releases'
        },
        {
            name: 'Docker Hub',
            cli: 'docker',
            install: 'Download Docker Desktop',
            setup: 'docker login',
            docs: 'https://docs.docker.com/engine/reference/commandline/cli/',
            package: 'https://docs.docker.com/get-docker/'
        },
        {
            name: 'Firebase',
            cli: 'firebase-tools',
            install: 'npm install -g firebase-tools',
            setup: 'firebase login',
            docs: 'https://firebase.google.com/docs/cli',
            package: 'https://www.npmjs.com/package/firebase-tools'
        },
        {
            name: 'Fly.io',
            cli: 'flyctl',
            install: 'curl -L https://fly.io/install.sh | sh',
            setup: 'flyctl auth login',
            docs: 'https://fly.io/docs/flyctl/',
            package: 'https://fly.io/docs/getting-started/installing-flyctl/'
        },
        {
            name: 'GitHub Pages',
            cli: 'gh',
            install: 'Download from GitHub releases',
            setup: 'gh auth login',
            docs: 'https://cli.github.com/manual/',
            package: 'https://github.com/cli/cli/releases'
        },
        {
            name: 'Google Cloud',
            cli: 'gcloud',
            install: 'Download Cloud SDK',
            setup: 'gcloud auth login',
            docs: 'https://cloud.google.com/sdk/gcloud/',
            package: 'https://cloud.google.com/sdk/docs/install'
        },
        {
            name: 'GoReleaser',
            cli: 'goreleaser',
            install: 'go install github.com/goreleaser/goreleaser@latest',
            setup: 'export GITHUB_TOKEN=your_token',
            docs: 'https://goreleaser.com/',
            package: 'https://goreleaser.com/install/'
        },
        {
            name: 'Heroku',
            cli: 'heroku',
            install: 'npm install -g heroku',
            setup: 'heroku login',
            docs: 'https://devcenter.heroku.com/articles/heroku-cli',
            package: 'https://www.npmjs.com/package/heroku'
        },
        {
            name: 'Netlify',
            cli: 'netlify-cli',
            install: 'npm install -g netlify-cli',
            setup: 'netlify login',
            docs: 'https://docs.netlify.com/cli/get-started/',
            package: 'https://www.npmjs.com/package/netlify-cli'
        },
        {
            name: 'Railway',
            cli: 'railway',
            install: 'npm install -g @railway/cli',
            setup: 'railway login',
            docs: 'https://docs.railway.app/reference/cli-api',
            package: 'https://www.npmjs.com/package/@railway/cli'
        },
        {
            name: 'Serverless',
            cli: 'serverless',
            install: 'npm install -g serverless',
            setup: 'serverless login',
            docs: 'https://www.serverless.com/framework/docs/',
            package: 'https://www.npmjs.com/package/serverless'
        },
        {
            name: 'Vercel',
            cli: 'vercel',
            install: 'npm install -g vercel',
            setup: 'vercel login',
            docs: 'https://vercel.com/docs/cli',
            package: 'https://www.npmjs.com/package/vercel'
        }
    ];
    platforms.forEach(platform => {
        console.log(source/* default */.Ay.green(`• ${platform.name}:`));
        console.log(source/* default */.Ay.gray(`  📦 Install: ${platform.install}`));
        console.log(source/* default */.Ay.blue(`  🔧 Setup: ${platform.setup}`));
        console.log(source/* default */.Ay.cyan(`  📖 Docs: ${platform.docs}`));
        console.log(source/* default */.Ay.magenta(`  🔗 Package: ${platform.package}\n`));
    });
}
async function showPlatformSetupCommand(platform) {
    console.log(source/* default */.Ay.cyan(`\n⚡ ${platform.charAt(0).toUpperCase() + platform.slice(1)} Setup\n`));
    const setupCommands = {
        'auth0': {
            cli: 'auth0',
            install: 'npm install -g @auth0/auth0-cli',
            setup: 'auth0 login',
            docs: 'https://auth0.com/docs/cli',
            package: 'https://www.npmjs.com/package/@auth0/auth0-cli'
        },
        'aws': {
            cli: 'aws-cli',
            install: 'pip install awscli',
            setup: 'aws configure',
            docs: 'https://docs.aws.amazon.com/cli/',
            package: 'https://pypi.org/project/awscli/'
        },
        'capistrano': {
            cli: 'capistrano',
            install: 'gem install capistrano',
            setup: 'cap install',
            docs: 'https://capistranorb.com/',
            package: 'https://rubygems.org/gems/capistrano'
        },
        'cloud-foundry': {
            cli: 'cf',
            install: 'Download from https://github.com/cloudfoundry/cli/releases',
            setup: 'cf login',
            docs: 'https://docs.cloudfoundry.org/cf-cli/',
            package: 'https://github.com/cloudfoundry/cli/releases'
        },
        'cloudflare': {
            cli: 'wrangler',
            install: 'npm install -g wrangler',
            setup: 'wrangler login',
            docs: 'https://developers.cloudflare.com/workers/wrangler/',
            package: 'https://www.npmjs.com/package/wrangler'
        },
        'digitalocean': {
            cli: 'doctl',
            install: 'Download from https://github.com/digitalocean/doctl/releases',
            setup: 'doctl auth init',
            docs: 'https://docs.digitalocean.com/reference/doctl/',
            package: 'https://github.com/digitalocean/doctl/releases'
        },
        'docker-hub': {
            cli: 'docker',
            install: 'Download from https://docs.docker.com/get-docker/',
            setup: 'docker login',
            docs: 'https://docs.docker.com/engine/reference/commandline/cli/',
            package: 'https://docs.docker.com/get-docker/'
        },
        'firebase': {
            cli: 'firebase-tools',
            install: 'npm install -g firebase-tools',
            setup: 'firebase login',
            docs: 'https://firebase.google.com/docs/cli',
            package: 'https://www.npmjs.com/package/firebase-tools'
        },
        'fly-io': {
            cli: 'flyctl',
            install: 'curl -L https://fly.io/install.sh | sh',
            setup: 'flyctl auth login',
            docs: 'https://fly.io/docs/flyctl/',
            package: 'https://fly.io/docs/getting-started/installing-flyctl/'
        },
        'github-pages': {
            cli: 'gh',
            install: 'Download from https://cli.github.com/',
            setup: 'gh auth login',
            docs: 'https://cli.github.com/manual/',
            package: 'https://github.com/cli/cli/releases'
        },
        'google-cloud': {
            cli: 'gcloud',
            install: 'Download from https://cloud.google.com/sdk/docs/install',
            setup: 'gcloud auth login',
            docs: 'https://cloud.google.com/sdk/gcloud/',
            package: 'https://cloud.google.com/sdk/docs/install'
        },
        'goreleaser': {
            cli: 'goreleaser',
            install: 'go install github.com/goreleaser/goreleaser@latest',
            setup: 'export GITHUB_TOKEN=your_token',
            docs: 'https://goreleaser.com/',
            package: 'https://goreleaser.com/install/'
        },
        'heroku': {
            cli: 'heroku',
            install: 'npm install -g heroku',
            setup: 'heroku login',
            docs: 'https://devcenter.heroku.com/articles/heroku-cli',
            package: 'https://www.npmjs.com/package/heroku'
        },
        'netlify': {
            cli: 'netlify-cli',
            install: 'npm install -g netlify-cli',
            setup: 'netlify login',
            docs: 'https://docs.netlify.com/cli/get-started/',
            package: 'https://www.npmjs.com/package/netlify-cli'
        },
        'railway': {
            cli: 'railway',
            install: 'npm install -g @railway/cli',
            setup: 'railway login',
            docs: 'https://docs.railway.app/reference/cli-api',
            package: 'https://www.npmjs.com/package/@railway/cli'
        },
        'serverless': {
            cli: 'serverless',
            install: 'npm install -g serverless',
            setup: 'serverless login',
            docs: 'https://www.serverless.com/framework/docs/',
            package: 'https://www.npmjs.com/package/serverless'
        },
        'vercel': {
            cli: 'vercel',
            install: 'npm install -g vercel',
            setup: 'vercel login',
            docs: 'https://vercel.com/docs/cli',
            package: 'https://www.npmjs.com/package/vercel'
        }
    };
    const config = setupCommands[platform];
    if (config) {
        console.log(source/* default */.Ay.green('📦 Installation:'));
        console.log(source/* default */.Ay.gray(`  ${config.install}\n`));
        console.log(source/* default */.Ay.green('🔧 Setup:'));
        console.log(source/* default */.Ay.gray(`  ${config.setup}\n`));
        console.log(source/* default */.Ay.green('📚 Documentation:'));
        console.log(source/* default */.Ay.blue(`  ${config.docs}\n`));
        console.log(source/* default */.Ay.green('🔗 Package Manager:'));
        console.log(source/* default */.Ay.magenta(`  ${config.package}\n`));
    }
    else {
        console.log(source/* default */.Ay.red(`Platform "${platform}" not found.`));
    }
}

;// ./dist/commands/clean.js
/**
 * Clean command - Clean development artifacts and caches
 */






/**
 * Display help for clean command
 */
function showCleanHelp() {
    const helpConfig = {
        commandName: 'Clean',
        emoji: '🧹',
        description: 'Clean development artifacts, caches, and temporary files.\nSafely removes common build outputs, dependency caches, and temporary files to free up disk space and clean your project.',
        usage: [
            'clean [options]',
            'cleanup [options]   # alias'
        ],
        options: [
            { flag: '--node-modules', description: 'Clean node_modules directories' },
            { flag: '--build', description: 'Clean build/dist directories' },
            { flag: '--cache', description: 'Clean package manager caches' },
            { flag: '--logs', description: 'Clean log files and debug outputs' },
            { flag: '--all', description: 'Clean everything (safe operation)' },
            { flag: '--deep', description: 'Deep clean (includes lock files)' },
            { flag: '--dry-run', description: 'Preview what would be cleaned' }
        ],
        examples: [
            { command: 'clean --build', description: 'Clean build directories only' },
            { command: 'clean --node-modules', description: 'Clean node_modules directories' },
            { command: 'clean --all --dry-run', description: 'Preview what would be cleaned' },
            { command: 'clean --deep', description: 'Deep clean with lock files' },
            { command: 'clean --cache', description: 'Clean package manager caches' },
            { command: 'cleanup --all', description: 'Use alias command' }
        ],
        additionalSections: [
            {
                title: 'Clean Targets',
                items: [
                    'Build Outputs: dist, build, .next, out, target',
                    'Dependencies: node_modules, .pnpm-store',
                    'Caches: .cache, .npm, .yarn, __pycache__',
                    'Logs: *.log, npm-debug.log, yarn-error.log',
                    'Temp Files: .DS_Store, Thumbs.db, *.tmp'
                ]
            }
        ],
        tips: [
            'Always use --dry-run first to preview changes',
            'Deep clean removes lock files and requires dependency reinstall',
            'Use --cache to clean package manager caches for more space'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
/**
 * Main clean command function
 */
async function cleanCommand(options = {}) {
    // Show help if help flag is present
    if (options.help || options['--help'] || options['-h']) {
        showCleanHelp();
        return;
    }
    // Display command banner
    (0,banner/* displayCommandBanner */.kn)('Clean', 'Clean development artifacts, caches, and temporary files from your project');
    console.log(source/* default */.Ay.hex('#ffa502')('🧹 Project Cleaner\n'));
    const projectPath = process.cwd();
    const isDryRun = options['dryRun'] || options['dry-run'];
    // Determine what to clean based on flags
    const targets = determineCleanTargets(options);
    if (targets.length === 0) {
        console.log(source/* default */.Ay.yellow('⚠️  No clean targets specified. Use --help for available options.'));
        console.log(source/* default */.Ay.gray('💡 Tip: Use --all for a safe clean of common artifacts'));
        return;
    }
    if (isDryRun) {
        console.log(source/* default */.Ay.cyan('🔍 DRY RUN - Preview of what would be cleaned:\n'));
    }
    else {
        console.log(source/* default */.Ay.cyan('🧹 Starting cleanup process...\n'));
    }
    const spinner = (0,node_modules_ora/* default */.Ay)(source/* default */.Ay.hex('#ffa502')(isDryRun ? 'Analyzing files...' : 'Cleaning project...')).start();
    try {
        let totalSize = 0;
        const results = [];
        let itemsCleaned = 0;
        for (const target of targets) {
            spinner.text = `${isDryRun ? 'Analyzing' : 'Cleaning'} ${target.name}...`;
            const targetSize = await cleanTarget(projectPath, target, isDryRun);
            if (targetSize > 0) {
                totalSize += targetSize;
                itemsCleaned++;
                results.push(`${target.name}: ${clean_formatFileSize(targetSize)}`);
            }
        }
        spinner.stop();
        if (totalSize > 0) {
            const action = isDryRun ? 'would be cleaned' : 'cleaned';
            console.log(source/* default */.Ay.green(`\n✅ ${isDryRun ? 'Analysis' : 'Cleanup'} completed!`));
            console.log(source/* default */.Ay.white(`📊 Total ${action}: ${source/* default */.Ay.bold(clean_formatFileSize(totalSize))}`));
            console.log(source/* default */.Ay.white(`📁 Items ${action}: ${source/* default */.Ay.bold(itemsCleaned)}`));
            if (results.length > 0) {
                console.log(source/* default */.Ay.cyan('\n📋 Breakdown:'));
                results.forEach(result => {
                    console.log(source/* default */.Ay.gray(`   • ${result}`));
                });
            }
            if (isDryRun) {
                console.log(source/* default */.Ay.yellow('\n💡 Run without --dry-run to actually clean these files'));
            }
            else {
                console.log(source/* default */.Ay.green('\n🎉 Project successfully cleaned!'));
            }
        }
        else {
            console.log(source/* default */.Ay.green('✨ Nothing to clean - project is already tidy!'));
        }
    }
    catch (error) {
        spinner.fail(source/* default */.Ay.red(isDryRun ? '❌ Failed to analyze files' : '❌ Failed to clean project'));
        console.error(source/* default */.Ay.red(`Error: ${error instanceof Error ? error.message : String(error)}`));
        process.exit(1);
    }
}
/**
 * Determine what to clean based on options
 */
function determineCleanTargets(options) {
    const targets = [];
    // Handle --node-modules flag
    if (options.all || options['nodeModules'] || options['node-modules']) {
        targets.push({
            name: 'node_modules',
            patterns: ['node_modules', '**/node_modules'],
            description: 'Node.js dependencies'
        });
    }
    // Handle --build flag
    if (options.all || options.build) {
        targets.push({
            name: 'build outputs',
            patterns: ['dist', 'build', '.next', 'out', 'target/debug', 'target/release', '.output', '.nuxt'],
            description: 'Build outputs and compiled files'
        });
    }
    // Handle --cache flag
    if (options.all || options.cache) {
        targets.push({
            name: 'package manager caches',
            patterns: ['.cache', '.npm', '.yarn', '.pnpm-store', '.pnpm', '__pycache__', '.pytest_cache', 'target/debug/deps', 'target/release/deps'],
            description: 'Package manager and build caches'
        });
    }
    // Handle --logs flag
    if (options.all || options.logs) {
        targets.push({
            name: 'log files',
            patterns: ['*.log', 'logs', 'log', '*.log.*', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*'],
            description: 'Log files and debug outputs'
        });
    }
    // Handle --deep flag (includes lock files)
    if (options.deep) {
        targets.push({
            name: 'dependency lock files',
            patterns: ['package-lock.json', 'yarn.lock', 'pnpm-lock.yaml', 'Cargo.lock', 'Pipfile.lock', 'poetry.lock'],
            description: 'Dependency lock files (requires reinstall)'
        });
        // Add more aggressive cleaning for deep clean
        targets.push({
            name: 'temporary files',
            patterns: ['.tmp', 'tmp', '.temp', 'temp', '.DS_Store', 'Thumbs.db', '*.tmp', '*.temp'],
            description: 'Temporary files and system artifacts'
        });
    }
    // If no specific options are provided and not --all, show available options
    const hasSpecificOption = options['nodeModules'] || options['node-modules'] ||
        options.build || options.cache || options.logs ||
        options.deep || options.all;
    if (!hasSpecificOption) {
        return []; // Return empty to show help message
    }
    return targets;
}
/**
 * Clean a specific target
 */
async function cleanTarget(projectPath, target, dryRun) {
    let totalSize = 0;
    for (const pattern of target.patterns) {
        try {
            // Handle different pattern types
            if (pattern.includes('*')) {
                // Handle glob patterns
                totalSize += await cleanGlobPattern(projectPath, pattern, dryRun);
            }
            else {
                // Handle direct paths
                const fullPath = external_path_.join(projectPath, pattern);
                if (await fs_extra_lib.pathExists(fullPath)) {
                    const size = await getDirectorySize(fullPath);
                    totalSize += size;
                    if (!dryRun && size > 0) {
                        await fs_extra_lib.remove(fullPath);
                    }
                }
            }
        }
        catch (error) {
            // Silently ignore permission errors or other filesystem issues
            // This is expected behavior for clean operations
        }
    }
    return totalSize;
}
/**
 * Clean files matching a glob pattern
 */
async function cleanGlobPattern(projectPath, pattern, dryRun) {
    let totalSize = 0;
    try {
        // Import glob dynamically
        const { glob } = await __webpack_require__.e(/* import() */ 173).then(__webpack_require__.bind(__webpack_require__, 3173));
        const matches = await glob(pattern, {
            cwd: projectPath,
            absolute: false,
            dot: true,
            ignore: ['node_modules/node_modules/**'] // Avoid nested node_modules issues
        });
        const matchArray = Array.isArray(matches) ? matches : [matches];
        for (const match of matchArray) {
            if (!match)
                continue;
            const fullPath = external_path_.join(projectPath, match);
            try {
                if (await fs_extra_lib.pathExists(fullPath)) {
                    const size = await getDirectorySize(fullPath);
                    totalSize += size;
                    if (!dryRun && size > 0) {
                        await fs_extra_lib.remove(fullPath);
                    }
                }
            }
            catch (error) {
                // Skip files that can't be accessed
            }
        }
    }
    catch (error) {
        // Fallback to simple directory walking for pattern matching
        totalSize += await fallbackPatternMatch(projectPath, pattern, dryRun);
    }
    return totalSize;
}
/**
 * Fallback pattern matching when glob is not available
 */
async function fallbackPatternMatch(projectPath, pattern, dryRun) {
    let totalSize = 0;
    // Handle common patterns manually
    if (pattern.includes('**')) {
        // Recursive pattern - search directories
        const basePattern = pattern.replace('**/', '').replace('*', '');
        await walkDirectory(projectPath, async (filePath) => {
            if (filePath.includes(basePattern)) {
                try {
                    const size = await getDirectorySize(filePath);
                    totalSize += size;
                    if (!dryRun && size > 0) {
                        await fs_extra_lib.remove(filePath);
                    }
                }
                catch (error) {
                    // Skip on error
                }
            }
        });
    }
    else {
        // Simple pattern
        const simplePattern = pattern.replace('*', '');
        const fullPath = external_path_.join(projectPath, simplePattern);
        if (await fs_extra_lib.pathExists(fullPath)) {
            const size = await getDirectorySize(fullPath);
            totalSize += size;
            if (!dryRun && size > 0) {
                await fs_extra_lib.remove(fullPath);
            }
        }
    }
    return totalSize;
}
/**
 * Walk directory recursively
 */
async function walkDirectory(dir, callback) {
    try {
        const entries = await fs_extra_lib.readdir(dir, { withFileTypes: true });
        for (const entry of entries) {
            const fullPath = external_path_.join(dir, entry.name);
            if (entry.isDirectory()) {
                await callback(fullPath);
                // Recurse into subdirectory (with depth limit to avoid infinite loops)
                if (!entry.name.startsWith('.') && entry.name !== 'node_modules') {
                    await walkDirectory(fullPath, callback);
                }
            }
            else {
                await callback(fullPath);
            }
        }
    }
    catch (error) {
        // Skip directories that can't be read
    }
}
/**
 * Get directory size recursively
 */
async function getDirectorySize(dir) {
    let size = 0;
    try {
        const stat = await fs_extra_lib.stat(dir);
        if (stat.isFile()) {
            return stat.size;
        }
        if (stat.isDirectory()) {
            const entries = await fs_extra_lib.readdir(dir);
            for (const entry of entries) {
                const entryPath = external_path_.join(dir, entry);
                size += await getDirectorySize(entryPath);
            }
        }
    }
    catch (error) {
        // Ignore permission errors
    }
    return size;
}
/**
 * Format file size for display
 */
function clean_formatFileSize(bytes) {
    const units = ['B', 'KB', 'MB', 'GB'];
    let size = bytes;
    let unitIndex = 0;
    while (size >= 1024 && unitIndex < units.length - 1) {
        size /= 1024;
        unitIndex++;
    }
    return `${size.toFixed(1)} ${units[unitIndex]}`;
}

;// ./dist/commands/cache.js
/**
 * Cache Command - Manage Package Installer CLI cache system
 */








/**
 * Display help for cache command
 */
function showCacheHelp() {
    const helpConfig = {
        commandName: 'Cache',
        emoji: '🗄️',
        description: 'Manage CLI cache system for improved performance.\nAutomatically manages cached data for faster operations.',
        usage: [
            'cache [subcommand] [type]',
            'cache [options]'
        ],
        options: [
            { flag: '--stats', description: 'Show cache statistics' },
            { flag: '--clear [type]', description: 'Clear cache (optional type)' },
            { flag: '--info', description: 'Show cache information' },
            { flag: '--optimize', description: 'Optimize cache' },
            { flag: '--size', description: 'Show cache size only' }
        ],
        examples: [
            { command: 'cache stats', description: 'Show cache statistics' },
            { command: 'cache --stats', description: 'Show cache statistics (flag)' },
            { command: 'cache clear', description: 'Clear all cache' },
            { command: 'cache clear projects', description: 'Clear specific cache type' },
            { command: 'cache info', description: 'Show cache information' },
            { command: 'cache optimize', description: 'Optimize cache performance' },
            { command: 'cache --size', description: 'Show cache size only' }
        ],
        additionalSections: [
            {
                title: 'Subcommands',
                items: [
                    'stats - Show cache statistics and usage info',
                    'clear [type] - Clear cache (all or specific type)',
                    'info - Show cache configuration and paths',
                    'optimize - Optimize cache performance'
                ]
            },
            {
                title: 'Cache Types',
                items: [
                    'projects - Project metadata and analysis',
                    'analysis - Analysis results and reports',
                    'packages - Package version information',
                    'templates - Template usage statistics',
                    'system - System environment information',
                    'all - Clear all cache types'
                ]
            }
        ],
        tips: [
            'Cache improves CLI performance by storing frequently used data',
            'Cache is automatically managed but you can manually optimize it',
            'Use --size to check cache disk usage before clearing'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
const CLI_CACHE_DIR = '.package-installer-cli';
/**
 * Main cache command function
 */
async function cacheCommand(subcommand, type, options = {}) {
    // Handle help flag
    if (options.help || options['--help'] || options['-h'] || subcommand === '--help' || subcommand === '-h') {
        showCacheHelp();
        return;
    }
    // Handle option flags
    if (options.stats || subcommand === 'stats') {
        await cacheStatsCommand();
        return;
    }
    if (options.clear !== undefined || subcommand === 'clear') {
        const clearType = options.clear || type;
        await cacheClearCommand(clearType);
        return;
    }
    if (options.info || subcommand === 'info') {
        await cacheInfoCommand();
        return;
    }
    if (options.optimize || subcommand === 'optimize') {
        await cacheOptimizeCommand();
        return;
    }
    if (options.size) {
        await cacheSizeCommand();
        return;
    }
    // Handle subcommands
    if (subcommand === 'stats') {
        await cacheStatsCommand();
    }
    else if (subcommand === 'clear') {
        await cacheClearCommand(type);
    }
    else if (subcommand === 'info') {
        await cacheInfoCommand();
    }
    else if (subcommand === 'optimize') {
        await cacheOptimizeCommand();
    }
    else {
        // Default cache command - show help and quick stats
        console.clear();
        console.log((0,dist/* default */.Ay)(['#00d2d3', '#0084ff'])('🗄️  Cache Manager\n'));
        console.log(source/* default */.Ay.cyan('Available commands:'));
        console.log(source/* default */.Ay.gray('   pi cache stats        - Show cache statistics'));
        console.log(source/* default */.Ay.gray('   pi cache clear        - Clear all cache'));
        console.log(source/* default */.Ay.gray('   pi cache clear <type> - Clear specific cache type'));
        console.log(source/* default */.Ay.gray('   pi cache info         - Show cache configuration'));
        console.log(source/* default */.Ay.gray('   pi cache optimize     - Optimize cache performance'));
        console.log(source/* default */.Ay.gray('   pi cache --help       - Show detailed help'));
        console.log(source/* default */.Ay.cyan('\nCache types:'));
        console.log(source/* default */.Ay.gray('   projects, templates, analysis, packages, system, all'));
        // Show quick stats
        try {
            const stats = (0,utils_cacheManager/* getCacheStats */.QS)();
            console.log(source/* default */.Ay.cyan('\nQuick Stats:'));
            console.log(source/* default */.Ay.gray(`   Cached Projects: ${stats.projects?.length || 0}`));
            console.log(source/* default */.Ay.gray(`   Template Files: ${stats.templateFiles?.size || Object.keys(stats.templateFiles || {}).length || 0}`));
            // Show cache size
            const cacheDir = external_path_.join(external_os_.homedir(), CLI_CACHE_DIR);
            if (await fs_extra_lib.pathExists(cacheDir)) {
                const size = await (0,utils_cacheManager/* getDirectorySize */.fC)(cacheDir);
                console.log(source/* default */.Ay.gray(`   Cache Size: ${(size / 1024 / 1024).toFixed(2)} MB`));
            }
        }
        catch (error) {
            console.log(source/* default */.Ay.yellow('\n⚠️  Cache not initialized yet'));
        }
        console.log(source/* default */.Ay.green('\n✅ Cache system ready'));
        console.log(source/* default */.Ay.gray('💡 Use --help for detailed options'));
    }
}
/**
 * Cache stats subcommand
 */
async function cacheStatsCommand() {
    console.log((0,dist/* default */.Ay)(['#00d2d3', '#0084ff'])('\n🗄️  Cache Statistics\n'));
    const spinner = (0,node_modules_ora/* default */.Ay)('Loading cache statistics...').start();
    try {
        const stats = (0,utils_cacheManager/* getCacheStats */.QS)();
        const status = (0,utils_cacheManager/* getCacheStatus */.D3)();
        spinner.succeed('Cache statistics loaded');
        console.log(source/* default */.Ay.cyan('📊 Cache Information:'));
        console.log(source/* default */.Ay.gray(`   Cache Status: ${status.initialized ? 'Initialized' : 'Not Initialized'}`));
        console.log(source/* default */.Ay.gray(`   Cache Version: ${status.version || 'Unknown'}`));
        console.log(source/* default */.Ay.gray(`   Total Projects: ${stats.projects?.length || 0}`));
        console.log(source/* default */.Ay.gray(`   Total Templates: ${stats.templateFiles?.size || 0}`));
        console.log(source/* default */.Ay.gray(`   Cache Hits: ${stats.hits || 0}`));
        console.log(source/* default */.Ay.gray(`   Cache Misses: ${stats.misses || 0}`));
        // Cache hit ratio
        const totalRequests = (stats.hits || 0) + (stats.misses || 0);
        const hitRatio = totalRequests > 0 ? ((stats.hits || 0) / totalRequests * 100).toFixed(1) : '0';
        console.log(source/* default */.Ay.gray(`   Hit Ratio: ${hitRatio}%`));
        // Storage information
        const cacheDir = external_path_.join(external_os_.homedir(), CLI_CACHE_DIR);
        if (await fs_extra_lib.pathExists(cacheDir)) {
            const size = await (0,utils_cacheManager/* getDirectorySize */.fC)(cacheDir);
            console.log(source/* default */.Ay.gray(`   Cache Size: ${(size / 1024 / 1024).toFixed(2)} MB`));
        }
        console.log(source/* default */.Ay.green('\n✅ Cache system is functioning properly'));
    }
    catch (error) {
        spinner.fail('Failed to load cache statistics');
        console.error(source/* default */.Ay.red(`❌ Error: ${error.message}`));
    }
}
/**
 * Cache clear subcommand
 */
async function cacheClearCommand(type) {
    console.log((0,dist/* default */.Ay)(['#00d2d3', '#0084ff'])('\n🗑️  Cache Cleaner\n'));
    const spinner = (0,node_modules_ora/* default */.Ay)('Clearing cache...').start();
    try {
        const cacheDir = external_path_.join(external_os_.homedir(), CLI_CACHE_DIR);
        if (type) {
            // Clear specific cache type
            const cacheFile = external_path_.join(cacheDir, 'cache.json');
            if (await fs_extra_lib.pathExists(cacheFile)) {
                const cache = await fs_extra_lib.readJson(cacheFile);
                switch (type) {
                    case 'projects':
                        cache.projects = [];
                        break;
                    case 'templates':
                        cache.templateFiles = {};
                        break;
                    case 'analysis':
                        cache.analysis = {};
                        break;
                    case 'packages':
                        cache.packages = {};
                        break;
                    default:
                        spinner.fail(`Unknown cache type: ${type}`);
                        return;
                }
                await fs_extra_lib.writeJson(cacheFile, cache, { spaces: 2 });
                spinner.succeed(`Cleared ${type} cache`);
            }
            else {
                spinner.warn('Cache file not found');
            }
        }
        else {
            // Clear all cache
            if (await fs_extra_lib.pathExists(cacheDir)) {
                await fs_extra_lib.remove(cacheDir);
                spinner.succeed('All cache cleared');
            }
            else {
                spinner.warn('Cache directory not found');
            }
        }
        console.log(source/* default */.Ay.green('✅ Cache cleared successfully'));
    }
    catch (error) {
        spinner.fail('Failed to clear cache');
        console.error(source/* default */.Ay.red(`❌ Error: ${error.message}`));
    }
}
/**
 * Cache info subcommand
 */
async function cacheInfoCommand() {
    console.log((0,dist/* default */.Ay)(['#00d2d3', '#0084ff'])('\n🔧 Cache Configuration\n'));
    const cacheDir = external_path_.join(external_os_.homedir(), CLI_CACHE_DIR);
    const cacheFile = external_path_.join(cacheDir, 'cache.json');
    console.log(source/* default */.Ay.cyan('Cache Configuration:'));
    console.log(source/* default */.Ay.gray(`   Cache Directory: ${cacheDir}`));
    console.log(source/* default */.Ay.gray(`   Cache File: ${cacheFile}`));
    console.log(source/* default */.Ay.gray(`   Cache Version: 3.11.2`));
    const exists = await fs_extra_lib.pathExists(cacheFile);
    console.log(source/* default */.Ay.gray(`   Cache File Exists: ${exists ? 'Yes' : 'No'}`));
    if (exists) {
        try {
            const stats = await fs_extra_lib.stat(cacheFile);
            const size = (stats.size / 1024).toFixed(2);
            const modified = stats.mtime.toLocaleString();
            console.log(source/* default */.Ay.gray(`   File Size: ${size} KB`));
            console.log(source/* default */.Ay.gray(`   Last Modified: ${modified}`));
        }
        catch (error) {
            console.log(source/* default */.Ay.red(`   Error reading cache file: ${error.message}`));
        }
    }
    console.log(source/* default */.Ay.cyan('\nCache Types:'));
    console.log(source/* default */.Ay.gray('   • projects     - Project metadata and analysis'));
    console.log(source/* default */.Ay.gray('   • analysis     - Project analysis results'));
    console.log(source/* default */.Ay.gray('   • packages     - Package version information'));
    console.log(source/* default */.Ay.gray('   • templates    - Template usage statistics'));
    console.log(source/* default */.Ay.gray('   • templateFiles - Cached template file contents'));
    console.log(source/* default */.Ay.gray('   • system       - System environment info'));
}
/**
 * Cache size subcommand
 */
async function cacheSizeCommand() {
    console.log((0,dist/* default */.Ay)(['#00d2d3', '#0084ff'])('\n📊 Cache Size Information\n'));
    const spinner = (0,node_modules_ora/* default */.Ay)('Calculating cache size...').start();
    try {
        const cacheDir = external_path_.join(external_os_.homedir(), CLI_CACHE_DIR);
        if (!await fs_extra_lib.pathExists(cacheDir)) {
            spinner.warn('Cache directory not found');
            console.log(source/* default */.Ay.yellow('⚠️  Cache has not been initialized yet'));
            return;
        }
        const totalSize = await (0,utils_cacheManager/* getDirectorySize */.fC)(cacheDir);
        const cacheFile = external_path_.join(cacheDir, 'cache.json');
        spinner.succeed('Cache size calculated');
        console.log(source/* default */.Ay.cyan('📁 Cache Size Breakdown:'));
        console.log(source/* default */.Ay.gray(`   Total Cache Size: ${(totalSize / 1024 / 1024).toFixed(2)} MB`));
        if (await fs_extra_lib.pathExists(cacheFile)) {
            const cacheFileStats = await fs_extra_lib.stat(cacheFile);
            console.log(source/* default */.Ay.gray(`   Cache Data File: ${(cacheFileStats.size / 1024).toFixed(2)} KB`));
        }
        // Show cache efficiency
        if (totalSize > 50 * 1024 * 1024) { // 50MB
            console.log(source/* default */.Ay.yellow('\n⚠️  Cache is quite large (>50MB)'));
            console.log(source/* default */.Ay.gray('💡 Consider running "pi cache optimize" or "pi cache clear"'));
        }
        else if (totalSize > 10 * 1024 * 1024) { // 10MB
            console.log(source/* default */.Ay.cyan('\n💡 Cache size is reasonable'));
            console.log(source/* default */.Ay.gray('Consider optimizing if performance is slow'));
        }
        else {
            console.log(source/* default */.Ay.green('\n✅ Cache size is optimal'));
        }
    }
    catch (error) {
        spinner.fail('Failed to calculate cache size');
        console.error(source/* default */.Ay.red(`❌ Error: ${error.message}`));
    }
}
/**
 * Cache optimize subcommand
 */
async function cacheOptimizeCommand() {
    console.log((0,dist/* default */.Ay)(['#00d2d3', '#0084ff'])('\n⚡ Cache Optimizer\n'));
    const spinner = (0,node_modules_ora/* default */.Ay)('Optimizing cache...').start();
    try {
        const cacheDir = external_path_.join(external_os_.homedir(), CLI_CACHE_DIR);
        const cacheFile = external_path_.join(cacheDir, 'cache.json');
        if (!await fs_extra_lib.pathExists(cacheFile)) {
            spinner.warn('Cache file not found');
            return;
        }
        const cache = await fs_extra_lib.readJson(cacheFile);
        let optimized = false;
        // Remove expired entries (older than 7 days)
        const expireTime = Date.now() - (7 * 24 * 60 * 60 * 1000);
        if (cache.projects) {
            const originalCount = cache.projects.length;
            cache.projects = cache.projects.filter((project) => !project.timestamp || project.timestamp > expireTime);
            if (cache.projects.length < originalCount) {
                optimized = true;
                spinner.text = `Removed ${originalCount - cache.projects.length} expired projects`;
            }
        }
        // Clean up empty template files
        if (cache.templateFiles) {
            const originalKeys = Object.keys(cache.templateFiles);
            Object.keys(cache.templateFiles).forEach(key => {
                if (!cache.templateFiles[key] || cache.templateFiles[key].trim() === '') {
                    delete cache.templateFiles[key];
                    optimized = true;
                }
            });
            if (Object.keys(cache.templateFiles).length < originalKeys.length) {
                spinner.text = `Cleaned ${originalKeys.length - Object.keys(cache.templateFiles).length} empty templates`;
            }
        }
        // Compact cache file
        if (optimized) {
            await fs_extra_lib.writeJson(cacheFile, cache, { spaces: 2 });
            spinner.succeed('Cache optimization complete');
            console.log(source/* default */.Ay.green('✅ Cache optimized successfully'));
        }
        else {
            spinner.succeed('Cache is already optimized');
        }
        // Show optimization results
        const stats = await fs_extra_lib.stat(cacheFile);
        console.log(source/* default */.Ay.gray(`📁 Cache size: ${(stats.size / 1024).toFixed(2)} KB`));
        console.log(source/* default */.Ay.cyan('\n💡 Tip: Run "pi cache clear" to manually clear specific cache types'));
    }
    catch (error) {
        spinner.fail('Failed to optimize cache');
        console.error(source/* default */.Ay.red(`❌ Error: ${error.message}`));
    }
}

// EXTERNAL MODULE: ./dist/utils/featureInstaller.js
var featureInstaller = __webpack_require__(4253);
;// ./dist/commands/env.js
/**
 * Environment command - Analyze and manage development environment
 */











/**
 * Check if a command exists
 */
function commandExists(command) {
    try {
        (0,external_child_process_.execSync)(`which ${command}`, { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
/**
 * Get version of a command
 */
function getCommandVersion(command, versionFlag = '--version') {
    try {
        const output = (0,external_child_process_.execSync)(`${command} ${versionFlag}`, {
            encoding: 'utf8',
            stdio: 'pipe'
        }).toString().trim();
        return output.split('\n')[0];
    }
    catch {
        return 'Not installed';
    }
}
/**
 * Get system information
 */
function getSystemInfo() {
    return {
        platform: external_os_.platform(),
        arch: external_os_.arch(),
        release: external_os_.release(),
        nodeVersion: process.version,
        uptime: Math.floor(external_os_.uptime() / 3600) + ' hours',
        totalMemory: Math.round(external_os_.totalmem() / 1024 / 1024 / 1024) + ' GB',
        freeMemory: Math.round(external_os_.freemem() / 1024 / 1024 / 1024) + ' GB',
        loadAverage: external_os_.loadavg().map(load => load.toFixed(2)).join(', ')
    };
}
/**
 * Check development tools
 */
function checkDevelopmentTools() {
    const tools = [
        { name: 'Node.js', command: 'node', flag: '--version' },
        { name: 'npm', command: 'npm', flag: '--version' },
        { name: 'pnpm', command: 'pnpm', flag: '--version' },
        { name: 'Git', command: 'git', flag: '--version' },
        { name: 'Docker', command: 'docker', flag: '--version' },
        { name: 'Python', command: 'python3', flag: '--version' },
        { name: 'Rust', command: 'rustc', flag: '--version' },
        { name: 'Go', command: 'go', flag: 'version' },
        { name: 'Ruby', command: 'ruby', flag: '--version' },
        { name: 'VS Code', command: 'code', flag: '--version' }
    ];
    return tools.map(tool => ({
        ...tool,
        installed: commandExists(tool.command),
        version: commandExists(tool.command) ? getCommandVersion(tool.command, tool.flag) : 'Not installed'
    }));
}
/**
 * Check environment variables
 */
function checkEnvironmentVariables() {
    const importantVars = [
        'PATH',
        'HOME',
        'NODE_ENV',
        'NODE_PATH',
        'NPM_CONFIG_PREFIX',
        'EDITOR',
        'SHELL',
        'TERM',
        'USER',
        'PWD'
    ];
    return importantVars.reduce((acc, varName) => {
        acc[varName] = process.env[varName] || 'Not set';
        return acc;
    }, {});
}
/**
 * Generate .env template
 */
async function generateEnvTemplate(projectPath) {
    try {
        const projectInfo = await (0,featureInstaller/* detectProjectStack */.$3)(projectPath);
        const envPath = external_path_.join(projectPath, '.env');
        let envContent = `# Environment Configuration
# Generated by Package Installer CLI

# Application
NODE_ENV=development
PORT=3000

`;
        // Add framework-specific variables
        if (projectInfo.framework === 'nextjs') {
            envContent += `# Next.js
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-here

`;
        }
        if (projectInfo.framework === 'nestjs') {
            envContent += `# NestJS
DATABASE_URL=postgresql://user:password@localhost:5432/mydb
JWT_SECRET=your-jwt-secret

`;
        }
        // Add common service variables
        envContent += `# Database
DATABASE_URL=your-database-url

# API Keys
API_KEY=your-api-key
SECRET_KEY=your-secret-key

# External Services
REDIS_URL=redis://localhost:6379
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# AWS (if using AWS features)
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_REGION=us-west-2

# Third-party APIs
STRIPE_SECRET_KEY=sk_test_...
STRIPE_PUBLISHABLE_KEY=pk_test_...
`;
        await fs_extra_lib.writeFile(envPath, envContent);
        console.log(source/* default */.Ay.green(`✅ Generated .env template at ${envPath}`));
    }
    catch (error) {
        console.error(source/* default */.Ay.red('❌ Failed to generate .env template:'), error);
    }
}
/**
 * Validate existing .env file
 */
async function validateEnvFile(projectPath) {
    const envPath = external_path_.join(projectPath, '.env');
    if (!await fs_extra_lib.pathExists(envPath)) {
        console.log(source/* default */.Ay.yellow('⚠️  No .env file found'));
        const { shouldCreate } = await lib["default"].prompt([
            {
                type: 'confirm',
                name: 'shouldCreate',
                message: 'Would you like to generate a .env.example template?',
                default: true
            }
        ]);
        if (shouldCreate) {
            await generateEnvTemplate(projectPath);
        }
        return;
    }
    try {
        const envContent = await fs_extra_lib.readFile(envPath, 'utf-8');
        const lines = envContent.split('\n').filter(line => line.trim() && !line.startsWith('#'));
        console.log(source/* default */.Ay.blue(`📋 Found ${lines.length} environment variables in .env`));
        // Check for common security issues
        const securityIssues = [];
        if (envContent.includes('password=password')) {
            securityIssues.push('Default password detected');
        }
        if (envContent.includes('secret=123')) {
            securityIssues.push('Weak secret detected');
        }
        if (securityIssues.length > 0) {
            console.log(source/* default */.Ay.red('🚨 Security issues found:'));
            securityIssues.forEach(issue => console.log(source/* default */.Ay.red(`  • ${issue}`)));
        }
        else {
            console.log(source/* default */.Ay.green('✅ No obvious security issues found'));
        }
    }
    catch (error) {
        console.error(source/* default */.Ay.red('❌ Failed to validate .env file:'), error);
    }
}
/**
 * Display help for environment command
 */
function showEnvironmentHelp() {
    const helpConfig = {
        commandName: 'Environment',
        emoji: '🌍',
        description: 'Analyze and manage your development environment.\nComprehensive environment analysis and management tools for development setup and configuration.',
        usage: [
            'env [options]',
            'environment [options]   # alias'
        ],
        options: [
            { flag: '--check', description: 'Check development tools and versions' },
            { flag: '--generate', description: 'Generate .env template for project' },
            { flag: '--validate', description: 'Validate existing .env file' },
            { flag: '--export', description: 'Export environment info to file' },
            { flag: '--system', description: 'Show system information only' }
        ],
        examples: [
            { command: 'env', description: 'Interactive environment analysis' },
            { command: 'env --check', description: 'Check development tools' },
            { command: 'env --generate', description: 'Generate .env template' },
            { command: 'env --validate', description: 'Validate .env file' },
            { command: 'env --system', description: 'Show system information only' },
            { command: 'environment --export', description: 'Export environment info to file' }
        ],
        additionalSections: [
            {
                title: 'Features',
                items: [
                    'Development tools version checking',
                    'Environment file generation and validation',
                    'System information analysis',
                    'Configuration management',
                    'Project environment setup'
                ]
            }
        ],
        tips: [
            'Use --generate to create .env templates for your projects',
            'Regular environment checks help maintain development consistency',
            'Validate .env files to catch configuration issues early'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
/**
 * Main environment command function
 */
async function environmentCommand(options = {}) {
    if (options.help || options['--help'] || options['-h']) {
        showEnvironmentHelp();
        return;
    }
    console.clear();
    const banner = (0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#ff6b6b', '#feca57'])('🌍 Environment Analysis') + '\n\n' +
        source/* default */.Ay.white('Analyzing your development environment...'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'yellow'
    });
    console.log(banner);
    const projectPath = process.cwd();
    try {
        // Handle specific options
        if (options.generate) {
            await generateEnvTemplate(projectPath);
            return;
        }
        if (options.validate) {
            await validateEnvFile(projectPath);
            return;
        }
        if (options.check) {
            await performEnvironmentCheck();
            return;
        }
        if (options.system) {
            env_displaySystemInfo();
            return;
        }
        if (options.export) {
            await exportEnvironmentInfo();
            return;
        }
        // Interactive menu
        const choices = [
            { name: '🔍 Check Development Tools', value: 'check' },
            { name: '💾 Generate .env Template', value: 'generate' },
            { name: '✅ Validate .env File', value: 'validate' },
            { name: '🖥️  Show System Information', value: 'system' },
            { name: '📄 Export Environment Info', value: 'export' }
        ];
        const { action } = await lib["default"].prompt([
            {
                type: 'list',
                name: 'action',
                message: 'What would you like to do?',
                choices,
                pageSize: 10
            }
        ]);
        switch (action) {
            case 'check':
                await performEnvironmentCheck();
                break;
            case 'generate':
                await generateEnvTemplate(projectPath);
                break;
            case 'validate':
                await validateEnvFile(projectPath);
                break;
            case 'system':
                env_displaySystemInfo();
                break;
            case 'export':
                await exportEnvironmentInfo();
                break;
        }
    }
    catch (error) {
        displayErrorMessage('Environment analysis failed', ['An error occurred while analyzing the environment', String(error)]);
    }
}
/**
 * Perform comprehensive environment check
 */
async function performEnvironmentCheck() {
    console.log(source/* default */.Ay.blue('\n🔍 Checking development tools...\n'));
    const tools = checkDevelopmentTools();
    const installed = tools.filter(tool => tool.installed);
    const missing = tools.filter(tool => !tool.installed);
    // Display installed tools
    if (installed.length > 0) {
        console.log(source/* default */.Ay.green('✅ Installed Tools:'));
        installed.forEach(tool => {
            const version = tool.version.length > 50 ? tool.version.substring(0, 50) + '...' : tool.version;
            console.log(source/* default */.Ay.white(`  ${tool.name}: `) + source/* default */.Ay.gray(version));
        });
    }
    // Display missing tools
    if (missing.length > 0) {
        console.log(source/* default */.Ay.yellow('\n⚠️  Missing Tools:'));
        missing.forEach(tool => {
            console.log(source/* default */.Ay.red(`  ${tool.name}: Not installed`));
        });
    }
    // Check environment variables
    console.log(source/* default */.Ay.blue('\n🔍 Checking environment variables...\n'));
    const envVars = checkEnvironmentVariables();
    Object.entries(envVars).forEach(([key, value]) => {
        const displayValue = value.length > 50 ? value.substring(0, 50) + '...' : value;
        console.log(source/* default */.Ay.white(`  ${key}: `) + source/* default */.Ay.gray(displayValue));
    });
}
/**
 * Display system information
 */
function env_displaySystemInfo() {
    console.log(source/* default */.Ay.blue('\n🖥️  System Information:\n'));
    const systemInfo = getSystemInfo();
    Object.entries(systemInfo).forEach(([key, value]) => {
        const displayKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
        console.log(source/* default */.Ay.white(`  ${displayKey}: `) + source/* default */.Ay.gray(value));
    });
}
/**
 * Export environment information to file
 */
async function exportEnvironmentInfo() {
    try {
        const timestamp = new Date().toISOString().split('T')[0];
        const filename = `environment-info-${timestamp}.json`;
        const info = {
            timestamp: new Date().toISOString(),
            system: getSystemInfo(),
            tools: checkDevelopmentTools(),
            environment: checkEnvironmentVariables()
        };
        await fs_extra_lib.writeJson(filename, info, { spaces: 2 });
        dashboard_displaySuccessMessage('Environment info exported', [`Saved to ${filename}`, 'File contains system, tools, and environment data']);
    }
    catch (error) {
        console.error(source/* default */.Ay.red('❌ Failed to export environment info:'), error);
    }
}
/**
 * Gather comprehensive environment information
 */
async function gatherEnvironmentInfo(options) {
    const envInfo = {
        system: {},
        nodejs: {},
        packageManagers: {},
        languages: {},
        tools: {},
        git: {},
        paths: {}
    };
    // System information
    envInfo.system = {
        platform: os.platform(),
        arch: os.arch(),
        release: os.release(),
        hostname: os.hostname(),
        uptime: os.uptime(),
        totalMemory: os.totalmem(),
        freeMemory: os.freemem(),
        cpus: os.cpus().length,
        homeDir: os.homedir(),
        tmpDir: os.tmpdir()
    };
    // Node.js information
    envInfo.nodejs = await checkNodejs();
    // Package managers
    envInfo.packageManagers = await checkPackageManagers();
    // Programming languages
    envInfo.languages = await checkLanguages();
    // Development tools
    envInfo.tools = await checkDevelopmentTools();
    // Git information
    envInfo.git = await checkGit();
    // Environment paths
    if (options.paths) {
        envInfo.paths = getEnvironmentPaths();
    }
    return envInfo;
}
/**
 * Check Node.js installation and details
 */
async function checkNodejs() {
    try {
        const version = process.version;
        const execPath = process.execPath;
        const platform = process.platform;
        const arch = process.arch;
        // Get npm version bundled with Node.js
        let npmVersion = 'Not found';
        try {
            npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
        }
        catch (error) {
            // npm not available
        }
        return {
            version,
            execPath,
            platform,
            arch,
            bundledNpm: npmVersion,
            available: true
        };
    }
    catch (error) {
        return { available: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
}
/**
 * Check package manager availability and versions
 */
async function checkPackageManagers() {
    const managers = ['npm', 'pnpm', 'yarn', 'bun'];
    const results = {};
    for (const manager of managers) {
        try {
            const version = execSync(`${manager} --version`, {
                encoding: 'utf8',
                timeout: 5000
            }).trim();
            let location = 'Unknown';
            try {
                location = execSync(`which ${manager}`, { encoding: 'utf8' }).trim();
            }
            catch (error) {
                // which command failed
            }
            results[manager] = {
                available: true,
                version,
                location
            };
        }
        catch (error) {
            results[manager] = {
                available: false,
                error: 'Not installed'
            };
        }
    }
    return results;
}
/**
 * Check programming language installations
 */
async function checkLanguages() {
    const languages = [
        { name: 'python', commands: ['python3 --version', 'python --version'] },
        { name: 'rust', commands: ['rustc --version'] },
        { name: 'go', commands: ['go version'] },
        { name: 'java', commands: ['java -version'] },
        { name: 'php', commands: ['php --version'] },
        { name: 'ruby', commands: ['ruby --version'] },
        { name: 'deno', commands: ['deno --version'] }
    ];
    const results = {};
    for (const lang of languages) {
        let found = false;
        for (const command of lang.commands) {
            try {
                const output = execSync(command, {
                    encoding: 'utf8',
                    timeout: 5000,
                    stdio: ['ignore', 'pipe', 'pipe']
                }).trim();
                results[lang.name] = {
                    available: true,
                    version: output.split('\n')[0],
                    command: command.split(' ')[0]
                };
                found = true;
                break;
            }
            catch (error) {
                // Try next command
            }
        }
        if (!found) {
            results[lang.name] = {
                available: false,
                error: 'Not installed'
            };
        }
    }
    return results;
}
/**
 * Check Git configuration
 */
async function checkGit() {
    try {
        const version = execSync('git --version', { encoding: 'utf8' }).trim();
        let userName = 'Not configured';
        let userEmail = 'Not configured';
        try {
            userName = execSync('git config --global user.name', { encoding: 'utf8' }).trim();
        }
        catch (error) {
            // Not configured
        }
        try {
            userEmail = execSync('git config --global user.email', { encoding: 'utf8' }).trim();
        }
        catch (error) {
            // Not configured
        }
        return {
            available: true,
            version,
            userName,
            userEmail
        };
    }
    catch (error) {
        return {
            available: false,
            error: 'Git not installed'
        };
    }
}
/**
 * Get environment paths
 */
function getEnvironmentPaths() {
    return {
        PATH: process.env.PATH?.split(path.delimiter) || [],
        NODE_PATH: process.env.NODE_PATH || 'Not set',
        NPM_CONFIG_PREFIX: process.env.NPM_CONFIG_PREFIX || 'Not set',
        CARGO_HOME: process.env.CARGO_HOME || 'Not set',
        GOPATH: process.env.GOPATH || 'Not set',
        PYTHONPATH: process.env.PYTHONPATH || 'Not set'
    };
}
/**
 * Display minimal environment information
 */
function displayMinimalEnvInfo(envInfo) {
    console.log(chalk.hex('#00d2d3')('💻 SYSTEM'));
    console.log(`${chalk.white('OS:')} ${envInfo.system.platform} ${envInfo.system.arch}`);
    console.log(`${chalk.white('Node.js:')} ${envInfo.nodejs.version || 'Not available'}`);
    const availableManagers = Object.entries(envInfo.packageManagers)
        .filter(([_, info]) => info.available)
        .map(([name, info]) => `${name}@${info.version}`)
        .join(', ');
    console.log(`${chalk.white('Package Managers:')} ${availableManagers || 'None'}`);
}
/**
 * Display full environment information
 */
function displayFullEnvInfo(envInfo, options) {
    const Table = require('cli-table3');
    // System Information
    console.log(chalk.hex('#00d2d3')('💻 SYSTEM INFORMATION\n'));
    const systemTable = new Table({
        head: [chalk.hex('#00d2d3')('Property'), chalk.hex('#10ac84')('Value')],
        colWidths: [20, 50],
        style: { head: [], border: ['cyan'] }
    });
    systemTable.push(['Platform', `${envInfo.system.platform} ${envInfo.system.arch}`], ['Release', envInfo.system.release], ['Hostname', envInfo.system.hostname], ['CPUs', envInfo.system.cpus], ['Memory', `${(envInfo.system.totalMemory / 1024 / 1024 / 1024).toFixed(1)} GB total`], ['Free Memory', `${(envInfo.system.freeMemory / 1024 / 1024 / 1024).toFixed(1)} GB`]);
    console.log(systemTable.toString());
    // Package Managers
    console.log(chalk.hex('#00d2d3')('\n📦 PACKAGE MANAGERS\n'));
    const pmTable = new Table({
        head: [chalk.hex('#00d2d3')('Manager'), chalk.hex('#10ac84')('Status'), chalk.hex('#ffa502')('Version')],
        colWidths: [15, 15, 30],
        style: { head: [], border: ['cyan'] }
    });
    Object.entries(envInfo.packageManagers).forEach(([name, info]) => {
        pmTable.push([
            name,
            info.available ? chalk.green('✓ Available') : chalk.red('✗ Not found'),
            info.available ? info.version : info.error
        ]);
    });
    console.log(pmTable.toString());
    // Programming Languages
    console.log(chalk.hex('#00d2d3')('\n🔧 PROGRAMMING LANGUAGES\n'));
    const langTable = new Table({
        head: [chalk.hex('#00d2d3')('Language'), chalk.hex('#10ac84')('Status'), chalk.hex('#ffa502')('Version')],
        colWidths: [15, 15, 40],
        style: { head: [], border: ['cyan'] }
    });
    Object.entries(envInfo.languages).forEach(([name, info]) => {
        langTable.push([
            name.charAt(0).toUpperCase() + name.slice(1),
            info.available ? chalk.green('✓ Available') : chalk.red('✗ Not found'),
            info.available ? info.version : info.error
        ]);
    });
    console.log(langTable.toString());
    // Git Configuration
    if (envInfo.git.available) {
        console.log(chalk.hex('#00d2d3')('\n🔀 GIT CONFIGURATION\n'));
        console.log(`${chalk.white('Version:')} ${envInfo.git.version}`);
        console.log(`${chalk.white('User Name:')} ${envInfo.git.userName}`);
        console.log(`${chalk.white('User Email:')} ${envInfo.git.userEmail}`);
    }
}
/**
 * Perform health check and provide recommendations
 */
function performHealthCheck(envInfo) {
    console.log(chalk.hex('#ffa502')('\n🏥 HEALTH CHECK RESULTS\n'));
    const recommendations = [];
    // Check Node.js version
    if (envInfo.nodejs.available) {
        const version = parseInt(envInfo.nodejs.version.replace('v', ''));
        if (version < 18) {
            recommendations.push('Consider upgrading Node.js to version 18+ for better performance and security');
        }
    }
    else {
        recommendations.push('Node.js is not available - required for JavaScript/TypeScript development');
    }
    // Check package managers
    const availableManagers = Object.values(envInfo.packageManagers).filter((pm) => pm.available).length;
    if (availableManagers === 0) {
        recommendations.push('No package managers found - install npm, pnpm, or yarn');
    }
    // Check Git configuration
    if (envInfo.git.available) {
        if (envInfo.git.userName === 'Not configured') {
            recommendations.push('Configure Git username: git config --global user.name "Your Name"');
        }
        if (envInfo.git.userEmail === 'Not configured') {
            recommendations.push('Configure Git email: git config --global user.email "your.email@example.com"');
        }
    }
    else {
        recommendations.push('Git is not installed - essential for version control');
    }
    if (recommendations.length === 0) {
        console.log(chalk.green('✅ Environment looks healthy!'));
    }
    else {
        console.log(chalk.yellow('⚠️  Recommendations:\n'));
        recommendations.forEach((rec, index) => {
            console.log(chalk.gray(`${index + 1}. ${rec}`));
        });
    }
}

;// ./dist/commands/doctor.js
/**
 * Doctor command - Diagnose and fix common development issues
 */









/**
 * Check if command exists
 */
function doctor_commandExists(command) {
    try {
        (0,external_child_process_.execSync)(`which ${command}`, { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
/**
 * Check Node.js and npm installation
 */
async function checkNodeSetup() {
    const issues = [];
    // Check Node.js
    if (!doctor_commandExists('node')) {
        issues.push({
            type: 'error',
            category: 'Node.js',
            title: 'Node.js not installed',
            description: 'Node.js is required for JavaScript/TypeScript development',
            solution: 'Install Node.js from https://nodejs.org/',
            autoFixable: false
        });
    }
    else {
        try {
            const nodeVersion = (0,external_child_process_.execSync)('node --version', { encoding: 'utf8' }).trim();
            const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
            if (majorVersion < 16) {
                issues.push({
                    type: 'warning',
                    category: 'Node.js',
                    title: 'Outdated Node.js version',
                    description: `Node.js ${nodeVersion} is outdated. Recommended: v18 or higher`,
                    solution: 'Update Node.js to the latest LTS version',
                    autoFixable: false
                });
            }
        }
        catch (error) {
            issues.push({
                type: 'error',
                category: 'Node.js',
                title: 'Node.js version check failed',
                description: 'Could not determine Node.js version',
                autoFixable: false
            });
        }
    }
    // Check npm
    if (!doctor_commandExists('npm')) {
        issues.push({
            type: 'error',
            category: 'Package Manager',
            title: 'npm not installed',
            description: 'npm is required for package management',
            solution: 'npm is typically installed with Node.js',
            autoFixable: false
        });
    }
    return issues;
}
/**
 * Check project dependencies
 */
async function checkProjectDependencies(projectPath) {
    const issues = [];
    const packageJsonPath = external_path_.join(projectPath, 'package.json');
    if (!await fs_extra_lib.pathExists(packageJsonPath)) {
        issues.push({
            type: 'info',
            category: 'Dependencies',
            title: 'No package.json found',
            description: 'This directory does not appear to be a Node.js project',
            autoFixable: false
        });
        return issues;
    }
    try {
        const packageJson = await fs_extra_lib.readJson(packageJsonPath);
        const nodeModulesPath = external_path_.join(projectPath, 'node_modules');
        // Check if node_modules exists
        if (!await fs_extra_lib.pathExists(nodeModulesPath)) {
            issues.push({
                type: 'warning',
                category: 'Dependencies',
                title: 'Dependencies not installed',
                description: 'node_modules directory is missing',
                solution: 'Run npm install to install dependencies',
                autoFixable: true
            });
        }
        // Check for vulnerabilities (simplified check)
        try {
            const auditResult = (0,external_child_process_.execSync)('npm audit --json', {
                cwd: projectPath,
                encoding: 'utf8',
                stdio: 'pipe'
            });
            const audit = JSON.parse(auditResult);
            if (audit.metadata && audit.metadata.vulnerabilities) {
                const vulns = audit.metadata.vulnerabilities;
                const totalVulns = Object.values(vulns).reduce((sum, count) => sum + count, 0);
                if (totalVulns > 0) {
                    issues.push({
                        type: 'warning',
                        category: 'Security',
                        title: `${totalVulns} security vulnerabilities found`,
                        description: 'Dependencies have known security vulnerabilities',
                        solution: 'Run npm audit fix to fix automatically, or npm audit for details',
                        autoFixable: true
                    });
                }
            }
        }
        catch (error) {
            // npm audit might fail, but that's okay
        }
    }
    catch (error) {
        issues.push({
            type: 'error',
            category: 'Dependencies',
            title: 'Invalid package.json',
            description: 'Could not parse package.json file',
            solution: 'Fix syntax errors in package.json',
            autoFixable: false
        });
    }
    return issues;
}
/**
 * Auto-fix common issues
 */
async function autoFixIssue(issue, projectPath) {
    const spinner = (0,node_modules_ora/* default */.Ay)(`Fixing: ${issue.title}`).start();
    try {
        switch (issue.category) {
            case 'Dependencies':
                if (issue.title.includes('not installed')) {
                    (0,external_child_process_.execSync)('npm install', { cwd: projectPath, stdio: 'ignore' });
                    spinner.succeed(`Fixed: ${issue.title}`);
                    return true;
                }
                break;
            case 'Security':
                if (issue.title.includes('vulnerabilities')) {
                    (0,external_child_process_.execSync)('npm audit fix', { cwd: projectPath, stdio: 'ignore' });
                    spinner.succeed(`Fixed: ${issue.title}`);
                    return true;
                }
                break;
            default:
                spinner.fail(`Cannot auto-fix: ${issue.title}`);
                return false;
        }
    }
    catch (error) {
        spinner.fail(`Failed to fix: ${issue.title}`);
        return false;
    }
    spinner.fail(`No auto-fix available for: ${issue.title}`);
    return false;
}
/**
 * Display help for doctor command
 */
function showDoctorHelp() {
    const helpConfig = {
        commandName: 'doctor',
        emoji: '🩺',
        description: 'Diagnose and fix common development issues.\nComprehensive health check for your development environment and project setup.',
        usage: ['pi doctor [options]', 'pi diagnose [options]  # (alias)'],
        options: [
            { flag: '--fix', description: 'Automatically fix detected issues' },
            { flag: '--node', description: 'Check Node.js and npm setup only' },
            { flag: '--deps', description: 'Check project dependencies only' },
            { flag: '--tools', description: 'Check development tools only' },
            { flag: '--verbose', description: 'Show detailed diagnostic information' }
        ],
        examples: [
            { command: 'pi doctor', description: 'Complete health check' },
            { command: 'pi doctor --fix', description: 'Check and auto-fix issues' },
            { command: 'pi doctor --deps', description: 'Check dependencies only' },
            { command: 'pi doctor --node --verbose', description: 'Detailed Node.js check' }
        ],
        tips: [
            'Use --fix to automatically resolve common issues',
            'Run with --verbose for detailed diagnostic information',
            '\'pi diagnose\' is an alias for \'pi doctor\''
        ]
    };
    console.clear();
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
/**
 * Main doctor command function
 */
async function doctorCommand(options = {}) {
    if (options.help || options['--help'] || options['-h']) {
        showDoctorHelp();
        return;
    }
    console.clear();
    const banner = (0,node_modules_boxen/* default */.A)((0,dist/* default */.Ay)(['#ff6b6b', '#4ecdc4'])('🩺 Development Doctor') + '\n\n' +
        source/* default */.Ay.white('Running comprehensive health checks...'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'green'
    });
    console.log(banner);
    const projectPath = process.cwd();
    try {
        // Handle specific checks
        if (options.node) {
            await performNodeCheck();
            return;
        }
        if (options.deps) {
            await performDependencyCheck(projectPath);
            return;
        }
        if (options.tools) {
            await performToolsCheck();
            return;
        }
        // Run comprehensive diagnostics
        const allIssues = await runComprehensiveDiagnostics(projectPath);
        if (allIssues.length === 0) {
            dashboard_displaySuccessMessage('Perfect health! 🎉', ['No issues detected in your development environment']);
            return;
        }
        // Display issues
        displayDiagnosticResults(allIssues);
        // Handle auto-fix
        if (options.fix) {
            await performAutoFix(allIssues, projectPath);
        }
        else {
            const autoFixableCount = allIssues.filter(issue => issue.autoFixable).length;
            if (autoFixableCount > 0) {
                console.log(source/* default */.Ay.yellow(`\n💡 ${autoFixableCount} issues can be auto-fixed. Run with --fix to resolve them.`));
            }
        }
    }
    catch (error) {
        displayErrorMessage('Diagnostic failed', ['An error occurred during health check', String(error)]);
    }
}
/**
 * Run comprehensive diagnostics
 */
async function runComprehensiveDiagnostics(projectPath) {
    const spinner = (0,node_modules_ora/* default */.Ay)('Running health checks...').start();
    const allIssues = [];
    try {
        spinner.text = 'Checking Node.js setup...';
        const nodeIssues = await checkNodeSetup();
        allIssues.push(...nodeIssues);
        spinner.text = 'Checking project dependencies...';
        const depIssues = await checkProjectDependencies(projectPath);
        allIssues.push(...depIssues);
        spinner.text = 'Checking development tools...';
        const toolIssues = await doctor_checkDevelopmentTools();
        allIssues.push(...toolIssues);
        spinner.succeed(`Health check completed - ${allIssues.length} issues found`);
    }
    catch (error) {
        spinner.fail('Health check failed');
        throw error;
    }
    return allIssues;
}
/**
 * Perform Node.js specific check
 */
async function performNodeCheck() {
    console.log(source/* default */.Ay.blue('\n🔍 Checking Node.js setup...\n'));
    const issues = await checkNodeSetup();
    if (issues.length === 0) {
        console.log(source/* default */.Ay.green('✅ Node.js setup is healthy'));
    }
    else {
        displayDiagnosticResults(issues);
    }
}
/**
 * Perform dependency specific check
 */
async function performDependencyCheck(projectPath) {
    console.log(source/* default */.Ay.blue('\n🔍 Checking project dependencies...\n'));
    const issues = await checkProjectDependencies(projectPath);
    if (issues.length === 0) {
        console.log(source/* default */.Ay.green('✅ Dependencies are healthy'));
    }
    else {
        displayDiagnosticResults(issues);
    }
}
/**
 * Perform tools specific check
 */
async function performToolsCheck() {
    console.log(source/* default */.Ay.blue('\n🔍 Checking development tools...\n'));
    const issues = await doctor_checkDevelopmentTools();
    if (issues.length === 0) {
        console.log(source/* default */.Ay.green('✅ Development tools are healthy'));
    }
    else {
        displayDiagnosticResults(issues);
    }
}
/**
 * Display diagnostic results
 */
function displayDiagnosticResults(issues) {
    const errors = issues.filter(issue => issue.type === 'error');
    const warnings = issues.filter(issue => issue.type === 'warning');
    const info = issues.filter(issue => issue.type === 'info');
    if (errors.length > 0) {
        console.log(source/* default */.Ay.red('\n❌ Errors:'));
        errors.forEach(issue => {
            console.log(source/* default */.Ay.red(`  • ${issue.title}`));
            console.log(source/* default */.Ay.gray(`    ${issue.description}`));
            if (issue.solution) {
                console.log(source/* default */.Ay.blue(`    💡 ${issue.solution}`));
            }
        });
    }
    if (warnings.length > 0) {
        console.log(source/* default */.Ay.yellow('\n⚠️  Warnings:'));
        warnings.forEach(issue => {
            console.log(source/* default */.Ay.yellow(`  • ${issue.title}`));
            console.log(source/* default */.Ay.gray(`    ${issue.description}`));
            if (issue.solution) {
                console.log(source/* default */.Ay.blue(`    💡 ${issue.solution}`));
            }
        });
    }
    if (info.length > 0) {
        console.log(source/* default */.Ay.blue('\nℹ️  Information:'));
        info.forEach(issue => {
            console.log(source/* default */.Ay.blue(`  • ${issue.title}`));
            console.log(source/* default */.Ay.gray(`    ${issue.description}`));
        });
    }
}
/**
 * Perform auto-fix for fixable issues
 */
async function performAutoFix(issues, projectPath) {
    const fixableIssues = issues.filter(issue => issue.autoFixable);
    if (fixableIssues.length === 0) {
        console.log(source/* default */.Ay.yellow('\n⚠️  No auto-fixable issues found'));
        return;
    }
    console.log(source/* default */.Ay.blue(`\n🔧 Attempting to fix ${fixableIssues.length} issues...\n`));
    let fixedCount = 0;
    for (const issue of fixableIssues) {
        const fixed = await autoFixIssue(issue, projectPath);
        if (fixed) {
            fixedCount++;
        }
    }
    if (fixedCount > 0) {
        dashboard_displaySuccessMessage(`Fixed ${fixedCount} issues!`, ['Your development environment is now healthier']);
    }
}
/**
 * Check development tools
 */
async function doctor_checkDevelopmentTools() {
    const issues = [];
    const tools = [
        { command: 'git', name: 'Git', required: true },
        { command: 'code', name: 'VS Code', required: false },
        { command: 'docker', name: 'Docker', required: false }
    ];
    for (const tool of tools) {
        if (!doctor_commandExists(tool.command)) {
            issues.push({
                type: tool.required ? 'error' : 'info',
                category: 'Development Tools',
                title: `${tool.name} not installed`,
                description: `${tool.name} is ${tool.required ? 'required' : 'recommended'} for development`,
                solution: `Install ${tool.name}`,
                autoFixable: false
            });
        }
    }
    return issues;
}
/**
 * Run comprehensive diagnostics
 */
async function runDiagnostics(options) {
    const issues = [];
    const projectPath = process.cwd();
    // Check Node.js and npm issues
    if (!options.checkDeps && !options.checkConfig && !options.checkTools) {
        issues.push(...await checkNodejsIssues());
        issues.push(...await checkDependencyIssues(projectPath));
        issues.push(...await checkConfigurationIssues(projectPath));
        issues.push(...await checkToolsIssues());
    }
    else {
        if (options.checkDeps) {
            issues.push(...await checkDependencyIssues(projectPath));
        }
        if (options.checkConfig) {
            issues.push(...await checkConfigurationIssues(projectPath));
        }
        if (options.checkTools) {
            issues.push(...await checkToolsIssues());
        }
    }
    return issues;
}
/**
 * Check Node.js and npm related issues
 */
async function checkNodejsIssues() {
    const issues = [];
    try {
        // Check Node.js version
        const nodeVersion = process.version;
        const majorVersion = parseInt(nodeVersion.replace('v', '').split('.')[0]);
        if (majorVersion < 16) {
            issues.push({
                type: 'warning',
                category: 'nodejs',
                title: 'Outdated Node.js version',
                description: `Node.js ${nodeVersion} is outdated. Consider upgrading to v18+`,
                fixable: false,
                recommendation: 'Visit https://nodejs.org to download the latest version'
            });
        }
        // Check npm configuration
        try {
            const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
            const npmMajor = parseInt(npmVersion.split('.')[0]);
            if (npmMajor < 8) {
                issues.push({
                    type: 'info',
                    category: 'npm',
                    title: 'Outdated npm version',
                    description: `npm ${npmVersion} could be updated`,
                    fixable: true,
                    fix: 'npm install -g npm@latest'
                });
            }
        }
        catch (error) {
            issues.push({
                type: 'error',
                category: 'npm',
                title: 'npm not available',
                description: 'npm is not installed or not in PATH',
                fixable: false,
                recommendation: 'Reinstall Node.js from https://nodejs.org'
            });
        }
        // Check npm cache issues
        try {
            const cacheInfo = execSync('npm config get cache', { encoding: 'utf8' }).trim();
            if (!await fs.pathExists(cacheInfo)) {
                issues.push({
                    type: 'warning',
                    category: 'npm',
                    title: 'npm cache directory missing',
                    description: 'npm cache directory does not exist',
                    fixable: true,
                    fix: 'npm cache clean --force'
                });
            }
        }
        catch (error) {
            // Ignore cache check errors
        }
    }
    catch (error) {
        issues.push({
            type: 'error',
            category: 'nodejs',
            title: 'Node.js not available',
            description: 'Node.js is not installed or not in PATH',
            fixable: false,
            recommendation: 'Install Node.js from https://nodejs.org'
        });
    }
    return issues;
}
/**
 * Check dependency-related issues
 */
async function checkDependencyIssues(projectPath) {
    const issues = [];
    // Check for package.json
    const packageJsonPath = path.join(projectPath, 'package.json');
    if (await fs.pathExists(packageJsonPath)) {
        try {
            const packageJson = await fs.readJson(packageJsonPath);
            // Check for missing node_modules
            const nodeModulesPath = path.join(projectPath, 'node_modules');
            if (!await fs.pathExists(nodeModulesPath)) {
                issues.push({
                    type: 'error',
                    category: 'dependencies',
                    title: 'Missing node_modules',
                    description: 'Dependencies are not installed',
                    fixable: true,
                    fix: 'npm install'
                });
            }
            else {
                // Check for outdated lock file
                const lockFiles = ['package-lock.json', 'yarn.lock', 'pnpm-lock.yaml'];
                let hasLockFile = false;
                for (const lockFile of lockFiles) {
                    const lockPath = path.join(projectPath, lockFile);
                    if (await fs.pathExists(lockPath)) {
                        hasLockFile = true;
                        // Check if lock file is older than package.json
                        const packageStat = await fs.stat(packageJsonPath);
                        const lockStat = await fs.stat(lockPath);
                        if (lockStat.mtime < packageStat.mtime) {
                            issues.push({
                                type: 'warning',
                                category: 'dependencies',
                                title: 'Outdated lock file',
                                description: `${lockFile} is older than package.json`,
                                fixable: true,
                                fix: 'npm install'
                            });
                        }
                        break;
                    }
                }
                if (!hasLockFile) {
                    issues.push({
                        type: 'info',
                        category: 'dependencies',
                        title: 'No lock file found',
                        description: 'Consider using a lock file for reproducible builds',
                        fixable: true,
                        fix: 'npm install'
                    });
                }
            }
            // Check for security vulnerabilities
            try {
                const auditResult = execSync('npm audit --audit-level moderate', {
                    encoding: 'utf8',
                    stdio: 'pipe'
                });
                if (auditResult.includes('vulnerabilities')) {
                    issues.push({
                        type: 'warning',
                        category: 'security',
                        title: 'Security vulnerabilities detected',
                        description: 'Some dependencies have known security issues',
                        fixable: true,
                        fix: 'npm audit fix'
                    });
                }
            }
            catch (error) {
                if (error.stdout && error.stdout.includes('vulnerabilities')) {
                    issues.push({
                        type: 'warning',
                        category: 'security',
                        title: 'Security vulnerabilities detected',
                        description: 'Some dependencies have known security issues',
                        fixable: true,
                        fix: 'npm audit fix'
                    });
                }
            }
            // Check for duplicate dependencies
            if (packageJson.dependencies && packageJson.devDependencies) {
                const duplicates = Object.keys(packageJson.dependencies)
                    .filter(dep => packageJson.devDependencies[dep]);
                if (duplicates.length > 0) {
                    issues.push({
                        type: 'warning',
                        category: 'dependencies',
                        title: 'Duplicate dependencies',
                        description: `Found in both dependencies and devDependencies: ${duplicates.join(', ')}`,
                        fixable: false,
                        recommendation: 'Remove duplicates from one of the sections'
                    });
                }
            }
        }
        catch (error) {
            issues.push({
                type: 'error',
                category: 'dependencies',
                title: 'Invalid package.json',
                description: 'package.json file is corrupted or invalid',
                fixable: false,
                recommendation: 'Check package.json syntax'
            });
        }
    }
    return issues;
}
/**
 * Check configuration file issues
 */
async function checkConfigurationIssues(projectPath) {
    const issues = [];
    // Check for .gitignore
    const gitignorePath = path.join(projectPath, '.gitignore');
    if (!await fs.pathExists(gitignorePath)) {
        issues.push({
            type: 'info',
            category: 'configuration',
            title: 'Missing .gitignore',
            description: 'No .gitignore file found',
            fixable: true,
            fix: 'create-gitignore'
        });
    }
    else {
        // Check if .gitignore includes node_modules
        const gitignoreContent = await fs.readFile(gitignorePath, 'utf-8');
        if (!gitignoreContent.includes('node_modules')) {
            issues.push({
                type: 'warning',
                category: 'configuration',
                title: 'Incomplete .gitignore',
                description: '.gitignore should include node_modules',
                fixable: true,
                fix: 'update-gitignore'
            });
        }
    }
    // Check for README.md
    const readmePath = path.join(projectPath, 'README.md');
    if (!await fs.pathExists(readmePath)) {
        issues.push({
            type: 'info',
            category: 'documentation',
            title: 'Missing README.md',
            description: 'No README.md file found',
            fixable: true,
            fix: 'create-readme'
        });
    }
    // Check TypeScript configuration
    const tsconfigPath = path.join(projectPath, 'tsconfig.json');
    if (await fs.pathExists(tsconfigPath)) {
        try {
            const tsconfig = await fs.readJson(tsconfigPath);
            if (!tsconfig.compilerOptions) {
                issues.push({
                    type: 'warning',
                    category: 'configuration',
                    title: 'Invalid TypeScript config',
                    description: 'tsconfig.json missing compilerOptions',
                    fixable: false,
                    recommendation: 'Add compilerOptions to tsconfig.json'
                });
            }
        }
        catch (error) {
            issues.push({
                type: 'error',
                category: 'configuration',
                title: 'Invalid tsconfig.json',
                description: 'TypeScript configuration file is invalid',
                fixable: false,
                recommendation: 'Fix tsconfig.json syntax'
            });
        }
    }
    return issues;
}
/**
 * Check development tools issues
 */
async function checkToolsIssues() {
    const issues = [];
    // Check Git installation and configuration
    try {
        execSync('git --version', { stdio: 'ignore' });
        // Check Git user configuration
        try {
            execSync('git config user.name', { stdio: 'ignore' });
        }
        catch (error) {
            issues.push({
                type: 'warning',
                category: 'git',
                title: 'Git user name not configured',
                description: 'Git user.name is not set',
                fixable: false,
                recommendation: 'Run: git config --global user.name "Your Name"'
            });
        }
        try {
            execSync('git config user.email', { stdio: 'ignore' });
        }
        catch (error) {
            issues.push({
                type: 'warning',
                category: 'git',
                title: 'Git email not configured',
                description: 'Git user.email is not set',
                fixable: false,
                recommendation: 'Run: git config --global user.email "your.email@example.com"'
            });
        }
    }
    catch (error) {
        issues.push({
            type: 'error',
            category: 'git',
            title: 'Git not installed',
            description: 'Git is required for version control',
            fixable: false,
            recommendation: 'Install Git from https://git-scm.com'
        });
    }
    return issues;
}
/**
 * Display detected issues
 */
function displayIssues(issues) {
    const Table = require('cli-table3');
    const table = new Table({
        head: [
            chalk.hex('#00d2d3')('Type'),
            chalk.hex('#10ac84')('Category'),
            chalk.hex('#ffa502')('Issue'),
            chalk.hex('#9c88ff')('Fixable')
        ],
        colWidths: [10, 15, 45, 10],
        style: { head: [], border: ['cyan'] }
    });
    issues.forEach(issue => {
        const typeColor = issue.type === 'error' ? chalk.red :
            issue.type === 'warning' ? chalk.yellow : chalk.blue;
        table.push([
            typeColor(issue.type.toUpperCase()),
            chalk.white(issue.category),
            `${chalk.white(issue.title)}\n${chalk.gray(issue.description)}`,
            issue.fixable ? chalk.green('✓') : chalk.red('✗')
        ]);
    });
    console.log(chalk.hex('#ffa502')('\n🚨 DETECTED ISSUES\n'));
    console.log(table.toString());
    // Show recommendations for non-fixable issues
    const recommendations = issues
        .filter(issue => !issue.fixable && issue.recommendation)
        .map(issue => `${issue.title}: ${issue.recommendation}`);
    if (recommendations.length > 0) {
        console.log(chalk.hex('#00d2d3')('\n💡 MANUAL FIXES REQUIRED:\n'));
        recommendations.forEach((rec, index) => {
            console.log(chalk.gray(`${index + 1}. ${rec}`));
        });
    }
}
/**
 * Attempt to fix issues automatically
 */
async function attemptFixes(issues) {
    const fixableIssues = issues.filter(issue => issue.fixable);
    if (fixableIssues.length === 0) {
        console.log(chalk.yellow('\n⚠️ No automatically fixable issues found'));
        return;
    }
    console.log(chalk.hex('#00d2d3')('\n🔧 ATTEMPTING FIXES...\n'));
    for (const issue of fixableIssues) {
        const spinner = ora(`Fixing: ${issue.title}`).start();
        try {
            await applyFix(issue.fix);
            spinner.succeed(chalk.green(`Fixed: ${issue.title}`));
        }
        catch (error) {
            spinner.fail(chalk.red(`Failed to fix: ${issue.title} - ${error.message}`));
        }
    }
    displaySuccessMessage('Automatic fixes completed!', ['Some issues may require manual intervention']);
}
/**
 * Apply a specific fix
 */
async function applyFix(fixCommand) {
    switch (fixCommand) {
        case 'npm install':
            execSync('npm install', { stdio: 'ignore' });
            break;
        case 'npm install -g npm@latest':
            execSync('npm install -g npm@latest', { stdio: 'ignore' });
            break;
        case 'npm cache clean --force':
            execSync('npm cache clean --force', { stdio: 'ignore' });
            break;
        case 'npm audit fix':
            execSync('npm audit fix', { stdio: 'ignore' });
            break;
        case 'create-gitignore':
            await createBasicGitignore();
            break;
        case 'update-gitignore':
            await updateGitignore();
            break;
        case 'create-readme':
            await createBasicReadme();
            break;
        default:
            throw new Error(`Unknown fix command: ${fixCommand}`);
    }
}
/**
 * Create a basic .gitignore file
 */
async function createBasicGitignore() {
    const gitignoreContent = `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
/dist
/build

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
`;
    await fs.writeFile('.gitignore', gitignoreContent);
}
/**
 * Update existing .gitignore file
 */
async function updateGitignore() {
    let gitignoreContent = await fs.readFile('.gitignore', 'utf-8');
    if (!gitignoreContent.includes('node_modules')) {
        gitignoreContent += '\n# Dependencies\nnode_modules/\n';
    }
    await fs.writeFile('.gitignore', gitignoreContent);
}
/**
 * Create a basic README.md file
 */
async function createBasicReadme() {
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    let projectName = path.basename(process.cwd());
    if (await fs.pathExists(packageJsonPath)) {
        try {
            const packageJson = await fs.readJson(packageJsonPath);
            projectName = packageJson.name || projectName;
        }
        catch (error) {
            // Use directory name
        }
    }
    const readmeContent = `# ${projectName}

A new project created with Package Installer CLI.

## Installation

\`\`\`bash
npm install
\`\`\`

## Usage

\`\`\`bash
npm start
\`\`\`

## Development

\`\`\`bash
npm run dev
\`\`\`

## License

MIT
`;
    await fs.writeFile('README.md', readmeContent);
}

;// ./dist/email-templates/styles.js
/**
 * Common CSS styles for all email templates
 */
const EMAIL_CSS = `
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f8f9fa;
    }
    .email-container {
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }
    .header h1 {
      margin: 0;
      font-size: 28px;
      font-weight: 600;
    }
    .header .emoji {
      font-size: 48px;
      display: block;
      margin-bottom: 10px;
    }
    .content {
      padding: 30px;
    }
    .section {
      margin-bottom: 25px;
      padding: 20px;
      background: #f8f9fa;
      border-radius: 8px;
      border-left: 4px solid #667eea;
    }
    .section h3 {
      margin: 0 0 15px 0;
      color: #667eea;
      font-size: 18px;
      font-weight: 600;
    }
    .section p {
      margin: 0;
      white-space: pre-wrap;
    }
    .priority-high {
      border-left-color: #e74c3c;
    }
    .priority-high h3 {
      color: #e74c3c;
    }
    .priority-critical {
      border-left-color: #c0392b;
      background: #fdf2f2;
    }
    .priority-critical h3 {
      color: #c0392b;
    }
    .system-info {
      background: #e8f4f8;
      border: 1px solid #bee5eb;
      border-radius: 8px;
      padding: 15px;
      margin: 20px 0;
      font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
      font-size: 13px;
      color: #495057;
    }
    .steps-list {
      background: white;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      padding: 15px;
      margin: 10px 0;
    }
    .steps-list ol {
      margin: 0;
      padding-left: 20px;
    }
    .steps-list li {
      margin: 8px 0;
      padding: 5px 0;
    }
    .features-list {
      background: white;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      padding: 15px;
      margin: 10px 0;
    }
    .features-list ul {
      margin: 0;
      padding-left: 20px;
    }
    .features-list li {
      margin: 8px 0;
      padding: 5px 0;
    }
    .footer {
      background: #495057;
      color: white;
      padding: 20px 30px;
      text-align: center;
      font-size: 14px;
    }
    .priority-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
      margin-left: 10px;
    }
    .priority-low {
      background: #d1ecf1;
      color: #0c5460;
    }
    .priority-medium {
      background: #fff3cd;
      color: #856404;
    }
    .priority-high-badge {
      background: #f8d7da;
      color: #721c24;
    }
    .priority-critical-badge {
      background: #f5c6cb;
      color: #491217;
    }
    .contact-info {
      background: #e8f5e8;
      border: 1px solid #c3e6cb;
      border-radius: 6px;
      padding: 15px;
      margin: 15px 0;
    }
    .timestamp {
      color: #6c757d;
      font-size: 13px;
      font-style: italic;
    }
    .test-success {
      background: #d4edda;
      border: 1px solid #c3e6cb;
      color: #155724;
      padding: 15px;
      border-radius: 8px;
      margin: 20px 0;
      text-align: center;
      font-weight: 600;
    }
    .header.test {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    }
  </style>
`;

;// ./dist/email-templates/testEmail.js

function generateTestEmailTemplate(systemInfo) {
    return {
        subject: `[Package Installer CLI] 🧪 Test Email - ${systemInfo.timestamp}`,
        htmlBody: `
      ${EMAIL_CSS}
      <body>
        <div class="email-container">
          <div class="header test">
            <span class="emoji">🧪</span>
            <h1>Email Test</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Package Installer CLI</p>
          </div>
          
          <div class="content">
            <div class="test-success">
              ✅ Email functionality is working correctly!
            </div>
            
            <p>This is a test email from Package Installer CLI to verify that the email system is properly configured and working.</p>
            
            <div class="system-info">
              <strong>System Information:</strong><br>
              - OS: ${systemInfo.platform} (${systemInfo.arch})<br>
              - Node.js: ${systemInfo.nodeVersion}<br>
              - CLI Version: ${systemInfo.cliVersion}<br>
              - Working Directory: ${systemInfo.workingDirectory}
            </div>
            
            <p>If you receive this email with proper formatting, both HTML and plain text email delivery are functioning correctly.</p>
          </div>
          
          <div class="footer">
            <div class="timestamp">Test completed at: ${systemInfo.timestamp}</div>
            <p style="margin: 10px 0 0 0;">Package Installer CLI Email System 📧</p>
          </div>
        </div>
      </body>
    `,
        plainBody: `This is a test email from Package Installer CLI.

✅ EMAIL TEST SUCCESSFUL ✅

If you receive this email, the email functionality is working correctly!

System Information:
- OS: ${systemInfo.platform} (${systemInfo.arch})
- Node.js: ${systemInfo.nodeVersion}
- CLI Version: ${systemInfo.cliVersion}
- Working Directory: ${systemInfo.workingDirectory}

Test completed at: ${systemInfo.timestamp}

Package Installer CLI Email System`
    };
}

;// ./dist/email-templates/collectors/common.js

/**
 * Collect user contact information (optional)
 */
async function collectContactInfo() {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'name',
            message: 'Your name (optional):',
        },
        {
            type: 'input',
            name: 'email',
            message: 'Your email (optional, for follow-up):',
            validate: (input) => {
                if (!input)
                    return true; // Optional field
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(input) || 'Please enter a valid email address';
            }
        }
    ]);
    return answers;
}
/**
 * Collect quick feedback (minimal prompts for fast feedback)
 */
async function collectQuickFeedback(category) {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'title',
            message: `Brief ${category} summary:`,
            validate: (input) => input.length > 0 || 'Summary is required'
        },
        {
            type: 'input',
            name: 'description',
            message: 'Detailed description:',
            validate: (input) => input.length > 10 || 'Please provide more details (min 10 characters)'
        },
        {
            type: 'input',
            name: 'email',
            message: 'Your email (optional, for follow-up):',
            validate: (input) => {
                if (!input)
                    return true;
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(input) || 'Please enter a valid email address';
            }
        }
    ]);
    return answers;
}

;// ./dist/email-templates/collectors/bugReport.js

/**
 * Collect bug report information from user
 */
async function collectBugReportData() {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'title',
            message: 'Bug title (brief description):',
            validate: (input) => input.length > 0 || 'Title is required'
        },
        {
            type: 'input',
            name: 'description',
            message: 'Detailed description of the bug:',
            validate: (input) => input.length > 10 || 'Please provide a detailed description (min 10 characters)'
        },
        {
            type: 'input',
            name: 'steps',
            message: 'Steps to reproduce (optional, use | to separate steps):'
        },
        {
            type: 'input',
            name: 'expected',
            message: 'What did you expect to happen? (optional):'
        },
        {
            type: 'input',
            name: 'actual',
            message: 'What actually happened? (optional):'
        },
        {
            type: 'input',
            name: 'additional',
            message: 'Any additional information? (optional):'
        }
    ]);
    return answers;
}

;// ./dist/email-templates/collectors/featureRequest.js

/**
 * Collect feature request information from user
 */
async function collectFeatureRequestData() {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'title',
            message: 'Feature title:',
            validate: (input) => input.length > 0 || 'Title is required'
        },
        {
            type: 'input',
            name: 'description',
            message: 'Detailed description of the feature:',
            validate: (input) => input.length > 10 || 'Please provide a detailed description (min 10 characters)'
        },
        {
            type: 'input',
            name: 'useCase',
            message: 'Use case - why do you need this feature? (optional):'
        },
        {
            type: 'input',
            name: 'solution',
            message: 'Proposed solution or implementation ideas (optional):'
        },
        {
            type: 'list',
            name: 'priority',
            message: 'Priority level:',
            choices: [
                { name: 'Low - Nice to have', value: 'Low' },
                { name: 'Medium - Would be helpful', value: 'Medium' },
                { name: 'High - Really needed', value: 'High' },
                { name: 'Critical - Blocking my work', value: 'Critical' }
            ]
        },
        {
            type: 'input',
            name: 'additional',
            message: 'Additional context or information (optional):'
        }
    ]);
    return answers;
}

;// ./dist/email-templates/collectors/templateRequest.js

/**
 * Collect template request information from user
 */
async function collectTemplateRequestData() {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'title',
            message: 'Template name:',
            validate: (input) => input.length > 0 || 'Template name is required'
        },
        {
            type: 'input',
            name: 'framework',
            message: 'Framework/Technology (e.g., Next.js, React, Vue, etc.):',
            validate: (input) => input.length > 0 || 'Framework is required'
        },
        {
            type: 'input',
            name: 'description',
            message: 'Template description:',
            validate: (input) => input.length > 10 || 'Please provide a detailed description (min 10 characters)'
        },
        {
            type: 'input',
            name: 'features',
            message: 'Key features/libraries needed (separate with |):',
            default: 'Authentication | Database | Styling'
        },
        {
            type: 'input',
            name: 'similar',
            message: 'Similar existing templates (optional):'
        },
        {
            type: 'list',
            name: 'priority',
            message: 'Priority level:',
            choices: [
                { name: 'Low - Nice to have', value: 'Low' },
                { name: 'Medium - Would be helpful', value: 'Medium' },
                { name: 'High - Really needed', value: 'High' }
            ]
        },
        {
            type: 'input',
            name: 'additional',
            message: 'Additional requirements or context (optional):'
        }
    ]);
    return answers;
}

;// ./dist/email-templates/collectors/question.js

/**
 * Collect general question information from user
 */
async function collectQuestionData() {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'title',
            message: 'Question summary:',
            validate: (input) => input.length > 0 || 'Question summary is required'
        },
        {
            type: 'input',
            name: 'description',
            message: 'Detailed question:',
            validate: (input) => input.length > 10 || 'Please provide a detailed question (min 10 characters)'
        },
        {
            type: 'input',
            name: 'tried',
            message: 'What have you tried so far? (optional):'
        },
        {
            type: 'input',
            name: 'expected',
            message: 'What outcome are you looking for? (optional):'
        }
    ]);
    return answers;
}

;// ./dist/email-templates/collectors/improvement.js

/**
 * Collect improvement suggestion information from user
 */
async function collectImprovementData() {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'title',
            message: 'Improvement title:',
            validate: (input) => input.length > 0 || 'Title is required'
        },
        {
            type: 'input',
            name: 'current',
            message: 'Current behavior (what happens now):',
            validate: (input) => input.length > 0 || 'Current behavior description is required'
        },
        {
            type: 'input',
            name: 'description',
            message: 'Suggested improvement:',
            validate: (input) => input.length > 10 || 'Please provide a detailed suggestion (min 10 characters)'
        },
        {
            type: 'input',
            name: 'benefits',
            message: 'Benefits of this improvement (optional):'
        },
        {
            type: 'input',
            name: 'implementation',
            message: 'Implementation ideas (optional):'
        },
        {
            type: 'list',
            name: 'priority',
            message: 'Priority level:',
            choices: [
                { name: 'Low - Nice to have', value: 'Low' },
                { name: 'Medium - Would be helpful', value: 'Medium' },
                { name: 'High - Really needed', value: 'High' }
            ]
        },
        {
            type: 'input',
            name: 'additional',
            message: 'Additional context (optional):'
        }
    ]);
    return answers;
}

;// ./dist/email-templates/collectors/docs.js

/**
 * Collect documentation issue information from user
 */
async function collectDocsData() {
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'title',
            message: 'Documentation issue title:',
            validate: (input) => input.length > 0 || 'Title is required'
        },
        {
            type: 'input',
            name: 'section',
            message: 'Documentation section (e.g., README, commands.md):',
        },
        {
            type: 'input',
            name: 'description',
            message: 'Issue description:',
            validate: (input) => input.length > 10 || 'Please provide a detailed description (min 10 characters)'
        },
        {
            type: 'input',
            name: 'problems',
            message: 'Current content problems (optional):'
        },
        {
            type: 'input',
            name: 'suggestions',
            message: 'Suggested improvements (optional):'
        },
        {
            type: 'input',
            name: 'additional',
            message: 'Additional context (optional):'
        }
    ]);
    return answers;
}

;// ./dist/email-templates/collectors/customMessage.js


/**
 * Collect custom message information from user with formatting instructions
 */
async function collectCustomMessageData() {
    console.log(source/* default */.Ay.hex('#00d2d3')('\n📝 Custom Message Guidelines:'));
    console.log(source/* default */.Ay.hex('#95afc0')('• Use clear, concise subject line'));
    console.log(source/* default */.Ay.hex('#95afc0')('• Write body in plain text or HTML format'));
    console.log(source/* default */.Ay.hex('#95afc0')('• Use \\n for line breaks in plain text'));
    console.log(source/* default */.Ay.hex('#95afc0')('• HTML tags will be automatically formatted'));
    console.log(source/* default */.Ay.hex('#95afc0')('• Example HTML: <p>Hello</p><br><strong>Important:</strong> Details'));
    console.log(source/* default */.Ay.hex('#ffa502')('• Your message will be professionally formatted with CSS styling\n'));
    const answers = await lib["default"].prompt([
        {
            type: 'input',
            name: 'title',
            message: 'Email subject:',
            validate: (input) => input.length > 0 || 'Subject is required'
        },
        {
            type: 'editor',
            name: 'description',
            message: 'Email body (opens in your default editor):',
            validate: (input) => input.length > 10 || 'Please provide a detailed message (min 10 characters)'
        },
        {
            type: 'list',
            name: 'format',
            message: 'Body format:',
            choices: [
                { name: 'Plain Text (will be formatted automatically)', value: 'plain' },
                { name: 'HTML (advanced formatting)', value: 'html' }
            ]
        },
        {
            type: 'list',
            name: 'priority',
            message: 'Message priority:',
            choices: [
                { name: 'Normal', value: 'normal' },
                { name: 'High', value: 'high' },
                { name: 'Urgent', value: 'urgent' }
            ]
        }
    ]);
    return answers;
}

;// ./dist/email-templates/bugReport.js

function generateBugReportTemplate(data, systemInfo) {
    const stepsHtml = data.steps ?
        `<div class="steps-list"><ol>${data.steps.split('|').map((step) => `<li>${step.trim()}</li>`).join('')}</ol></div>` :
        '<p style="color: #6c757d; font-style: italic;">Not provided</p>';
    return {
        subject: `[Package Installer CLI] 🐛 Bug Report: ${data.title}`,
        htmlBody: `
      ${EMAIL_CSS}
      <body>
        <div class="email-container">
          <div class="header">
            <span class="emoji">🐛</span>
            <h1>Bug Report</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Package Installer CLI</p>
          </div>
          
          <div class="content">
            <div class="section">
              <h3>Bug Title</h3>
              <p><strong>${data.title}</strong></p>
            </div>
            
            <div class="section">
              <h3>Description</h3>
              <p>${data.description}</p>
            </div>
            
            <div class="section">
              <h3>Steps to Reproduce</h3>
              ${stepsHtml}
            </div>
            
            <div class="section">
              <h3>Expected Behavior</h3>
              <p>${data.expected || '<span style="color: #6c757d; font-style: italic;">Not provided</span>'}</p>
            </div>
            
            <div class="section">
              <h3>Actual Behavior</h3>
              <p>${data.actual || '<span style="color: #6c757d; font-style: italic;">Not provided</span>'}</p>
            </div>
            
            ${data.additional ? `
            <div class="section">
              <h3>Additional Information</h3>
              <p>${data.additional}</p>
            </div>
            ` : ''}
            
            <div class="system-info">
              <strong>System Information:</strong><br>
              - OS: ${systemInfo.platform} (${systemInfo.arch})<br>
              - Node.js: ${systemInfo.nodeVersion}<br>
              - CLI Version: ${systemInfo.cliVersion}<br>
              - Working Directory: ${systemInfo.workingDirectory}
            </div>
            
            ${data.name || data.email ? `
            <div class="contact-info">
              <strong>Contact Information:</strong><br>
              ${data.name ? `Name: ${data.name}<br>` : ''}
              ${data.email ? `Email: ${data.email}` : ''}
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <div class="timestamp">Reported at: ${systemInfo.timestamp}</div>
            <p style="margin: 10px 0 0 0;">Thank you for helping improve Package Installer CLI! 🚀</p>
          </div>
        </div>
      </body>
    `,
        plainBody: `Hi Shariq,

I encountered a bug while using Package Installer CLI.

Bug Title: ${data.title}

Description:
${data.description}

Steps to Reproduce:
${data.steps ? data.steps.split('|').map((step, index) => `${index + 1}. ${step.trim()}`).join('\n') : 'Not provided'}

Expected Behavior:
${data.expected || 'Not provided'}

Actual Behavior:
${data.actual || 'Not provided'}

Additional Information:
${data.additional || 'None'}

System Information:
- OS: ${systemInfo.platform} (${systemInfo.arch})
- Node.js: ${systemInfo.nodeVersion}
- CLI Version: ${systemInfo.cliVersion}
- Working Directory: ${systemInfo.workingDirectory}

Reported at: ${systemInfo.timestamp}

Best regards,
${data.name || 'Anonymous User'}
${data.email ? `Contact: ${data.email}` : ''}`
    };
}

;// ./dist/email-templates/featureRequest.js

function generateFeatureRequestTemplate(data, systemInfo) {
    return {
        subject: `[Package Installer CLI] ✨ Feature Request: ${data.title}`,
        htmlBody: `
      ${EMAIL_CSS}
      <body>
        <div class="email-container">
          <div class="header feature">
            <span class="emoji">✨</span>
            <h1>Feature Request</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Package Installer CLI</p>
          </div>
          
          <div class="content">
            <div class="section">
              <h3>Feature Title</h3>
              <p><strong>${data.title}</strong></p>
            </div>
            
            <div class="section">
              <h3>Description</h3>
              <p>${data.description}</p>
            </div>
            
            ${data.useCase ? `
            <div class="section">
              <h3>Use Case</h3>
              <p>${data.useCase}</p>
            </div>
            ` : ''}
            
            ${data.benefits ? `
            <div class="section">
              <h3>Benefits</h3>
              <p>${data.benefits}</p>
            </div>
            ` : ''}
            
            ${data.implementation ? `
            <div class="section">
              <h3>Implementation Ideas</h3>
              <p>${data.implementation}</p>
            </div>
            ` : ''}
            
            ${data.additional ? `
            <div class="section">
              <h3>Additional Information</h3>
              <p>${data.additional}</p>
            </div>
            ` : ''}
            
            <div class="system-info">
              <strong>System Information:</strong><br>
              - OS: ${systemInfo.platform} (${systemInfo.arch})<br>
              - Node.js: ${systemInfo.nodeVersion}<br>
              - CLI Version: ${systemInfo.cliVersion}<br>
              - Working Directory: ${systemInfo.workingDirectory}
            </div>
            
            ${data.name || data.email ? `
            <div class="contact-info">
              <strong>Contact Information:</strong><br>
              ${data.name ? `Name: ${data.name}<br>` : ''}
              ${data.email ? `Email: ${data.email}` : ''}
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <div class="timestamp">Submitted at: ${systemInfo.timestamp}</div>
            <p style="margin: 10px 0 0 0;">Thank you for helping improve Package Installer CLI! 🚀</p>
          </div>
        </div>
      </body>
    `,
        plainBody: `Hi Shariq,

I have a feature request for Package Installer CLI.

Feature Title: ${data.title}

Description:
${data.description}

Use Case:
${data.useCase || 'Not provided'}

Benefits:
${data.benefits || 'Not provided'}

Implementation Ideas:
${data.implementation || 'Not provided'}

Additional Information:
${data.additional || 'None'}

System Information:
- OS: ${systemInfo.platform} (${systemInfo.arch})
- Node.js: ${systemInfo.nodeVersion}
- CLI Version: ${systemInfo.cliVersion}
- Working Directory: ${systemInfo.workingDirectory}

Submitted at: ${systemInfo.timestamp}

Best regards,
${data.name || 'Anonymous User'}
${data.email ? `Contact: ${data.email}` : ''}`
    };
}

;// ./dist/email-templates/templateRequest.js

function generateTemplateRequestTemplate(data, systemInfo) {
    return {
        subject: `[Package Installer CLI] 📝 Template Request: ${data.title}`,
        htmlBody: `
      ${EMAIL_CSS}
      <body>
        <div class="email-container">
          <div class="header template">
            <span class="emoji">📝</span>
            <h1>Template Request</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Package Installer CLI</p>
          </div>
          
          <div class="content">
            <div class="section">
              <h3>Template Title</h3>
              <p><strong>${data.title}</strong></p>
            </div>
            
            <div class="section">
              <h3>Description</h3>
              <p>${data.description}</p>
            </div>
            
            ${data.framework ? `
            <div class="section">
              <h3>Framework/Technology</h3>
              <p>${data.framework}</p>
            </div>
            ` : ''}
            
            ${data.features ? `
            <div class="section">
              <h3>Desired Features</h3>
              <p>${data.features}</p>
            </div>
            ` : ''}
            
            ${data.useCase ? `
            <div class="section">
              <h3>Use Case</h3>
              <p>${data.useCase}</p>
            </div>
            ` : ''}
            
            ${data.priority ? `
            <div class="priority-badge ${data.priority}">
              Priority: ${data.priority.charAt(0).toUpperCase() + data.priority.slice(1)}
            </div>
            ` : ''}
            
            ${data.additional ? `
            <div class="section">
              <h3>Additional Information</h3>
              <p>${data.additional}</p>
            </div>
            ` : ''}
            
            <div class="system-info">
              <strong>System Information:</strong><br>
              - OS: ${systemInfo.platform} (${systemInfo.arch})<br>
              - Node.js: ${systemInfo.nodeVersion}<br>
              - CLI Version: ${systemInfo.cliVersion}<br>
              - Working Directory: ${systemInfo.workingDirectory}
            </div>
            
            ${data.name || data.email ? `
            <div class="contact-info">
              <strong>Contact Information:</strong><br>
              ${data.name ? `Name: ${data.name}<br>` : ''}
              ${data.email ? `Email: ${data.email}` : ''}
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <div class="timestamp">Submitted at: ${systemInfo.timestamp}</div>
            <p style="margin: 10px 0 0 0;">Thank you for helping expand Package Installer CLI templates! 📦</p>
          </div>
        </div>
      </body>
    `,
        plainBody: `Hi Shariq,

I have a template request for Package Installer CLI.

Template Title: ${data.title}

Description:
${data.description}

Framework/Technology:
${data.framework || 'Not specified'}

Desired Features:
${data.features || 'Not specified'}

Use Case:
${data.useCase || 'Not provided'}

Priority:
${data.priority || 'Not specified'}

Additional Information:
${data.additional || 'None'}

System Information:
- OS: ${systemInfo.platform} (${systemInfo.arch})
- Node.js: ${systemInfo.nodeVersion}
- CLI Version: ${systemInfo.cliVersion}
- Working Directory: ${systemInfo.workingDirectory}

Submitted at: ${systemInfo.timestamp}

Best regards,
${data.name || 'Anonymous User'}
${data.email ? `Contact: ${data.email}` : ''}`
    };
}

;// ./dist/email-templates/question.js

function generateQuestionTemplate(data, systemInfo) {
    return {
        subject: `[Package Installer CLI] ❓ Question: ${data.title}`,
        htmlBody: `
      ${EMAIL_CSS}
      <body>
        <div class="email-container">
          <div class="header question">
            <span class="emoji">❓</span>
            <h1>Question</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Package Installer CLI</p>
          </div>
          
          <div class="content">
            <div class="section">
              <h3>Question Title</h3>
              <p><strong>${data.title}</strong></p>
            </div>
            
            <div class="section">
              <h3>Question Details</h3>
              <p>${data.description}</p>
            </div>
            
            ${data.context ? `
            <div class="section">
              <h3>Context</h3>
              <p>${data.context}</p>
            </div>
            ` : ''}
            
            ${data.tried ? `
            <div class="section">
              <h3>What I've Tried</h3>
              <p>${data.tried}</p>
            </div>
            ` : ''}
            
            ${data.additional ? `
            <div class="section">
              <h3>Additional Information</h3>
              <p>${data.additional}</p>
            </div>
            ` : ''}
            
            <div class="system-info">
              <strong>System Information:</strong><br>
              - OS: ${systemInfo.platform} (${systemInfo.arch})<br>
              - Node.js: ${systemInfo.nodeVersion}<br>
              - CLI Version: ${systemInfo.cliVersion}<br>
              - Working Directory: ${systemInfo.workingDirectory}
            </div>
            
            ${data.name || data.email ? `
            <div class="contact-info">
              <strong>Contact Information:</strong><br>
              ${data.name ? `Name: ${data.name}<br>` : ''}
              ${data.email ? `Email: ${data.email}` : ''}
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <div class="timestamp">Asked at: ${systemInfo.timestamp}</div>
            <p style="margin: 10px 0 0 0;">We'll get back to you soon! 💬</p>
          </div>
        </div>
      </body>
    `,
        plainBody: `Hi Shariq,

I have a question about Package Installer CLI.

Question Title: ${data.title}

Question Details:
${data.description}

Context:
${data.context || 'Not provided'}

What I've Tried:
${data.tried || 'Not provided'}

Additional Information:
${data.additional || 'None'}

System Information:
- OS: ${systemInfo.platform} (${systemInfo.arch})
- Node.js: ${systemInfo.nodeVersion}
- CLI Version: ${systemInfo.cliVersion}
- Working Directory: ${systemInfo.workingDirectory}

Asked at: ${systemInfo.timestamp}

Best regards,
${data.name || 'Anonymous User'}
${data.email ? `Contact: ${data.email}` : ''}`
    };
}

;// ./dist/email-templates/improvement.js

function generateImprovementTemplate(data, systemInfo) {
    return {
        subject: `[Package Installer CLI] 🚀 Improvement Suggestion: ${data.title}`,
        htmlBody: `
      ${EMAIL_CSS}
      <body>
        <div class="email-container">
          <div class="header improvement">
            <span class="emoji">🚀</span>
            <h1>Improvement Suggestion</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Package Installer CLI</p>
          </div>
          
          <div class="content">
            <div class="section">
              <h3>Improvement Title</h3>
              <p><strong>${data.title}</strong></p>
            </div>
            
            <div class="section">
              <h3>Description</h3>
              <p>${data.description}</p>
            </div>
            
            ${data.currentBehavior ? `
            <div class="section">
              <h3>Current Behavior</h3>
              <p>${data.currentBehavior}</p>
            </div>
            ` : ''}
            
            ${data.proposedBehavior ? `
            <div class="section">
              <h3>Proposed Behavior</h3>
              <p>${data.proposedBehavior}</p>
            </div>
            ` : ''}
            
            ${data.benefits ? `
            <div class="section">
              <h3>Benefits</h3>
              <p>${data.benefits}</p>
            </div>
            ` : ''}
            
            ${data.implementation ? `
            <div class="section">
              <h3>Implementation Ideas</h3>
              <p>${data.implementation}</p>
            </div>
            ` : ''}
            
            ${data.additional ? `
            <div class="section">
              <h3>Additional Information</h3>
              <p>${data.additional}</p>
            </div>
            ` : ''}
            
            <div class="system-info">
              <strong>System Information:</strong><br>
              - OS: ${systemInfo.platform} (${systemInfo.arch})<br>
              - Node.js: ${systemInfo.nodeVersion}<br>
              - CLI Version: ${systemInfo.cliVersion}<br>
              - Working Directory: ${systemInfo.workingDirectory}
            </div>
            
            ${data.name || data.email ? `
            <div class="contact-info">
              <strong>Contact Information:</strong><br>
              ${data.name ? `Name: ${data.name}<br>` : ''}
              ${data.email ? `Email: ${data.email}` : ''}
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <div class="timestamp">Suggested at: ${systemInfo.timestamp}</div>
            <p style="margin: 10px 0 0 0;">Thank you for helping make Package Installer CLI better! 🌟</p>
          </div>
        </div>
      </body>
    `,
        plainBody: `Hi Shariq,

I have an improvement suggestion for Package Installer CLI.

Improvement Title: ${data.title}

Description:
${data.description}

Current Behavior:
${data.currentBehavior || 'Not described'}

Proposed Behavior:
${data.proposedBehavior || 'Not described'}

Benefits:
${data.benefits || 'Not provided'}

Implementation Ideas:
${data.implementation || 'Not provided'}

Additional Information:
${data.additional || 'None'}

System Information:
- OS: ${systemInfo.platform} (${systemInfo.arch})
- Node.js: ${systemInfo.nodeVersion}
- CLI Version: ${systemInfo.cliVersion}
- Working Directory: ${systemInfo.workingDirectory}

Suggested at: ${systemInfo.timestamp}

Best regards,
${data.name || 'Anonymous User'}
${data.email ? `Contact: ${data.email}` : ''}`
    };
}

;// ./dist/email-templates/docs.js

function generateDocsTemplate(data, systemInfo) {
    return {
        subject: `[Package Installer CLI] 📚 Documentation Issue: ${data.title}`,
        htmlBody: `
      ${EMAIL_CSS}
      <body>
        <div class="email-container">
          <div class="header docs">
            <span class="emoji">📚</span>
            <h1>Documentation Issue</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Package Installer CLI</p>
          </div>
          
          <div class="content">
            <div class="section">
              <h3>Issue Title</h3>
              <p><strong>${data.title}</strong></p>
            </div>
            
            <div class="section">
              <h3>Description</h3>
              <p>${data.description}</p>
            </div>
            
            ${data.docSection ? `
            <div class="section">
              <h3>Documentation Section</h3>
              <p>${data.docSection}</p>
            </div>
            ` : ''}
            
            ${data.issue ? `
            <div class="section">
              <h3>Issue Type</h3>
              <p>${data.issue}</p>
            </div>
            ` : ''}
            
            ${data.suggestion ? `
            <div class="section">
              <h3>Suggested Improvement</h3>
              <p>${data.suggestion}</p>
            </div>
            ` : ''}
            
            ${data.additional ? `
            <div class="section">
              <h3>Additional Information</h3>
              <p>${data.additional}</p>
            </div>
            ` : ''}
            
            <div class="system-info">
              <strong>System Information:</strong><br>
              - OS: ${systemInfo.platform} (${systemInfo.arch})<br>
              - Node.js: ${systemInfo.nodeVersion}<br>
              - CLI Version: ${systemInfo.cliVersion}<br>
              - Working Directory: ${systemInfo.workingDirectory}
            </div>
            
            ${data.name || data.email ? `
            <div class="contact-info">
              <strong>Contact Information:</strong><br>
              ${data.name ? `Name: ${data.name}<br>` : ''}
              ${data.email ? `Email: ${data.email}` : ''}
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <div class="timestamp">Reported at: ${systemInfo.timestamp}</div>
            <p style="margin: 10px 0 0 0;">Thank you for helping improve our documentation! 📖</p>
          </div>
        </div>
      </body>
    `,
        plainBody: `Hi Shariq,

I found an issue with Package Installer CLI documentation.

Issue Title: ${data.title}

Description:
${data.description}

Documentation Section:
${data.docSection || 'Not specified'}

Issue Type:
${data.issue || 'Not specified'}

Suggested Improvement:
${data.suggestion || 'Not provided'}

Additional Information:
${data.additional || 'None'}

System Information:
- OS: ${systemInfo.platform} (${systemInfo.arch})
- Node.js: ${systemInfo.nodeVersion}
- CLI Version: ${systemInfo.cliVersion}
- Working Directory: ${systemInfo.workingDirectory}

Reported at: ${systemInfo.timestamp}

Best regards,
${data.name || 'Anonymous User'}
${data.email ? `Contact: ${data.email}` : ''}`
    };
}

;// ./dist/email-templates/customMessage.js

/**
 * Format text content based on format type
 */
function formatContent(content, format) {
    if (format === 'html') {
        // If user provided HTML, wrap it in a content div for consistent styling
        return `<div class="custom-content">${content}</div>`;
    }
    else {
        // Convert plain text to HTML with line breaks and basic formatting
        return `<div class="custom-content">${content
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>')
            .replace(/^/, '<p>')
            .replace(/$/, '</p>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')}</div>`;
    }
}
function generateCustomMessageTemplate(data, systemInfo) {
    const priorityClass = data.priority === 'high' ? 'priority-high' :
        data.priority === 'urgent' ? 'priority-critical' : '';
    const priorityBadge = data.priority === 'high' ? 'priority-high-badge' :
        data.priority === 'urgent' ? 'priority-critical-badge' :
            'priority-low';
    const priorityText = data.priority === 'urgent' ? 'Urgent' :
        data.priority === 'high' ? 'High Priority' :
            'Normal Priority';
    const formattedContent = formatContent(data.description, data.format || 'plain');
    return {
        subject: `[Package Installer CLI] ✉️ ${data.title}`,
        htmlBody: `
      ${EMAIL_CSS}
      <style>
        .custom-content {
          background: white;
          padding: 20px;
          border-radius: 6px;
          border: 1px solid #dee2e6;
          margin: 15px 0;
          line-height: 1.6;
        }
        .custom-content p {
          margin: 10px 0;
        }
        .custom-content code {
          background: #f8f9fa;
          padding: 2px 6px;
          border-radius: 4px;
          font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, monospace;
          font-size: 0.9em;
        }
        .header.custom {
          background: linear-gradient(135deg, #6f42c1 0%, #e83e8c 100%);
        }
      </style>
      <body>
        <div class="email-container">
          <div class="header custom">
            <span class="emoji">✉️</span>
            <h1>Custom Message</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Package Installer CLI</p>
          </div>
          
          <div class="content">
            <div class="section ${priorityClass}">
              <h3>Subject 
                <span class="priority-badge ${priorityBadge}">${priorityText}</span>
              </h3>
              <p><strong>${data.title}</strong></p>
            </div>
            
            <div class="section">
              <h3>Message</h3>
              ${formattedContent}
            </div>
            
            ${data.additional ? `
            <div class="section">
              <h3>Additional Information</h3>
              <p>${data.additional}</p>
            </div>
            ` : ''}
            
            <div class="system-info">
              <strong>System Information:</strong><br>
              - OS: ${systemInfo.platform} (${systemInfo.arch})<br>
              - Node.js: ${systemInfo.nodeVersion}<br>
              - CLI Version: ${systemInfo.cliVersion}<br>
              - Working Directory: ${systemInfo.workingDirectory}
            </div>
            
            ${data.name || data.email ? `
            <div class="contact-info">
              <strong>Contact Information:</strong><br>
              ${data.name ? `Name: ${data.name}<br>` : ''}
              ${data.email ? `Email: ${data.email}` : ''}
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <div class="timestamp">Sent at: ${systemInfo.timestamp}</div>
            <p style="margin: 10px 0 0 0;">Package Installer CLI - Custom Message 💬</p>
          </div>
        </div>
      </body>
    `,
        plainBody: `Hi Shariq,

Custom message from Package Installer CLI user.

Subject: ${data.title}

Priority: ${priorityText}

Message:
${data.description}

${data.additional ? `Additional Information:\n${data.additional}\n` : ''}
System Information:
- OS: ${systemInfo.platform} (${systemInfo.arch})
- Node.js: ${systemInfo.nodeVersion}
- CLI Version: ${systemInfo.cliVersion}
- Working Directory: ${systemInfo.workingDirectory}

Sent at: ${systemInfo.timestamp}

Best regards,
${data.name || 'Anonymous User'}
${data.email ? `Contact: ${data.email}` : ''}`
    };
}

;// ./dist/email-templates/generator.js







/**
 * Generate HTML email template using modular template functions
 */
function generateEmailTemplate(category, data, systemInfo) {
    // Convert data to TemplateData interface
    const templateData = {
        title: data.title,
        description: data.description,
        // Bug report specific
        steps: data.steps,
        expected: data.expected,
        actual: data.actual,
        // Feature request specific
        useCase: data.useCase,
        solution: data.solution,
        benefits: data.benefits,
        implementation: data.implementation,
        // Template request specific
        framework: data.framework,
        features: data.features,
        similar: data.similar,
        // Question specific
        tried: data.tried,
        context: data.context,
        // Improvement specific
        currentBehavior: data.current,
        proposedBehavior: data.description,
        // Documentation specific
        docSection: data.section,
        issue: data.problems,
        suggestion: data.suggestions,
        // Custom message specific
        format: data.format,
        // Common fields
        priority: data.priority,
        additional: data.additional,
        name: data.name,
        email: data.email
    };
    // Use appropriate template function based on category
    switch (category) {
        case 'bug':
            return generateBugReportTemplate(templateData, systemInfo);
        case 'feature':
            return generateFeatureRequestTemplate(templateData, systemInfo);
        case 'template':
            return generateTemplateRequestTemplate(templateData, systemInfo);
        case 'question':
            return generateQuestionTemplate(templateData, systemInfo);
        case 'improvement':
            return generateImprovementTemplate(templateData, systemInfo);
        case 'docs':
            return generateDocsTemplate(templateData, systemInfo);
        case 'custom':
            return generateCustomMessageTemplate(templateData, systemInfo);
        default:
            // Fallback to question template for unknown categories
            return generateQuestionTemplate(templateData, systemInfo);
    }
}

;// ./dist/commands/email.js










const EMAIL_CATEGORIES = [
    {
        name: '🐛 Bug Report',
        value: 'bug',
        description: 'Report a bug or issue with the CLI',
        emoji: '🐛',
        template: 'bug-report'
    },
    {
        name: '💡 Feature Request',
        value: 'feature',
        description: 'Suggest a new feature or enhancement',
        emoji: '💡',
        template: 'feature-request'
    },
    {
        name: '📋 Template Request',
        value: 'template',
        description: 'Request a new project template',
        emoji: '📋',
        template: 'template-request'
    },
    {
        name: '❓ General Question',
        value: 'question',
        description: 'Ask a general question about the CLI',
        emoji: '❓',
        template: 'question'
    },
    {
        name: '🚀 Improvement Suggestion',
        value: 'improvement',
        description: 'Suggest improvements to existing features',
        emoji: '🚀',
        template: 'improvement'
    },
    {
        name: '📖 Documentation Issue',
        value: 'docs',
        description: 'Report issues with documentation',
        emoji: '📖',
        template: 'docs-issue'
    },
    {
        name: '✉️ Custom Message',
        value: 'custom',
        description: 'Send a custom formatted message',
        emoji: '✉️',
        template: 'custom-message'
    }
];
/**
 * Check if Email MCP CLI is available and get version info
 */
async function checkEmailMcpAvailability() {
    try {
        // First try the global npm package
        try {
            const output = (0,external_child_process_.execSync)('npx @0xshariq/email-mcp-server --version', {
                stdio: 'pipe',
                encoding: 'utf8',
                timeout: 10000
            });
            const versionMatch = output.match(/Version: ([\d.]+)/);
            const isConfigured = !output.includes('Environment not configured');
            return {
                available: true,
                version: versionMatch ? versionMatch[1] : 'unknown',
                path: 'npx @0xshariq/email-mcp-server',
                configured: isConfigured,
                installationType: 'npx'
            };
        }
        catch (npxError) {
            // Fallback to direct email-cli command if globally installed
            try {
                const output = (0,external_child_process_.execSync)('email-cli --version', {
                    stdio: 'pipe',
                    encoding: 'utf8',
                    timeout: 10000
                });
                const versionMatch = output.match(/Version: ([\d.]+)/);
                const isConfigured = !output.includes('Environment not configured');
                return {
                    available: true,
                    version: versionMatch ? versionMatch[1] : 'unknown',
                    path: 'email-cli',
                    configured: isConfigured,
                    installationType: 'global'
                };
            }
            catch (globalError) {
                // Last fallback to local development path
                const emailMcpPath = external_path_.join(external_os_.homedir(), 'desktop', 'shariq-mcp-servers', 'email-mcp-server');
                const emailCliPath = external_path_.join(emailMcpPath, 'email-cli.js');
                if (await fs_extra_lib.pathExists(emailCliPath)) {
                    try {
                        const output = (0,external_child_process_.execSync)(`node "${emailCliPath}" --version`, {
                            stdio: 'pipe',
                            encoding: 'utf8',
                            cwd: emailMcpPath,
                            timeout: 10000
                        });
                        const versionMatch = output.match(/Version: ([\d.]+)/);
                        const isConfigured = !output.includes('Environment not configured');
                        return {
                            available: true,
                            version: versionMatch ? versionMatch[1] : 'unknown',
                            path: emailCliPath,
                            configured: isConfigured,
                            installationType: 'local'
                        };
                    }
                    catch (localError) {
                        // Local version exists but has issues (like missing dependencies)
                        return {
                            available: true,
                            version: 'unknown',
                            path: emailCliPath,
                            configured: false,
                            installationType: 'local'
                        };
                    }
                }
            }
        }
        return { available: false };
    }
    catch (error) {
        return { available: false };
    }
}
/**
 * Get system information for bug reports
 */
function email_getSystemInfo() {
    try {
        const nodeVersion = process.version;
        const platform = `${external_os_.platform()} ${external_os_.release()}`;
        const arch = external_os_.arch();
        const cliVersion = process.env.CLI_VERSION || 'unknown';
        const timestamp = new Date().toLocaleString();
        return {
            platform,
            arch,
            nodeVersion,
            cliVersion,
            workingDirectory: process.cwd(),
            timestamp
        };
    }
    catch (error) {
        return {
            platform: 'unknown',
            arch: 'unknown',
            nodeVersion: 'unknown',
            cliVersion: 'unknown',
            workingDirectory: 'unknown',
            timestamp: new Date().toLocaleString()
        };
    }
}
/**
 * Configure Email MCP Server with user's email credentials
 */
async function configureEmailMcp() {
    try {
        console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#00d2d3')('🔧 Email Configuration Setup') + '\n\n' +
            source/* default */.Ay.white('To send emails, we need to configure your email credentials.') + '\n' +
            source/* default */.Ay.hex('#95afc0')('Your credentials will be stored securely and used only for sending feedback emails.') + '\n\n' +
            source/* default */.Ay.hex('#ffa502')('Supported Email Providers:') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Gmail (recommended)') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Outlook/Hotmail') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Yahoo') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Custom SMTP servers'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'cyan'
        }));
        // Collect email configuration
        const emailConfig = await lib["default"].prompt([
            {
                type: 'list',
                name: 'provider',
                message: 'Select your email provider:',
                choices: [
                    { name: '📧 Gmail', value: 'gmail' },
                    { name: '🔷 Outlook/Hotmail', value: 'outlook' },
                    { name: '🟡 Yahoo', value: 'yahoo' },
                    { name: '⚙️ Custom SMTP', value: 'custom' }
                ]
            },
            {
                type: 'input',
                name: 'email',
                message: 'Enter your email address:',
                validate: (input) => {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    return emailRegex.test(input) || 'Please enter a valid email address';
                }
            },
            {
                type: 'password',
                name: 'password',
                message: (answers) => {
                    if (answers.provider === 'gmail') {
                        return 'Enter your Gmail App Password (not regular password):';
                    }
                    return 'Enter your email password or app password:';
                },
                validate: (input) => input.length > 0 || 'Password is required'
            }
        ]);
        // Add custom SMTP settings if needed
        let smtpConfig = {};
        if (emailConfig.provider === 'custom') {
            smtpConfig = await lib["default"].prompt([
                {
                    type: 'input',
                    name: 'host',
                    message: 'SMTP Host (e.g., smtp.gmail.com):',
                    validate: (input) => input.length > 0 || 'SMTP host is required'
                },
                {
                    type: 'input',
                    name: 'port',
                    message: 'SMTP Port (e.g., 587):',
                    default: '587',
                    validate: (input) => {
                        const port = parseInt(input);
                        return (port > 0 && port <= 65535) || 'Please enter a valid port number';
                    }
                }
            ]);
        }
        // Set provider-specific SMTP settings
        let host, port;
        switch (emailConfig.provider) {
            case 'gmail':
                host = 'smtp.gmail.com';
                port = '587';
                break;
            case 'outlook':
                host = 'smtp.live.com';
                port = '587';
                break;
            case 'yahoo':
                host = 'smtp.mail.yahoo.com';
                port = '587';
                break;
            case 'custom':
                host = smtpConfig.host;
                port = smtpConfig.port;
                break;
            default:
                host = 'smtp.gmail.com';
                port = '587';
        }
        // Show provider-specific setup instructions
        if (emailConfig.provider === 'gmail') {
            console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#ffa502')('📧 Gmail Setup Instructions') + '\n\n' +
                source/* default */.Ay.hex('#95afc0')('For Gmail, you need to use an App Password:') + '\n' +
                source/* default */.Ay.hex('#95afc0')('1. Enable 2-Factor Authentication in your Google Account') + '\n' +
                source/* default */.Ay.hex('#95afc0')('2. Go to Google Account Settings > Security') + '\n' +
                source/* default */.Ay.hex('#95afc0')('3. Under "2-Step Verification", click "App passwords"') + '\n' +
                source/* default */.Ay.hex('#95afc0')('4. Generate a new app password for "Mail"') + '\n' +
                source/* default */.Ay.hex('#95afc0')('5. Use that 16-character password above') + '\n\n' +
                source/* default */.Ay.hex('#00d2d3')('💡 Regular Gmail passwords will NOT work!'), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'yellow'
            }));
        }
        // Create .env content
        const envContent = `# Email MCP Server Configuration
# Generated by Package Installer CLI
EMAIL_HOST=${host}
EMAIL_PORT=${port}
EMAIL_USER=${emailConfig.email}
EMAIL_PASS=${emailConfig.password}
EMAIL_SECURE=false
EMAIL_TLS=true
`;
        // Find Email MCP Server directory and create .env file
        const mcpInfo = await checkEmailMcpAvailability();
        let envFilePath;
        if (mcpInfo.installationType === 'local' && mcpInfo.path) {
            // Local installation - create .env in the project directory
            const projectDir = external_path_.dirname(mcpInfo.path);
            envFilePath = external_path_.join(projectDir, '.env');
        }
        else {
            // Global or npx installation - create .env in home directory
            const configDir = external_path_.join(external_os_.homedir(), '.email-mcp-server');
            await fs_extra_lib.ensureDir(configDir);
            envFilePath = external_path_.join(configDir, '.env');
        }
        // Write .env file
        await fs_extra_lib.writeFile(envFilePath, envContent, 'utf8');
        console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.green('✅ Email Configuration Saved!') + '\n\n' +
            source/* default */.Ay.white('Email credentials have been configured successfully.') + '\n' +
            source/* default */.Ay.hex('#95afc0')(`Configuration saved to: ${source/* default */.Ay.cyan(envFilePath)}`) + '\n\n' +
            source/* default */.Ay.hex('#00d2d3')('You can now send feedback emails using the CLI!') + '\n' +
            source/* default */.Ay.hex('#95afc0')('Test the setup with: ') + source/* default */.Ay.cyan('pi email --test'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'green'
        }));
        return true;
    }
    catch (error) {
        console.error(source/* default */.Ay.red(`❌ Failed to configure email: ${error.message}`));
        return false;
    }
}
/**
 * Check if email is configured and prompt for setup if needed
 */
async function ensureEmailConfigured() {
    const mcpInfo = await checkEmailMcpAvailability();
    if (!mcpInfo.available) {
        console.log(source/* default */.Ay.yellow('⚠️ Email MCP Server not installed. Please install it first:'));
        console.log(source/* default */.Ay.cyan('npm install -g @0xshariq/email-mcp-server'));
        return false;
    }
    if (!mcpInfo.configured) {
        console.log(source/* default */.Ay.yellow('⚠️ Email not configured. Setting up email configuration...'));
        return await configureEmailMcp();
    }
    return true;
}
/**
 * Get the configured email from .env file
 */
async function getConfiguredEmail() {
    try {
        const mcpInfo = await checkEmailMcpAvailability();
        let envFilePath;
        if (mcpInfo.installationType === 'local' && mcpInfo.path) {
            const projectDir = external_path_.dirname(mcpInfo.path);
            envFilePath = external_path_.join(projectDir, '.env');
        }
        else {
            const configDir = external_path_.join(external_os_.homedir(), '.email-mcp-server');
            envFilePath = external_path_.join(configDir, '.env');
        }
        if (await fs_extra_lib.pathExists(envFilePath)) {
            const envContent = await fs_extra_lib.readFile(envFilePath, 'utf8');
            const emailMatch = envContent.match(/EMAIL_USER=(.+)/);
            return emailMatch ? emailMatch[1].trim() : null;
        }
        return null;
    }
    catch (error) {
        return null;
    }
}
/**
 * Collect sender email option from user
 */
async function collectSenderEmailOption() {
    const configuredEmail = await getConfiguredEmail();
    if (!configuredEmail) {
        // No configured email, must use custom
        console.log(source/* default */.Ay.yellow('⚠️ No configured email found. Please provide your email credentials:'));
        const customCredentials = await lib["default"].prompt([
            {
                type: 'input',
                name: 'email',
                message: 'Enter your email address:',
                validate: (input) => {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    return emailRegex.test(input) || 'Please enter a valid email address';
                }
            },
            {
                type: 'password',
                name: 'password',
                message: 'Enter your email password or app password:',
                validate: (input) => input.length > 0 || 'Password is required'
            }
        ]);
        return {
            useConfigured: false,
            customEmail: customCredentials.email,
            customPassword: customCredentials.password
        };
    }
    // Show options for configured vs custom email
    const { emailOption } = await lib["default"].prompt([
        {
            type: 'list',
            name: 'emailOption',
            message: 'Which email would you like to use for sending?',
            choices: [
                {
                    name: `📧 Use configured email: ${source/* default */.Ay.cyan(configuredEmail)}`,
                    value: 'configured'
                },
                {
                    name: '✉️ Use a different email (temporary)',
                    value: 'custom'
                }
            ]
        }
    ]);
    if (emailOption === 'configured') {
        return { useConfigured: true };
    }
    // Collect custom email credentials
    const customCredentials = await lib["default"].prompt([
        {
            type: 'input',
            name: 'email',
            message: 'Enter your email address:',
            validate: (input) => {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(input) || 'Please enter a valid email address';
            }
        },
        {
            type: 'password',
            name: 'password',
            message: 'Enter your email password or app password:',
            validate: (input) => input.length > 0 || 'Password is required'
        },
        {
            type: 'list',
            name: 'provider',
            message: 'Select your email provider:',
            choices: [
                { name: '📧 Gmail', value: 'gmail' },
                { name: '🔷 Outlook/Hotmail', value: 'outlook' },
                { name: '🟡 Yahoo', value: 'yahoo' },
                { name: '⚙️ Custom SMTP', value: 'custom' }
            ]
        }
    ]);
    return {
        useConfigured: false,
        customEmail: customCredentials.email,
        customPassword: customCredentials.password,
        customProvider: customCredentials.provider
    };
}
/**
 * Send email using Email MCP CLI with proper command structure
 * Supports both plain text and HTML emails
 * Uses user's configured or custom email to send to khanshariq92213@gmail.com
 */
async function sendEmailViaMcp(subject, body, htmlBody, customCredentials) {
    let tempEnvFile = '';
    try {
        const mcpInfo = await checkEmailMcpAvailability();
        if (!mcpInfo.available) {
            throw new Error('Email MCP Server not available');
        }
        // Hardcoded recipient email
        const to = 'khanshariq92213@gmail.com';
        // Handle custom credentials if provided
        if (customCredentials) {
            // Create temporary .env file with custom credentials
            const tempDir = external_os_.tmpdir();
            tempEnvFile = external_path_.join(tempDir, `temp-email-config-${Date.now()}.env`);
            // Determine SMTP settings based on provider
            let host, port;
            switch (customCredentials.provider) {
                case 'gmail':
                    host = 'smtp.gmail.com';
                    port = '587';
                    break;
                case 'outlook':
                    host = 'smtp.live.com';
                    port = '587';
                    break;
                case 'yahoo':
                    host = 'smtp.mail.yahoo.com';
                    port = '587';
                    break;
                default:
                    host = 'smtp.gmail.com'; // Default to Gmail
                    port = '587';
            }
            const tempEnvContent = `EMAIL_HOST=${host}
EMAIL_PORT=${port}
EMAIL_USER=${customCredentials.email}
EMAIL_PASS=${customCredentials.password}
EMAIL_SECURE=false
EMAIL_TLS=true
`;
            await fs_extra_lib.writeFile(tempEnvFile, tempEnvContent);
            // Set environment variable to use the temporary config
            process.env.EMAIL_CONFIG_PATH = tempEnvFile;
        }
        // Create temporary files for HTML content if provided
        let tempHtmlFile = '';
        let command = '';
        let options = {
            stdio: 'pipe',
            timeout: 45000,
            encoding: 'utf8'
        };
        if (htmlBody) {
            // Try HTML email with ehtml command (if supported) or fall back to esend
            const tempDir = external_os_.tmpdir();
            tempHtmlFile = external_path_.join(tempDir, `email-${Date.now()}.html`);
            try {
                await fs_extra_lib.writeFile(tempHtmlFile, htmlBody);
                // Try HTML command first
                const htmlArgs = [to, subject, tempHtmlFile];
                const escapedHtmlArgs = htmlArgs.map(arg => `"${arg.replace(/"/g, '\\"')}"`).join(' ');
                switch (mcpInfo.installationType) {
                    case 'npx':
                        command = `npx @0xshariq/email-mcp-server ehtml ${escapedHtmlArgs}`;
                        break;
                    case 'global':
                        command = `email-cli ehtml ${escapedHtmlArgs}`;
                        break;
                    case 'local':
                        command = `node "${mcpInfo.path}" ehtml ${escapedHtmlArgs}`;
                        options.cwd = external_path_.dirname(mcpInfo.path);
                        break;
                }
                try {
                    const output = (0,external_child_process_.execSync)(command, options);
                    return true;
                }
                catch (htmlError) {
                    // If HTML command fails, fall back to regular esend
                    console.log(source/* default */.Ay.yellow('ℹ️ HTML email not supported, sending as rich text...'));
                }
            }
            catch (fileError) {
                console.log(source/* default */.Ay.yellow('ℹ️ Could not create HTML file, sending as plain text...'));
            }
            finally {
                // Clean up temp file
                if (tempHtmlFile && await fs_extra_lib.pathExists(tempHtmlFile)) {
                    await fs_extra_lib.remove(tempHtmlFile);
                }
            }
        }
        // Fall back to regular text email
        const args = [to, subject, body];
        const escapedArgs = args.map(arg => `"${arg.replace(/"/g, '\\"')}"`).join(' ');
        // Use the appropriate command based on installation type
        switch (mcpInfo.installationType) {
            case 'npx':
                command = `npx @0xshariq/email-mcp-server esend ${escapedArgs}`;
                break;
            case 'global':
                command = `email-cli esend ${escapedArgs}`;
                break;
            case 'local':
                command = `node "${mcpInfo.path}" esend ${escapedArgs}`;
                options.cwd = external_path_.dirname(mcpInfo.path);
                break;
            default:
                throw new Error('Unknown installation type');
        }
        const output = (0,external_child_process_.execSync)(command, options);
        return true;
    }
    catch (error) {
        // Better error handling with specific error messages
        if (error.message?.includes('timeout')) {
            console.error(source/* default */.Ay.red('❌ Email sending timed out. Check your internet connection.'));
        }
        else if (error.message?.includes('Environment not configured')) {
            console.error(source/* default */.Ay.red('❌ Email MCP Server not configured. Run: pi email --setup'));
        }
        else if (error.message?.includes('ERR_MODULE_NOT_FOUND')) {
            console.error(source/* default */.Ay.red('❌ Email MCP Server has missing dependencies.'));
            console.error(source/* default */.Ay.yellow('💡 Try: npm install -g @0xshariq/email-mcp-server (for global use)'));
        }
        else if (error.message?.includes('Cannot find module')) {
            console.error(source/* default */.Ay.red('❌ Email MCP Server dependencies missing.'));
            if (error.message?.includes('local')) {
                console.error(source/* default */.Ay.yellow('💡 For local development: cd to email-mcp-server && npm install'));
            }
            else {
                console.error(source/* default */.Ay.yellow('💡 For global use: npm install -g @0xshariq/email-mcp-server'));
            }
        }
        else {
            console.error(source/* default */.Ay.red(`❌ Failed to send email: ${error.message || error}`));
        }
        return false;
    }
    finally {
        // Clean up temporary files
        try {
            if (tempEnvFile && await fs_extra_lib.pathExists(tempEnvFile)) {
                await fs_extra_lib.remove(tempEnvFile);
            }
            if (process.env.EMAIL_CONFIG_PATH) {
                delete process.env.EMAIL_CONFIG_PATH;
            }
        }
        catch (cleanupError) {
            // Ignore cleanup errors
        }
    }
}
/**
 * Show available email categories
 */
async function showEmailCategories() {
    console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#00d2d3')('📋 Available Email Categories') + '\n\n' +
        EMAIL_CATEGORIES.map(cat => `${cat.emoji} ${source/* default */.Ay.bold.cyan(cat.value)} - ${source/* default */.Ay.white(cat.name.replace(cat.emoji + ' ', ''))}\n  ${source/* default */.Ay.gray(cat.description)}`).join('\n\n') + '\n\n' +
        source/* default */.Ay.hex('#95afc0')('Usage: ') + source/* default */.Ay.hex('#00d2d3')('pi email <category>') + '\n' +
        source/* default */.Ay.hex('#95afc0')('Example: ') + source/* default */.Ay.hex('#00d2d3')('pi email bug'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'cyan'
    }));
}
/**
 * Show installation instructions
 */
async function showInstallInstructions() {
    console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#00d2d3')('📦 Email MCP Server Installation') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Option 1: Global Installation (Recommended)') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('npm install -g @0xshariq/email-mcp-server') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Option 2: One-time Usage') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('npx @0xshariq/email-mcp-server') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Option 3: Local Development') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('git clone <repo> && npm install') + '\n\n' +
        source/* default */.Ay.hex('#95afc0')('After installation, configure your email credentials.') + '\n' +
        source/* default */.Ay.hex('#95afc0')('Then use: ') + source/* default */.Ay.hex('#00d2d3')('pi email --setup'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'blue'
    }));
}
/**
 * Show setup instructions for email configuration
 */
async function showSetupInstructions() {
    console.log(boxen(chalk.hex('#00d2d3')('🔧 Email Configuration Guide') + '\n\n' +
        chalk.white('To send feedback emails, configure your email credentials using:') + '\n\n' +
        chalk.hex('#ffa502')('Interactive Setup (Recommended):') + '\n' +
        chalk.hex('#00d2d3')('pi email --setup') + '\n\n' +
        chalk.hex('#95afc0')('This will guide you through:') + '\n' +
        chalk.hex('#95afc0')('• Selecting your email provider (Gmail, Outlook, Yahoo, Custom)') + '\n' +
        chalk.hex('#95afc0')('• Entering your email address') + '\n' +
        chalk.hex('#95afc0')('• Setting up your app password') + '\n' +
        chalk.hex('#95afc0')('• Automatically configuring SMTP settings') + '\n\n' +
        chalk.hex('#ffa502')('Supported Providers:') + '\n' +
        chalk.hex('#95afc0')('📧 Gmail (with App Password)') + '\n' +
        chalk.hex('#95afc0')('🔷 Outlook/Hotmail') + '\n' +
        chalk.hex('#95afc0')('🟡 Yahoo Mail') + '\n' +
        chalk.hex('#95afc0')('⚙️ Custom SMTP servers') + '\n\n' +
        chalk.hex('#95afc0')('💡 Your credentials are stored securely and used only for sending feedback'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'yellow'
    }));
}
/**
 * Show email system status
 */
async function showEmailStatus() {
    console.log(source/* default */.Ay.hex('#00d2d3')('🔍 Checking Email System Status...\n'));
    const mcpInfo = await checkEmailMcpAvailability();
    const statusColor = mcpInfo.available ? (mcpInfo.configured ? 'green' : 'yellow') : 'red';
    const statusIcon = mcpInfo.available ? (mcpInfo.configured ? '✅' : '⚠️') : '❌';
    const statusText = mcpInfo.available ?
        (mcpInfo.configured ? 'Ready' : 'Available (Not Configured)') :
        'Not Found';
    console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#00d2d3')('📊 Email System Status') + '\n\n' +
        `${statusIcon} Email MCP Server: ${source/* default */.Ay[statusColor](statusText)}` + '\n' +
        (mcpInfo.version ? `${source/* default */.Ay.blue('ℹ️')} Version: ${source/* default */.Ay.cyan(mcpInfo.version)}` + '\n' : '') +
        (mcpInfo.installationType ? `${source/* default */.Ay.blue('ℹ️')} Type: ${source/* default */.Ay.cyan(mcpInfo.installationType)}` + '\n' : '') +
        (mcpInfo.path ? `${source/* default */.Ay.blue('ℹ️')} Path: ${source/* default */.Ay.gray(mcpInfo.path)}` + '\n' : '') +
        `${source/* default */.Ay.blue('ℹ️')} Configuration: ${mcpInfo.configured ? source/* default */.Ay.green('✅ Configured') : source/* default */.Ay.yellow('⚠️  Not Configured')}` + '\n' +
        `${source/* default */.Ay.blue('ℹ️')} Target Email: ${source/* default */.Ay.cyan('khanshariq92213@gmail.com')}` + '\n' +
        `${source/* default */.Ay.blue('ℹ️')} Package: ${source/* default */.Ay.cyan('@0xshariq/email-mcp-server')}` + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Available Commands:') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• esend - Send basic email (up to 3 recipients)') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• eattach - Send email with attachments') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• ebulk - Send bulk emails to many recipients') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• eread - Read recent emails') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• esearch - Search emails with filters') + '\n\n' +
        (mcpInfo.available ?
            (mcpInfo.configured ?
                source/* default */.Ay.green('🎉 Ready to send emails! Use: pi email <category>') :
                source/* default */.Ay.yellow('⚠️  Configuration required: pi email --setup')) :
            source/* default */.Ay.yellow('⚠️  Install required: npm install -g @0xshariq/email-mcp-server')) + '\n\n' +
        (mcpInfo.installationType === 'local' && !mcpInfo.configured ?
            source/* default */.Ay.hex('#ffa502')('💡 Local Development Setup:') + '\n' +
                source/* default */.Ay.hex('#95afc0')('• For testing: Use global install (npm install -g @0xshariq/email-mcp-server)') + '\n' +
                source/* default */.Ay.hex('#95afc0')('• For development: Configure .env in email-mcp-server directory') + '\n' +
                source/* default */.Ay.hex('#95afc0')('• See: pi email --setup for configuration details') : ''), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: statusColor
    }));
}
/**
 * Test email connection
 */
async function testEmailConnection() {
    console.log(source/* default */.Ay.hex('#00d2d3')('🧪 Testing Email Connection...\n'));
    const mcpInfo = await checkEmailMcpAvailability();
    if (!mcpInfo.available) {
        console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.red('❌ Email MCP Server Not Available') + '\n\n' +
            source/* default */.Ay.yellow('Cannot test connection without Email MCP Server.') + '\n' +
            source/* default */.Ay.hex('#95afc0')('Install it first: npm install -g @0xshariq/email-mcp-server'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'red'
        }));
        return;
    }
    // Collect sender email option for test
    console.log(source/* default */.Ay.hex('#95afc0')('📧 Email sending configuration for test:'));
    const senderOption = await collectSenderEmailOption();
    console.log(source/* default */.Ay.hex('#9c88ff')('📧 Sending test email...'));
    const systemInfo = email_getSystemInfo();
    const testEmail = generateTestEmailTemplate(systemInfo);
    let customCredentials;
    if (!senderOption.useConfigured && senderOption.customEmail) {
        customCredentials = {
            email: senderOption.customEmail,
            password: senderOption.customPassword,
            provider: senderOption.customProvider || 'gmail'
        };
    }
    const success = await sendEmailViaMcp(testEmail.subject, testEmail.plainBody, testEmail.htmlBody, customCredentials);
    if (success) {
        console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.green('✅ Test Email Sent Successfully!') + '\n\n' +
            source/* default */.Ay.white('A test email has been sent to khanshariq92213@gmail.com') + '\n' +
            source/* default */.Ay.hex('#95afc0')('The email functionality is working correctly.') + '\n\n' +
            source/* default */.Ay.hex('#00d2d3')('You can now use: pi email <category> to send feedback'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'green'
        }));
    }
    else {
        console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.red('❌ Test Email Failed') + '\n\n' +
            source/* default */.Ay.yellow('There was an issue sending the test email.') + '\n' +
            source/* default */.Ay.hex('#95afc0')('Check your email configuration and try again.') + '\n\n' +
            source/* default */.Ay.cyan('Troubleshooting:') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Run: pi email --setup (for configuration help)') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Check email credentials and SMTP settings') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Verify internet connection'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'red'
        }));
    }
}
/**
 * Show development information for local Email MCP Server
 */
async function showDevelopmentInfo() {
    const mcpInfo = await checkEmailMcpAvailability();
    console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#00d2d3')('🛠️ Email MCP Server Development Info') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Local Development Status:') + '\n' +
        `${mcpInfo.available && mcpInfo.installationType === 'local' ? source/* default */.Ay.green('✅') : source/* default */.Ay.red('❌')} Local Email MCP Server: ${mcpInfo.available && mcpInfo.installationType === 'local' ? 'Found' : 'Not Found'}` + '\n' +
        (mcpInfo.path && mcpInfo.installationType === 'local' ? `${source/* default */.Ay.blue('ℹ️')} Path: ${source/* default */.Ay.gray(mcpInfo.path)}` + '\n' : '') +
        `${source/* default */.Ay.blue('ℹ️')} Configuration: ${mcpInfo.configured ? source/* default */.Ay.green('✅ Configured') : source/* default */.Ay.yellow('⚠️  Not Configured')}` + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Development Setup Options:') + '\n' +
        source/* default */.Ay.hex('#95afc0')('1. Use Global Install (Recommended for testing):') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('   npm install -g @0xshariq/email-mcp-server') + '\n' +
        source/* default */.Ay.hex('#95afc0')('   # Configure once globally, works everywhere') + '\n\n' +
        source/* default */.Ay.hex('#95afc0')('2. Configure Local Development:') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('   cd ~/desktop/shariq-mcp-servers/email-mcp-server') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('   npm install  # Install dependencies') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('   cp .env.example .env  # Create .env file') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('   # Edit .env with your email settings') + '\n\n' +
        source/* default */.Ay.hex('#95afc0')('3. One-time Usage (No setup needed):') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('   npx @0xshariq/email-mcp-server esend "email" "subject" "body"') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Environment Variables (.env):') + '\n' +
        source/* default */.Ay.hex('#95afc0')('EMAIL_HOST=smtp.gmail.com') + '\n' +
        source/* default */.Ay.hex('#95afc0')('EMAIL_PORT=587') + '\n' +
        source/* default */.Ay.hex('#95afc0')('EMAIL_USER=your-email@gmail.com') + '\n' +
        source/* default */.Ay.hex('#95afc0')('EMAIL_PASS=your-app-password') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Current Issue:') + '\n' +
        (mcpInfo.installationType === 'local' && !mcpInfo.configured ?
            source/* default */.Ay.yellow('⚠️  Local version found but not configured or has dependency issues') :
            source/* default */.Ay.green('✅ No issues detected')) + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Recommended Action:') + '\n' +
        (mcpInfo.installationType === 'local' && !mcpInfo.configured ?
            source/* default */.Ay.hex('#00d2d3')('npm install -g @0xshariq/email-mcp-server  # Use global version for testing') :
            source/* default */.Ay.hex('#00d2d3')('pi email --status  # Check current status')), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'blue'
    }));
}
/**
 * Show all available Email MCP Server commands
 */
async function showEmailCommands() {
    const mcpInfo = await checkEmailMcpAvailability();
    console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#00d2d3')('📧 Email MCP Server Commands') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Basic Email Operations:') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• esend <to> <subject> <body> - Send email (max 3 recipients)') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• eread [count] - Read recent emails') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• eget <id> - Get specific email by ID') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• edelete <id> - Delete an email') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• emarkread <id> - Mark email as read/unread') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Advanced Email Operations:') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• eattach <to> <subject> <body> <file> - Send with attachment') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• esearch <query> - Search emails with filters') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• eforward <id> <to> - Forward an email') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• ereply <id> <body> - Reply to an email') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• estats - Get email statistics') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• edraft <to> <subject> <body> - Create email draft') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• eschedule <to> <subject> <body> <time> - Schedule email') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• ebulk <file> <subject> <body> - Send bulk emails') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Contact Management:') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• cadd <name> <email> - Add new contact') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• clist - List all contacts') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• csearch <query> - Search contacts') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• cgroup <group> - Get contacts by group') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• cupdate <id> <field> <value> - Update contact') + '\n' +
        source/* default */.Ay.hex('#95afc0')('• cdelete <id> - Delete contact') + '\n\n' +
        `${mcpInfo.available ? source/* default */.Ay.green('✅') : source/* default */.Ay.red('❌')} Status: ${mcpInfo.available ? 'Available' : 'Not Installed'}` + '\n' +
        (mcpInfo.version ? `${source/* default */.Ay.blue('ℹ️')} Version: ${mcpInfo.version}` + '\n' : '') +
        `${source/* default */.Ay.blue('ℹ️')} Package: @0xshariq/email-mcp-server` + '\n\n' +
        source/* default */.Ay.hex('#00d2d3')('Usage Examples:') + '\n' +
        source/* default */.Ay.gray('esend "user@example.com" "Hello" "Test message"') + '\n' +
        source/* default */.Ay.gray('eattach "user@example.com" "Report" "See attached" "./file.pdf"') + '\n' +
        source/* default */.Ay.gray('ebulk "recipients.txt" "Newsletter" "Monthly update"'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: mcpInfo.available ? 'cyan' : 'yellow'
    }));
}
/**
 * Show help for email command
 */
async function showEmailHelp() {
    const helpConfig = {
        commandName: 'Email',
        emoji: '📧',
        description: 'Contact the developer with feedback, bug reports, feature requests, and questions.\nDirect communication channel to improve Package Installer CLI.',
        usage: [
            'email',
            'email [category]'
        ],
        options: [
            { flag: '-h, --help', description: 'Show this help message' },
            { flag: '-l, --list', description: 'List all available email categories' },
            { flag: '--install', description: 'Show Email MCP Server installation instructions' },
            { flag: '--setup', description: 'Configure your email credentials for sending feedback' },
            { flag: '--status', description: 'Check email system status and availability' },
            { flag: '--test', description: 'Send a test email to verify functionality' },
            { flag: '--commands', description: 'Show all available Email MCP Server commands' },
            { flag: '--dev', description: 'Show development setup information and troubleshooting' },
            { flag: '--quick', description: 'Quick feedback mode (minimal prompts)' }
        ],
        examples: [
            { command: 'email', description: 'Interactive feedback form with category selection' },
            { command: 'email bug', description: 'Quick bug report form' },
            { command: 'email feature', description: 'Feature request form' },
            { command: 'email template', description: 'Request a new project template' },
            { command: 'email --list', description: 'Show all available categories' },
            { command: 'email --status', description: 'Check if email system is ready' },
            { command: 'email --test', description: 'Send test email to verify setup' },
            { command: 'email --install', description: 'Show installation instructions' },
            { command: 'email --setup', description: 'Configure your email credentials interactively' },
            { command: 'email --commands', description: 'Show all Email MCP Server commands' },
            { command: 'email --dev', description: 'Development setup and troubleshooting' }
        ],
        additionalSections: [
            {
                title: 'Available Categories',
                items: EMAIL_CATEGORIES.map(cat => `${cat.emoji} ${cat.value} - ${cat.description}`)
            },
            {
                title: 'What You Can Contact About',
                items: [
                    'Bug reports with detailed reproduction steps',
                    'Feature requests and enhancement ideas',
                    'New project template suggestions',
                    'Documentation improvements',
                    'General questions about CLI usage',
                    'Performance or usability improvements'
                ]
            },
            {
                title: 'Email Setup (Required for sending)',
                items: [
                    'Install: npm install -g @0xshariq/email-mcp-server',
                    'Configure: pi email --setup (interactive setup)',
                    'Supports Gmail, Outlook, Yahoo, and custom SMTP',
                    'Your credentials are stored securely for sending feedback'
                ]
            }
        ],
        tips: [
            'Be specific and detailed in your reports',
            'Include system information for bug reports',
            'Provide use cases for feature requests',
            'Your contact info is optional but helpful for follow-up'
        ]
    };
    (0,helpFormatter/* createStandardHelp */.ht)(helpConfig);
}
/**
 * Main email command handler
 */
async function emailCommand(category, options = {}) {
    try {
        // Handle help flag
        if (options.help) {
            await showEmailHelp();
            return;
        }
        // Handle list categories flag
        if (options.list) {
            await showEmailCategories();
            return;
        }
        // Handle install flag
        if (options.install) {
            await showInstallInstructions();
            return;
        }
        // Handle setup flag
        if (options.setup) {
            await configureEmailMcp();
            return;
        }
        // Handle status flag
        if (options.status) {
            await showEmailStatus();
            return;
        }
        // Handle test flag
        if (options.test) {
            const isConfigured = await ensureEmailConfigured();
            if (isConfigured) {
                await testEmailConnection();
            }
            return;
        }
        // Handle commands flag (show all available email commands)
        if (options.commands) {
            await showEmailCommands();
            return;
        }
        // Handle dev flag (development mode info)
        if (options.dev) {
            await showDevelopmentInfo();
            return;
        }
        // Display command banner
        (0,banner/* displayCommandBanner */.kn)('Email', 'Contact the developer with feedback, suggestions, and questions');
        // Ensure email is configured before proceeding
        const isConfigured = await ensureEmailConfigured();
        if (!isConfigured) {
            console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.yellow('⚠️ Email Configuration Required') + '\n\n' +
                source/* default */.Ay.white('To send feedback emails, you need to configure your email credentials.') + '\n\n' +
                source/* default */.Ay.cyan('📦 Quick Setup Steps:') + '\n' +
                source/* default */.Ay.hex('#95afc0')('1. Install: npm install -g @0xshariq/email-mcp-server') + '\n' +
                source/* default */.Ay.hex('#95afc0')('2. Configure: pi email --setup') + '\n' +
                source/* default */.Ay.hex('#95afc0')('3. Send feedback: pi email <category>') + '\n\n' +
                source/* default */.Ay.cyan('📞 Alternative Contact Methods:') + '\n' +
                source/* default */.Ay.hex('#95afc0')('📧 Direct Email: khanshariq92213@gmail.com') + '\n' +
                source/* default */.Ay.hex('#95afc0')('🐙 GitHub Issues: Create an issue on the repository'), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'yellow'
            }));
            console.log('\n' + source/* default */.Ay.hex('#00d2d3')('💻 Quick Setup Command:'));
            console.log(source/* default */.Ay.gray('pi email --setup'));
            return;
        }
        // Show welcome message
        console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#00d2d3')('📧 Contact Developer') + '\n\n' +
            source/* default */.Ay.white('I appreciate your feedback and contributions to improve Package Installer CLI!') + '\n\n' +
            source/* default */.Ay.hex('#95afc0')('• Bug reports help fix issues quickly') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Feature requests shape future development') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Template requests expand project options') + '\n' +
            source/* default */.Ay.hex('#95afc0')('• Questions help improve documentation'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'cyan'
        }));
        let selectedCategory = category;
        // If no category specified, show selection
        if (!selectedCategory) {
            const { category: chosenCategory } = await lib["default"].prompt([
                {
                    type: 'list',
                    name: 'category',
                    message: source/* default */.Ay.hex('#9c88ff')('What would you like to contact me about?'),
                    choices: EMAIL_CATEGORIES.map(cat => ({
                        name: `${cat.name} - ${source/* default */.Ay.gray(cat.description)}`,
                        value: cat.value,
                        short: cat.value
                    })),
                    pageSize: 10
                }
            ]);
            selectedCategory = chosenCategory;
        }
        // Validate category
        const categoryConfig = EMAIL_CATEGORIES.find(cat => cat.value === selectedCategory);
        if (!categoryConfig) {
            console.log(source/* default */.Ay.red(`❌ Invalid category: ${selectedCategory}`));
            console.log(source/* default */.Ay.yellow(`💡 Available categories: ${EMAIL_CATEGORIES.map(c => c.value).join(', ')}`));
            return;
        }
        console.log(`\n${categoryConfig.emoji} ${source/* default */.Ay.bold.cyan('Collecting information for:')} ${source/* default */.Ay.white(categoryConfig.name)}`);
        // Collect category-specific information
        let categoryData;
        if (options.quick) {
            // Quick mode - minimal prompts
            console.log(source/* default */.Ay.hex('#ffa502')('🚀 Quick Mode - Minimal prompts for fast feedback'));
            categoryData = await collectQuickFeedback(selectedCategory);
        }
        else {
            // Full mode - detailed prompts
            switch (selectedCategory) {
                case 'bug':
                    categoryData = await collectBugReportData();
                    break;
                case 'feature':
                    categoryData = await collectFeatureRequestData();
                    break;
                case 'template':
                    categoryData = await collectTemplateRequestData();
                    break;
                case 'question':
                    categoryData = await collectQuestionData();
                    break;
                case 'improvement':
                    categoryData = await collectImprovementData();
                    break;
                case 'docs':
                    categoryData = await collectDocsData();
                    break;
                case 'custom':
                    categoryData = await collectCustomMessageData();
                    break;
                default:
                    categoryData = await collectQuestionData(); // Fallback
            }
        }
        // Collect optional contact information
        console.log(source/* default */.Ay.hex('#95afc0')('\n📞 Contact information (optional, for follow-up):'));
        const contactData = await collectContactInfo();
        // Collect sender email option
        console.log(source/* default */.Ay.hex('#95afc0')('\n📧 Email sending configuration:'));
        const senderOption = await collectSenderEmailOption();
        // Merge all data
        const allData = { ...categoryData, ...contactData };
        // Generate email content (both HTML and plain text)
        const systemInfo = email_getSystemInfo();
        const emailTemplate = generateEmailTemplate(selectedCategory, allData, systemInfo);
        const { subject, htmlBody, plainBody } = emailTemplate;
        // Show preview
        console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.hex('#00d2d3')('📧 Email Preview') + '\n\n' +
            source/* default */.Ay.gray('To: khanshariq92213@gmail.com') + '\n' +
            source/* default */.Ay.gray(`Subject: ${subject}`) + '\n' +
            source/* default */.Ay.gray('Format: HTML + Plain Text Fallback') + '\n\n' +
            source/* default */.Ay.white(plainBody.substring(0, 300) + (plainBody.length > 300 ? '...' : '')), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'blue'
        }));
        // Confirm sending
        const { confirmSend } = await lib["default"].prompt([
            {
                type: 'confirm',
                name: 'confirmSend',
                message: 'Send this beautifully formatted email?',
                default: true
            }
        ]);
        if (!confirmSend) {
            console.log(source/* default */.Ay.yellow('📧 Email cancelled. Your feedback is still valuable!'));
            return;
        }
        // Send email (try HTML first, fall back to plain text)
        console.log(source/* default */.Ay.hex('#9c88ff')('📧 Sending formatted email...'));
        let customCredentials;
        if (!senderOption.useConfigured && senderOption.customEmail) {
            customCredentials = {
                email: senderOption.customEmail,
                password: senderOption.customPassword,
                provider: senderOption.customProvider || 'gmail'
            };
        }
        const success = await sendEmailViaMcp(subject, plainBody, htmlBody, customCredentials);
        if (success) {
            console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.green('✅ Email sent successfully!') + '\n\n' +
                source/* default */.Ay.white('Thank you for your feedback!') + '\n' +
                source/* default */.Ay.hex('#95afc0')('I\'ll review your message and get back to you if needed.') + '\n\n' +
                source/* default */.Ay.hex('#00d2d3')('Your contribution helps make Package Installer CLI better! 🚀'), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'green'
            }));
        }
        else {
            console.log((0,node_modules_boxen/* default */.A)(source/* default */.Ay.red('❌ Failed to send email') + '\n\n' +
                source/* default */.Ay.yellow('Troubleshooting:') + '\n' +
                source/* default */.Ay.hex('#95afc0')('• Ensure @0xshariq/email-mcp-server is installed') + '\n' +
                source/* default */.Ay.hex('#95afc0')('• Check your email configuration') + '\n' +
                source/* default */.Ay.hex('#95afc0')('• Verify internet connection') + '\n\n' +
                source/* default */.Ay.yellow('Alternative contact methods:') + '\n' +
                source/* default */.Ay.hex('#95afc0')('📧 Direct email: khanshariq92213@gmail.com') + '\n' +
                source/* default */.Ay.hex('#95afc0')('🐙 GitHub: Create an issue on the repository') + '\n\n' +
                source/* default */.Ay.gray('Subject: ' + subject) + '\n' +
                source/* default */.Ay.gray('Please copy the message content for manual sending.'), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'red'
            }));
        }
    }
    catch (error) {
        console.error(source/* default */.Ay.red(`❌ Error in email command: ${error.message}`));
    }
}

// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6982);
;// ./dist/utils/authStore.js




class AuthStore {
    constructor() {
        this.records = [];
        this.failedAttempts = {};
        this.dir = external_path_.join(external_os_.homedir(), '.package-installer-cli');
        this.file = external_path_.join(this.dir, 'auth.json');
        this.sessionFile = external_path_.join(this.dir, 'session.json');
    }
    async init() {
        await fs_extra_lib.ensureDir(this.dir);
        // Restrict directory permissions to user only
        try {
            await fs_extra_lib.chmod(this.dir, 0o700);
        }
        catch { }
        if (await fs_extra_lib.pathExists(this.file)) {
            try {
                const data = await fs_extra_lib.readJson(this.file);
                this.records = Array.isArray(data) ? data : [];
            }
            catch {
                this.records = [];
            }
        }
    }
    async save() {
        await fs_extra_lib.writeJson(this.file, this.records, { spaces: 2 });
        // Restrict file permissions to user only
        try {
            await fs_extra_lib.chmod(this.file, 0o600);
        }
        catch { }
    }
    hashPassword(password, salt) {
        // Use scrypt for password hashing (built-in, fast and secure)
        return external_crypto_.scryptSync(password, salt, 64);
    }
    async createUser(email, password) {
        const existing = this.records.find(r => r.email === email.toLowerCase());
        if (existing)
            throw new Error('User already exists');
        // Basic validation
        const normalizedEmail = email.trim().toLowerCase();
        if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(normalizedEmail)) {
            throw new Error('Invalid email address');
        }
        if (password.length < 8) {
            throw new Error('Password must be at least 8 characters long');
        }
        const salt = external_crypto_.randomBytes(16);
        const hash = this.hashPassword(password, salt);
        const record = {
            email: email.toLowerCase(),
            salt: salt.toString('hex'),
            hash: hash.toString('hex'),
            createdAt: new Date().toISOString(),
            usageCount: 0,
            usageLimit: 3,
        };
        this.records.push(record);
        await this.save();
        return record;
    }
    // Increment usage for unverified user, return true if allowed, false if over limit
    async incrementUsage(email) {
        const rec = this.records.find(r => r.email === email.toLowerCase());
        if (!rec)
            throw new Error('User not found');
        if (rec.verified)
            return true; // No limit for verified
        if (typeof rec.usageCount !== 'number')
            rec.usageCount = 0;
        if (typeof rec.usageLimit !== 'number')
            rec.usageLimit = 3;
        if (rec.usageCount >= rec.usageLimit)
            return false;
        rec.usageCount += 1;
        await this.save();
        return true;
    }
    // Reset usage when user is verified
    async verifyUser(email, password) {
        const record = this.records.find(r => r.email === email.toLowerCase());
        if (!record)
            return false;
        // Simple rate limiting/backoff
        const key = email.toLowerCase();
        const now = Date.now();
        const entry = this.failedAttempts[key];
        if (entry && entry.count >= 5 && now - entry.lastAttempt < 60_000) {
            // Lockout for 60s after 5 failed attempts
            throw new Error('Too many failed attempts. Try again later.');
        }
        const salt = Buffer.from(record.salt, 'hex');
        const hash = this.hashPassword(password, salt);
        const stored = Buffer.from(record.hash, 'hex');
        // Use timingSafeEqual to avoid timing attacks
        if (stored.length !== hash.length)
            return false;
        const ok = external_crypto_.timingSafeEqual(stored, hash);
        if (!ok) {
            // record failed attempt
            if (!this.failedAttempts[key])
                this.failedAttempts[key] = { count: 0, lastAttempt: now };
            this.failedAttempts[key].count += 1;
            this.failedAttempts[key].lastAttempt = now;
        }
        else {
            // reset on success
            delete this.failedAttempts[key];
        }
        return ok;
    }
    async login(email, password) {
        const ok = await this.verifyUser(email, password);
        if (!ok)
            return false;
        await fs_extra_lib.writeJson(this.sessionFile, { email: email.toLowerCase(), loggedAt: new Date().toISOString() }, { spaces: 2 });
        return true;
    }
    async logout() {
        if (await fs_extra_lib.pathExists(this.sessionFile)) {
            await fs_extra_lib.remove(this.sessionFile);
        }
    }
    async getSession() {
        if (!(await fs_extra_lib.pathExists(this.sessionFile)))
            return null;
        try {
            const data = await fs_extra_lib.readJson(this.sessionFile);
            return { email: (data.email || '').toLowerCase() };
        }
        catch {
            return null;
        }
    }
    async isLoggedIn() {
        const s = await this.getSession();
        return !!s?.email;
    }
    async getUsers() {
        return this.records.slice();
    }
    async setTotpSecret(email, secret) {
        const rec = this.records.find(r => r.email === email.toLowerCase());
        if (!rec)
            throw new Error('User not found');
        rec.totpSecret = secret;
        await this.save();
    }
    async setVerified(email, verified) {
        const rec = this.records.find(r => r.email === email.toLowerCase());
        if (!rec)
            throw new Error('User not found');
        rec.verified = verified;
        if (verified) {
            rec.usageCount = undefined;
            rec.usageLimit = undefined;
        }
        await this.save();
    }
    async getTotpSecret(email) {
        const rec = this.records.find(r => r.email === email.toLowerCase());
        return rec?.totpSecret;
    }
    async isVerified(email) {
        const rec = this.records.find(r => r.email === email.toLowerCase());
        return !!rec?.verified;
    }
}
const authStore_authStore = new AuthStore();
async function initAuthStore() {
    await authStore_authStore.init();
}

// EXTERNAL MODULE: ./node_modules/.pnpm/otplib@12.0.1/node_modules/otplib/index.js
var otplib = __webpack_require__(4283);
// EXTERNAL MODULE: ./node_modules/.pnpm/qrcode-terminal@0.12.0/node_modules/qrcode-terminal/lib/main.js
var main = __webpack_require__(6273);
;// ./dist/commands/auth.js






async function setupTotp(email) {
    // Generate TOTP secret
    const secret = otplib.authenticator.generateSecret();
    const otpauth = otplib.authenticator.keyuri(email, 'PackageInstallerCLI', secret);
    // Show QR code in terminal
    console.log(source/* default */.Ay.cyan('\nScan this QR code with Google Authenticator or a compatible app:'));
    main.generate(otpauth, { small: true });
    console.log(source/* default */.Ay.gray(`If you can't scan, use this secret: ${source/* default */.Ay.yellow(secret)}`));
    return secret;
}
async function verifyTotpPrompt(secret) {
    for (let i = 0; i < 3; ++i) {
        const { code } = await lib["default"].prompt([
            { name: 'code', message: 'Enter 6-digit code from your Authenticator app:', type: 'input', validate: (v) => /^\d{6}$/.test(v) || 'Enter a 6-digit code' }
        ]);
        if (otplib.authenticator.check(code, secret))
            return true;
        console.log(source/* default */.Ay.red('❌ Invalid code. Try again.'));
    }
    return false;
}
// Add a function for 2FA setup and verification (used in both register and verify)
async function setupAndVerifyTotp(email) {
    const secret = await setupTotp(email);
    await authStore_authStore.setTotpSecret(email, secret);
    const verified = await verifyTotpPrompt(secret);
    if (!verified) {
        console.log(source/* default */.Ay.red('❌ Verification failed. 2FA not enabled.'));
        return false;
    }
    await authStore_authStore.setVerified(email, true);
    console.log(source/* default */.Ay.green('✅ 2FA enabled and verified!'));
    return true;
}
// Patch interactiveRegister to make 2FA optional
async function interactiveRegister() {
    const { email, password, confirm } = await lib["default"].prompt([
        { name: 'email', message: 'Email:', type: 'input', validate: (v) => /^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(v) || 'Enter a valid email' },
        { name: 'password', message: 'Password (min 8 chars):', type: 'password', mask: '*', validate: (v) => v.length >= 8 || 'Password must be at least 8 characters' },
        { name: 'confirm', message: 'Confirm Password:', type: 'password', mask: '*' },
    ]);
    if (password !== confirm) {
        console.log(source/* default */.Ay.red('Passwords do not match'));
        return;
    }
    let created = false;
    try {
        await authStore_authStore.createUser(email, password);
        created = true;
    }
    catch (err) {
        if (err.message && err.message.includes('already exists')) {
            console.log(source/* default */.Ay.red('❌ User already exists. Please login or use a different email.'));
            return;
        }
        console.log(source/* default */.Ay.red('❌'), err.message || String(err));
        return;
    }
    // Suggest 2FA setup
    const { enable2fa } = await lib["default"].prompt([
        { name: 'enable2fa', type: 'confirm', message: 'Would you like to enable 2FA (recommended)?', default: true }
    ]);
    if (enable2fa) {
        await setupAndVerifyTotp(email);
    }
    else {
        console.log(source/* default */.Ay.yellow('⚠️  2FA is not enabled. You can enable it anytime with: pi auth verify'));
    }
    // Always auto-login after registration if user was created
    if (created) {
        const ok = await authStore_authStore.login(email, password);
        if (ok) {
            console.log(source/* default */.Ay.green('✅ User registered and logged in.'));
        }
        else {
            console.log(source/* default */.Ay.yellow('User registered, but auto-login failed. Please login manually.'));
        }
    }
}
async function interactiveLogin() {
    const responses = await inquirer.prompt([
        { name: 'email', message: 'Email:', type: 'input', validate: (v) => /^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(v) || 'Enter a valid email' },
        { name: 'password', message: 'Password:', type: 'password', mask: '*', validate: (v) => v.length >= 8 || 'Password must be at least 8 characters' },
    ]);
    const { email, password } = responses;
    try {
        const ok = await authStore.login(email, password);
        if (!ok) {
            console.log(chalk.red('❌ Invalid email or password'));
            return;
        }
        // Check verification
        const secret = await authStore.getTotpSecret(email);
        const isVerified = await authStore.isVerified(email);
        if (!secret) {
            console.log(chalk.red('❌ This account does not have 2FA set up. Please register again.'));
            await authStore.logout();
            return;
        }
        if (!isVerified) {
            console.log(chalk.red('❌ This account is not verified. Please complete TOTP verification during registration.'));
            await authStore.logout();
            return;
        }
        // Prompt for TOTP code
        const { code } = await inquirer.prompt([
            { name: 'code', message: 'Enter 6-digit code from your Authenticator app:', type: 'input', validate: (v) => /^\d{6}$/.test(v) || 'Enter a 6-digit code' }
        ]);
        if (!authenticator.check(code, secret)) {
            console.log(chalk.red('❌ Invalid code. Login aborted.'));
            await authStore.logout();
            return;
        }
        console.log(chalk.green('✅ Logged in successfully'));
    }
    catch (err) {
        if (err.message && err.message.includes('already exists')) {
            console.log(chalk.red('❌ User already exists. Please login or use a different email.'));
            return;
        }
        console.log(chalk.red('❌'), err.message || String(err));
    }
}
async function handleAuthOptions(subcommand, value, opts = {}) {
    await initAuthStore();
    // Help flag or no subcommand: show help
    if (opts.help || opts['--help'] || opts['-h'] || subcommand === '--help' || subcommand === '-h' || !subcommand) {
        showAuthHelp();
        return;
    }
    try {
        // Normalize subcommand for robust matching
        const cmd = (subcommand || '').toLowerCase();
        switch (cmd) {
            case 'login': {
                if (opts.email && opts.password) {
                    try {
                        const ok = await authStore_authStore.login(opts.email, opts.password);
                        if (!ok) {
                            console.log(source/* default */.Ay.red('❌ Invalid email or password'));
                            return;
                        }
                        // Check verification
                        const secret = await authStore_authStore.getTotpSecret(opts.email);
                        const isVerified = await authStore_authStore.isVerified(opts.email);
                        if (!secret) {
                            console.log(source/* default */.Ay.red('❌ This account does not have 2FA set up. Please register again.'));
                            await authStore_authStore.logout();
                            return;
                        }
                        if (!isVerified) {
                            console.log(source/* default */.Ay.red('❌ This account is not verified. Please complete TOTP verification during registration.'));
                            await authStore_authStore.logout();
                            return;
                        }
                        // Prompt for TOTP code
                        const { code } = await lib["default"].prompt([
                            { name: 'code', message: 'Enter 6-digit code from your Authenticator app:', type: 'input', validate: (v) => /^\d{6}$/.test(v) || 'Enter a 6-digit code' }
                        ]);
                        if (!otplib.authenticator.check(code, secret)) {
                            console.log(source/* default */.Ay.red('❌ Invalid code. Login aborted.'));
                            await authStore_authStore.logout();
                            return;
                        }
                        console.log(source/* default */.Ay.green('✅ Logged in successfully'));
                    }
                    catch (err) {
                        if (err.message && err.message.includes('already exists')) {
                            console.log(source/* default */.Ay.red('❌ User already exists. Please login or use a different email.'));
                            return;
                        }
                        console.log(source/* default */.Ay.red('❌'), err.message || String(err));
                    }
                }
                else {
                    // Interactive login
                    const responses = await lib["default"].prompt([
                        { name: 'email', message: 'Email:', type: 'input', validate: (v) => /^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(v) || 'Enter a valid email' },
                        { name: 'password', message: 'Password:', type: 'password', mask: '*', validate: (v) => v.length >= 8 || 'Password must be at least 8 characters' },
                    ]);
                    const { email, password } = responses;
                    const ok = await authStore_authStore.login(email, password);
                    if (!ok) {
                        console.log(source/* default */.Ay.red('❌ Invalid email or password'));
                        return;
                    }
                    const secret = await authStore_authStore.getTotpSecret(email);
                    const isVerified = await authStore_authStore.isVerified(email);
                    if (!secret) {
                        console.log(source/* default */.Ay.red('❌ This account does not have 2FA set up. Please register again.'));
                        await authStore_authStore.logout();
                        return;
                    }
                    if (!isVerified) {
                        console.log(source/* default */.Ay.red('❌ This account is not verified. Please complete TOTP verification during registration.'));
                        await authStore_authStore.logout();
                        return;
                    }
                    const { code } = await lib["default"].prompt([
                        { name: 'code', message: 'Enter 6-digit code from your Authenticator app:', type: 'input', validate: (v) => /^\d{6}$/.test(v) || 'Enter a 6-digit code' }
                    ]);
                    if (!otplib.authenticator.check(code, secret)) {
                        console.log(source/* default */.Ay.red('❌ Invalid code. Login aborted.'));
                        await authStore_authStore.logout();
                        return;
                    }
                    console.log(source/* default */.Ay.green('✅ Logged in successfully'));
                }
                return;
            }
            case 'register': {
                if (opts.email && opts.password) {
                    try {
                        await authStore_authStore.createUser(opts.email, opts.password);
                        // TOTP setup
                        const secret = await setupTotp(opts.email);
                        await authStore_authStore.setTotpSecret(opts.email, secret);
                        const verified = await verifyTotpPrompt(secret);
                        if (!verified) {
                            console.log(source/* default */.Ay.red('❌ Verification failed. Registration incomplete.'));
                            return;
                        }
                        await authStore_authStore.setVerified(opts.email, true);
                        // Auto-login after registration
                        const ok = await authStore_authStore.login(opts.email, opts.password);
                        if (ok) {
                            console.log(source/* default */.Ay.green('✅ User registered, verified, and logged in.'));
                        }
                        else {
                            console.log(source/* default */.Ay.yellow('User registered and verified, but auto-login failed. Please login manually.'));
                        }
                    }
                    catch (err) {
                        console.log(source/* default */.Ay.red('❌'), err.message || String(err));
                    }
                }
                else {
                    await interactiveRegister();
                }
                return;
            }
            case 'verify': {
                // Get current session or prompt for email
                let email = opts.email;
                if (!email) {
                    const session = await authStore_authStore.getSession();
                    if (session && session.email) {
                        email = session.email;
                    }
                    else {
                        const resp = await lib["default"].prompt([
                            { name: 'email', message: 'Email to verify:', type: 'input', validate: (v) => /^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(v) || 'Enter a valid email' }
                        ]);
                        email = resp.email;
                    }
                }
                // Check if user exists
                const users = await authStore_authStore.getUsers();
                const user = users.find(u => u.email === email.toLowerCase());
                if (!user) {
                    console.log(source/* default */.Ay.red('❌ User not found. Please register first.'));
                    return;
                }
                // If already verified, skip
                if (user.verified) {
                    console.log(source/* default */.Ay.green('✅ 2FA is already enabled for this user.'));
                    return;
                }
                await setupAndVerifyTotp(email);
                return;
            }
            case 'logout': {
                await authStore_authStore.logout();
                console.log(source/* default */.Ay.green('✅ Logged out'));
                return;
            }
            case 'status': {
                const s = await authStore_authStore.getSession();
                if (s)
                    console.log(source/* default */.Ay.green(`Logged in as ${s.email}`));
                else
                    console.log(source/* default */.Ay.yellow('Not logged in'));
                return;
            }
            case 'whoami': {
                const s = await authStore_authStore.getSession();
                if (s)
                    console.log(source/* default */.Ay.green(`${s.email}`));
                else
                    console.log(source/* default */.Ay.yellow('Not logged in'));
                return;
            }
            case 'list-users': {
                const users = await authStore_authStore.getUsers();
                if (!users || users.length === 0) {
                    console.log(source/* default */.Ay.yellow('No users registered'));
                    return;
                }
                console.log(source/* default */.Ay.green('Registered users:'));
                users.forEach(u => console.log(' - ' + u.email));
                return;
            }
            default: {
                showAuthHelp();
                return;
            }
        }
    }
    catch (err) {
        console.log(source/* default */.Ay.red('❌'), err.message || String(err));
    }
}
function showAuthHelp() {
    const cfg = {
        commandName: 'auth',
        emoji: '🔐',
        description: 'Manage authentication for the CLI (register, login, logout, status, 2FA verification).',
        usage: [
            'auth register',
            'auth login',
            'auth login --email <email> --password <password>',
            'auth logout',
            'auth status',
            'auth verify',
            'auth whoami',
            'auth list-users',
        ],
        options: [
            { flag: '--email <email>', description: 'Email for non-interactive actions' },
            { flag: '--password <password>', description: 'Password for non-interactive actions' },
            { flag: '-h, --help', description: 'Show help for the auth command' },
        ],
        examples: [
            { command: 'auth register', description: 'Interactive registration' },
            { command: 'auth login', description: 'Interactive login' },
            { command: 'auth login --email me@you.com --password hunter2', description: 'Non-interactive login (use with care)' },
            { command: 'auth verify', description: 'Enable and verify 2FA for your account' },
            { command: 'auth logout', description: 'Logout from the CLI' },
            { command: 'auth status', description: 'Show current login status' },
            { command: 'auth whoami', description: 'Show current user email' },
            { command: 'auth list-users', description: 'List all registered users' },
        ],
        tips: [
            '🔒 2FA (Google Authenticator) is required for unlimited CLI access.',
            'Unverified users can only use 3 commands before verification is required.',
            'Passwords are stored as scrypt hashes with per-user salt. Keep your machine secure.',
            'Use "pi auth verify" to enable 2FA and unlock all features.',
        ],
    };
    (0,helpFormatter/* createStandardHelp */.ht)(cfg);
}

;// ./dist/index.js
//#!/usr/bin/env node


// Polyfill for legacy code expecting globals
globalThis.fileURLToPath = external_url_.fileURLToPath;
globalThis.path = external_path_;






// Import command handlers














// Import utilities




// Get current file directory for ESM
const dist_filename = (0,external_url_.fileURLToPath)("file:///home/sharique/desktop/shariq-projects/package-installer-cli/dist/index.js");
const dist_dirname = (0,external_path_.dirname)(dist_filename);
// Load package.json to get version using improved path resolution
let packageJsonPath;
try {
    packageJsonPath = (0,pathResolver/* getPackageJsonPath */.wD)();
}
catch (error) {
    // Fallback to the old method if getPackageJsonPath fails
    packageJsonPath = (0,external_path_.join)(dist_dirname, '../package.json');
    // Check if we're running from dist folder
    if (dist_dirname.includes('/dist/')) {
        packageJsonPath = (0,external_path_.join)(dist_dirname, '../../package.json');
    }
}
const packageJson = JSON.parse((0,external_fs_.readFileSync)(packageJsonPath, 'utf8'));
const VERSION = packageJson.version;
// Initialize CLI program
const dist_program = new Command();
// Initialize auth store early
(async () => {
    try {
        await initAuthStore();
    }
    catch (err) {
        // non-fatal
    }
})();
// Create beautiful blue gradient for CLI name
const gradientTitle = (0,dist/* default */.Ay)(['#0072ff', '#00c6ff', '#0072ff']);
const piGradient = (0,dist/* default */.Ay)(['#00c6ff', '#0072ff']);
// Configure main program with enhanced styling
dist_program
    .name('pi')
    .description(source/* default */.Ay.hex('#667eea')('📦 Package Installer CLI') + source/* default */.Ay.hex('#95afc0')(' - Modern web application scaffolding tool'))
    .version(VERSION)
    .configureHelp({
    sortSubcommands: true,
    subcommandTerm: (cmd) => cmd.name(),
});
// Global preAction: enforce login for most commands, whitelist a few
dist_program.hook('preAction', async (thisCommand, actionCommand) => {
    const name = actionCommand.name();
    // Commands allowed without login (help, version, auth, cache --help etc.)
    const allowed = ['auth', 'help', 'version', 'cache'];
    if (allowed.includes(name))
        return;
    // Also allow if user requested help/version via flags anywhere on the command line
    const argv = process.argv.slice(2).map(a => a.toLowerCase());
    const helpFlags = ['-h', '--help'];
    const versionFlags = ['-v', '-V', '--version'];
    if (argv.some(a => helpFlags.includes(a) || versionFlags.includes(a)))
        return;
    const logged = await authStore_authStore.isLoggedIn();
    if (!logged) {
        console.log('\n' + source/* default */.Ay.red('❌ You must be logged in to use this command.'));
        console.log(source/* default */.Ay.gray(`Run: pi auth --help to see authentication options`));
        process.exit(1);
    }
    // 2FA enforcement and usage limit for unverified users
    const session = await authStore_authStore.getSession();
    if (session && session.email) {
        const isVerified = await authStore_authStore.isVerified(session.email);
        // Allow verify, logout, help for unverified users
        const authSub = argv[1] || '';
        if (!isVerified) {
            if (name === 'auth' && ['verify', 'logout', '', undefined].includes(authSub))
                return;
            // Usage limit enforcement for unverified users
            const allowed = await authStore_authStore.incrementUsage(session.email).catch(() => false);
            if (!allowed) {
                console.log('\n' + source/* default */.Ay.red('❌ You have reached the maximum number of allowed commands as an unverified user.'));
                console.log(source/* default */.Ay.yellow('Please verify your account with: pi auth verify'));
                process.exit(1);
            }
            // Show warning for unverified users
            console.log(source/* default */.Ay.yellow('⚠️  Your account is not verified. You have limited access until you complete 2FA.'));
        }
    }
});
/**
 * Enhanced error handler with better formatting
 */
function handleCommandError(commandName, error) {
    console.log('\n' + (0,node_modules_boxen/* default */.A)(source/* default */.Ay.red('❌ Command Failed') + '\n\n' +
        source/* default */.Ay.white(`Command: ${commandName}`) + '\n' +
        source/* default */.Ay.white(`Error: ${error.message}`) + '\n\n' +
        source/* default */.Ay.gray('💡 Try running with --help for usage information'), {
        padding: 1,
        borderStyle: 'round',
        borderColor: 'red',
        backgroundColor: '#1a0000'
    }));
    process.exit(1);
}
// CREATE COMMAND - Main project creation from templates
dist_program
    .command('create')
    .description(source/* default */.Ay.hex('#10ac84')('🚀 Create a new project from templates'))
    .argument('[project-name]', source/* default */.Ay.hex('#95afc0')('Project name (will prompt if not provided)'))
    .configureHelp({
    helpWidth: 120,
})
    .on('--help', () => {
    showCreateHelp();
})
    .action(async (projectName) => {
    try {
        (0,banner/* displayCommandBanner */.kn)('create', 'Create a new project from templates');
        await createProject(projectName);
    }
    catch (error) {
        handleCommandError('create project', error);
    }
});
// CHECK COMMAND - Package version checking and suggestions
dist_program
    .command('check')
    .description(source/* default */.Ay.hex('#f39c12')('🔍 ') + source/* default */.Ay.hex('#ffa500')('Check package versions and get update suggestions'))
    .argument('[package-name]', source/* default */.Ay.hex('#95afc0')('Specific package to check (optional)'))
    .option('-v, --verbose', 'Show detailed information for all packages')
    .option('-h, --help', 'Display help for this command')
    .on('--help', () => {
    showCheckHelp();
})
    .action(async (packageName, options) => {
    try {
        if (options.help) {
            showCheckHelp();
            return;
        }
        await checkCommand(packageName, options);
    }
    catch (error) {
        handleCommandError('check packages', error);
    }
});
// CLONE COMMAND - GitHub repository cloning
dist_program
    .command('clone')
    .description(source/* default */.Ay.hex('#00d2d3')('📥 ') + source/* default */.Ay.hex('#00cec9')('Clone repositories from GitHub, GitLab, BitBucket & SourceHut'))
    .argument('[user/repo]', source/* default */.Ay.hex('#95afc0')('Repository in format "user/repo" or "provider:user/repo"'))
    .argument('[project-name]', source/* default */.Ay.hex('#95afc0')('Custom project name (defaults to repo name)'))
    .option('-h, --help', 'Display help for this command')
    .option('--offline', 'Use cached templates if available')
    .option('--no-deps', 'Skip dependency installation')
    .option('--no-git', 'Skip git initialization')
    .option('--shallow', 'Create shallow clone (faster)')
    .option('--branch <name>', 'Clone specific branch')
    .option('--template', 'Treat as template repository')
    .on('--help', () => {
    showCloneHelp();
})
    .action(async (userRepo, projectName, options) => {
    if (options.help) {
        showCloneHelp();
        return;
    }
    if (!userRepo) {
        console.log('\n' + source/* default */.Ay.hex('#ff4757')('❌ Error: Repository is required'));
        console.log(source/* default */.Ay.hex('#95afc0')('   Format: user/repo or provider:user/repo'));
        console.log(source/* default */.Ay.hex('#95afc0')('   Examples:'));
        console.log(source/* default */.Ay.hex('#95afc0')('     • ') + piGradient('pi') + ' ' + source/* default */.Ay.hex('#00d2d3')('clone') + ' facebook/react');
        console.log(source/* default */.Ay.hex('#95afc0')('     • ') + piGradient('pi') + ' ' + source/* default */.Ay.hex('#00d2d3')('clone') + ' gitlab:user/project');
        console.log(source/* default */.Ay.hex('#95afc0')('     • ') + piGradient('pi') + ' ' + source/* default */.Ay.hex('#00d2d3')('clone') + ' bitbucket:user/repo');
        return;
    }
    try {
        await clone_cloneRepo(userRepo, projectName, options);
    }
    catch (error) {
        handleCommandError('clone repository', error);
    }
});
// ADD COMMAND - Add features to existing projects
dist_program
    .command('add')
    .description(source/* default */.Ay.hex('#9c88ff')('➕ ') + source/* default */.Ay.hex('#4facfe')('Add new features to your project'))
    .argument('[feature]', source/* default */.Ay.hex('#95afc0')('Feature to add (auth, docker, aws, etc.) or use --list to show all'))
    .argument('[provider]', source/* default */.Ay.hex('#95afc0')('Provider for the feature (optional)'))
    .option('-l, --list', source/* default */.Ay.hex('#95afc0')('List all available features'))
    .option('-v, --verbose', source/* default */.Ay.hex('#95afc0')('Show detailed output'))
    .option('-h, --help', source/* default */.Ay.hex('#95afc0')('Display help for this command'))
    .on('--help', () => {
    (0,add/* showAddHelp */.iM)();
})
    .action(async (feature, provider, options) => {
    try {
        if (options.help) {
            (0,add/* showAddHelp */.iM)();
            return;
        }
        await (0,add.addCommand)(feature, provider, options);
    }
    catch (error) {
        handleCommandError('add feature', error);
    }
});
// AUTH COMMAND - authentication and user management (subcommand pattern like cache)
dist_program
    .command('auth')
    .description(source/* default */.Ay.hex('#00d2d3')('🔐 ') + source/* default */.Ay.hex('#95afc0')('Authentication and user management'))
    .argument('[subcommand]', 'Auth subcommand (login, register, logout, status, whoami, list-users)')
    .argument('[value]', 'Optional value for subcommand (not used)')
    .option('--email <email>', 'Email for login/register')
    .option('--password <password>', 'Password for login/register')
    .option('-h, --help', 'Show help for auth command')
    .allowUnknownOption(true)
    .on('--help', () => { showAuthHelp(); })
    .action(async (subcommand, value, options) => {
    try {
        await handleAuthOptions(subcommand, value, options);
    }
    catch (error) {
        handleCommandError('auth', error);
    }
});
// UPGRADE-CLI COMMAND - Update CLI to latest version
dist_program
    .command('upgrade-cli')
    .alias('upgrade')
    .description(source/* default */.Ay.hex('#ff6b6b')('🚀 ') + source/* default */.Ay.hex('#fd79a8')('Update Package Installer CLI to the latest version'))
    .on('--help', () => {
    ``;
    showUpgradeHelp();
})
    .action(async () => {
    try {
        await upgradeCliCommand();
    }
    catch (error) {
        handleCommandError('upgrade CLI', error);
    }
});
// ANALYZE COMMAND - Terminal dashboard with analytics
dist_program
    .command('analyze')
    .alias('stats')
    .description(source/* default */.Ay.hex('#667eea')('📊 ') + source/* default */.Ay.hex('#4facfe')('Show CLI usage analytics and framework statistics'))
    .option('--export <method>', 'Export analytics data to specified format (json, xml, yaml)')
    .option('--reset', 'Reset analytics history')
    .option('--detailed', 'Show detailed analytics breakdown')
    .option('-h, --help', 'Show this help message')
    .on('--help', () => {
    showAnalyzeHelp();
})
    .action(async (options) => {
    try {
        await analyzeCommand(options);
    }
    catch (error) {
        handleCommandError('show analytics', error);
    }
});
// UPDATE COMMAND - Update project dependencies
dist_program
    .command('update')
    .alias('u')
    .description(source/* default */.Ay.hex('#ff6b6b')('🔄 ') + source/* default */.Ay.hex('#fd79a8')('Update project dependencies with breaking change detection'))
    .argument('[packages]', source/* default */.Ay.hex('#95afc0')('Comma-separated list of packages to update (optional)'))
    .option('--latest', 'Update to latest versions (may include breaking changes)')
    .option('-h, --help', 'Show help for update command')
    .on('--help', () => {
    showUpdateHelp();
})
    .action(async (packages, options) => {
    try {
        await updateCommand(packages, options);
    }
    catch (error) {
        handleCommandError('update', error);
    }
});
// CLEAN COMMAND - Clean development artifacts
dist_program
    .command('clean')
    .alias('cleanup')
    .description(source/* default */.Ay.hex('#ffa502')('🧹 Clean development artifacts and caches'))
    .option('--node-modules', 'Clean node_modules directories')
    .option('--build', 'Clean build/dist directories')
    .option('--cache', 'Clean package manager caches')
    .option('--logs', 'Clean log files and debug outputs')
    .option('--all', 'Clean everything (safe operation)')
    .option('--deep', 'Deep clean (includes lock files)')
    .option('--dry-run', 'Preview what would be cleaned')
    .option('-h, --help', 'Show help for clean command')
    .on("--help", () => {
    showCleanHelp();
})
    .action(async (options) => {
    try {
        if (options.help) {
            showCleanHelp();
            return;
        }
        (0,banner/* displayCommandBanner */.kn)('clean', 'Clean development artifacts and caches');
        await cleanCommand(options);
    }
    catch (error) {
        handleCommandError('clean', error);
    }
});
// ENVIRONMENT COMMAND - Environment analysis
dist_program
    .command('env')
    .alias('environment')
    .description(source/* default */.Ay.hex('#10ac84')('🌍 ') + source/* default */.Ay.hex('#00b894')('Analyze and manage development environment'))
    .option('--check', 'Check development tools and versions')
    .option('--generate', 'Generate .env template for project')
    .option('--validate', 'Validate existing .env file')
    .option('--export', 'Export environment info to file')
    .option('--system', 'Show system information only')
    .option('-h, --help', 'Show help for environment command')
    .on('--help', () => {
    showEnvironmentHelp();
})
    .action(async (options) => {
    try {
        await environmentCommand(options);
    }
    catch (error) {
        handleCommandError('environment', error);
    }
});
// DOCTOR COMMAND - Diagnose and fix issues
dist_program
    .command('doctor')
    .alias('diagnose')
    .description(source/* default */.Ay.hex('#ff6b6b')('🩺 ') + source/* default */.Ay.hex('#e17055')('Diagnose and fix development issues'))
    .option('--fix', 'Automatically fix detected issues')
    .option('--node', 'Check Node.js and npm setup only')
    .option('--deps', 'Check project dependencies only')
    .option('--tools', 'Check development tools only')
    .option('--verbose', 'Show detailed diagnostic information')
    .option('-h, --help', 'Show help for doctor command')
    .on('--help', () => {
    showDoctorHelp();
})
    .action(async (options) => {
    try {
        await doctorCommand(options);
    }
    catch (error) {
        handleCommandError('doctor', error);
    }
});
// CACHE COMMAND - Manage CLI cache system
dist_program
    .command('cache')
    .description(source/* default */.Ay.hex('#00d2d3')('🗄️ ') + source/* default */.Ay.hex('#0084ff')('Manage CLI cache system'))
    .argument('[subcommand]', 'Cache subcommand (stats, clear, info, optimize)')
    .argument('[type]', 'Type for clear command (projects, analysis, packages, templates, system, all)')
    .option('--stats', 'Show cache statistics')
    .option('--clear [type]', 'Clear cache (optionally specify type)')
    .option('--info', 'Show cache configuration')
    .option('--optimize', 'Optimize cache performance')
    .option('--size', 'Show cache size information')
    .option('-h, --help', 'Show help for cache command')
    .on('--help', async () => {
    showCacheHelp();
})
    .action(async (subcommand, type, options) => {
    try {
        await cacheCommand(subcommand, type, options);
    }
    catch (error) {
        handleCommandError('cache', error);
    }
});
// EMAIL COMMAND - Contact developer with feedback
dist_program
    .command('email')
    .description(source/* default */.Ay.hex('#00d2d3')('📧 ') + source/* default */.Ay.hex('#4facfe')('Contact developer with feedback, bug reports, and feature requests'))
    .argument('[category]', source/* default */.Ay.hex('#95afc0')('Feedback category (bug, feature, template, question, improvement, docs)'))
    .option('-h, --help', source/* default */.Ay.hex('#95afc0')('Display help for this command'))
    .option('-l, --list', source/* default */.Ay.hex('#95afc0')('List all available email categories'))
    .option('--install', source/* default */.Ay.hex('#95afc0')('Show Email MCP Server installation instructions'))
    .option('--setup', source/* default */.Ay.hex('#95afc0')('Show email configuration setup guide'))
    .option('--status', source/* default */.Ay.hex('#95afc0')('Check email system status and availability'))
    .option('--test', source/* default */.Ay.hex('#95afc0')('Send a test email to verify functionality'))
    .option('--commands', source/* default */.Ay.hex('#95afc0')('Show all available Email MCP Server commands'))
    .option('--dev', source/* default */.Ay.hex('#95afc0')('Show development setup information and troubleshooting'))
    .option('--quick', source/* default */.Ay.hex('#95afc0')('Quick feedback mode with minimal prompts'))
    .on('--help', () => {
    showEmailHelp();
})
    .action(async (category, options) => {
    try {
        await emailCommand(category, options);
    }
    catch (error) {
        handleCommandError('email', error);
    }
});
// DEPLOY COMMAND - Deploy projects to cloud platforms
dist_program
    .command('deploy')
    .description(source/* default */.Ay.hex('#ff9a9e')('🚀 ') + source/* default */.Ay.hex('#fd79a8')('Deploy your projects to various cloud platforms'))
    .option('-p, --platform <platform>', 'Specify deployment platform')
    .option('-l, --list', 'List all available deployment platforms')
    .option('-c, --config', 'Configure deployment settings')
    .option('-i, --interactive', 'Interactive mode with auto-detection (default)')
    .option('-a, --auto-detect', 'Auto-detect project type and suggest platforms')
    .option('--build', 'Build project before deployment')
    .option('--env <file>', 'Use environment variables from file (.env by default)')
    .option('--dry-run', 'Show what would be deployed without actually deploying')
    .option('-f, --force', 'Skip confirmation prompts')
    .option('-w, --watch', 'Watch for changes and auto-deploy')
    .option('-q, --quiet', 'Suppress non-essential output')
    .option('-v, --verbose', 'Show detailed deployment information')
    .on('--help', () => {
    showDeployHelp();
})
    .action(async () => {
    try {
        await deployCommand();
    }
    catch (error) {
        handleCommandError('deploy project', error);
    }
});
// ENHANCED GLOBAL HELP - Beautiful examples and usage information
dist_program.on('--help', () => {
    const exampleGradient = (0,dist/* default */.Ay)(['#43e97b', '#38f9d7']);
    const commandGradient = (0,dist/* default */.Ay)(['#667eea', '#764ba2']);
    const createGradient = (0,dist/* default */.Ay)(['#10ac84', '#00d2d3']);
    const analyzeGradient = (0,dist/* default */.Ay)(['#9c88ff', '#667eea']);
    const updateGradient = (0,dist/* default */.Ay)(['#ff6b6b', '#ff9a9e']);
    const addGradient = (0,dist/* default */.Ay)(['#ffa502', '#ff7675']);
    console.log('\n' + (0,node_modules_boxen/* default */.A)(exampleGradient('🚀 Complete Command Reference & Examples') + '\n\n' +
        source/* default */.Ay.hex('#00d2d3')('📋 CORE COMMANDS (Available Now)') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + createGradient('create') + source/* default */.Ay.hex('#95afc0')('                  # Interactive project creation') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + createGradient('create') + source/* default */.Ay.hex('#95afc0')(' my-nextjs-app    # Create with specific name') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + analyzeGradient('analyze') + source/* default */.Ay.hex('#95afc0')('                 # Show project analytics dashboard') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + updateGradient('update') + source/* default */.Ay.hex('#95afc0')('                  # Update packages interactively') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + updateGradient('update') + source/* default */.Ay.hex('#95afc0')(' lodash react     # Update specific packages') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('🔧 UTILITY COMMANDS') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + addGradient('add') + source/* default */.Ay.hex('#95afc0')('                     # Add features to existing project') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + addGradient('add') + source/* default */.Ay.hex('#95afc0')(' auth               # Add authentication features') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + addGradient('add') + source/* default */.Ay.hex('#95afc0')(' docker             # Add Docker configuration') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('check') + source/* default */.Ay.hex('#95afc0')('                   # Check package versions') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('check') + source/* default */.Ay.hex('#95afc0')(' react             # Check specific package') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('email') + source/* default */.Ay.hex('#95afc0')('                   # Contact developer with feedback') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('auth') + source/* default */.Ay.hex('#95afc0')('                    # Manage CLI authentication (login/register/status)') + '\n' +
        source/* default */.Ay.hex('#ff6b6b')('🌍 REPOSITORY & DEPLOYMENT') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('clone') + source/* default */.Ay.hex('#95afc0')('                   # Clone repositories interactively') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('clone') + source/* default */.Ay.hex('#95afc0')(' facebook/react    # Clone popular repositories') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('clone') + source/* default */.Ay.hex('#95afc0')(' user/repo my-app  # Clone with custom name') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('deploy') + source/* default */.Ay.hex('#95afc0')('                  # Deploy to cloud platforms') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('deploy') + source/* default */.Ay.hex('#95afc0')(' --vercel          # Deploy to Vercel') + '\n\n' +
        source/* default */.Ay.hex('#9c88ff')('🩺 DEVELOPMENT & DEBUGGING') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('doctor') + source/* default */.Ay.hex('#95afc0')('                  # Diagnose project issues') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('doctor') + source/* default */.Ay.hex('#95afc0')(' --fix             # Auto-fix common issues') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('env') + source/* default */.Ay.hex('#95afc0')('                     # Check development environment') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('env') + source/* default */.Ay.hex('#95afc0')(' --setup           # Setup optimal dev environment') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('clean') + source/* default */.Ay.hex('#95afc0')('                   # Clean artifacts and caches') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('cache') + source/* default */.Ay.hex('#95afc0')('                   # Manage CLI cache system') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + commandGradient('upgrade-cli') + source/* default */.Ay.hex('#95afc0')('            # Upgrade CLI to latest version') + '\n\n' +
        source/* default */.Ay.hex('#00d2d3')('💡 Pro Tips & Best Practices:') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  • Use ') + source/* default */.Ay.hex('#ff6b6b')('--help') + source/* default */.Ay.hex('#95afc0')(' with any command for detailed options') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  • Most commands are interactive - just run ') + piGradient('pi command') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  • Support for React, Next.js, Vue, Angular, Express, Rust & more!') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  • Templates include TypeScript, Tailwind CSS, shadcn/ui options') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  • Multi-language package updates (Node.js, Rust, Python, Go)'), {
        padding: 1,
        borderStyle: 'round',
        borderColor: '#10ac84',
        backgroundColor: '#001a00'
    }));
});
// ENHANCED DEFAULT BEHAVIOR - Beautiful banner and help when no command provided
if (process.argv.length === 2) {
    (0,banner/* displayBanner */.HQ)();
    console.log('\n' + (0,node_modules_boxen/* default */.A)(source/* default */.Ay.white('Welcome to Package Installer CLI! 👋') + '\n\n' +
        source/* default */.Ay.hex('#00d2d3')('🚀 Ready to build something amazing?') + '\n\n' +
        source/* default */.Ay.hex('#95afc0')('Start with these popular commands:') + '\n\n' +
        source/* default */.Ay.hex('#10ac84')('  ') + piGradient('pi') + ' ' + (0,dist/* default */.Ay)(['#10ac84', '#00d2d3'])('create') + source/* default */.Ay.hex('#95afc0')('           # Create new project (React, Next.js, Vue, etc.)') + '\n' +
        source/* default */.Ay.hex('#9c88ff')('  ') + piGradient('pi') + ' ' + (0,dist/* default */.Ay)(['#9c88ff', '#667eea'])('analyze') + source/* default */.Ay.hex('#95afc0')('          # Show project analytics dashboard') + '\n' +
        source/* default */.Ay.hex('#ff6b6b')('  ') + piGradient('pi') + ' ' + (0,dist/* default */.Ay)(['#ff6b6b', '#ff9a9e'])('update') + source/* default */.Ay.hex('#95afc0')('           # Update packages to latest versions') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('  ') + piGradient('pi') + ' ' + (0,dist/* default */.Ay)(['#00d2d3', '#0084ff'])('clone') + source/* default */.Ay.hex('#95afc0')(' user/repo   # Clone and setup GitHub repositories') + '\n' +
        source/* default */.Ay.hex('#00d2d3')('  ') + piGradient('pi') + ' ' + (0,dist/* default */.Ay)(['#00d2d3', '#4facfe'])('email') + source/* default */.Ay.hex('#95afc0')('            # Contact developer with feedback') + '\n\n' +
        source/* default */.Ay.hex('#ffa502')('Need help? Try these:') + '\n\n' +
        source/* default */.Ay.hex('#ff6b6b')('  ') + piGradient('pi') + ' ' + source/* default */.Ay.hex('#ff6b6b')('--help') + source/* default */.Ay.hex('#95afc0')('           # See all available commands') + '\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + source/* default */.Ay.hex('#95afc0')('command --help') + source/* default */.Ay.hex('#95afc0')('   # Get detailed help for any command') + '\n\n' +
        source/* default */.Ay.hex('#95afc0')('  ') + piGradient('pi') + ' ' + source/* default */.Ay.hex('#95afc0')('auth --help') + source/* default */.Ay.hex('#95afc0')('      # Detailed help for authentication commands') + '\n\n' +
        source/* default */.Ay.hex('#00d2d3')('💡 Pro tip: All commands are interactive - just run them and follow prompts!'), {
        padding: 1,
        borderStyle: 'round',
        borderColor: '#00c6ff',
        backgroundColor: '#000a1a'
    }));
}
// Initialize cache system on startup
(async () => {
    try {
        await (0,utils_cacheManager/* initializeCache */.J3)();
    }
    catch (error) {
        // Silent fail - cache will work in memory
    }
})();
// Parse command line arguments
// If user asked for auth help explicitly (pi auth --help), show our formatted auth help and exit
const preArgs = process.argv.slice(2).map(a => String(a).toLowerCase());
if (preArgs[0] === 'auth' && (preArgs.includes('--help') || preArgs.includes('-h'))) {
    try {
        showAuthHelp();
    }
    catch { }
    ;
    process.exit(0);
}
dist_program.parse();

